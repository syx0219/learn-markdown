{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Main Page","text":""},{"location":"index.html#we-are-elecrow","title":"We Are Elecrow","text":"<p>Elecrow is devoted in open source hardware industry, which is located in a city that benefiting from the largest electronic market, local manufacture power and convenient global logistic system, a vast number of funny and exciting products are created every day. We integrate resources to serve new era of innovation. To make your making and innovation easier, we offer various development platform, modules, tools, electronics components,and other open source hardware. We also provide many kinds of service, include Fusion PCB service, Component Sourcing service and PCB Assembly service etc. No matter whether you're a curious student, a qualified engineer, or a hobbyist who loves to create, there will always be something here to meet your needs - and if there isn't ,we'd love to know. please list your wishes through the Forum or contact with us.</p>"},{"location":"index.html#getting-started","title":"Getting Started","text":"<ul> <li>Step1: Download Arduino IDE and install Arduino driver</li> <li>Step2: The very basic experiments with Crowduino</li> <li>Step3: How to Download the Arduino library and install</li> <li>Step4: Error Debugging</li> </ul>"},{"location":"index.html#products","title":"Products","text":""},{"location":"index.html#arduino","title":"Arduino","text":"<ul> <li>Crowduino</li> <li>Crowduino Uno-SD</li> <li>Crowduino M0- SD</li> <li>Crowduino Mega2560</li> <li>ESP8266 IOT Board(Arduino IDE or NodeMCU Lua Programming)</li> <li>32u4 with A7 GPRS/GSM</li> <li>32u4 with A9G GPRS/GSM/GPS</li> <li>Smart Pump Shield</li> <li>Screw Shield</li> <li>Crowduino Leonardo</li> <li>Crowduino-Nano-V3.1</li> <li>Elecrow SIMduino UNO+SIM808 GPRS/GSM Board</li> <li>32u4 with A6 GPRS/GSM</li> <li>Leonardo GPRS/GSM IOT Board v1.1</li> <li>Nano 168(Arduino Compatible)</li> <li>Easy Module Shield for Arduino UNO</li> <li>IO Shield For Arduino Nano</li> <li>Arduino CNC Shield</li> <li>Larduino Mini</li> <li>Crowduino Pro Mini</li> <li>Elecrow ESPduino UNO+ESP8266 Wifi Board</li> <li>ESP32 WIFI/BLE Board v1.0</li> <li>32u4 with Lora RFM95 IOT Board-868MHz</li> <li>RFM69 Shield</li> <li>2.4 inch TFT Touch Shield for Arduino</li> <li>3.5 Inch TFT Color Screen Module 320 X 480 Support Arduino UNO Mega2560</li> <li>TEXT</li> </ul>"},{"location":"index.html#shield","title":"Shield","text":"<ul> <li>GPRS/GSM Shield v1.0</li> <li>Ehternet Shield</li> <li>WiFi Shield</li> <li>GPS shield</li> <li>2.8'' TFT Touch Shield</li> <li>Dual Channel H-Bridge Motor Shield</li> <li>Relay Shield</li> <li>CC3000 WiFi Shield</li> <li>USB Host Shield for Arduino</li> <li>Lipower Shield v1.1</li> <li>Mini solar Lipo Charger v1.0</li> <li>USB Hub&amp;Powermanager for RPI Zero v1.0</li> <li>Current/Voltage/Power Monitor HAT for Raspberry Pi</li> <li>Breakout Board for micro:bit IO Expansion Board</li> <li>Rainbow Shield</li> <li>Bluetooth Shield v1.0</li> <li>NFC Shield</li> <li>Motor Shield v1.0</li> <li>Wireless SDshield</li> <li>Motor&amp;Stepper Shield</li> <li>EM Shield</li> <li>CAN-BUS Shield</li> <li>Joystick Shield</li> <li>SIM5360E 3G Shield</li> <li>Speech Interaction board for Raspberry Pi</li> <li>Power over Internet(POE) Hat for Raspberry Pi</li> <li>Uninterruptible Power Supply UPS HAT For Raspberry Pi</li> <li>4 Channel I2C Motor Shield v1.1</li> <li>XBee shield</li> <li>LCD Keypad Shield</li> <li>Arduino Motor/Stepper/Servo Shield</li> <li>8-Channel EL Shield</li> <li>SIM808 GPRS/GSM+GPS Shield</li> <li>RTC Data Logger Shield v1.1</li> <li>Capacitive Touch Shield</li> <li>VS1053 MP3 Shield</li> <li>AVR ISP Shield</li> <li>Solderless Protoboard for raspberry pi v1.0</li> <li>IMX219-83 Stereo Camera</li> <li>Binocular Stereo Vision Expansion Board for Raspberry Pi</li> <li>Mbits</li> <li>Pico Shield</li> </ul>"},{"location":"index.html#crowtail","title":"Crowtail","text":"<ul> <li>Crowtail- Base Shield</li> <li>Crowtail- Linear Potentiometer</li> <li>Crowtail- Sound Sensor</li> <li>Crowtail- UV Sensor</li> <li>Crowtail- Thumb Joystick</li> <li>Crowtail- Button</li> <li>Crowtail- LED</li> <li>Crowtail- Buzzer</li> <li>Crowtail- Touch Sensor</li> <li>Crowtail- Tilt Switch</li> <li>Crowtail- I2C LCD</li> <li>Crowtail- Infrared Temperature Sensor</li> <li>Crowtail- Digital Light Sensor</li> <li>Crowtail- GPS</li> <li>Crowtail- One Wire Waterproof Temperature Sensor</li> <li>Crowtail- Dust Sensor</li> <li>Crowtail- Gas Sensor(MQ2)</li> <li>Crowtail- ES08A Mini Servo</li> <li>Crowtail- PIR Motion Sensor</li> <li>Crowtail- 3-Axis Digital Compass</li> <li>Crowtail- SIM808</li> <li>Crowtail- Microwave sensor</li> <li>Crowtail- Dry-Reed Relay</li> <li>Crowtail- Pulse Sensor</li> <li>Crowtail- Air Quality Sensor</li> <li>Crowtail- AM2302 Humidity&amp;Temperature Sensor</li> <li>Crowtail- Solid-State Relay</li> <li>Crowtail- I2C Motor Driver</li> <li>Crowtail- LED Bar</li> <li>Crowtail- Protoboard</li> <li>Crowtail- SPDT Relay</li> <li>Crowtail- Super Bright</li> <li>Crowtail-Rotation Angle Sensor</li> <li>Crowtail- Haptic Motor</li> <li>Crowtail- TPL5111 Reset Enable Timer</li> <li>Crowtail- MEMS Microphone</li> <li>Crowtail- LiPo Fuel Gauge</li> <li>Crowtail- Mini PIR Motion Sensor</li> <li>Crowtail- BMP280 Barometer Sensor</li> <li>Crowtail- Strain Gauge sensor</li> <li>Crowtail- VL53L0X Laser Ranging Sensor</li> <li>Crowtail-Digital-Programmable-Potentiometer</li> <li>Crowtail-Weight Sensor</li> <li>Crowtail- MPU6050 Accelerometer &amp; Gyro</li> <li>Crowtail- Vibration Motor</li> <li>Crowtail- Relay</li> <li>Crowtail- Moisture Sensor</li> <li>Crowtail- Light Sensor</li> <li>Crowtail- Hall Sensor</li> <li>Crowtail- Encoder</li> <li>Crowtail- IR Reflective Sensor</li> <li>Crowtail- Temperature&amp; Humidity Sensor</li> <li>Crowtail- Analog Gyro</li> <li>Crowtail- MOSFET</li> <li>Crowtail- Flame Sensor</li> <li>Crowtail- Rotary Angle Sensor</li> <li>Crowtail-Nano Base Board</li> <li>Crowtail- Fingerprint Sensor</li> <li>Crowtail- Gas Sensor(MQ5)</li> <li>Crowtail- Adjustable Infrared Sensor</li> <li>Crowtail- 3-Axis Digital Gyro</li> <li>Crowtail- Gas Sensor(MQ9)</li> <li>Crowtail- I2C Color Sensor</li> <li>Crowtail- Collision Sensor</li> <li>Crowtail- 9G Servo</li> <li>Crowtail- Magnetic Switch</li> <li>Crowtail- Electromagnet</li> <li>Crowtail- Vibration Sensor</li> <li>Crowtail- Analog Grayscale Sensor</li> <li>Crowtail- Switch</li> <li>Crowtail- I2C EEPROM</li> <li>Crowtail- Recorder</li> <li>Crowtail- Speaker</li> <li>Crowtail- MP3</li> <li>Crowtail- Screw Terminal</li> <li>Crowtail- I2C Hub</li> <li>Crowtail- UV sensor(GUVA- S12SD) 2.0</li> <li>Crowtail- PH Sensor</li> <li>Crowtail- NFC</li> <li>Crowtail- Logic Block</li> <li>Crowtail- 1.3 Inch OLED v1.0</li> <li>Crowtail- CurrentPower Sensor</li> <li>Crowtail-LED Matrix</li> <li>Crowtail- DHT20</li> <li>Crowtail- IMU 10DOF</li> <li>Crowtail- HTU21D Humidity&amp; Temperature Sensor</li> <li>Crowtail-Knock Sensor</li> <li>Crowtail-GP02</li> <li>Crowtail- BMP180 Barometer</li> <li>Crowtail- Blutooth Low Energy Module</li> <li>Crowtail- Thermistor Temperaturen Sensor</li> <li>Crowtail- RTC</li> <li>Crowtail- Serial Wifi</li> <li>Crowtail- IR Emitter</li> <li>Crowtail- IR Receiver</li> <li>Crowtail- Current Sensor</li> <li>Crowtail- RGB-LED</li> <li>Crowtail- OLED</li> <li>Crowtail- Gas Sensor(MQ3)</li> <li>Crowtail- Water Sensor</li> <li>Crowtail- 3-Axis Digital Accelerometer</li> <li>Crowtail- Laser Pointer</li> <li>Crowtail- Ultrasonic Ranging Sensor</li> <li>Crowtail- 80cm Infrared Proximity Sensor</li> <li>Crowtail- 4-Digit Display</li> <li>Crowtail- Current Sensor Kit</li> <li>Crowtail- Extend board for Connection</li> <li>Crowtail- Photo Electric Counter</li> <li>Crowtail- Electricity Sensor</li> <li>Crowtail- Voltage Sensor</li> <li>Crowtail- thermocouple Sensor</li> <li>Crowtail- Gesture</li> <li>Crowtail- G\u00bc\" Water Flow Sensor</li> <li>Crowtail- G\u00bd\" Water Flow Sensor</li> <li>Crowtail- G\u00be\" Water Flow Sensor</li> <li>Crowtail- G1\" Water Flow Sensor</li> <li>Crowtail- Non-contact liquid level sensor</li> <li>Crowtail- Serial Camera</li> <li>Crowtail- Luminance sensor</li> <li>Crowtail- Dual Channel Latching Module</li> <li>Crowtail- Temperature Sensor TMP102</li> <li>Crowtail- 315Mhz RF Receiver with Transmitter</li> <li>Crowtail- MAX30105 Particle Sensor</li> <li>Crowtail-Rotation Angle Sensor</li> <li>Crowtail-Capacitive Moisture V2.0</li> <li>Crowtail- Stackable Shield for Raspberry Pi 2.0</li> <li>Crowtail- Motor Base Shield</li> <li>Crowtail- A6 GPRS/GSM Module</li> <li>Crowtail- WIFI Module</li> <li>Crowtail- LoRa RA-08H</li> <li>Crowtail- DWM1000 UWB(Ultra Wide Band)</li> <li>Crowtail- 4G SIM-A7670E</li> </ul>"},{"location":"index.html#crowbits","title":"Crowbits","text":"<ul> <li>Crowbits-LED (Red Green Yellow)</li> <li>Crowbits-Buzzer</li> <li>Crowbits-Relay</li> <li>Crowbits-Bright LED</li> <li>Crowbits-Vibration Motor</li> <li>Crowbits-Electromagnet</li> <li>Crowbits-DC Motor</li> <li>Crowbits-MOSFET</li> <li>Crowbits-MP3</li> <li>Crowbits-Recorder</li> <li>Crowbits-TPL5111 Timer</li> <li>Crowbits-Vibration Sensor</li> <li>Crowbits-Magnetic Switch</li> <li>Crowbits-Water Sensor</li> <li>Crowbits-Reaction</li> <li>Crowbits-Touch Sensor</li> <li>Crowbits-PIR Sensor</li> <li>Crowbits-Tilt Switch</li> <li>Crowbits-Button</li> <li>Crowbits-Switch</li> <li>Crowbits-Flame Sensor</li> <li>Crowbits-Collision Sensor</li> <li>Crowbits-IR Reflective Sensor</li> <li>Crowbits-Photo Electric Counter</li> <li>Crowbits-Hall Sensor</li> <li>Crowbits-Microphone</li> <li>Crowbits-Potentiometer</li> <li>Crowbits-Light Sensor</li> <li>Crowbits-Pressure Sensor</li> <li>Crowbits-Servo Control</li> <li>Crowbits-Linear Potentiometer</li> <li>Crowbits-Terminal</li> <li>Crowbits-315Mhz Emitter</li> <li>Crowbits-Expansion</li> <li>Crowbits-Protoboard</li> <li>Crowbits-Power Supply(S)</li> <li>Crowbits-Power Supply</li> <li>Crowbits-Trigger Delay</li> <li>Crowbits-Logic AND</li> <li>Crowbits-Logic OR</li> <li>Crowbits-Logic NOT</li> <li>Crowbits-Logic Input</li> <li>Crowbits-315MHz Controller</li> <li>Crowbits-IR Emitter</li> <li>Crowbits-RGB LED</li> <li>Crowbits-LED Bar</li> <li>Crowbits-315Mhz Receiver</li> <li>Crowbits-IR Receiver</li> <li>Crowbits-DHT11 Sensor</li> <li>Crowbits-Gas Sensor</li> <li>Crowbits-Encoder</li> <li>Crowbits-Pulse Sensor</li> <li>Crowbits-Air Quality Sensor</li> <li>Crowbits-Grayscale Sensor</li> <li>Crowbits-UV Sensor</li> <li>Crowbits-Ultrasonic Ranging Sensor</li> <li>Crowbits-Thumb Joystick</li> <li>Crowbits-Digital Potentiometer</li> <li>Crowbits-Keyboard</li> <li>Crowbits-Voltage Sensor</li> <li>Crowbits-CurrentPower Sensor</li> <li>Crowbits-IR Temperature Sensor</li> <li>Crowbits-NFC</li> <li>Crowbits-Barometer Sensor</li> <li>Crowbits-Digital Light Sensor</li> <li>Crowbits-LED Matrix</li> <li>Crowbits-RGB Matrix</li> <li>Crowbits-HTU21D Humiture Sensor</li> <li>Crowbits-Laser Ranging Sensor</li> <li>Crowbits-Color Sensor</li> <li>Crowbits-RTC</li> <li>Crowbits-Gesture Sensor</li> <li>Crowbits-OLED</li> <li>Crowbits-EEPROM</li> <li>Crowbits-Digital Display</li> <li>Crowbits-WiFi</li> <li>Crowbits-GPS</li> <li>Crowbits-2G Module</li> <li>Crowbits-Microbit Compatible</li> <li>Crowbits-UNO</li> <li>Crowbits-80cm Infrared Proximity Sensor</li> <li>Crowbits-Adjustable Infrared Sensor</li> <li>Crowbits-9G Servo</li> <li>Crowbits-G1-4 Water Flow Sensor</li> <li>Crowbits-Non-Contact Liquid Level Sensor</li> <li>Crowbits-One Wire Waterproof Temperature Sensor</li> <li>Crowbits-Moisture Sensor</li> <li>Crowbits-DHT20</li> </ul>"},{"location":"index.html#sensors","title":"Sensors","text":"<ul> <li>Temperature &amp; Humidity Sensor</li> <li>PIR Motion Sensor</li> <li>Tiny RTC</li> <li>Adjustable Infrared Sensor Switch</li> <li>Triple Axis Magnetometer Breakout</li> <li>Ultrasonic Ranging Sensor Module</li> <li>ACS712 Current Sensor- 5A</li> <li>1-Axis Analog Gyro Module-ENC03</li> <li>2-Axis Analog Gyro Module-ENC03</li> <li>Strain Gauge Module</li> <li>4MM Inductive Metal Proximity Sensor</li> <li>Fingerprint Sensor</li> <li>Infrared Thermometer MLX90614 Breakout Board</li> <li>Luminosity Sensor- TSL2561 Breakout</li> <li>HC-SR505 Mini PIR Motion Sensor</li> <li>Digital light Sensor</li> <li>Photosensor- Short Range</li> <li>Photosensor- Long Range</li> <li>One Wire Waterproof Temperature Sensor</li> <li>Accelerometer Breakout-MMA7361</li> <li>MPU-6050</li> <li>3-Axis Analog Gyro Module-ENC03</li> <li>Weight Sensor Scales Kit- 20KG</li> <li>Non-invasive AC Current Sensor-100A</li> <li>TCS3200 Colour Sensor Module</li> <li>Analog CO/Combustible Gas Sensor(MQ9)</li> <li>UV Sensor ML8511</li> <li>Barometer Sensor</li> <li>IMU 10DOF LSM303D+L3GD20 +BMP180</li> <li>Encoder Gear Motor-25MM 95RPM</li> <li>Weight Sensor Amplifier-HX711</li> <li>DHT11</li> <li>Tiny Adjustable Infrared Sensor Switch</li> <li>Serial JPG Camera</li> <li>Dust Sensor- DSM501A</li> <li>Dust Sensor- GP2Y1010AU0F</li> <li>Pulse Sensor</li> <li>Sound Recorder- ISD1760</li> <li>80cm Infrared Proximity Sensor-GP2Y0A21YK0F</li> <li>Analog Smoke/LPG/CO Gas Sensor(MQ2)</li> <li>G\u00bc\" Water Flow Sensor</li> <li>ENC28J60 Ethernet Module</li> <li>UV Sensor Module-UVM30A</li> <li>APM2.5 Airspeed Breakout Board MPXV7002DP</li> <li>Soil Moisture Sensor</li> <li>Rectangle capacitive fingerprint scanner breathing light fingerprint AS608 sensor</li> <li>1019DRound fingerprint recognition sensor module ID809</li> </ul>"},{"location":"index.html#wireless","title":"Wireless","text":"<ul> <li>315/433Mhz RF Link Kit</li> <li>NRF24L01+PA+LNA Wireless Module</li> <li>Smart car with ESP32-CAM Board</li> <li>2.4G Wireless nRF24L01</li> <li>Serial Port Bluetooth Module</li> <li>Wireless Charger&amp; Receiver</li> <li>433MHz RF Transceiver CC1101 Module</li> <li>Serial WIFI Transceiver Module ESP8266</li> <li>ESP32S WIFI BLE Board</li> <li>CrowBot-BOLT Programmable Smart Robot Car STEAM Robot Kit</li> </ul>"},{"location":"index.html#display","title":"Display","text":"<ul> <li>0.96\" OLED 128x64- Blue</li> <li>I2C 0.96\" OLED 128x64- Blue</li> <li>1.44'' 128x 128 TFT LCD with SPI Interface</li> <li>3.5 Inch 480x320 TFT Display with Touch Screen for Raspberry Pi</li> <li>3.95 Inch TFT Display for Raspberry Pi</li> <li>RC070M 7 inch 1024 X 600 Touch Screen Display with 720P Camera for Raspberry Pi/ MacBook Pro./ Windows 10</li> <li>RR070 7 Inch 1024x600 HDMI/VGA/AV Display for Raspberry Pi B/B+/2B/3B</li> <li>SF101C 10.1 inch 1280*800 IPS HDMI LCD Display(with case) for Raspberry Pi</li> <li>SF116 11.6 Inch 1920x1080 HDMI 1080P LED Display for Raspberry Pi</li> <li>2.9 inch e-Paper Module Three Color-Red Black White</li> <li>1.3 inch IPS TFT LCD Display ST7789</li> <li>Elecrow 10.1 inch Display IPS 1280x800 Acrylic Case Touch Screen Compatible with Raspberry Pi Jetson Nano PC</li> <li>5.0 Inch HDMI-Compatible Display for Raspberry Pi Compatible with Jetson Nano, Beaglebone</li> <li>I2C LCD2004(Yellow)</li> <li>I2C LCD1602(Blue)</li> <li>WS2812 RGB LED Ring</li> <li>HDMI Interface 5 Inch 800x480 TFT Display</li> <li>4 Inch HD 480x320 TFT Display with Touch Screen for Rapberry Pi</li> <li>RC050 5 inch HDMI 800 x 480 Capacitive Touch LCD Display for Raspberry Pi/ PC/ SONY PS4</li> <li>ELECROW 11.6 Inch 1080P IPS 1920x1080 Monitor with Built-in Speaker for Raspberry Pi PS4 XBOX Windows without touch function</li> <li>ELECROW 11.6 Inch 1080P IPS 1920x1080 Monitor with Built-in Speaker for Raspberry Pi PS4 XBOX Windows with touch function</li> <li>SF101 10.1 Inch 1920x1080 Display HDMI VGA IPS PS3 PS4 Gaming Screen</li> <li>SF101R 10.1 Inch Portable HD Display for Raspberry Pi 3</li> <li>SF133 13.3 Inch IPS 1920X1080 Monitor Dual HDMI PortablePS3 PS4 Gaming Screen</li> <li>3.5inch 480x320 MCU SPI Serial TFT LCD Module Display</li> <li>Meteor Screen 10.1\" IPS Touch Screen (with RGB Animated light)</li> <li>2.8'' TFT Touch Shield </li> <li>1602 LCD Display Module</li> <li>16x16 LED Display Module</li> <li>7 Inch 1024*600 HDMI LCD Display with Touch Screen</li> <li>7 Inch 1024x600 TFT Display for Raspberry Pi B+ Pcduino Banana Pi</li> <li>Elecrow RR040I 4 inch HD 800x480 Resolution IPS TFT Touch Screen Display for Raspberry Pi</li> <li>7 Inch TFT Display for Raspberry Pi B+ Banana Pi BB BLACK</li> <li>SF133M 13.3 inch 1920 x 1080 HDMI Portable Display for Raspberry Pi/ PS4/ XBOX/ NS</li> <li>RR040I 4 inch HD 800x480 Resolution IPS TFT Touch Screen Display for Raspberry Pi</li> <li>GC1016 10.1\" TFT-LCD Monitor 1280*800 Color Screen with AV1 VGA HDMI BNC USB Input Built-in Speaker</li> <li>2 inch IPS Module</li> <li>Elecrow 10.1 Inch Touchscreen 1280x800 IPS TFT LCD Monitor Kit</li> </ul>"},{"location":"index.html#hmi-display","title":"HMI Display","text":"<ul> <li>Wizee HMI touch display</li> </ul>"},{"location":"index.html#crowvision","title":"CrowVision","text":"<ul> <li>CrowVision 11.6'' Capacitive Touch Screen Portable HD 1366*768 IPS LCD Display</li> <li>CrowVision 7.0\" Touch Screen Capacitive Portable HDMI-compatible 1024*600 IPS LCD Monitor</li> </ul>"},{"location":"index.html#mechanical-keyboard","title":"Mechanical Keyboard","text":"<ul> <li>Mechanical_Keyboard_ESP32-S3 </li> </ul>"},{"location":"index.html#elecrow-services","title":"Elecrow Services","text":"<ul> <li>PCB Fabricate Service Overview</li> <li>Q&amp;A for PCB service</li> <li>Export gerber files from Eagle</li> <li>Export gerber files from Proteus_ARES</li> </ul>"},{"location":"index.html#modules-for-prototyping","title":"Modules for Prototyping","text":"<ul> <li>Breadboard Power Supply</li> <li>ULN2003 Stepper Motor Driver</li> <li>Lipo Charger v1.0</li> <li>LED matrix kit</li> <li>1602 LCD Display Module</li> <li>RTD2556 Driver Board/Controller Board Kit</li> <li>devDuino Sensor Node V1.3 (ATmega 328)</li> <li>Adjustable Integrated DC-DC Module- LM2596S</li> </ul>"},{"location":"index.html#accessories","title":"Accessories","text":"<ul> <li>Transparent Acrylic Switches Tester Collection</li> </ul>"},{"location":"index.html#application-kits","title":"Application Kits","text":"<ul> <li>Crazepony MINI Quadcopter </li> </ul>"},{"location":"index.html#elecrow-cooperatorpartner","title":"Elecrow Cooperator/Partner","text":"<ul> <li>Cooperator Designer</li> <li>Drop Shipping</li> <li>Products Wiki</li> </ul>"},{"location":"index.html#raspberry-pi","title":"Raspberry Pi","text":"<ul> <li>CrowPi</li> <li>CrowPi-2</li> <li>CrowPi-L</li> </ul>"},{"location":"index.html#arduino-kit","title":"Arduino Kit","text":"<ul> <li>GrowCube </li> </ul>"},{"location":"index.html#esp-terminal-esp32-display","title":"ESP Terminal&amp; ESP32 Display","text":"<ul> <li>ESP Terminal with 3.5inch RGB Capacitive Touch Display</li> <li>ESP Terminal with 3.5inch SPI Capacitive Touch Display</li> <li>ESP32 Display 2.4'' Intelligent Touch Screen Wi-Fi&amp;BLE 240*320 HMI Display</li> <li>ESP32 Display 2.8'' Intelligent Touch Screen Wi-Fi&amp;BLE 240*320 HMI Display</li> <li>ESP32 Display 3.5'' Intelligent Touch Screen Wi-Fi&amp;BLE 320*480 HMI Display</li> <li>ESP32 Display 4.3'' Intelligent Touch Screen Wi-Fi&amp;BLE 480*272 HMI Display</li> <li>ESP32 Display 5.0'' Intelligent Touch Screen Wi-Fi&amp;BLE 800*480 HMI Display</li> <li>ESP32 Display 7.0'' Intelligent Touch Screen Wi-Fi&amp;BLE 800*480 HMI Display</li> </ul>"},{"location":"index.html#lora","title":"Lora","text":"<ul> <li>Lora RA-08H Development Board</li> <li>Lora RA-08H Node Board</li> <li>Lora Basic Gateway Module</li> <li>LR1302 LoRaWAN Gateway Module</li> <li>LR1302 LoRaWAN HAT for RPI_PRD</li> <li>LR1262 LoRaWAN Node Module</li> </ul>"},{"location":"index.html#tutorials","title":"Tutorials","text":"<p>LVGL ESP32 Display Tutorial-A Step-by-Step Guide to LVGL GUI Development</p>"},{"location":"Products/Accessories/transparent-acrylic-switches-tester-collection.html","title":"Transparent Acrylic Switches Tester Collection","text":""},{"location":"Products/Accessories/transparent-acrylic-switches-tester-collection.html#description","title":"Description","text":"<p>This kit is designed to achieve the actual feel of a real Cherry MX switch mechanical keyboard by mounting all the actual switches on a specially designed model! The TRANSPARENT ACRYLIC SWITCHES TESTER will help you decide which switch is best for you. It is compatible with 99% of the mechanical key switches on the market and can be customized into a mechanical keyboard that is unique to your own habits. Each switch is produced by the golden cross contact technology of the CHERRY factory in Auerbach, Germany, with sensitive reflection and quick response. And it has a high-precision precision switch. It can be knocked 50 million times and has a long life with strong spring. The MX key caps come with a dust cover to protect the internal parts and keep your key switches away from dust. And its built-in 3 mm LED lights which make your switch tester look cool.</p> <p>Model: ACT23536L </p>"},{"location":"Products/Accessories/transparent-acrylic-switches-tester-collection.html#features","title":"Features","text":"<ul> <li>Accurate press feeling of 12 Cherry MX switches</li> <li>Stable housing, precise cutting frame</li> <li>Comfortable and smooth chauffeuring design on edge</li> <li>Translucent clear key caps</li> <li>Sensitive reflection, quick response</li> <li>Strong spring, super feel</li> <li>Has a lifespan of about 50 million strokes</li> <li>MX key caps with dust cover</li> <li>Detachable keys design for DIY</li> </ul>"},{"location":"Products/Accessories/transparent-acrylic-switches-tester-collection.html#specifications","title":"Specifications","text":"Item Value Color Transparent Size 6cm x 8cm x 3cm  (2.36in x 3.48in x 1.18in) Material acrylic housing"},{"location":"Products/Accessories/transparent-acrylic-switches-tester-collection.html#switch-color-characteristics","title":"Switch Color &amp; Characteristics","text":"Switch Color Characteristics Cherry MX Red Soft Linear 45cN - Smooth, no tactile bump Cherry MX Black Firm Linear 60cN - Smooth, no tactile bump Cherry MX Blue Tactile &amp; Clicky 50cN Cherry MX Brown Soft Tactile 45cN - Softer &amp; lighter tactile bump, no click Cherry MX Green Firm tactile &amp; Clicky 80cN Cherry MX Gray (black) Tactile 80cN - Firm tactile bump, no click Cherry MX Gray (brown) Firm Linear 60cN - Tactile bump, no click Cherry MX Clear Tactile 55cN - Tactile bump, no click Cherry MX White Tactile &amp; Clicky 65cN - Tactile and lighter click switch Silent Red Soft Linear 45cN - Smooth &amp; Silent Silent Black Firm Linear 60cN - Smooth &amp; Silent Speed Silver Soft Linear 45cN - Smooth, no tactile bump, 3.4 mm total travel distance only"},{"location":"Products/Accessories/transparent-acrylic-switches-tester-collection.html#shaft-changing","title":"Shaft Changing","text":"<p> Notes: When inserting a new switch, please be sure to align the pin position, when it cannot be easily inserted, do not press it to prevent the pin from breaking</p>"},{"location":"Products/Accessories/transparent-acrylic-switches-tester-collection.html#plugged-shaft","title":"Plugged shaft","text":""},{"location":"Products/Accessories/transparent-acrylic-switches-tester-collection.html#soldered-shaft","title":"Soldered shaft","text":""},{"location":"Products/Application-Kits/crazepony-mini-quadcopter.html","title":"Crazepony MINI Quadcopter","text":""},{"location":"Products/Application-Kits/crazepony-mini-quadcopter.html#description","title":"Description","text":"<p>Crazepony MINI is an ultra-compact quadcopter kit that fits the size of your palm. It is remote controllable by smart phone or tablet through bluetooth. It is open sourced. It is designed for those who are interested in learning, experimenting and coaching how to develop your very own drone. let's begin our flying dream.</p> <p>Model:AKA04020A</p> <p></p>"},{"location":"Products/Application-Kits/crazepony-mini-quadcopter.html#specifications-of-the-crazepony-mini-quadcopter-body","title":"Specifications of the Crazepony MINI Quadcopter Body","text":"<ul> <li>Sized 100mm * 100mm (wheelbase 140mm with 75mm propeller), ultra-compact as its name suggests</li> <li>Light weight: 46g (incl. battery)</li> <li>Up to 6 minutes when fully charged (with standard 650mAh Li-Po rechargeable battery)</li> <li>Charge time about 40min to 100% with Standard Micro USB connector on a 2A adapter</li> <li>On-board low-energy radio based on the nRF24L01+ chip</li> <li>Powerful 32 bit MCU: STM32F103T8U6 72 MHz (64Kbs flash, 20kb RAM)</li> <li>3-axis high-performance MEMs gyros with 3-axis accelerometer: Invensense MPU-6050</li> <li>High precision altimeter MS5611-01BA03</li> <li>Extended reservation position for compass HMC5883L</li> <li>With common USB to UART bridge CP2102,micro USB connector to download and debug firmware</li> <li>Bluetooth 4.0 LE wireless connection (with TI CC2541 chip) to enable remote control by smartphone or tablet</li> </ul>"},{"location":"Products/Application-Kits/crazepony-mini-quadcopter.html#specifications-of-the-crazepony-mini-remote-controller","title":"Specifications of the Crazepony MINI Remote Controller","text":"<ul> <li>Powerful 32 bit MCU: STM32F103T8U6 72 MHz (64Kbs flash, 20kb RAM).</li> <li>Pluggable nRF24L01+ dongle for 20m range,up to 100m with power amplifier(PA) and SMA antenna.</li> <li>With common USB to UART bridge CP2102,micro USB connector to download and debug firmware.</li> </ul>"},{"location":"Products/Application-Kits/crazepony-mini-quadcopter.html#user-guide","title":"User Guide","text":"<p>1.Place the Crazepony on a stable ground.The Arrow on the center of the PCB indicate the front. </p> <p>2.Firstly switch on the Crazepony RC, then quadcopter.About 10s later, blue LEDs on M1/M2 flashing,IMU is calibrated. </p> <p>3.Press the \"-\" button on RC to start IMU calibration.Press the \"+\" button on RC to start the motors. </p> <p>4.Push the throttle on the left joystick to take off.Press the \"+\" button again to stop motors after landing. </p>"},{"location":"Products/Application-Kits/crazepony-mini-quadcopter.html#resources","title":"Resources","text":""},{"location":"Products/Application-Kits/crazepony-mini-quadcopter.html#source-code-firmware","title":"Source Code &amp; Firmware","text":"<p>1.Flight Control Source Code</p> <ul> <li>Crazepony 5.2 Bluetooth 4.0 LE version flight control firmware.</li> <li>Search the 2.4G remote control connected last time first when power on</li> <li>Support the Bluetooth LE connection by smartphone(Bluetooth 2.1 not supported now)</li> <li>Communication with PC assistant is closed by default</li> </ul> <p>Download:</p> <ul> <li>Crazepony-5.2-ble-fc-0929-6f07e60.hex</li> <li>crazepony-firmware-none-5.2-ble.zip</li> </ul> <p>2.Remote Control Source Code</p> <p>Crazepony 5.2 Bluetooth 4.0 LE version remote control firmware.</p> <ul> <li>Generate a rand 2.4G address for the remote control</li> <li>Press 'Mode' button to 2.4G address</li> </ul> <p>Download:</p> <ul> <li>Remote Control Source Code</li> </ul>"},{"location":"Products/Application-Kits/crazepony-mini-quadcopter.html#schematic-datasheet","title":"Schematic &amp; Datasheet","text":"<ul> <li>Schematic</li> <li>Datasheet</li> </ul>"},{"location":"Products/Application-Kits/crazepony-mini-quadcopter.html#android-client-pc-gui","title":"Android Client &amp; PC GUI","text":"<ul> <li>Android APP APK File</li> <li>Crazepony GUI</li> </ul>"},{"location":"Products/Application-Kits/crazepony-mini-quadcopter.html#external-links","title":"External links","text":"<ul> <li>Related Data Download</li> <li>Crazepony Official Website</li> <li>Users Manual</li> </ul>"},{"location":"Products/Arduino/24-inch-tft-touch-shield-for-arduino.html","title":"2.4 inch TFT Touch Shield for Arduino","text":""},{"location":"Products/Arduino/24-inch-tft-touch-shield-for-arduino.html#description","title":"Description","text":"<p>The 2.4 inch TFT Touch Screen Module with micro SD card slot is now available as a SHIELD for Arduino UNO. It has a four wire resistive touch screen, a micro SD card socket, a reset switch and a convenient Arduino Uno shield footprint. Model: ACS44240D </p> <p> </p>"},{"location":"Products/Arduino/24-inch-tft-touch-shield-for-arduino.html#features","title":"Features","text":"<ul> <li>Colorful, 18-bit 262,000 different shades</li> <li>Bright, 4 white LED backlight. On by default but you can connect the transistor to a digital pin for backlight control</li> <li>Works with any Arduino 328 or Mega (Leonardo not supported yet)</li> <li>Onboard 3.3V 300mA LDO regulator</li> <li>4-wire resistive touchscreen</li> <li>Uses digital pins 5-13 and analog 0-3. That means you can use digital pins 2, 3 and analog 4 and 5. Pin 12 is available if not using the micro SD</li> </ul>"},{"location":"Products/Arduino/24-inch-tft-touch-shield-for-arduino.html#specification","title":"Specification","text":"Item Value Display Color RGB 65K color Screen Size 2.4(inch) Type TFT Driver IC ILI9341 Resolution 320*240(Pixel) Module Interface 8-bit parallel interface Active Area 48.96*36.72(mm) Module PCB Size 72.20*52.7(mm) Operating Temperature -20\u2103~60\u2103 Storage Temperature -30\u2103~70\u2103 Operating Voltage 5V/3.3V Power Consumption TBD Product Weight(Package containing) 39(g)"},{"location":"Products/Arduino/24-inch-tft-touch-shield-for-arduino.html#pin-layout","title":"Pin Layout","text":"No. Pin Label Pin Description 1 LCD_RST LCD bus reset signal, low level reset 2 LCD_CS LCD bus chip select signal, low level enable 3 LCD_RS LCD bus command / data selection signal, low level:command, high level:data 4 LCD_WR LCD bus write signal 5 LCD_RD LCD bus read signal 6 GND Power ground 7 5V 5V power input 8 3V3 3.3V power input, this pin can be disconnected 9 LCD_D0 LCD 8-bit data Bit0 10 LCD_D1 LCD 8-bit data Bit1 11 LCD_D2 LCD 8-bit data Bit2 12 LCD_D3 LCD8-bit data Bit3 13 LCD_D4 LCD 8-bit data Bit4 14 LCD_D5 LCD 8-bit data Bit5 15 LCD_D6 LCD 8-bit data Bit6 16 LCD_D7 LCD 8-bit data Bit7 17 SD_SS SD card SPI bus chip select signal, low level enable 18 SD_DI SD card SPI bus MOSI signal 19 SD_DO SD card SPI bus MISO signal 20 SD_SCK SD card SPI bus clock signal"},{"location":"Products/Arduino/24-inch-tft-touch-shield-for-arduino.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Arduino/24-inch-tft-touch-shield-for-arduino.html#usage","title":"Usage","text":""},{"location":"Products/Arduino/24-inch-tft-touch-shield-for-arduino.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs:</p> Crowduino Uno 2.4 inch TFT Touch Shield for Arduino Get one now Get one now <p>STEP2 Plug 2.4 inch TFT Touch Shield into Crowduino Uno;   STEP3 Connect Crowduino Uno to PC via a Mini USB cable.  </p>"},{"location":"Products/Arduino/24-inch-tft-touch-shield-for-arduino.html#software","title":"Software","text":"<p>STEP 1 Download filesArduino_Demo_code_ArduinoUNO%26Mega2560.zip STEP 2 Configure controller board&amp;communication port  On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201dfrom the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure. </p> <p>STEP 3 Install Library: Unzip the Arduino Demo code_ArduinoUNO&amp;Mega2560.zip file. Copy the dependent libraries in the Install libraries directory in the package (shown below) to the Libraries directory under the Arduino installation directory </p> <p>STEP 4 Open the sample program in the Example directory of the package to test  </p> <p>STEP 5 Click the  to upload the code to the Crowduino board  </p> <p>STEP6 After the program is downloaded, run it directly and observe the running status. If it can be displayed normally, the program runs successfully </p>"},{"location":"Products/Arduino/24-inch-tft-touch-shield-for-arduino.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Arduino/24-inch-tft-touch-shield-for-arduino.html#resources","title":"Resources","text":"<p>Arduino_Demo_code_ArduinoUNO&amp;Mega2560.zip ILI9341_Datasheet.pdf Schematic </p>"},{"location":"Products/Arduino/32u4-with-a6-gprsgsm.html","title":"32u4 with A6 GPRS/GSM","text":""},{"location":"Products/Arduino/32u4-with-a6-gprsgsm.html#introduction","title":"Introduction","text":"<p>The 32U4 with A6 GSM/GPRS Board is based on mega32U4 and A6 GSM/GPRS module. It can be used to call and seed text messages, via GPRS to upload data to server. At the same time it leads to an analog interface, an IIC interface and 2 digital interface. which you can connect to other module more easily.</p> <p>Model: (Discontinued) </p>"},{"location":"Products/Arduino/32u4-with-a6-gprsgsm.html#features","title":"Features","text":"<ul> <li>32U4+A6</li> <li>Work voltage: 5V</li> <li>Operating temperature -30 \u2103 to + 80 \u2103;</li> <li>Three kinds of interface</li> <li>3.7V Battery power supply</li> <li>Low standby current</li> <li>Standby average current 3ma less;</li> <li>Support the GSM / GPRS Quad-band, including 850,900,1800,1900MHZ;</li> <li>Support China Mobile and China Unicom's 2G GSM network worldwide;</li> <li>GPRS Class 10;</li> <li>Sensitivity &lt;-105;</li> <li>Support voice calls;</li> <li>Support SMS text messaging;</li> <li>Support GPRS data traffic, the maximum data rate, download 85.6Kbps, upload 42.8Kbps;</li> <li>Supports standard GSM07.07,07.05 AT commands and extended commands Ai-Thinker;</li> <li>Supports two serial ports, a serial port to download an AT command port;</li> <li>AT command supports the standard AT and TCP / IP command interface;</li> <li>Support digital audio and analog audio support for HR, FR, EFR, AMR speech coding;</li> <li>Support ROHS, FCC, CE, CTA certification;</li> </ul>"},{"location":"Products/Arduino/32u4-with-a6-gprsgsm.html#specifications","title":"Specifications","text":"<ul> <li>Quad-band: 850/900/1800/1900 MHz</li> <li>GPRS multi-slot: 12, 1 to 12 may be configured</li> <li>GPRS mobile station: Class B</li> <li>Compatible with GSM Phase 2/2 +: Class 4 (2W @ 850/900 MHz) Class 1 (1W @ 1800 / 1900MHz)</li> <li>Current consumption: 1.3mA @ DRX = 5; 1.2mA @ DRX = 9</li> <li>AT command control: Standard GSM07.07,07.05 AT commands and extended commands Ai-Thinker</li> <li>SIM Application Toolkit</li> <li>GPRS Class 10: Up 85.6 kbps (upstream) &amp; 42.8Kbps (downlink)</li> <li>PBCCH support</li> <li>Coding scheme: CS 1, 2, 3, 4</li> <li>Support CSD: Up 14.4 kbps</li> <li>Support USSD</li> <li>Stack: PPP / TCP / UDP / HTTP / FTP / SMTP / MUX</li> </ul>"},{"location":"Products/Arduino/32u4-with-a6-gprsgsm.html#cautions","title":"Cautions","text":"<ul> <li>Make sure your SIM card is unlocked.</li> <li>The product is provided as is without an insulating enclosure. Please observe ESD precautions specially in dry (low humidity) weather.</li> <li>It just supports baud rate 115200bps.</li> </ul>"},{"location":"Products/Arduino/32u4-with-a6-gprsgsm.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Arduino/32u4-with-a6-gprsgsm.html#usage","title":"Usage","text":""},{"location":"Products/Arduino/32u4-with-a6-gprsgsm.html#connect-the-antenna","title":"Connect the Antenna","text":"<p>1.A miniature coaxial RF connector is present on the 32u4 with A6 GPRS/GSM to connect with a GSM Antenna. The connector present on the 32u4 with A6 GPRS/GSM is called a U.FL connecto.The GSM Antenna supplied with the GPRS Shield has an SMA connector (and not an RP-SMA connector) on it.The connection topology is shown in the diagram below:</p> <p></p>"},{"location":"Products/Arduino/32u4-with-a6-gprsgsm.html#insert-an-micro-sim-card-to-sim-card-holder","title":"Insert an Micro SIM card to SIM Card Holder","text":"<p>2.Pin Holder for SIM Cards. Both 1.8 volts and 3.0 volts SIM Cards are supported by A6 GPRS/GSM Module, the SIM card voltage type is automatically detected. </p>"},{"location":"Products/Arduino/32u4-with-a6-gprsgsm.html#download-code","title":"Download Code","text":"<p>Connect the USB cable to the 32u4 with A6 GPRS/GSM board,then download the code as below:</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n#define DEBUG true\n\nvoid setup()\n{\n  Serial.begin(115200);\n  Serial1.begin(115200);\n  pinMode(4, OUTPUT);\n  pinMode(5, OUTPUT);\n  pinMode(8,OUTPUT);\n  digitalWrite(5, HIGH); \n  digitalWrite(4, LOW); \n  digitalWrite(8, LOW); \n  Serial.println(\"After 5s, test begin!!\");\n  delay(5000);\n}\n\nvoid loop()\n{\n  Serial.println(\"Test begin!!\");\n  digitalWrite(8, HIGH); \n  delay(3000);       \n  digitalWrite(8, LOW);\n  Serial.println(\"A6 Power ON!\");\n  Serial.println(\"You may receive the AT   OK\"); \n   sendData( \"AT\",1000,DEBUG);\n  sendData( \"AT\",1000,DEBUG);\n  Serial.println(\"A6 go to sleep now!\"); \n   digitalWrite(5, LOW);  //sleep\n   delay(2000);\n   Serial.println(\"call 10086\");\n   call();          //no call, A6 sleeping   \n   sendData( \"AT\",1000,DEBUG);\n   Serial.println(\"if you hear the voice and receive AT   OK,test failed!\");\n   digitalWrite(5, HIGH);   // wake up\n   delay(1000);\n   Serial.println(\"A6 WAKE UP!\"); \n   Serial.println(\"test it weather wakaup, if re ok, a6 wakeup\"); \n   sendData( \"AT\",1000,DEBUG);     \n   Serial.println(\"A6 power off!\"); \n   digitalWrite(4, HIGH); // power off A6\n   delay(2000);\n   digitalWrite(4, LOW);\n   Serial.println(\"pringt AT and you not re OK\"); \n   sendData( \"AT\",1000,DEBUG);      //NO RE OK\n     Serial.println(\"A6 NO RESBOND\"); \n   digitalWrite(8, HIGH);           //POWER UP\n  delay(3000);       \n  digitalWrite(8, LOW);\n  delay(5000);\n  Serial.println(\"A6 Power ON!\"); \n   delay(5000);\n   Serial.println(\".................................\"); \n   sendData( \"AT\",1000,DEBUG); //TEST AND MAKE CALL\n   delay(3000);\n   call();\n   Serial.println(\"A6 Test complete!\");\n   while(1);\n}\n\nvoid call(void)\n   {\n         sendData( \"AT+CSQ\",1000,DEBUG);     \n         sendData(\"AT+SNFS=0\",1000,DEBUG);\n         sendData(\"ATD10086;\",1000,DEBUG);\n         delay(10000);\n         sendData( \"ATH\",1000,DEBUG);\n   }\n\nString sendData(String command, const int timeout, boolean debug)\n{\n    String response = \"\";    \n    Serial1.println(command); \n    long int time = millis();   \n    while( (time+timeout) &gt; millis())\n    {\n      while(Serial1.available())\n      {       \n        char c = Serial1.read(); \n        response+=c;\n      }  \n    }    \n    if(debug)\n    {\n      Serial.print(response);\n    }    \n    return response;\n}\n</code></pre> <p>After you complete download the code, open the serial debug window(notice set the baud rate 115200), you will see some information as bellow:</p> <p></p>"},{"location":"Products/Arduino/32u4-with-a6-gprsgsm.html#resource","title":"Resource","text":"<ul> <li>32u4 with A6 GPRS/GSM eagle file</li> </ul>"},{"location":"Products/Arduino/32u4-with-a7-gprsgsm.html","title":"32u4 with A7 GPRS/GSM","text":""},{"location":"Products/Arduino/32u4-with-a7-gprsgsm.html#introduction","title":"Introduction","text":"<p>The 32U4 with A7 GPS+GSM/GPRS Board is based on Mega32U4 and A7 GPS+GSM/GPRS module. It can be used to make a call, send text messages and get GPS positioning. Also it has one analog interface, one IIC interface and two digital interface, which you can connect to other expansion modules. It is very easy for you to make a GPS Tracker by using this board.</p> <p>Model: (Discontinued\uff09 </p>"},{"location":"Products/Arduino/32u4-with-a7-gprsgsm.html#features","title":"Features","text":"<ul> <li>ATMEGA32U4+A7.</li> <li>Work voltage: 3.3V to 5V.</li> <li>Operating temperature\uff1a -30 \u2103 to + 80 \u2103.</li> <li>Three kinds of interface.</li> <li>Equipped with 3.5mm headphone jack.</li> <li>3.7V Battery power supply.</li> <li>Standby average current 3ma or less.</li> <li>Support the GSM / GPRS Quad-band, including 850,900,1800,1900MHZ.</li> <li>Support China Mobile and China Unicom's 2G GSM network worldwide.</li> <li>GPRS Class 10.</li> <li>Sensitivity &lt; -105.</li> <li>Support GPS Positioning.</li> <li>Support for voice calls.</li> <li>Support for SMS text messaging.</li> <li>Support GPRS data business, the maximum data rate: download 85.6Kbps, upload 42.8Kbps.</li> <li>Supports standard GSM07.07, 07.05 AT commands and Ai-Thinker extended commands.</li> <li>Supports two serial ports, a serial port to download an AT command port.</li> <li>Support for Global Positioning System.</li> <li>Horizontal positioning accuracy of less than 2.5m.</li> <li>AT command supports the standard AT and TCP / IP command interface.</li> <li>Support digital audio and analog audio support for HR, FR, EFR, AMR speech coding.</li> <li>Support ROHS, FCC, CE, CTA certification.</li> </ul>"},{"location":"Products/Arduino/32u4-with-a7-gprsgsm.html#specifications","title":"Specifications","text":"<ul> <li>Quad-band: 850/900/1800/1900 MHz.</li> <li>GPRS multi-slot: 12, 1 to 12 can be configured.</li> <li>GPRS mobile station: Class B.</li> <li>Compatible with GSM Phase 2/2 +: Class 4 (2W @ 850/900 MHz) Class 1 (1W @ 1800 / 1900MHz).</li> <li>Current consumption: 1.3mA @ DRX = 5; 1.2mA @ DRX = 9.</li> <li>AT command control: Standard GSM07.07, 07.05 AT commands and Ai-Thinker extended commands.</li> <li>SIM Application Toolkit.</li> <li>GPRS Class 10: Up 85.6 kbps (upstream) &amp; 42.8Kbps (downlink).</li> <li>Dynamic Conditions Altitude &lt;18,000 meters (60,000 feet).</li> <li>Speed &lt;515 m / s (1000 nautical miles), acceleration &lt;4 g.</li> <li>PBCCH support.</li> <li>Coding scheme: CS 1, 2, 3, 4.</li> <li>Support CSD: Up 14.4 kbps.</li> <li>Support USSD.</li> <li>Stack: PPP / TCP / UDP / HTTP / FTP / SMTP / MUX.</li> <li>Dimensions(mm):50.0(L)x36.5(W)x9.6(H)</li> </ul>"},{"location":"Products/Arduino/32u4-with-a7-gprsgsm.html#cautions","title":"Cautions","text":"<ul> <li>Make sure your SIM card is locked.</li> <li>This product is supplied as is, without an insulated housing. In high humidity weather, pay special attention to ESD precautions.</li> <li>It just supports baud rate 115200bps.</li> </ul>"},{"location":"Products/Arduino/32u4-with-a7-gprsgsm.html#interface","title":"Interface","text":""},{"location":"Products/Arduino/32u4-with-a7-gprsgsm.html#usage","title":"Usage","text":"<p>1. Install the antenna.</p> <p>Two miniature coaxial RF connector is present on the back of the 32U4 with A7 GPRS/GSM/GPS Board to connect with a GSM antenna or a GPS antenna . The connector present on the 32U4 with A7 GPRS/GSM/GPS is called a U.FL connector.The GSM Antenna supplied with the GPRS Shield has an SMA connector (and not an RP-SMA connector) on it.The connection topology is shown in the diagram below:</p> <p> </p> <p>2. Insert the Micro SIM card into the SIM card holder.</p> <p>There is a SIM card holder on the back of the board. Both 1.8 volts and 3.0 volts SIM Cards are supported by this board, the SIM card voltage type is automatically detected.</p> <p></p> <p>3. Connect the battery.</p> <p>Because the PC USB port output current is not enough\uff0cso you should connedct an 3.7V lithium battery to the battery port.</p> <p></p> <p>4. Upload the code</p> <p>Open your Arduino IDE, choose the file, choose the Arduino Leonardo Board. You can refer to this test code and upload it to your board: 32U4_with_A7_test</p> <pre><code>/*\n * Created by Keen\n * Modified by Keen \n * Date: 11/04/2017\n */\n#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n#define DEBUG true\nString target_phone = \"+861**********6\"; // Your phone number, not number of 32U4 with A7/GSM/GPS.\n\nvoid setup()\n{\n  Serial.begin(115200);\n  Serial1.begin(115200);\n  pinMode(4, OUTPUT);\n  pinMode(5, OUTPUT);\n  pinMode(8,OUTPUT);\n  digitalWrite(5, HIGH); \n  digitalWrite(4, LOW); \n  digitalWrite(8, LOW); \n  Serial.println(\"After 2s, test begin!!\");\n  delay(2000);\n  funtion_test();\n}\n\nvoid loop()\n{\n  if (Serial1.available()&gt;0) {\n    Serial.write(Serial1.read());\n  }\n  if (Serial.available()&gt;0) {\n    Serial1.write(Serial.read());\n  }\n}\n\nvoid funtion_test(){\n   Serial.println(\"Test begin!!\");\n   digitalWrite(8, HIGH); \n   delay(3000);       \n   digitalWrite(8, LOW); //Power ON..\n   Serial.println(\"A7 Power ON!\");\n   Serial.println(\"You may receive the AT   OK\"); \n   sendData( \"AT\",1000,DEBUG);\n   delay(500);\n   digitalWrite(5, LOW);  //Sleep\n   Serial.println(\"A7 go to sleep now!\");\n   delay(3000);\n   Serial.println(\"test GPS function\");\n   testGPS();          //no call, A7 sleeping   \n   sendData( \"AT\",1000,DEBUG);\n   delay(500);\n   Serial.println(\"if you receive GPS data,the sleep test failed!\");\n   digitalWrite(5, HIGH);   // wake up\n   delay(1000);\n   Serial.println(\"A7 WAKE UP!\"); \n   Serial.println(\"test whether wake up or not, if OK, A7 wake up\"); \n   sendData( \"AT\",1000,DEBUG);\n   delay(500);     \n   digitalWrite(4, HIGH); // power off A6\n   Serial.println(\"A7 power off!\");\n   delay(3000);\n   digitalWrite(4, LOW);\n   Serial.println(\"print AT and you not receive OK\"); \n   sendData( \"AT\",1000,DEBUG);\n   delay(500); \n   Serial.println(\"A7 not Respond\"); \n   digitalWrite(8, HIGH);           //POWER UP\n   delay(3000);       \n   digitalWrite(8, LOW);\n   delay(3000);\n   Serial.println(\"A7 Power ON!\"); \n   Serial.println(\".................................\"); \n   sendData( \"AT\",1000,DEBUG); //\n   delay(1000);\n   Serial.println(\"The funtion is Get GPS...\"); \n   testGPS();\n   Serial.println(\"The funtion is Dial Voice Call...\"); \n   delay(1000);\n   DialVoiceCall();\n   Serial.println(\"The funtion is Send SMS ...\"); \n   delay(1000);\n   SendTextMessage();\n   Serial.println(\"This function is submit a HTTP request...\");\n   delay(1000);\n   TCP_GPRS();\n   Serial.println(\"All the test of 32U4 with A7 is complete!\");\n}\n\nvoid testGPS(void){\n  sendData(\"AT+GPS=1\",1000,DEBUG);     \n  sendData(\"AT+GPSRD=1\",3000,DEBUG);\n  sendData(\"AT+GPS=0\",10000,DEBUG);\n}\n\nvoid TCP_GPRS(){\n   sendData(\"AT+CREG?\",5000,DEBUG); //Query network registration\n   delay(100);\n   sendData(\"AT+CGATT=1\",5000,DEBUG);\n   delay(100); \n   sendData(\"AT+CGDCONT=1,\\\"IP\\\",\\\"CMNET\\\"\",2000,DEBUG);//setting PDP parameter \n   delay(100); \n   sendData(\"AT+CGACT=1,1\",10000,DEBUG); //Activate PDP, open Internet service\n   delay(100);  \n   sendData(\"AT+CIPSTART=\\\"TCP\\\",\\\"www.baidu.com\\\",80\",10000,DEBUG);\n   delay(100);\n   sendData(\"AT+CIPSEND=5,\\\"12345\\\"\",2000,DEBUG); //Send string \"12345\" \n   delay(100); \n   sendData(\"AT+CIPCLOSE\",2000,DEBUG);     //Close TCP\n   delay(100); \n   /*\n     sendData(\"AT+CREG?\",3000,DEBUG);     \n     sendData(\"AT+CGATT=1\",1000,DEBUG);\n     sendData(\"AT+CGDCONT=1,\\\"IP\\\",\\\"CMNET\\\"\",1000,DEBUG);\n     sendData(\"AT+CGACT=1,1\",1000,DEBUG);\n     sendData(\"AT+CIPSTART=\\\"TCP\\\",\\\"google.com\\\",80\",3000,DEBUG);\n     sendData(\"AT+CIPSEND=80\",1000,DEBUG);\n     sendData(\"GET http://www.google.com HTTP/1.0\\r\\n\",100,DEBUG);\n     */\n}\n\nvoid SendTextMessage()\n{ \n  sendData(\"\",2000,DEBUG);\n  sendData(\"AT+CMGF=1\",2000,DEBUG);//Because we want to send the SMS in text mode\n  delay(100);\n  sendData(\"AT+CMGS=\"+target_phone,2000,DEBUG);//send sms message, be careful need to add a country code before the cellphone number\n  delay(100);\n  sendData(\"GSM test message!\",2000,DEBUG);//the content of the message\n  delay(100);\n  Serial1.println((char)26);//the ASCII code of the ctrl+z is 26\n  delay(100);\n}\n\nvoid DialVoiceCall()\n{\n   sendData(\"AT+SNFS=0\",5000,DEBUG);\n   delay(100);\n   sendData(\"ATD\"+target_phone,5000,DEBUG);// \"ATD+86137xxxxxxxx\"dial the number\n   delay(100);\n}\n\n\nString sendData(String command, const int timeout, boolean debug)\n{\n    String response = \"\";    \n    Serial1.println(command); \n    long int time = millis();\n    while( (time+timeout) &gt; millis())\n    {\n      while(Serial1.available())\n      {       \n        char c = Serial1.read(); \n        response+=c;\n      }  \n    }    \n    if(debug)\n    {\n      Serial.print(response);\n    }    \n    return response;\n}\n\nvoid httpRec(const int timeout){\n    String response = \"\";    \n    long int time = millis();\n    while( (time+timeout) &gt; millis())\n    {\n      while(Serial1.available())\n      {       \n        char c = Serial1.read(); \n        response+=c;\n      }  \n    }    \n    Serial.print(response); \n}\n</code></pre> <p>After you complete download the code, open the Serial monitor, you will see some information as bellow:</p> <p> </p>"},{"location":"Products/Arduino/32u4-with-a7-gprsgsm.html#get-and-send-the-location-information-to-your-phone-by-sms","title":"Get and send the location information to your phone by SMS","text":"<p>This example is how to get the GPS location information and send it to your cellphone.In the code,we need to change the target phone. And the Lithium Batteries must be used. When the board gets the 30 times location information successfully and the information will be send by SMS.</p> <pre><code>/*\n * Created by Keen\n * Modified by Keen \n * Date: 15/07/2017\n * Please note:\n * 1.You need to change the \"target_phone\". \n * 2.Lithium batteries must be used.\n * 3.The GPS and GSM antenna must be used.\n * Please open your \"Serial Monitor\" and you will get the debug information. \n */\n#define DEBUG true\n\nchar byteGPS=-1;\nchar linea[300] = \"\";\nchar comandoGPR[7] = \"$GPRMC\";\nint cont=0;\nint bien=0;\nint conta=0;\nint indices[13];\n\nint GPS_time=30;                        // When the board gets the 30 times location information successfully and the location information will be send by sms.      \nString target_phone = \"+861************6\"; // Your phone number,be careful need to add a country code before the cellphone number\n\nString GPS_position=\"\";\nint GPS_position_count=0;\n\nvoid setup()\n{\n  Serial.begin(115200);\n  Serial1.begin(115200);\n  pinMode(4, OUTPUT);\n  pinMode(5, OUTPUT);\n  pinMode(8,OUTPUT);\n  digitalWrite(5, HIGH); \n  digitalWrite(4, LOW); \n  digitalWrite(8, LOW); \n  delay(2000);\n  digitalWrite(8, HIGH); \n  delay(3000);       \n  digitalWrite(8, LOW);\n  Serial.println(\"A7 Power ON!\");\n  sendData(\"AT+GPS=0\",3000,DEBUG);     //Close GPS\n  for(int i=0;i&lt;2;i++){                //Make sure the GPS has been turned on\n    sendData(\"AT+GPSRD=1\",1000,DEBUG);\n    Serial1.println(\"AT+GPS=1\");\n  }\n  Serial.println(\"*********************************************************\");\n  Serial.println(\"**If don`t display 'GPS positioning....',please reboot.**\");\n  Serial.println(\"*********************************************************\");\n}\n\nvoid loop()\n{\n    testgps();\n}\n\nvoid testgps(){\n  while(Serial1.available()){\n   byteGPS=Serial1.read();  \n  // Read a byte of the serial port\n   if (byteGPS == -1) {       \n    // See if the port is empty yet\n   } \n   else {\n     // note: there is a potential buffer overflow here!\n     linea[conta]=byteGPS;        // If there is serial port data, it is put in the buffer\n     conta++;                      \n     //Serial.print(byteGPS);    //If you delete '//', you will get the all GPS information\n     if (byteGPS==13){\n      // If the received byte is = to 13, end of transmission\n      // note: the actual end of transmission is &lt;CR&gt;&lt;LF&gt; (i.e. 0x13 0x10)\n      cont=0;\n      bien=0;\n      // The following for loop starts at 1, because this code is clowny and the first byte is the &lt;LF&gt; (0x10) from the previous transmission.\n       for (int i=1;i&lt;7;i++){     // Verifies if the received command starts with $GPR\n         if (linea[i]==comandoGPR[i-1]){\n           bien++;\n         }\n       }\n       if(bien==6){ \n        // If yes, continue and process the data\n        //Data Partitioning\n         for (int i=0;i&lt;300;i++){\n           if (linea[i]==','){    // check for the position of the  \",\" separator\n             // note: again, there is a potential buffer overflow here!\n             indices[cont]=i;\n             cont++;\n           }\n           if (linea[i]=='*'){    // ... and the \"*\"\n             indices[12]=i;\n             cont++;\n           }\n         }\n         //panel data, for example:Direction (E/W):Longitude-Direction(N/S):Latitude&lt;---&gt;E:11350.51872-N:2236.40687        \n         for(int i=5;i&gt;1;i--){\n           for (int j=indices[i];j&lt;(indices[i+1]-1);j++){\n             GPS_position+=linea[j+1];\n           }\n           if((i==5)||(i==3)){\n             GPS_position+=\":\";  \n           }else if(i==4){\n             GPS_position+=\"-\";   \n           }\n         }\n         //If the return \":-:\", it means empty data, continue positioning \n         if(GPS_position==\":-:\"){\n          Serial.println(\"GPS positioning....\");\n         }else{\n            Serial.println(GPS_position);\n            GPS_position_count++;\n            //When GPS_position_count is equivalent to GPS_time, stop positioning and start to send sms messages\n            if(GPS_position_count==GPS_time){\n            GPS_position_count=0;          //Reset count\n            sendData(\"AT+GPS=0\",1000,DEBUG);\n            delay(1000); \n            SendTextMessage(GPS_position);\n            sendData(\"AT+GPS=1\",1000,DEBUG); \n           }\n\n         }\n       }\n       GPS_position=\"\";\n       conta=0;                    // Reset the buffer\n       for (int i=0;i&lt;300;i++){    //  \n       linea[i]=' ';             \n       }                \n     }\n   }  \n   }\n}\n\nvoid SendTextMessage(String message)\n{ \n  sendData(\"AT+CMGF=1\",5000,DEBUG);            //Set the SMS in text mode\n  delay(100);\n  sendData(\"AT+CMGS=\"+target_phone,2000,DEBUG);//send sms message to the cellphone , be careful need to add a country code before the cellphone number\n  delay(100);\n  sendData(message,2000,DEBUG);                //the content of the message\n  delay(100);\n  Serial1.println((char)26);                  //the ASCII code of the ctrl+z is 26\n  delay(100);\n  sendData(\"\",1000,DEBUG);                     //Clear serial data\n  delay(100);\n}\n\nvoid sendData(String command, const int timeout, boolean debug)\n{\n    String response = \"\";    \n    Serial1.println(command); \n    long int time = millis();   \n    while( (time+timeout) &gt; millis()){\n      while(Serial1.available()){       \n        response += (char)Serial1.read(); \n      }  \n    }    \n    if(debug){\n      Serial.print(response);\n    }    \n}\n</code></pre>"},{"location":"Products/Arduino/32u4-with-a7-gprsgsm.html#resource","title":"Resource","text":"<ul> <li>32u4 with A7 GPRS/GSM+GPS eagle file</li> <li>A7_(GSM+GPRS+GPS+AGPS)_module_Hardware_introduction</li> </ul>"},{"location":"Products/Arduino/32u4-with-a9g-gprsgsmgps.html","title":"32u4 with A9G GPRS/GSM/GPS","text":""},{"location":"Products/Arduino/32u4-with-a9g-gprsgsmgps.html#introduction","title":"Introduction","text":"<p>The 32U4 with A9 GPRS/GSM/GPS Board is based on Mega32U4 and A9 GPRS/GSM/GPS module. It can be used to make a call, send text messages and get GPS positioning. Also it has one analog interface, one IIC interface and two digital interface, which you can connect to other expansion modules. It is very easy for you to make a GPS Tracker by using this board. It is also very easy to use AT firmware and use several AT commands can be configured successfully.</p> <p>Model: AMC01219U</p> <p></p> <p></p>"},{"location":"Products/Arduino/32u4-with-a9g-gprsgsmgps.html#features","title":"Features","text":"<ul> <li>ATMEGA32U4+A9G.</li> <li>Work voltage: 3.3V to 5V.</li> <li>Operating temperature\uff1a -30 \u2103 to + 80 \u2103.</li> <li>Three kinds of interface.</li> <li>Equipped with 3.5mm headphone jack.</li> <li>3.7V Battery power supply.</li> <li>Standby average current 3ma or less.</li> <li>Support the GSM / GPRS/ GPS Quad-band, including 850,900,1800,1900MHZ.</li> <li>Support China Mobile and China Unicom's 2G GSM network worldwide.</li> <li>GPRS Class 10.</li> <li>Sensitivity &lt; -105.</li> <li>Support GPS Positioning.</li> <li>Support for voice calls.</li> <li>Support for SMS text messaging.</li> <li>Support GPRS data business, the maximum data rate: download 85.6Kbps, upload 42.8Kbps.</li> <li>Supports standard GSM07.07, 07.05 AT commands and Ai-Thinker extended commands.</li> <li>Supports two serial ports, a serial port to download an AT command port.</li> <li>Support for Global Positioning System.</li> <li>Horizontal positioning accuracy of less than 2.5m.</li> <li>AT command supports the standard AT and TCP / IP command interface.</li> <li>Support digital audio and analog audio support for HR, FR, EFR, AMR speech coding.</li> <li>Support ROHS, FCC, CE, CTA certification.</li> </ul>"},{"location":"Products/Arduino/32u4-with-a9g-gprsgsmgps.html#pin-definitions","title":"Pin Definitions","text":""},{"location":"Products/Arduino/32u4-with-a9g-gprsgsmgps.html#specifications","title":"Specifications","text":"<ul> <li>The size of A9G: 19.2*18.8*3mm</li> <li>Quad-band: 850/900/1800/1900 MHz.</li> <li>GPRS multi-slot: 12, 1 to 12 can be configured.</li> <li>GPRS mobile station: Class B.</li> <li>Compatible with GSM Phase 2/2 +: Class 4 (2W @ 850/900 MHz) Class 1 (1W @ 1800 / 1900MHz).</li> <li>Current consumption: 1.3mA @ DRX = 5; 1.2mA @ DRX = 9.</li> <li>AT command control: Standard GSM07.07, 07.05 AT commands and Ai-Thinker extended commands.</li> <li>SIM Application Toolkit.</li> <li>GPRS Class 10: Up 85.6 kbps (upstream) &amp; 42.8Kbps (downlink).</li> <li>Dynamic Conditions Altitude &lt;18,000 meters (60,000 feet).</li> <li>Speed &lt;515 m / s (1000 nautical miles), acceleration &lt;4 g.</li> <li>PBCCH support.</li> <li>Coding scheme: CS 1, 2, 3, 4.</li> <li>Support CSD: Up 14.4 kbps.</li> <li>Support USSD.</li> <li>Stack: PPP / TCP / UDP / HTTP / FTP / SMTP / MUX</li> </ul>"},{"location":"Products/Arduino/32u4-with-a9g-gprsgsmgps.html#cautions","title":"Cautions","text":"<ul> <li>Make sure your SIM card is locked.</li> <li>This product is supplied as is, without an insulated housing. In high humidity weather, pay special attention to ESD precautions.</li> <li>It just supports baud rate 115200bps.</li> </ul>"},{"location":"Products/Arduino/32u4-with-a9g-gprsgsmgps.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Arduino/32u4-with-a9g-gprsgsmgps.html#usage","title":"Usage","text":""},{"location":"Products/Arduino/32u4-with-a9g-gprsgsmgps.html#1connect","title":"1.Connect","text":"<p>Let's start a simple test.</p> <p>1. Install the antenna.</p> <p>Two miniature coaxial RF connector is present on the back of the 32U4 with A9G GPRS/GSM/GPS Board to connect with a GSM antenna or a GPS antenna . The connector present on the 32U4 with A9G GPRS/GSM/GPS is called a U.FL connector.The GSM Antenna supplied with the GPRS Shield has an SMA connector (and not an RP-SMA connector) on it.The connection topology is shown in the diagram below:</p> <p> </p> <p>2. Insert the Micro SIM card into the SIM card holder.</p> <p>There is a SIM card holder on the back of the board. Both 1.8 volts and 3.0 volts SIM Cards are supported by this board, the SIM card voltage type is automatically detected. </p> <p>3. Connect the battery.</p> <p>Because the PC USB port output current is not enough\uff0cso you should connedct an 3.7V lithium battery to the battery port.</p> <p></p> <p>4. Upload the code</p> <p>Open your Arduino IDE, choose the file, choose the Arduino Leonardo Board.</p> <p>You can refer to this test code and upload it to your board: 32U4_with_A9_test</p> <p>5.Then open the SSCOM32. Please configure it as follows:</p> <p></p> <p>6.Now, you can use some AT commands to control the 32u4 with A9G GPRS/GSM/GPS.</p>"},{"location":"Products/Arduino/32u4-with-a9g-gprsgsmgps.html#resource","title":"Resource","text":"<p>32U4 with A9 eagle file</p> <p>32u4_with_A9G_GPS_test_step.pdf</p> <p>32U4_with_A9_test</p> <p>serial port tool SSCOM</p>"},{"location":"Products/Arduino/32u4-with-lora-rfm95-iot-board-868mhz.html","title":"32u4 with Lora RFM95 IOT Board-868MHz","text":""},{"location":"Products/Arduino/32u4-with-lora-rfm95-iot-board-868mhz.html#introduction","title":"Introduction","text":"<p>The 32u4 with Lora RFM95 IOT Board consists of the mega24u and the wireless RF module RFM95. The module can accomplish long distance transmission of data, that is, and it can provide long range spread spectrum communication and high anti-interference. It also has the function of transmitting data through the wall.This board is small and easy to carry,and it can be compatible with both USAR and I2C.The wireless transmission module is mainly used in remote control, telemetry, remote communication equipment, robot control, wireless communications and so on. Its high anti-interference can give your project a certain degree of convenience.</p> <p>Model: WIR01322B </p>"},{"location":"Products/Arduino/32u4-with-lora-rfm95-iot-board-868mhz.html#features","title":"Features","text":"<ul> <li>LoRaTM Modem</li> <li>Operating frequency: 868MHZ@RFM95</li> <li>Output power: 20dbm</li> <li>Maximum emission current: 120mA</li> <li>Current accepted: 12mA</li> <li>Sleep current 2ua</li> <li>Transmission rate: 300kbps</li> <li>Power: 3.7-5</li> </ul>"},{"location":"Products/Arduino/32u4-with-lora-rfm95-iot-board-868mhz.html#specifications","title":"Specifications","text":"<ul> <li>168 dB maximum link budget</li> <li>Excellent blocking immunity</li> <li>Compatible with I2C and USAR</li> <li>Rechargeable and uninterrupted</li> <li>Analog port and digital port</li> <li>Long distance</li> <li>Automated meter reading</li> <li>Built-in temperature sensor and low battery indicator</li> <li>Built-in bit synchronizer for clock recovery</li> <li>Dimensions(mm):62.0(L)x37.0(W)x9.0(H)</li> </ul>"},{"location":"Products/Arduino/32u4-with-lora-rfm95-iot-board-868mhz.html#interface-function","title":"Interface Function","text":"<p>ICSP:2.0mm spacing ICSP package</p>"},{"location":"Products/Arduino/32u4-with-lora-rfm95-iot-board-868mhz.html#usage","title":"Usage","text":""},{"location":"Products/Arduino/32u4-with-lora-rfm95-iot-board-868mhz.html#1connect","title":"1.Connect","text":"<p>a.Connect USB and the other end connect to PC.When the board is working properly, PMR LED turn on,as follow picture:</p> <p></p> <p>b.Connect any two pieces of board onto the computer by USB, the two antennas corresponding to each other, as shown in the following picture:</p> <p></p>"},{"location":"Products/Arduino/32u4-with-lora-rfm95-iot-board-868mhz.html#2download-the-file","title":"2.Download the file","text":"<p>1.Download the RadioHead library and put the RadioHead file under the Arduino IDE installation directory Library</p>"},{"location":"Products/Arduino/32u4-with-lora-rfm95-iot-board-868mhz.html#3download","title":"3.Download","text":"<p>3.Copy the following code, one is the sending program, one for the receiving program, downloaded to two boards:</p> <p>client code</p> <pre><code>// rf95_client.pde\n// -*- mode: C++ -*-\n// Example sketch showing how to create a simple messageing client\n// with the RH_RF95 class. RH_RF95 class does not provide for addressing or\n// reliability, so you should only use RH_RF95 if you do not need the higher\n// level messaging abilities.\n// It is designed to work with the other example rf95_server\n// Tested with Anarduino MiniWirelessLoRa, Rocket Scream Mini Ultra Pro with\n// the RFM95W, Adafruit Feather M0 with RFM95\n\n#include &lt;SPI.h&gt;\n#include &lt;RH_RF95.h&gt;\n\n// Singleton instance of the radio driver\n//RH_RF95 rf95;\nRH_RF95 rf95(10, 7); // Rocket Scream Mini Ultra Pro with the RFM95W\n//RH_RF95 rf95(8, 3); // Adafruit Feather M0 with RFM95 \n\n// Need this on Arduino Zero with SerialUSB port (eg RocketScream Mini Ultra Pro)\n//#define Serial SerialUSB\n\nvoid setup() \n{\n  // Rocket Scream Mini Ultra Pro with the RFM95W only:\n  // Ensure serial flash is not interfering with radio communication on SPI bus\n//  pinMode(4, OUTPUT);\n//  digitalWrite(4, HIGH);\n\n  Serial.begin(9600);\n  while (!Serial)\u00a0; // Wait for serial port to be available\n  if (!rf95.init())\n    Serial.println(\"init failed\");\n  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on\n\n  // The default transmitter power is 13dBm, using PA_BOOST.\n  // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then \n  // you can set transmitter powers from 5 to 23 dBm:\n//  driver.setTxPower(23, false);\n  // If you are using Modtronix inAir4 or inAir9,or any other module which uses the\n  // transmitter RFO pins and not the PA_BOOST pins\n  // then you can configure the power transmitter power for -1 to 14 dBm and with useRFO true. \n  // Failure to do that will result in extremely low transmit powers.\n//  driver.setTxPower(14, true);\n   if (!rf95.setFrequency(868.0)){\n    Serial.println(\"setFrequency failed\");\n    while(1)\n    ;\n    }\n}\n\nvoid loop()\n{\n  Serial.println(\"Sending to rf95_server\");\n  // Send a message to rf95_server\n  uint8_t data[] = \"Hello World!\";\n  rf95.send(data, sizeof(data));\n\n  rf95.waitPacketSent();\n  // Now wait for a reply\n  uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];\n  uint8_t len = sizeof(buf);\n\n  if (rf95.waitAvailableTimeout(3000))\n  { \n    // Should be a reply message for us now   \n    if (rf95.recv(buf, &amp;len))\n   {\n      Serial.print(\"got reply: \");\n      Serial.println((char*)buf);\n    }\n    else\n    {\n      Serial.println(\"recv failed\");\n    }\n  }\n  else\n  {\n    Serial.println(\"No reply, is rf95_server running?\");\n  }\n  delay(1000);\n}\n</code></pre> <p>server code</p> <pre><code>// -*- mode: C++ -*-\n// Example sketch showing how to create a simple messageing server\n// with the RH_RF95 class. RH_RF95 class does not provide for addressing or\n// reliability, so you should only use RH_RF95  if you do not need the higher\n// level messaging abilities.\n// It is designed to work with the other example rf95_client\n// Tested with Anarduino MiniWirelessLoRa, Rocket Scream Mini Ultra Pro with\n// the RFM95W, Adafruit Feather M0 with RFM95\n\n#include &lt;SPI.h&gt;\n#include &lt;RH_RF95.h&gt;\n\n// Singleton instance of the radio driver\n//RH_RF95 rf95;\n RH_RF95 rf95(10, 7); // Rocket Scream Mini Ultra Pro with the RFM95W\n//RH_RF95 rf95(8, 3); // Adafruit Feather M0 with RFM95 \n\n// Need this on Arduino Zero with SerialUSB port (eg RocketScream Mini Ultra Pro)\n//#define Serial SerialUSB\n\nint led = 9;\n\nvoid setup() \n{\n  // Rocket Scream Mini Ultra Pro with the RFM95W only:\n  // Ensure serial flash is not interfering with radio communication on SPI bus\n//  pinMode(4, OUTPUT);\n//  digitalWrite(4, HIGH);\n\n  pinMode(led, OUTPUT);     \n  Serial.begin(9600);\n  //while (!Serial)\u00a0; // Wait for serial port to be available\n  if (!rf95.init())\n    Serial.println(\"init failed\");  \n  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on\n\n  // The default transmitter power is 13dBm, using PA_BOOST.\n  // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then \n  // you can set transmitter powers from 5 to 23 dBm:\n//  driver.setTxPower(23, false);\n  // If you are using Modtronix inAir4 or inAir9,or any other module which uses the\n  // transmitter RFO pins and not the PA_BOOST pins\n  // then you can configure the power transmitter power for -1 to 14 dBm and with useRFO true. \n  // Failure to do that will result in extremely low transmit powers.\n//  driver.setTxPower(14, true)\n    if (!rf95.setFrequency(868.0)){\n    Serial.println(\"setFrequency failed\");\n    while(1)\n    ;\n    }\n}\n\nvoid loop()\n{\n  if (rf95.available())\n  {\n    // Should be a message for us now   \n    uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];\n    uint8_t len = sizeof(buf);\n    if (rf95.recv(buf, &amp;len))\n    {\n      digitalWrite(led, HIGH);\n//      RH_RF95::printBuffer(\"request: \", buf, len);\n      Serial.print(\"got request: \");\n      Serial.println((char*)buf);\n//      Serial.print(\"RSSI: \");\n//      Serial.println(rf95.lastRssi(), DEC);\n\n      // Send a reply\n      uint8_t data[] = \"And hello back to you\";\n      rf95.send(data, sizeof(data));\n      rf95.waitPacketSent();\n      Serial.println(\"Sent a reply\");\n       digitalWrite(led, LOW);\n    }\n    else\n    {\n      Serial.println(\"recv failed\");\n    }\n  }\n}\n</code></pre> <p></p>"},{"location":"Products/Arduino/32u4-with-lora-rfm95-iot-board-868mhz.html#4observe","title":"4.Observe","text":"<p>Open Arduino IDE serial monitor, and then observe the serial port debugging window display data, as shown in the following figure:</p> <p></p>"},{"location":"Products/Arduino/32u4-with-lora-rfm95-iot-board-868mhz.html#resource","title":"Resource","text":"<p>RadioHead library</p> <p>rf95_client</p> <p>rf95_server</p> <p>RFM95</p>"},{"location":"Products/Arduino/35-inch-tft-color-screen-module-320-x-480-support-arduino-uno-mega2560.html","title":"3.5 Inch TFT Color Screen Module 320 X 480 Support Arduino UNO Mega2560","text":""},{"location":"Products/Arduino/35-inch-tft-color-screen-module-320-x-480-support-arduino-uno-mega2560.html#description","title":"Description","text":"<p>This is a 3.5-inch 320 * 480 resolution TFT color screen. It supports working boards such as Arduino uno and Arduino mega2560 and Arduino due. Also supports STM32, 51 and other conventional microcontrollers. When using this screen, you do not need any wiring operations, just plug onto your arduino board, we will provide the corresponding Arduino library files, the development code is open source, you can use arduino and this screen to build some applications.The backlight always on, can not control the backlight, backlight is connect to 3.3V. Model: ARS36125D </p> <p></p>"},{"location":"Products/Arduino/35-inch-tft-color-screen-module-320-x-480-support-arduino-uno-mega2560.html#features","title":"Features","text":"<ul> <li>Supports development boards such as Arduino UNO and Mega2560 for plug-in use without wiring</li> <li>480X320 resolution, clear display, support for touch function</li> <li>Support 16-bit RGB 65K color display, display rich colors</li> <li>8-bit parallel bus, faster than serial SPI refresh</li> <li>On-board 5V/3.3V level shifting IC, compatible with 5V/3.3V operating voltage</li> <li>Easy to expand the experiment with SD card slot</li> <li>Provides an Arduino library with a rich sample program</li> <li>Military-grade process standards, long-term stable work</li> <li>Provide underlying driver technical support</li> </ul>"},{"location":"Products/Arduino/35-inch-tft-color-screen-module-320-x-480-support-arduino-uno-mega2560.html#specification","title":"Specification","text":"Item Value Display Color RGB 65K color Screen Size 3.5(inch) Type TFT Driver IC ILI9341 Resolution 480*320(Pixel) Module Interface 8-bit parallel interface Active Area 73.44*48.96(mm) Module PCB Size 85.49*55.63(mm) Operating Temperature -20\u2103~60\u2103 Storage Temperature -30\u2103~70\u2103 Operating Voltage 5V/3.3V Power Consumption TBD Product Weight(Package containing) 44g"},{"location":"Products/Arduino/35-inch-tft-color-screen-module-320-x-480-support-arduino-uno-mega2560.html#pin-layout","title":"Pin Layout","text":"No. Pin Label Pin Description 1 LCD_RST LCD bus reset signal, low level reset 2 LCD_CS LCD bus chip select signal, low level enable 3 LCD_RS LCD bus command / data selection signal, low level:command, high level:data 4 LCD_WR LCD bus write signal 5 LCD_RD LCD bus read signal 6 GND Power ground 7 5V 5V power input 8 3V3 3.3V power input, this pin can be disconnected 9 LCD_D0 LCD 8-bit data Bit0 10 LCD_D1 LCD 8-bit data Bit1 11 LCD_D2 LCD 8-bit data Bit2 12 LCD_D3 LCD8-bit data Bit3 13 LCD_D4 LCD 8-bit data Bit4 14 LCD_D5 LCD 8-bit data Bit5 15 LCD_D6 LCD 8-bit data Bit6 16 LCD_D7 LCD 8-bit data Bit7 17 SD_SS SD card SPI bus chip select signal, low level enable 18 SD_DI SD card SPI bus MOSI signal 19 SD_DO SD card SPI bus MISO signal 20 SD_SCK SD card SPI bus clock signal"},{"location":"Products/Arduino/35-inch-tft-color-screen-module-320-x-480-support-arduino-uno-mega2560.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Arduino/35-inch-tft-color-screen-module-320-x-480-support-arduino-uno-mega2560.html#usage","title":"Usage","text":""},{"location":"Products/Arduino/35-inch-tft-color-screen-module-320-x-480-support-arduino-uno-mega2560.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs: </p> Crowduino Uno 3.5 Inch TFT Color Screen Module Get one now Get one now <p>STEP2 Plug 2.4 inch TFT Touch Shield into Crowduino Uno; </p> <p>STEP3 Connect Crowduino Uno to PC via a Mini USB cable.</p>"},{"location":"Products/Arduino/35-inch-tft-color-screen-module-320-x-480-support-arduino-uno-mega2560.html#software","title":"Software","text":"<p>STEP 1 Download filesArduino_Demo_code_ArduinoUNO&amp;26Mega2560.zip </p> <p>STEP 2 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201dfrom the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure. </p> <p>STEP 3 Install Library: Unzip the Arduino Demo code_ArduinoUNO&amp;Mega2560.zip file. Copy the dependent libraries in the Install libraries directory in the package (shown below) to the Libraries directory under the Arduino installation directory </p> <p>STEP 4 Open the sample program in the Example directory of the package to test </p> <p>STEP 5 Click the  to upload the code to the Crowduino board  </p> <p>STEP6 After the program is downloaded, run it directly and observe the running status. If it can be displayed normally, the program runs successfully </p>"},{"location":"Products/Arduino/35-inch-tft-color-screen-module-320-x-480-support-arduino-uno-mega2560.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Arduino/35-inch-tft-color-screen-module-320-x-480-support-arduino-uno-mega2560.html#resources","title":"Resources","text":"<p>Arduino_Demo_code_ArduinoUNO&amp;26Mega2560.zip ILI9341_Datasheet.pdf</p>"},{"location":"Products/Arduino/Crowduino-v1.0.html","title":"Crowduino v1.0","text":""},{"location":"Products/Arduino/Crowduino-v1.0.html#description","title":"Description","text":"<p>We sale Crowduio V1.1 now, it is almost the same as Crowduino V1.0. it added wireless programming function using 2 XBee module. please visit Crowduino V1.1 wiki for more details.</p> <p>The Crowduino is Arduino compatible board. Based on arduino Duemilanuve Schematic, 100% compatible to its existing program, shield and IDEs.</p> <p>it is a microcontroller board based on the ATmega328 (datasheet). It has 14 digital input/output pins (of which 6 can be used as PWM outputs), 6 analog inputs, a 16 MHz ceramic resonator, a USB connection, a power jack, an ICSP header, a reset button, and a XBee socket. It contains everything needed to support the microcontroller; simply connect it to a computer with a USB cable or power it with a AC-to-DC adapter or battery to get started.</p> <p>Crowduino differs from all preceding boards in that it contains Shield and XBee socket . it adapts to all the shield that compatible with arduino Uno. it also adapts to the Xbee modules from Digi,and any module with the same footprint.</p> <p>Model MCA01328A</p> <p></p>"},{"location":"Products/Arduino/Crowduino-v1.0.html#summary","title":"Summary","text":"Microcontroller ATmega328 Operating Voltage 5v Input Voltage (recommended) 7-12V Input Voltage (limits) 6-20V Digital I/O Pins 14 (of which 6PINs provide PWM output) Analog Input Pins 8 DC Current per I/O Pin 40mA DC Current for 3.3V Pin 50 mA Flash Memory 32 KB (ATmega328) of which 0.5 KB used by bootloader SRAM 2 KB (ATmega328) EEPROM 1 KB (ATmega328) Clock Speed 16 MHz"},{"location":"Products/Arduino/Crowduino-v1.0.html#features","title":"Features","text":"<ul> <li>It contains Bee Shield that you can wireless communicate to the microcontroller</li> <li>Flat DC Jack.</li> <li>Inherits all of Arduino Duemilanuve's features.</li> <li>Compatible to Uno's pin layout, screw hole and dimensions.</li> <li>Evolved with SMD components.</li> </ul>"},{"location":"Products/Arduino/Crowduino-v1.0.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Arduino/Crowduino-v1.0.html#usage","title":"Usage","text":"<p>Except 100% compatible with Arduino,Crowduino has another funtion that it also adapts to the Xbee modules from Digi,and other Bee module with the same footprint.</p>"},{"location":"Products/Arduino/Crowduino-v1.0.html#faq","title":"FAQ","text":"<p>There are a number of switches that I am unsure of the function of, not having seen them on another Arduino board:</p> <p>Q: 3V3_VCC_5V: Does this convert the entire board to output 3V3 or 5V, or is it input voltage?</p> <p>A: This is the input voltage choice switch. If you push the switch to 3v3, and set the output pin to high, the votage of it is 3v3. If you push the switch to 5v, and set the output pin to high, the votage of it is 5v.</p> <p>Q :What does the \"serial select\" switch do?</p> <p>A: This switch is to choose Rx, Tx PIN of XBee connect to RX, TX of atmega328 or RX, TX of XBee connect to TX, RX pin of atmega328. The theory is that if you connect the RX pin of XBee to TX pin of atmega328, The Xbee or XBee compatible Bee can communicate with atmega328 through Serial port. if you connect the RX pin of XBee to the RX pin of atmega328, the RX pin of XBee will connect to the TX of FTDI, the XBee can commucate with you computer through Serial port.</p>"},{"location":"Products/Arduino/Crowduino-v1.0.html#resources","title":"Resources","text":"<ul> <li>Crowduino Schematic in PDF</li> <li>Crowduino eagle files</li> </ul>"},{"location":"Products/Arduino/Crowduino-v1.0.html#how-to-buy","title":"How to buy","text":"<p>Please visit this page to purchase Crowduino.</p>"},{"location":"Products/Arduino/Crowduino-v1.0.html#support","title":"Support","text":"<p>If you have any problem about how to use it, you can connect to us at the bottom-right of bazzer or contact to techsupport@elecrow.com to get technology support.</p>"},{"location":"Products/Arduino/Crowduino-v1.1.html","title":"Crowduino v1.1","text":""},{"location":"Products/Arduino/Crowduino-v1.1.html#description","title":"Description","text":"<p>Crowuino V1.1 is almost the same as Crowduino V1.0. It adds Wireless program funtion and improved a little that the RX and TX will be lighting when only plug 9v DC supply in the version 1.0. it will be lighting only when program the 328 now.</p> <p>The Crowduino is Arduino compatible board. Based on arduino Duemilanuve Schematic, 100% compatible to its existing program, shield and IDEs.</p> <p>it is a microcontroller board based on the ATmega328 (datasheet). It has 14 digital input/output pins (of which 6 can be used as PWM outputs), 6 analog inputs, a 16 MHz ceramic resonator, a USB connection, a power jack, an ICSP header, a reset button, and a XBee socket. It contains everything needed to support the microcontroller; simply connect it to a computer with a USB cable or power it with a AC-to-DC adapter or battery to get started.</p> <p>Crowduino differs from all preceding boards in that it contains Shield and XBee socket . it adapts to all the shield that compatible with arduino Uno. it also adapts to the Xbee modules from Digi,and any module with the same footprint.</p> <p>Model MCA01328A</p> <p></p>"},{"location":"Products/Arduino/Crowduino-v1.1.html#summary","title":"Summary","text":"Microcontroller ATmega328 Operating Voltage 5v Input Voltage (recommended) 7-12V Input Voltage (limits) 6-20V Digital I/O Pins 14 (of which 6PINs provide PWM output) Analog Input Pins 8 DC Current per I/O Pin 40mA DC Current for 3.3V Pin 50 mA Flash Memory 32 KB (ATmega328) of which 0.5 KB used by bootloader SRAM 2 KB (ATmega328) EEPROM 1 KB (ATmega328) Clock Speed 16 MHz"},{"location":"Products/Arduino/Crowduino-v1.1.html#features","title":"Features","text":"<ul> <li>It contains Bee Shield that you can wireless communicate to the microcontroller</li> <li>Flat DC Jack.</li> <li>Inherits all of Arduino Duemilanuve's features.</li> <li>Compatible to Uno's pin layout, screw hole and dimensions.</li> <li>Evolved with SMD components.</li> <li>Dimensions(mm):70.0(L)x58.3(W)x11.8(H)</li> </ul>"},{"location":"Products/Arduino/Crowduino-v1.1.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Arduino/Crowduino-v1.1.html#usage","title":"Usage","text":"<p>Except 100% compatible with Arduino,Crowduino has another funtion that it also adapts to the Xbee modules from Digi,and other Bee module with the same footprint.</p>"},{"location":"Products/Arduino/Crowduino-v1.1.html#wireless-program","title":"Wireless program","text":"<p>Hardware needed: 1. Crowduino V1.1 2. Two XBee module. 3. USBSerial Adapter. 4. USB cable. </p> <p>Software needed: 1. Arduino IDE 2. X-CUT software </p> <p>Configure the XBee Module</p>"},{"location":"Products/Arduino/Crowduino-v1.1.html#step-1-configure-the-transmitter","title":"Step 1. Configure the transmitter","text":"<p>One XBee will act as the 'reset transmitter', it will be attached to the computer via USBSerial adapter and wireless send programming commands to the receiver. Lets set this one up first</p> <p>Connect XBee modem to your computer using USBSrial Adapter. Note: push the switch to 3V3.</p> <p></p> <p>And start to configure the X-CTU.</p> <p></p> <p>Once you've connected/tested that you can communicate with the modem, go to the configure tab and read in the current setup</p> <p>Then set the following:</p> <p>The PAN ID should be some 4 digit hex number that will only be used by these two modems - to prevent confusion</p> <p></p> <p>Set the baud rate to 57600.</p> <p></p> <p>Next we'll set the Packetization Timeout. This is what determines how long to wait before sending the characters over. We're doing some 'bulk transfer' when sending 10K programs over, so you'll probably want this number high like 10</p> <p></p> <p>Set pin D3 to be a digital input</p> <p></p> <p>And set the Digital IO change detect to FF. Technically you can set it to 0x08, which is the mask to listen for only D3 but this certainly works fine.</p> <p></p> <p>Then press the Write Button, the transmitter is set up to send the current status of pin D3 to any listening modems. Note: If one of the steps is set to wrong.press the restore button, then set all of the steps again.</p> <p></p> <p>Finally setup the USBSerail Adapter so that the RTS pin will reset the Arduino. For Mac/Linux it will already be done but if you're using Windows you'll need to make a slight change to the driver preferences. In the Device Manager, select the USB COM port</p> <p></p> <p>Then right click and select Properties</p> <p></p> <p>Click on the Port Settings tab, and click on Advanced...</p> <p></p> <p>Make sure Set RTS On Close is selected. Click OK.</p>"},{"location":"Products/Arduino/Crowduino-v1.1.html#step-2-configure-the-receiver","title":"Step 2. Configure the receiver","text":"<p>Now we will set up the other XBee so that it will listen to changes on pin D3. Connect it to the FTDI cable and read in the current configuration just like the first one.</p> <p>The PAN ID should match the transmitter's</p> <p></p> <p>Set the baud rate to 57600 to match the transmitter, again</p> <p></p> <p>Next we'll set the Packetization Timeout. This is what determines how long to wait before sending the characters over. We're doing some 'bulk transfer' when sending 10K programs over, so you'll probably want this number high like 10</p> <p></p> <p>Set pin D3 to be a digital output, default LOW.</p> <p></p> <p>Set the I/O Output to Disabled. This will prevent the receiver from displaying the status update in the serial line and instead just toggle the matching pin.</p> <p></p> <p>Finally, set I/O line passing input address to FFFF. If you set up unique addresses for the receiver and transmitter xbees, of course you should change this to match but FFFF will match all addresses.</p> <p></p> <p></p> <p>Now write the changes to the receiver XBee.</p>"},{"location":"Products/Arduino/Crowduino-v1.1.html#step-3-hardware-install","title":"Step 3. Hardware install","text":"<p>solder to connect JP1 at the bottom of Crowduino V1.1.  Plug the receiver XBee to Crowduino, Plug the transmitter XBee to USBSerial Adapter. Power the Crowduino via DC 9v power supply or USB, connect the USB serial Adapter to computer via USB.  Now you can reprogram the Crowduino and also watch the serial monitor from more than 100 feet away. Don't forget the serial monitor must be at the same baud rate as programming because the XBees can only talk at their configured baud rate.</p>"},{"location":"Products/Arduino/Crowduino-v1.1.html#faq","title":"FAQ","text":"<p>There are a number of switches that I am unsure of the function of, not having seen them on another Arduino board:</p> <p>Q: 3V3_VCC_5V: Does this convert the entire board to output 3V3 or 5V, or is it input voltage?</p> <p>A: This is the input voltage choice switch. If you push the switch to 3v3, and set the output pin to high, the votage of it is 3v3. If you push the switch to 5v, and set the output pin to high, the votage of it is 5v.  </p> <p>Q :What does the \"serial select\" switch do?</p> <p>A: This switch is to choose Rx, Tx PIN of XBee connect to RX, TX of atmega328 or RX, TX of XBee connect to TX, RX pin of atmega328. The theory is that if you connect the RX pin of XBee to TX pin of atmega328, The Xbee or XBee compatible Bee can communicate with atmega328 through Serial port. if you connect the RX pin of XBee to the RX pin of atmega328, the RX pin of XBee will connect to the TX of FTDI, the XBee can commucate with you computer through Serial port.</p>"},{"location":"Products/Arduino/Crowduino-v1.1.html#resources","title":"Resources","text":"<ul> <li>Crowduino Schematic in PDF</li> <li>Crowduino V1.1 eagle files</li> <li>Adafruit XBee radios Wireless Arduino programming/serial link</li> <li>X-CUT software</li> </ul>"},{"location":"Products/Arduino/Crowduino-v1.1.html#how-to-buy","title":"How to buy","text":"<p>Please visit this page to purchase Crowduino.</p>"},{"location":"Products/Arduino/Crowduino-v1.1.html#support","title":"Support","text":"<p>If you have any problem about how to use it, you can connect to us at the bottom-right of bazzer or contact to techsupport@elecrow.com to get technology support.</p>"},{"location":"Products/Arduino/arduino-cnc-shield.html","title":"Arduino CNC Shield","text":""},{"location":"Products/Arduino/arduino-cnc-shield.html#description","title":"Description","text":"<p>What projects can this be used for?  -Small CNC routers, DIY Laser Cutters, 3D Printers and almost any project where you need to control a stepper motors with high precision.  At Protoneer we designed this simple Arduino CNC shield kit (Arduino Extension Board) with the following features:  New with Version 3.51: Added circuitry for End-Stop and Probe signal filtering. This eliminates false triggers and makes it possible use non-shielded cable for end-stops/probes. Bigger Solder pads making it easier to assemble. Probe pin labels have been updated to make it easier to install a probe. Model: CDP03051C </p> <p></p> <p></p>"},{"location":"Products/Arduino/arduino-cnc-shield.html#features","title":"Features","text":"<ul> <li>Includes Noise Filers on all endstops and the probing pin.(New in V3.51)</li> <li>GRBL 0.9 compatible. (Open source firmware that runs on an Arduino UNO that turns G-code commands into stepper signals https://github.com/grbl/grbl)</li> <li>4-Axis support (X, Y, Z , A-Can duplicate X,Y,Z or do a full 4<sup>th</sup> axis with custom firmware using pins A4 and A3)</li> <li>2 x End stops for each axis (6 in total)</li> <li>Coolant enable</li> <li>Uses removable Pololu A4988 compatible stepper drivers. (A4988, DRV8825 and others)(Not Included)</li> <li>Jumpers to set the Micro-Stepping for the stepper drivers. (Some drivers like the DRV8825 can do up to 1/32 micro-stepping )</li> <li>Compact design.</li> <li>Stepper Motors can be connected with 4 pin molex connectors or soldered in place. .</li> <li>Runs on 12-36V DC. (At the moment only the Pololu DRV8825 drivers can handle up to 36V so please consider the operation voltage when powering the board.)</li> </ul>"},{"location":"Products/Arduino/arduino-cnc-shield.html#faqs","title":"FAQS","text":"<ul> <li>What is a CNC router? http://en.wikipedia.org/wiki/CNC_router</li> <li>What is GRBL?An open source, embedded, high performance g-code-parser and CNC milling controller written in optimized C that runs on an Arduino UNO. ttps://github.com/grbl/grbl</li> <li>What is Arduino? http://en.wikipedia.org/wiki/Arduino</li> <li>What Pololu stepper driver can it use? Pololu A4988 - http://www.pololu.com/catalog/product/1182 or Pololu DRV8825 http://www.pololu.com/catalog/product/2133 works well. Both of these driver are available at Elecrow.</li> <li>A4988 Stepper Motor Driver https://www.elecrow.com/a4988-stepper-motor-driver-module.html</li> <li>For more question, please visit forum.protoneer.co.nz</li> </ul>"},{"location":"Products/Arduino/crowduino-leonardo.html","title":"Crowduino Leonardo","text":""},{"location":"Products/Arduino/crowduino-leonardo.html#introduction","title":"Introduction","text":"<p>The Crowduino Leonardo is a microcontroller board that completely compatible with the Arduino Leonardo. It is based on the ATmega32u4. It has 20 digital input/output pins (of which 7 can be used as PWM outputs and 12 as analog inputs), a 16 MHz crystal oscillator, a micro USB connection, a power jack, an ICSP header, and a reset button. It contains everything needed to support the microcontroller; simply connect it to a computer with a USB cable or power it with a AC-to-DC adapter or battery to get started. The Leonardo differs from all preceding boards in that the ATmega32u4 has built-in USB communication, eliminating the need for a secondary processor. This allows the Leonardo to appear to a connected computer as a mouse and keyboard, in addition to a virtual (CDC) serial / COM port.</p> <p>Model: ACA32U4CL </p>"},{"location":"Products/Arduino/crowduino-leonardo.html#features","title":"Features","text":"<p>Microcontroller: ATmega32u4 T Working Frequency: 16MHz Digital I/O Pins: 20 PWM Channels:7 DC Current per I/O Pin 40mA DC Current for 3.3V Pin: 50mA Flash Memory: 32KB of which 4KB used by bootloader SRAM:2.5KB EEPROM: 32KB Power Supply: USB 5V or External Power 7~12V I/O Logic:3.3V/5V Dimensions(mm):70.0(L)x55.0(W)x11.8(H)</p>"},{"location":"Products/Arduino/crowduino-leonardo.html#resources","title":"Resources","text":"<ul> <li>Arduino Leonardo</li> <li>ATmega32u4 datasheet</li> <li>Crowduino Leonardo eagle files</li> </ul>"},{"location":"Products/Arduino/crowduino-m0--sd.html","title":"Crowduino M0- SD","text":""},{"location":"Products/Arduino/crowduino-m0--sd.html#description","title":"Description","text":"<p>A simple, yet powerful, 32-bit extension of the Arduino UNO platform. And we design this Crowduino- M0-SD board for you. This board also powered by Atmel\u2019s SAMD21 MCU, featuring a 32-bit ARM Cortex\u00ae M0 core. The power of its Atmel\u2019s core gives this board an upgraded flexibility and boosts the scope of projects one can think of and make; moreover, it makes the M0 the ideal educational tool for learning about 32-bit application development. With the new Crowduino M0-SD board, the more creative individual will have the potential to create one\u2019s most imaginative and new ideas for IoT devices, wearable technologies, high tech automation, wild robotics and other not yet thinkable adventures in the world of makers. The Crowduino- M0-SD can be powered via the micro USB connection or with an external power supply. The power source is selected automatically. And you can use it with SD card for saving more data. Module\uff1aACM36620M</p> <p></p> <p></p>"},{"location":"Products/Arduino/crowduino-m0--sd.html#features","title":"Features","text":"<ul> <li>SD card for saving more data</li> <li>Each of the 14 digital i/o pins on the M0 can be used as an input or output</li> <li>The ATSAMD21G18 has 256 KB of flash program memory (with 4 KB used for the bootloader)</li> <li>32 KB of SRAM and up to 16KB by emulation of EEPROM</li> <li>USB Overcurrent Protection</li> <li>The Crowduino M0-SD can be programmed with the Arduino software</li> <li>The SAMD21 also supports TWI and SPI communication</li> <li>The Crowduino- M0-SD is ideal for projects demanding high computing power.</li> </ul>"},{"location":"Products/Arduino/crowduino-m0--sd.html#specifications","title":"Specifications","text":"Item Value Micro controller ATSAMD21G18, 48pins LQFP Architecture ARM Cortex-M0+ Operating Voltage 3.3V Flash memory 256KB SRAM 32KB Clock Speed 48MHZ Analog I/O Pins 6+1ADC DC Current per I/O Pins 7mA Input Voltage 5-15V Digital I/O Pins 20, with 12 PWM and UART PWM Output 12 Power Consumption 29mA"},{"location":"Products/Arduino/crowduino-m0--sd.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Arduino/crowduino-m0--sd.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Arduino/crowduino-m0--sd.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Arduino/crowduino-m0--sd.html#resources","title":"Resources","text":"<p>Crowduino_M0_SD_Eagle_file.zip</p>"},{"location":"Products/Arduino/crowduino-mega2560.html","title":"Crowduino Mega2560","text":""},{"location":"Products/Arduino/crowduino-mega2560.html#introduction","title":"Introduction","text":"<p>Elecrow Crowduino Mega2560 board, almost the same usage and performance with the Arduino Mega2560 but with some difference on the power circuit to ensure the power. Based on the ATmega2560. The Elecrow Mega2560 has 54 digital input/output pins (of which 15 can be used as PWM outputs), 16 analog inputs, 4 UARTs (hardware serial ports), a 16 MHz crystal oscillator, a USB connection, a power jack, an ICSP header, and a reset button. With more IOs and larger flash than the Crowduino Uno_SD or Crowduino 328, the Crowduino Mega2560 would be helpful in applications that needs more IOs or larger flash such as in 3D printer projects. It also comes with a type-B USB wire to enable you start the project once you get it in hand.</p> <p>Model: ACA2560MEG </p>"},{"location":"Products/Arduino/crowduino-mega2560.html#features","title":"Features","text":"<p>100% compatible with Arduino Mega 54 Digital IO 16 Analog inputs 14 PWM outputs 4 Hardware serial ports (UART) Compatible with most Arduino Duemilanove and Diecimila Shields ICSP Header Can be powered through a battery or through a AC to DC adaptor</p>"},{"location":"Products/Arduino/crowduino-mega2560.html#specifications","title":"Specifications","text":"<p>Microcontroller: ATmega2560  Operating Voltage: 5V Input Voltage (recommended): 7-12V Input Voltage (limits): 6-20V Digital I/O Pins: 54 (of which 15 provide PWM output) Analog Input Pins: 16 DC Current per I/O Pin: 40 mA DC Current for 3.3V Pin: 50 mA Flash Memory: 256 KB of which 8 KB used by bootloader SRAM: 8 KB EEPROM: 4 KB Clock Speed: 16 MHz Dimensions(mm):108.0(L)x53.0(W)x14.0(H)</p>"},{"location":"Products/Arduino/crowduino-mega2560.html#resources","title":"Resources","text":"<ul> <li>Arduino Home Page</li> <li>Programming Reference</li> <li>Product Page</li> <li>Arduino Forum</li> </ul>"},{"location":"Products/Arduino/crowduino-nano-v31.html","title":"Crowduino-Nano-V3.1","text":""},{"location":"Products/Arduino/crowduino-nano-v31.html#introduction","title":"Introduction","text":"<p>The Nano 328 is a small, complete, and breadboard-friendly board based on the ATmega328 (Arduino Nano 3.0) or ATmega168 (Arduino Nano 2.x).It have an integrated on-board USB. As the function, It has almost all the analog and digital pins that the UNO or Duemilanove has and the same function as Duemilanove or UNO. This Nano 328(Arduino compatible) can go with the IO Shield for Arduino Nano, it would be more friendly and convenient for users to enter the Arduino world and make use of Arduino to make their dream into reality. As an upgrade version of Arduino Nano, This Nano 328 is 100% compatible to Arduino Nano and its shield and IDEs. On the hardware part, remarkable changes are taken to improve the flexibility and user experience.</p> <p>Model: MCA03328A </p>"},{"location":"Products/Arduino/crowduino-nano-v31.html#features","title":"Features","text":"<p>Power OK red LED, Green (TX), green (RX) and green (L) LED Upgraded 5V voltage sourcing, more powerful drive capability Mini-B USB for programming and serial monitor, TX&amp;RX breakout for application as USB-UART convertor Surface-Mount ICSP header Standard 2.54mm spacing DIP (breadboard friendly)</p>"},{"location":"Products/Arduino/crowduino-nano-v31.html#specifications","title":"Specifications","text":"<p>Microcontroller: ATmega328 Operating Voltage(logic level): 5V Input Voltage(recommended): 7-12 V Input Voltage(limits): 6-20 V Digital I/O Pins: 14 (of which 6 provide PWM output) Analog Input Pins: 8 DC Current per I/O Pin: 40 mA Flash Memory: 16 KB (ATmega168) or 32 KB (ATmega328) of which 2 KB used by bootloader SRAM: 1 KB (ATmega168) or 2 KB (ATmega328) EEPROM: 512 bytes (ATmega168) or 1 KB (ATmega328) Clock Speed: 16 MHz Dimension(mm):45.0(L)x18.0(W)x18.7(H)  </p>"},{"location":"Products/Arduino/crowduino-nano-v31.html#power","title":"Power","text":"<p>The Arduino Nano can be powered via the Mini-B USB connection, 6-20V unregulated external power supply (pin 30), or 5V regulated external power supply (pin 27). The power source is automatically selected to the highest voltage source. The FTDI FT232RL chip on the Nano is only powered if the board is being powered over USB. As a result, when running on external (non-USB) power, the 3.3V output (which is supplied by the FTDI chip) is not available and the RX and TX LEDs will flicker if digital pins 0 or 1 are high.</p>"},{"location":"Products/Arduino/crowduino-nano-v31.html#memory","title":"Memory","text":"<p>The ATmega168 has 16 KB of flash memory for storing code (of which 2 KB is used for the bootloader); the ATmega328 has 32 KB, (also with 2 KB used for the bootloader). The ATmega168 has 1 KB of SRAM and 512 bytes of EEPROM (which can be read and written with the EEPROM library); the ATmega328 has 2 KB of SRAM and 1 KB of EEPROM.</p>"},{"location":"Products/Arduino/crowduino-nano-v31.html#resources","title":"Resources","text":"<ul> <li>Schematic</li> <li>Arduino Nano</li> </ul>"},{"location":"Products/Arduino/crowduino-pro-mini.html","title":"Crowduino Pro Mini","text":""},{"location":"Products/Arduino/crowduino-pro-mini.html#introduction","title":"Introduction","text":"<p>This Pro Mini version is 100% compatible with the original Arduino Pro mini. We add two analog IO - A6, A7 , and Power Input side add auto recovery insurance, and be allowed USB and Power Supply at same time. It is a microcontroller board based on the ATmega328 (datasheet). It has 14 digital input/output pins (of which 6 can be used as PWM outputs), 8 analog inputs, an on-board resonator, a reset button, and holes for mounting pin headers. A six pin header can be connected to an FTDI cable or USBSerial Adapter to provide USB power and communication to the board. This is a 5V Arduino running the 16MHz bootloader (select 'Arduino Duemilanove w/ 328' within the Arduino software). Arduino Pro Mini does not come with connectors populated so that you can solder in any connector or wire with any orientation you need. We recommend first time Arduino users start with the Crowduino or Arduino Duemilanove. It's a great board that will get you up and running quickly. The Arduino Pro series is meant for users that understand the limitations of system voltage (5V), lack of connectors, and USB off board.</p> <p>Model: MCA03328M </p>"},{"location":"Products/Arduino/crowduino-pro-mini.html#features","title":"Features","text":"<p>ATmega328 running at 16MHz with external resonator (0.5% tolerance) 5V regulator DC input 5V up to 12V 14 digital IO - TXD, RXD, D2-D13 8 analog IO - A0-A7 Reverse polarity protected Board dimensions(mm):33.5(L)x18.0(W)x4.0(H)</p>"},{"location":"Products/Arduino/crowduino-pro-mini.html#resources","title":"Resources","text":"<ul> <li>Arduino Pro Mini Homepage</li> <li>Getting Started Tutorial</li> </ul>"},{"location":"Products/Arduino/crowduino-uno-sd.html","title":"Crowduino Uno-SD","text":""},{"location":"Products/Arduino/crowduino-uno-sd.html#description","title":"Description","text":"<p>The Crowduino Uno-SD mainboard is a microcontroller board that completely compatible with the Arduino UNO. It is based on the Atmega328P, which is widely also used in the Arduino Uno and other Arduino compatible boards. Compared to the previous Crowduino with Atmega328, the Uno SD mainboard uses the Atmega16U2, instead of the FTDI232 for the USB2UART conversation, which makes the program downloading much faster. Besides, there is a SD card slot on the Uno-SD board, making this board more convenient for applications such as data logging/ environment monitoring.</p> <p>Same as the crowduino with Atmega168, the Uno-SD board also has 14 digital input/output pins (of which 6 can be used as PWM outputs), 6 analog inputs, a 16 MHz ceramic resonator, a USB connection, a power jack, an ICSP header, a reset button, and of course a Mini USB cable, simply connect it to a computer with a USB cable or power it with a AC-to-DC adapter or battery to get started.</p> <p>Model: MCA02328UNO</p> <p></p>"},{"location":"Products/Arduino/crowduino-uno-sd.html#summary","title":"Summary","text":"Microcontroller ATmega328 Operating Voltage 3.3V or 5v Input Voltage (recommended) 7-12V Input Voltage (limits) 6-20V Digital I/O Pins 14 (of which 6PINs provide PWM output) Analog Input Pins 6 DC Current per I/O Pin 40mA DC Current for 3.3V Pin 50 mA Flash Memory 32 KB (ATmega328) of which 0.5 KB used by bootloader SRAM 2 KB (ATmega328) EEPROM 1 KB (ATmega328) Clock Speed 16 MHz"},{"location":"Products/Arduino/crowduino-uno-sd.html#features","title":"Features","text":"<ul> <li>On-board SD card slot;</li> <li>Flat DC Jack.</li> <li>Inherits all of Arduino Uno's features.</li> <li>Compatible to Uno's pin layout, screw hole and dimensions.</li> <li>Evolved with SMD components.</li> <li>Dimensions(mm):70.0(L)x55.0(W)x11.8(H)</li> </ul>"},{"location":"Products/Arduino/crowduino-uno-sd.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Arduino/crowduino-uno-sd.html#usage","title":"Usage","text":"<p>The Crowduino Uno-SD board has almost the same usage with that of Crowduino with Atmega328, except the follows:</p>"},{"location":"Products/Arduino/crowduino-uno-sd.html#program-downloading","title":"Program Downloading","text":"<p>With the Atmega16U2, downloading program to the Uno-SD board would be much faster than that of Crowudino with Atmega328, but notice that you should select the Arduino Uno when selecting the board. </p>"},{"location":"Products/Arduino/crowduino-uno-sd.html#readwrite-sd-card","title":"Read&amp;Write SD Card","text":"<p>There is a SD card slot on the Uno-SD card board, with which you can easily use SD card to record and thus to read data on the SD card.The SD card uses the SPI interface (D10/D11/D12) plus a CS Pin (D3 or D4) to cominicate with the main microcontroller Atmega328. First, Select the CS Pin you want to use with jumper. To make your project more flexible, you can select either the D3 or D4 pin as your CS pin for SD card. The default is D4. If your D4 have been applied for other modules, you can select the D3, but notice to modify related files in your program, which we will discuss later.  And then download the related library here to start using the SD card. Notice if your select the D3 as your SD card CS pin, you should modify a littele when initlize the SD card in your program:</p> <pre><code>if (!SD.begin(4)) {     // modify to SD.begin(3) when using D3 as CS pin\n   Serial.println(\"initialization failed!\");\n   return;\n }\n Serial.println(\"initialization done.\");\n</code></pre>"},{"location":"Products/Arduino/crowduino-uno-sd.html#note","title":"Note","text":"<p>For version Crowduino Uno-SD V1.4, There is a little difference with Arduino UNO that the LED contact with the PB5/D13. PB5/D13 contact the LED with Reverse follower. Please have a look at the following picture.   hat will make the High and LOW values is inverted when control the LED with D13.</p>"},{"location":"Products/Arduino/crowduino-uno-sd.html#resources","title":"Resources","text":"<ul> <li>Crowduino Uno-SD Schematic in PDF </li> </ul>"},{"location":"Products/Arduino/crowduino-uno-sd.html#support","title":"Support","text":"<p>If you have any problem about how to use it, you can connect to us at the bottom-right of bazzer or contact to techsupport@elecrow.com to get technology support.</p>"},{"location":"Products/Arduino/crowduino.html","title":"Crowduino","text":"Crowduino v1.0 Crowduino v1.1"},{"location":"Products/Arduino/easy-module-shield-for-arduino-uno.html","title":"Easy Module Shield for Arduino UNO","text":""},{"location":"Products/Arduino/easy-module-shield-for-arduino-uno.html#description","title":"Description","text":"<p>The board is designed for beginners in Arduino, with various components available that makes you build more than 10 projects easily. You won\u2019t have to solder or connect anything at all, just plug it in a shield and start coming up with various simple examples rather than dealing with cables, sensors and breadboard. Next to each component you can see the digital on analog pin it is connected to. Also there are couple of digital pins and one analog pin available for other projects. This shield can be fully compatible with the Arduino UNO R3 and it will never short circuit with the Arduino UNO USB interface, so it is very safe. Module: ARS03218S </p> <p></p>"},{"location":"Products/Arduino/easy-module-shield-for-arduino-uno.html#features","title":"Features","text":"<ul> <li>Fully compatible with Arduino UNO R3 interfaces</li> <li>Providing Arduino beginners basic experimental module</li> <li>A board integrates various modules function</li> <li>Without welding and connection, you can download the program directly to complete the experiment</li> <li>Provide all the module code library files, all tested and can be used directly</li> <li>Set aside expansion port, you can complete other modules experiment</li> </ul>"},{"location":"Products/Arduino/easy-module-shield-for-arduino-uno.html#function","title":"Function","text":"<p>1 I2C Interface (A4 SDA, A5 SCL) Connect with I2C communication modules, e.g. display 2 Button Module(D2, D3)  Turn on/off LED, Buzzer .etc 3 DHT11 Temperature&amp;Humidity Sensor Module(D4)  Measure Temperature&amp;Humidity indoor. Temp Range: 0-50\u00b0C, HUM Range: 20%-90%RH 4 Rotary Potentiometer Module(A0) Can control led brightness. Rotation Angle: 270\u00b0, Output Voltage: 0-3.\u2157V, Resistance: 10K 5 Reset button 6 3mm LED module(D13, D12) 7 RGB LED Module(D9-11) 8 Digital Ports (D7, D8) Connect with digital signal modules, e.g. leds, buttons. 9 UART Port Connect with UART communication modules, e.g. WiFi, Bluethooth 10 IR Receiver Module(D6) Remote control. Control range 1-8m, frequency 38kHZ. Compatible with most of the infrared remote controllor 11 Brightness Sensor Module(A1) 12 LM35D Temperature Sensor Module(A2) Measure Temperature outdoor. Temp Range: -50-+150\u00b0C, High sensitivity 13 Passive Buzzer Module(D5) Can emit simple tones, music needs to be programmed 14 Analog Port (A3) Connect with analog signal modules, e.g. sensors  </p>"},{"location":"Products/Arduino/easy-module-shield-for-arduino-uno.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Arduino/elecrow-espduino-uno2besp8266-wifi-board.html","title":"Elecrow ESPduino UNO+ESP8266 Wifi Board","text":""},{"location":"Products/Arduino/elecrow-espduino-uno2besp8266-wifi-board.html#description","title":"Description","text":"<p>The Elecrow ESPduino combines a Arduino UNO with a serial WiFi and can be apply on lots of project of IOT, such as Smart Home, Smart robot, Security system. The same size with more powerful function, this two in one board will give you surprise!</p> <p>Same as the Arduino UNO, the ESPduino also has 14 digital input/output pins (of which 6 can be used as PWM outputs), 6 analog inputs, a 16 MHz ceramic resonator, a USB connection, a power jack, an ICSP header, a reset button, and of course a Mini USB cable, simply connect it to a computer with a USB cable or power it with a AC-to-DC adapter or battery to get started.</p> <p>Model: ACM82664A</p>"},{"location":"Products/Arduino/elecrow-espduino-uno2besp8266-wifi-board.html#summary","title":"Summary","text":"Microcontroller ATmega328 Operating Voltage 5v Input Voltage (recommended) 7-12V Input Voltage (limits) 6-15V Digital I/O Pins 14 (of which 6PINs provide PWM output) Analog Input Pins 8 DC Current per I/O Pin 40mA DC Current for 3.3V Pin 50 mA Flash Memory 32 KB (ATmega328) of which 0.5 KB used by bootloader SRAM 2 KB (ATmega328) EEPROM 1 KB (ATmega328) Clock Speed 16 MHz"},{"location":"Products/Arduino/elecrow-espduino-uno2besp8266-wifi-board.html#features","title":"Features","text":"<ul> <li>Connection Mode:U(UART)</li> <li>One high speed serial port</li> <li>Working voltage:5v</li> <li>802.11 b/g/n protocol</li> <li>Wi-Fi Direct (P2P), soft-AP</li> <li>Integrated TCP/IP protocol stack</li> <li>Integrated TR switch, balun, LNA, power amplifier and matching network</li> <li>Integrated PLL, regulators, and power management units</li> <li>+19.5dBm output power in 802.11b mode</li> <li>Dimensions(mm):70.0(L)x55.0(W)x11.8(H)</li> </ul>"},{"location":"Products/Arduino/elecrow-espduino-uno2besp8266-wifi-board.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Arduino/elecrow-espduino-uno2besp8266-wifi-board.html#at-commands","title":"AT Commands","text":"<p>Format</p> <ul> <li>Baud rate at 115200</li> <li>x is the commands</li> </ul> <p></p> <p>(Click the picture to zoom in)</p> Set Inquiry Test Execute AT+&lt;x&gt;=&lt;\u2026&gt; AT+&lt;x&gt;? AT+&lt;x&gt;=? AT+&lt;x&gt; AT+CWMODE=&lt;mode&gt; AT+CWMODE? AT+CWMODE=? - Set the network mode Check current mode Return which modes supported - <p>Commands</p> <ul> <li>carefully there are must be no any spaces between the \" and IP address or port</li> </ul> Commands Description Type Set/Execute Inquiry test Parameters and Examples AT general test basic - - - - AT+RST restart the module basic - - - - AT+GMR check firmware version basic - - - - AT+CWMODE wifi mode wifi AT+CWMODE=&lt;mode&gt; AT+CWMODE? AT+CWMODE=? 1= Sta, 2= AP, 3=both, Sta is the default mode of router, AP is a normal mode for devices AT+CWJAP join the AP wifi AT+ CWJAP =&lt;ssid&gt;,&lt; pwd &gt; AT+ CWJAP? - ssid = ssid, pwd = wifi password AT+CWLAP list the AP wifi AT+CWLAP AT+CWQAP quit the AP wifi AT+CWQAP - AT+CWQAP=? AT+ CWSAP set the parameters of AP wifi AT+ CWSAP= &lt;ssid&gt;,&lt;pwd&gt;,&lt;chl&gt;, &lt;ecn&gt; AT+ CWSAP? ssid, pwd, chl = channel, ecn = encryption; eg. Connect to your router: AT+CWJAP=\"www.electrodragon.com\",\"helloworld\"; and check if connected: AT+CWJAP? AT+CWLIF check join devices' IP wifi AT+CWLIF - - AT+ CIPSTATUS get the connection status TCP/IP AT+ CIPSTATUS &lt;id&gt;,&lt;type&gt;,&lt;addr&gt;,&lt;port&gt;,&lt;tetype&gt;= client or server mode AT+CIPSTART set up TCP or UDP connection TCP/IP 1)single connection (+CIPMUX=0) AT+CIPSTART= &lt;type&gt;,&lt;addr&gt;,&lt;port&gt;; 2) multiple connection (+CIPMUX=1) AT+CIPSTART= &lt;id&gt;&lt;type&gt;,&lt;addr&gt;, &lt;port&gt; - AT+CIPSTART=? id = 0-4, type = TCP/UDP, addr = IP address, port= port; eg. Connect to another TCP server, set multiple connection first: AT+CIPMUX=1; connect: AT+CIPSTART=4,\"TCP\",\"X1.X2.X3.X4\",9999 AT+CIPMODE set data transmission mode TCP/IP AT+CIPMODE=&lt;mode&gt; AT+CIPSEND? 0 not data mode, 1 data mode; return \"Link is builded\" AT+CIPSEND send data TCP/IP 1)single connection(+CIPMUX=0) AT+CIPSEND=&lt;length&gt;; 2) multiple connection (+CIPMUX=1) AT+CIPSEND= &lt;id&gt;,&lt;length&gt; AT+CIPSEND=? eg. send data: AT+CIPSEND=4,15 and then enter the data. AT+CIPCLOSE close TCP or UDP connection TCP/IP AT+CIPCLOSE=&lt;id&gt; or AT+CIPCLOSE AT+CIPCLOSE=? AT+CIFSR Get IP address TCP/IP AT+CIFSR AT+ CIFSR=? AT+ CIPMUX set mutiple connection TCP/IP AT+ CIPMUX=&lt;mode&gt; AT+ CIPMUX? 0 for single connection 1 for multiple connection AT+ CIPSERVER set as server TCP/IP AT+ CIPSERVER= &lt;mode&gt;[,&lt;port&gt; ] mode 0 to close server mode, mode 1 to open; port = port; eg. turn on as a TCP server: AT+CIPSERVER=1,8888, check the self server IP address: AT+CIFSR=? AT+ CIPSTO Set the server timeout AT+CIPSTO=&lt;time&gt; AT+CIPSTO? &lt;time&gt;0~28800 in second +IPD received data For Single Connection mode(CIPMUX=0): + IPD, &lt;len&gt;: For Multi Connection mode(CIPMUX=1): + IPD, &lt;id&gt;, &lt;len&gt;: &lt;data&gt;"},{"location":"Products/Arduino/elecrow-espduino-uno2besp8266-wifi-board.html#usage","title":"Usage","text":""},{"location":"Products/Arduino/elecrow-espduino-uno2besp8266-wifi-board.html#change-the-baud-rate","title":"Change the baud rate","text":"<p>The default baud rate of ESP8266-12E was 115200 bps, if communication with UNO software serial, it may make some mistake, we need to change it low than 19200bps. 1.upload a blink code to the ESPduino, as below:</p> <p></p> <p>2.we use the hardware serial[FT232] sent the AT Command to ESP8266.Connect ESP_RX TO TX and ESP_TX TO RX. Show as below:</p> <p></p> <p>3.Open a Serial debug tool, i use the SSCOM3.2. As below: </p> <p>4.Change the baud of the SSCOM3.2, and sent a AT to the ESP8266, test it whether change the baud rate succeed.</p> <p></p>"},{"location":"Products/Arduino/elecrow-espduino-uno2besp8266-wifi-board.html#use-the-espduino-as-a-webserver","title":"Use the ESPduino as a Webserver","text":"<p>1.Hardware Connection. Connected the ESP8266 to the software serial( D7 and D8) by the jumper cap.As below: By the way, before you do that,you need to change the ESP8266 baud rate to 9600. </p> <p>2.Connect the board to PC using USB cable.</p> <p>3:Download the code: Webserver_for_ESP8266 or copy it to you new skecth.</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n\n#define DEBUG true\n\nSoftwareSerial esp8266(7,8); // make RX Arduino line is pin 7, make TX Arduino line is pin 8.\n                             // This means that you need to connect the TX line from the esp to the Arduino's pin 7\n                             // and the RX line from the esp to the Arduino's pin 8\nvoid setup()\n{\n  Serial.begin(9600);\n  esp8266.begin(9600); // your esp's baud rate might be different\n  sendData(\"AT+RST\\r\\n\",2000,DEBUG); // reset module\n  sendData(\"AT+CWMODE=2\\r\\n\",1000,DEBUG); // configure as access point\n  sendData(\"AT+CIFSR\\r\\n\",1000,DEBUG); // get ip address\n  sendData(\"AT+CIPMUX=1\\r\\n\",1000,DEBUG); // configure for multiple connections\n  sendData(\"AT+CIPSERVER=1,80\\r\\n\",1000,DEBUG); // turn on server on port 80\n}\n\nvoid loop()\n{\n  if(esp8266.available()) // check if the esp is sending a message \n  {\n    /*\n    while(esp8266.available())\n    {\n      // The esp has data so display its output to the serial window \n      char c = esp8266.read(); // read the next character.\n      Serial.write(c);\n    } */\n\n    if(esp8266.find(\"+IPD,\"))\n    {\n     delay(1000);\n\n     int connectionId = esp8266.read()-48; // subtract 48 because the read() function returns \n                                           // the ASCII decimal value and 0 (the first decimal number) starts at 48\n\n     String webpage = \"&lt;h1&gt;Hello World!&lt;/h1&gt;\";\n     String cipSend = \"AT+CIPSEND=\";\n     cipSend += connectionId;\n     cipSend += \",\";\n     cipSend +=webpage.length();\n     cipSend +=\"\\r\\n\";\n\n     sendData(cipSend,1000,DEBUG);\n     sendData(webpage,1000,DEBUG);\n\n     String closeCommand = \"AT+CIPCLOSE=\"; \n     closeCommand+=5; // append connection id\n     closeCommand+=\"\\r\\n\";    \n     sendData(closeCommand,3000,DEBUG);\n    }\n  }\n}\n\n\nString sendData(String command, const int timeout, boolean debug)\n{\n    String response = \"\";\n\n    esp8266.print(command); // send the read character to the esp8266\n\n    long int time = millis();\n\n    while( (time+timeout) &gt; millis())\n    {\n      while(esp8266.available())\n      {      \n        // The esp has data so display its output to the serial window \n        char c = esp8266.read(); // read the next character.\n        response+=c;\n      }  \n    }\n\n    if(debug)\n    {\n      Serial.print(response);\n    }    \n    return response;\n}\n</code></pre> <p>4.Upload the code and Open the serial monitor.You can see some configuration information.</p> <p></p> <p>5.PC connect to the wifi of ESP8266.</p> <p></p> <p>6.Then you can visit the Webserver of the ESP8266.</p> <p></p>"},{"location":"Products/Arduino/elecrow-espduino-uno2besp8266-wifi-board.html#resources","title":"Resources","text":"<ul> <li>Elecrow ESPduino v1.0 eagle files</li> </ul>"},{"location":"Products/Arduino/elecrow-espduino-uno2besp8266-wifi-board.html#support","title":"Support","text":"<p>If you have any problem about how to use it, you can connect to us at the bottom-right of bazzer or contact to techsupport@elecrow.com to get technology support.</p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html","title":"Elecrow simduino uno2bsim808 gprsgsm board","text":""},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#contents","title":"Contents","text":"<ul> <li>1 Description</li> <li>2 Summary</li> <li>3 Features</li> <li>4 Interface Function<ul> <li>4.1 Connectors</li> <li>4.2 Antenna ports</li> <li>4.3 SIM Connector (on Back)</li> <li>4.4 LEDs</li> </ul> </li> <li>5 The Usage of UNO</li> <li>6 The Usage of SIM808<ul> <li>6.1 Attaching Antenna</li> <li>6.2 SIM Card</li> <li>6.3 Connect the USB and DC power</li> <li>6.4 Power the SIM808</li> </ul> </li> <li>7 Arduino Test<ul> <li>7.1 Making a call: using Software UART</li> <li>7.2 Sending SMS: using Software UART</li> <li>7.3 Using Sms to Control an LED Status</li> </ul> </li> <li>8 The usage of GPS Function<ul> <li>8.1 Print the GPS(GNSS) data with serial port</li> <li>8.2 AT Commands Examples</li> </ul> </li> <li>9 Resources</li> <li>10 Support</li> </ul>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#description","title":"Description","text":"<p>The Elecrow Simduino combines Arduino uno and sim808 module. It will save more cost and space for your project and easier to build other modules. It not only by DC power supply, we have designed a battery interface for it, you can also use a 3.7V lithium battery to power it. Whether you want to get a Arduino or a SIM808 module, even start a SIM808 related application that base on Arduino. It will make your satisfaction. Come on and add it to your shopping cart.</p> <p>Same as the Arduino UNO, the SIMduino also has 14 digital input/output pins (of which 6 can be used as PWM outputs), 6 analog inputs, a 16 MHz ceramic resonator, a USB connection, a power jack, an ICSP header, a reset button, and of course a Mini USB cable, simply connect it to a computer with a USB cable or power it with a AC-to-DC adapter or battery to get started.</p> <p>Model: ACM12425E</p> <p></p> <p></p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#summary","title":"Summary","text":"Microcontroller ATmega328 Operating Voltage 5v Input Voltage (recommended) 3.3-5V Input Voltage (limits) &lt; 5V Digital I/O Pins 14 (of which 6PINs provide PWM output) Analog Input Pins 8 DC Current per I/O Pin 40mA DC Current for 3.3V Pin 50 mA Flash Memory 32 KB (ATmega328) of which 0.5 KB used by bootloader SRAM 2 KB (ATmega328) EEPROM 1 KB (ATmega328) Clock Speed 16 MHz"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#features","title":"Features","text":"<ul> <li>UNO+SIM808,TWO in one board;</li> <li>Flat DC Jack.</li> <li>Inherits all of Arduino Uno's features.</li> <li>Compatible to Uno's pin layout, screw hole and dimensions.</li> <li>Evolved with SMD components.</li> <li>Quad-band 850/900/1800/1900MHz</li> <li>GPRS mobile station class B</li> <li>Controlled by AT Command (3GPP TS 27.007, 27.005 and SIMCOM enhanced AT Commands)</li> <li>Integrated GPS/CNSS and supports A-GPS</li> <li>Low power consumption, 1mA in sleep mode</li> <li>Supports GPS NMEA protocol</li> <li>Standard Micro SIM Card</li> <li>GPRS multi-slot class12 connectivity: max. 85.6kbps(down-load/up-load)</li> <li>Indicator LEDs for power and network connectivity</li> <li>uFL connection for external passive GPS &amp; external GSM antenna</li> <li>Any standard 2G SIM slides into a secure connector</li> <li>Standard 4-pole TRRS headphone jack. Use any 'Android' or 'iPhone'-compatible headset with mic</li> <li>Dimensions(mm):70.0(L)x55.0(W)x14.0(H)</li> </ul>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#interface-function","title":"Interface Function","text":"<p>600px</p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#connectors","title":"Connectors","text":"<p>JST 2-PIN: This is the battery input connector.(3.3-5V) MiniUSB connector:Arduino IDE Programming port. Headset jack:This is a 'standard' TRRS 3.5mm phone headset jack with stereo earphone and mono microphone.</p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#antenna-ports","title":"Antenna ports","text":"<p>There is two antenna inferface in the board,\"GSM\" where you can plug your GSM antennea and \"GPS\" connect the GPS antenna.</p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#sim-connector-on-back","title":"SIM Connector (on Back)","text":"<p>A 2G Micro SIM card is required to use the module. Nearly any cell phone shop can sell you a SIM card. It must be a 2G GSM card. AT&amp;T in the US does not sell these anymore!</p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#leds","title":"LEDs","text":"<p>PWR:RED NET:Orange!You can use this for checking the current state without sending an AT command: --64ms on, 800ms off - the module is running but hasn't made connection to the cellular network yet --64ms on, 3 seconds off - the module has made contact with the cellular network and can send/receive voice and SMS --64ms on, 300ms off - the GPRS data connection you requested is active --By watching the blinks you can get a visual feedback on whats going on STA\uff1aBlue!Lit when the SIM808 module is booted and running.</p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#the-usage-of-uno","title":"The Usage of UNO","text":"<p>The usage of SIMduino is same as the Arduino UNO:</p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#the-usage-of-sim808","title":"The Usage of SIM808","text":""},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#attaching-antenna","title":"Attaching Antenna","text":"<p>GPS antenna and GSM antenna is required! </p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#sim-card","title":"SIM Card","text":"<p>You must insert a SIM card to do anything but the most basic tests. GPS does work without a SIM but of course you cannot send or receive texts, calls, etc! The SIM card holder is on the back. It holds a very-standard \"Micro SIM\",Mini SIMs will not work! Make sure you get a \"Micro SIM\". </p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#connect-the-usb-and-dc-power","title":"Connect the USB and DC power","text":"<p>Due to the SIM808 power up need more than 2.5A current, you need to connect a DC power to it. </p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#power-the-sim808","title":"Power the SIM808","text":"<p>Press the KEY more than 3S, the STA LED will light up and the NET LED will blink. </p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#arduino-test","title":"Arduino Test","text":""},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#making-a-call-using-software-uart","title":"Making a call: using Software UART","text":"<p>1.Copy the demo code as bellow and paste it in the IDE. </p> <p>2.Upload to your Arduino wired up to the moduleOnce uploaded to your Arduino, open up the serial console at 115200 baud speed to begin the tester sketch.</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\nSoftwareSerial mySerial(7, 8);\nvoid setup()\n{\nmySerial.begin(19200);               // the GPRS baud rate   \nSerial.begin(19200);               // the GPRS baud rate   \ndelay(2000);\nmySerial.println(\"ATDxxxxxxxxx;\"); // xxxxxxxxx is the number you want to dial.  \n\nif(mySerial.available())\n\nSerial.print((unsigned char)mySerial.read());\n\n\ndelay(10000); \ndelay(10000); \n\nmySerial.println(\"ATH\"); //End the call.\nif(mySerial.available())\n\nSerial.print((unsigned char)mySerial.read());\n}\n\n\nvoid loop()\n{\n//Do nothing\n}\n</code></pre>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#sending-sms-using-software-uart","title":"Sending SMS: using Software UART","text":"<pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\nvoid setup()\n{\nmySerial.begin(19200);  //Default serial port setting for the GPRS modem is 19200bps 8-N-1\nmySerial.print(\"\\r\");\ndelay(1000);                    //Wait for a second while the modem sends an \"OK\"\nmySerial.print(\"AT+CMGF=1\\r\");    //Because we want to send the SMS in text mode\ndelay(1000);\n\n//mySerial.print(\"AT+CSCA=\\\"+919032055002\\\"\\r\");  //Setting for the SMS Message center number,  \n//delay(1000);                                  //uncomment only if required and replace with\n//the message center number obtained from\n//your GSM service provider.\n//Note that when specifying a tring of characters\n// \" is entered as \\\"\n\nmySerial.print(\"AT+CMGS=\\\"+9184460xxxx\\\"\\r\");    //Start accepting the text for the message\n//to be sent to the number specified.\n//Replace this number with the target mobile number.\ndelay(1000);\nmySerial.print(\"Hello,Elecrow!\\r\");   //The text for the message\ndelay(1000);\nmySerial.write(0x1A);  //Equivalent to sending Ctrl+Z \n}\n\nvoid loop()\n{\n//We just want to send the SMS only once, so there is nothing in this loop.\n//If we put the code for SMS here, it will be sent again and again and cost us a lot.\n}\n</code></pre>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#using-sms-to-control-an-led-status","title":"Using Sms to Control an LED Status","text":"<p>This example is controbuted by MChobby, for more information please visit: https://wiki.mchobby.be/index.php?title=SmsCommand</p> <p>Send a SMS message \"on\" or \"off\" from your cellphone to the GPRS Shield to control the Digital Pin 13(LED) Status.</p> <ul> <li>The default Buffer of Rx in SoftwareSerial.h is 32/64, you may experience some data lose while the returns of SIM808 are many(Receiving SMS/TCPIP), you can try to change the Buffer of Rx in SoftwareSerial.h into</li> </ul> <p>#define _SS_MAX_RX_BUFF 128 // RX buffer size</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\n// EN: String buffer for the GPRS shield message\n\nString msg = String(\"\");\n// EN: Set to 1 when the next GPRS shield message will contains the SMS message\n\nint SmsContentFlag = 0;\n\n// EN: Pin of the LED to turn ON and OFF depending on the received message\n\nint ledPin = 13;\n\n// EN: Code PIN of the SIM card (if applied)\n\n//String SIM_PIN_CODE = String( \"XXXX\" );\n\nvoid setup()\n{\n  mySerial.begin(19200);               // the GPRS baud rate   \n  Serial.begin(19200);                 // the GPRS baud rate\n\n  // Initialize la PIN\n  pinMode( ledPin, OUTPUT ); \n  digitalWrite( ledPin, LOW ); \n}\n\nvoid loop()\n{\n    char SerialInByte;\n\n    if(Serial.available())\n    {\n       mySerial.print((unsigned char)Serial.read());\n     }  \n    else  if(mySerial.available())\n    {\n        char SerialInByte;\n        SerialInByte = (unsigned char)mySerial.read();\n\n        // EN: Relay to Arduino IDE Monitor\n\n        Serial.print( SerialInByte );\n\n        // -------------------------------------------------------------------\n        // EN: Program also listen to the GPRS shield message.\n\n        // -------------------------------------------------------------------\n\n        // EN: If the message ends with &lt;CR&gt; then process the message\n\n        if( SerialInByte == 13 ){\n          // EN: Store the char into the message buffer\n\n          ProcessGprsMsg();\n         }\n         if( SerialInByte == 10 ){\n            // EN: Skip Line feed\n\n         }\n         else {\n           // EN: store the current character in the message string buffer\n\n           msg += String(SerialInByte);\n         }\n     }   \n}\n\n// EN: Make action based on the content of the SMS. \n//     Notice than SMS content is the result of the processing of several GPRS shield messages.\n\nvoid ProcessSms( String sms ){\n  Serial.print( \"ProcessSms for [\" );\n  Serial.print( sms );\n  Serial.println( \"]\" );\n\n  if( sms.indexOf(\"on\") &gt;= 0 ){\n    digitalWrite( ledPin, HIGH );\n    Serial.println( \"LED IS ON\" );\n    return;\n  }\n  if( sms.indexOf(\"off\") &gt;= 0 ){\n    digitalWrite( ledPin, LOW );\n    Serial.println( \"LED IS OFF\" );\n    return;\n  }\n}\n\n// EN: Send the SIM PIN Code to the GPRS shield\n\n//void GprsSendPinCode(){\n//  if( SIM_PIN_CODE.indexOf(\"XXXX\")&gt;=0 ){\n//    Serial.println( \"*** OUPS! you did not have provided a PIN CODE for your SIM CARD. ***\" );\n//    Serial.println( \"*** Please, define the SIM_PIN_CODE variable . ***\" );\n//    return;\n// }\n//  mySerial.print(\"AT+CPIN=\");\n// mySerial.println( SIM_PIN_CODE );\n}\n\n// EN: Request Text Mode for SMS messaging\n\nvoid GprsTextModeSMS(){\n  mySerial.println( \"AT+CMGF=1\" );\n}\n\nvoid GprsReadSmsStore( String SmsStorePos ){\n  // Serial.print( \"GprsReadSmsStore for storePos \" );\n  // Serial.println( SmsStorePos ); \n  mySerial.print( \"AT+CMGR=\" );\n  mySerial.println( SmsStorePos );\n}\n\n// EN: Clear the GPRS shield message buffer\n\nvoid ClearGprsMsg(){\n  msg = \"\";\n}\n\n// EN: interpret the GPRS shield message and act appropiately\n\nvoid ProcessGprsMsg() {\n  Serial.println(\"\");\n  Serial.print( \"GPRS Message: [\" );\n  Serial.print( msg );\n  Serial.println( \"]\" );\n\n//  if( msg.indexOf( \"+CPIN: SIM PIN\" ) &gt;= 0 ){\n//     Serial.println( \"*** NEED FOR SIM PIN CODE ***\" );\n //    Serial.println( \"PIN CODE *** WILL BE SEND NOW\" );\n //    GprsSendPinCode();\n//  }\n\n  if( msg.indexOf( \"Call Ready\" ) &gt;= 0 ){\n     Serial.println( \"*** GPRS Shield registered on Mobile Network ***\" );\n     GprsTextModeSMS();\n  }\n\n  // EN: unsolicited message received when getting a SMS message\n  // FR: Message non sollicit\u00e9 quand un SMS arrive\n  if( msg.indexOf( \"+CMTI\" ) &gt;= 0 ){\n     Serial.println( \"*** SMS Received ***\" );\n     // EN: Look for the coma in the full message (+CMTI: \"SM\",6)\n     //     In the sample, the SMS is stored at position 6\n     int iPos = msg.indexOf( \",\" );\n     String SmsStorePos = msg.substring( iPos+1 );\n     Serial.print( \"SMS stored at \" );\n     Serial.println( SmsStorePos );\n\n     // EN: Ask to read the SMS store\n     GprsReadSmsStore( SmsStorePos );\n  }\n\n  // EN: SMS store readed through UART (result of GprsReadSmsStore request)  \n  if( msg.indexOf( \"+CMGR:\" ) &gt;= 0 ){\n    // EN: Next message will contains the BODY of SMS\n    SmsContentFlag = 1;\n    // EN: Following lines are essentiel to not clear the flag!\n    ClearGprsMsg();\n    return;\n  }\n\n  // EN: +CMGR message just before indicate that the following GRPS Shield message \n  //     (this message) will contains the SMS body\n\n  if( SmsContentFlag == 1 ){\n    Serial.println( \"*** SMS MESSAGE CONTENT ***\" );\n    Serial.println( msg );\n    Serial.println( \"*** END OF SMS MESSAGE ***\" );\n    ProcessSms( msg );\n  }\n\n  ClearGprsMsg();\n  // EN: Always clear the flag\n\n  SmsContentFlag = 0; \n}\n</code></pre>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#the-usage-of-gps-function","title":"The usage of GPS Function","text":""},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#print-the-gpsgnss-data-with-serial-port","title":"Print the GPS(GNSS) data with serial port","text":""},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#at-commands-examples","title":"AT Commands Examples","text":"<p>800px</p> <p>Demo code of get the GPS information:</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n#define DEBUG true\n\n\nSoftwareSerial mySerial(7,8); \n\nvoid setup()\n{\n  Serial.begin(9600);\n mySerial.begin(9600); \n}\n\nvoid loop()\n{\n   getgps();\n   while(1)\n   {\n        sendData( \"AT+CGNSINF\",1000,DEBUG);   \n        delay(1000);\n\n   }\n\n}\nvoid getgps(void)\n{\n   sendData( \"AT+CGNSPWR=1\",1000,DEBUG); \n   sendData( \"AT+CGNSSEQ=RMC\",1000,DEBUG); \n}\n\n\nString sendData(String command, const int timeout, boolean debug)\n{\n    String response = \"\";    \n    mySerial.println(command); \n    long int time = millis();   \n    while( (time+timeout) &gt; millis())\n    {\n      while(mySerial.available())\n      {       \n        char c = mySerial.read(); \n        response+=c;\n      }  \n    }    \n    if(debug)\n    {\n      Serial.print(response);\n    }    \n    return response;\n}\n</code></pre> <p>The result of get the GPS information.</p> <p></p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#resources","title":"Resources","text":"<p>https://www.elecrow.com/wiki/index.php?title=File:Elecrow_Simduino_v2.2_eagle_file.zip</p>"},{"location":"Products/Arduino/elecrow-simduino-uno2bsim808-gprsgsm-board.html#support","title":"Support","text":"<p>If you have any problem about how to use it, you can connect to us at the bottom-right of bazzer or contact to techsupport@elecrow.com to get technology support.</p>"},{"location":"Products/Arduino/esp32-wifible-board-v10.html","title":"ESP32 WIFI/BLE Board v1.0","text":""},{"location":"Products/Arduino/esp32-wifible-board-v10.html#introduction","title":"Introduction","text":"<p>ESP-WROOM-32 is a powerful, generic Wi-Fi+BT+BLE MCU module that targets a wide variety of applications, ranging from low-power sensor networks to the most demanding tasks, such as voice encoding, music streaming and MP3 decoding.</p> <p>The development board breaks out all the module's pins to 0.1\" headers and provides a CP2102 USB-TTL serial adapter, programming and reset buttons, and a power regulator to supply the ESP-WROOM-32 with a stable 3.3 V. Espressif doubled-down on the CPU resources for ESP-WROOM-32 with a dual core, running at 160MHz and tons more pins and peripherals.</p> <p>The integration of Bluetooth, Bluetooth LE and Wi-Fi ensures that a wide range of applications can be targeted, and that the module is future proof: using Wi-Fi allows a large physical range and direct connection to the internet through a Wi-Fi router, while using Bluetooth allows the user to conveniently connect to the phone or broadcast low energy beacons for its detection. The sleep current of the ESP32 chip is less than 5 \u00b5A, making it suitable for battery powered and wearable electronics applications. ESP-WROOM-32 supports data rates of up to 150 Mbps, and 22 dBm output power at the PA to ensure the widest physical range. As such the chip does offer industry-leading specifications and the best performance for electronic integration, range, power consumption, and connectivity.</p> <p>Model: ARS01119B </p>"},{"location":"Products/Arduino/esp32-wifible-board-v10.html#features","title":"Features","text":"<ul> <li>Support SD card, UART, SPI, SDIO, I2C, LED PWM, Motor PWM,I2S, I2C, IRUSB-UART</li> <li>Integrated 802.11 BGN WiFi transceiver and dual-mode Bluetooth (classic and BLE).</li> <li>Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096)</li> <li>Integrated LiPo Battery Charger.</li> <li>10-electrode capacitive touch support</li> <li>Up to 240MHz clock frequency and 520kB internal SRAM</li> <li>Support Station/SoftAP/SoftAP+Station/P2P</li> <li>Support WPA/WPA2/WPA2-Enterprise/WPS</li> <li>Support AES/RSA/ECC/SHA</li> <li>Include bridge, reset- and boot-mode buttons, LDO regulator and a micro-USB connector.</li> </ul>"},{"location":"Products/Arduino/esp32-wifible-board-v10.html#specification","title":"Specification","text":"<ul> <li>FCC/CE/IC/TELEC/KCC/SRRC/NCC</li> <li>Wi-Fi : 802.11 b/g/n/e/i (802.11n up to 150 Mbps)</li> <li>A- MPDU and A-MSDU aggregation and 0.4 _s guard interval support</li> <li>Frequency range : 2.4 ~ 2.5 GHz</li> <li>Bluetooth : v4.2 BR/EDR and BLE specification</li> <li>Radio : NZIF receiver with -98 dBm sensitivity, Class-1, class-2 and class-3 transmitter</li> <li>Audio : CVSD and SBC</li> <li>On-board clock : 40 MHz crystal</li> <li>Operating voltage : 2.2 ~ 3.6V</li> <li>Operating current : Average: 80 mA</li> <li>Operating temperature range : -40\u00b0C ~ 85\u00b0C</li> <li>Dimensions(mm):58.5(L)x27.7(W)x16.0(H)</li> </ul>"},{"location":"Products/Arduino/esp32-wifible-board-v10.html#interface-function","title":"Interface Function","text":"<p>EN  Reset button. Pressing this button resets the system.</p> <p>BOOT  Download button. Holding down the Boot button and pressing the EN button initiates the firmware download mode. Then users can download firmware through the serial port</p> <p>USB  USB interface. It functions as the power supply for the board and the communication interface between PC and ESP-WROOM-32.</p> <p>I/O  Most of the pins on the ESP-WROOM-32 are led out to the pin headers on the board. Users can program ESP32 to enable multiple functions such as PWM, ADC, DAC, I2C, I2S, SPI, etc.</p>"},{"location":"Products/Arduino/esp32-wifible-board-v10.html#usage","title":"Usage","text":""},{"location":"Products/Arduino/esp32-wifible-board-v10.html#installing-the-esp32-arduino-core","title":"Installing the ESP32 Arduino Core","text":"<p>This tutorial covers setting up the ESP32 with Arduino IDE, and documents a few simple example sketches to help make your WiFi/BLE microcontroller work.</p>"},{"location":"Products/Arduino/esp32-wifible-board-v10.html#download-the-core","title":"Download the Core","text":"<p>Espressif's official ESP32 Arduino core is hosted here. To install the ESP32 board definitions, you'll need download the contents of the esp32-arduino repository, and place them in a \"hardware/espressif/esp32\" directory in your Arduino sketchbook directory. First, you need to Create new folder espreesif/esp32, then Download Espressif's official ESP32 Arduino core on hereand unzip it, copy those files to espreesif/esp32 directory.</p> <p></p> <p>Copy \"espreeif\" folder to hardware directory. On windows, that may be  C:/program Files/Arduino/hardware , and on Mac that may be /Applications/Arduino.app/Contents/Java/hardware</p>"},{"location":"Products/Arduino/esp32-wifible-board-v10.html#install-the-xtensa-and-esp32-tools","title":"Install the Xtensa and ESP32 Tools","text":"<p>To compile code for the ESP32, you need the Xtensa GNU compiler collection (GCC) installed on your machine. Windows users can run get.exe, found in the  \u201cesp32/tools\u201d folder. Mac and Linux users should run the  tools/get.py python script to download the tools. Using a terminal, navigate to the esp32/tools folder. Then type:</p> <pre><code>python get.py\n</code></pre> <p>The \u201cget.py\u201d python script will download the Xtensa GNU tools and the ESP32 software development kit (SDK), and unzip them to the proper location. You should see a few new folders in the \u201ctools\u201d directory, including \u201cdist\u201d and \u201cxtensa-esp32-elf\u201d once it\u2019s done.</p>"},{"location":"Products/Arduino/esp32-wifible-board-v10.html#example-blink","title":"Example: Blink","text":"<p>Once the ESP32 Arduino core is installed, you should see an \u201cESP32 Dev Module\u201d option under your \u201cTools\u201d &gt; \u201cBoard\u201d menu. Select the \u201cUpload Speed\u201d-921600 baud, and serial port.</p> <p></p> <p>For this test. Plus, with the ESP32 attached to your computer, it\u2019s a good time to test out serial. Copy and paste the example sketch below, into a fresh Arduino sketch.</p> <pre><code>int ledPin = 16;\n\nvoid setup()\n{\n    pinMode(ledPin, OUTPUT);\n    Serial.begin(115200);\n}\n\nvoid loop()\n{\n    Serial.println(\"Hello, world!\");\n    digitalWrite(ledPin, HIGH);\n    delay(500);\n    digitalWrite(ledPin, LOW);\n    delay(500);\n}\n</code></pre> <p>Upload the code! Once the code finishes transferring, open the serial monitor and set the baud rate to 115200. You should see the blue LED \u201cL\u201d keep flashing and \u201cHello, world\u201d be printed on serial port interface.</p> <p></p>"},{"location":"Products/Arduino/esp32-wifible-board-v10.html#test-wifi","title":"TEST: WIFI","text":""},{"location":"Products/Arduino/esp32-wifible-board-v10.html#station","title":"Station","text":"<p>Open the \u201cstation.ino\u201d code, you need to change message in the code. Make sure you fill in the  YOUR_NETWORK_HERE  and YOUR_PASSWORD_HERE  variables with the name (SSID) and password of your WiFi network!</p> <p></p> <pre><code>#include &lt;WiFi.h&gt;\n\n// WiFi network name and password:\nconst char * networkName = \"YOUR_NETWORK_HERE\";\nconst char * networkPswd = \"YOUR_PASSWORD_HERE\";\n\n// Internet domain to request from:\nconst char * hostDomain = \"example.com\";\nconst int hostPort = 80;\n\nconst int BUTTON_PIN = 0;\nconst int LED_PIN = 16;\n\nvoid setup()\n{\n  // Initilize hardware:\n  Serial.begin(115200);\n  pinMode(BUTTON_PIN, INPUT_PULLUP);\n  pinMode(LED_PIN, OUTPUT);\n\n  // Connect to the WiFi network (see function below loop)\n  connectToWiFi(networkName, networkPswd);\n\n  digitalWrite(LED_PIN, LOW); // LED off\n  Serial.print(\"Press button 0 to connect to \");\n  Serial.println(hostDomain);\n}\n\nvoid loop()\n{\n  if (digitalRead(BUTTON_PIN) == LOW)\n  { // Check if button has been pressed\n    while (digitalRead(BUTTON_PIN) == LOW)\n      ; // Wait for button to be released\n\n    digitalWrite(LED_PIN, HIGH); // Turn on LED\n    requestURL(hostDomain, hostPort); // Connect to server\n    digitalWrite(LED_PIN, LOW); // Turn off LED\n  }\n}\n\nvoid connectToWiFi(const char * ssid, const char * pwd)\n{\n  int ledState = 0;\n\n  printLine();\n  Serial.println(\"Connecting to WiFi network: \" + String(ssid));\n\n  WiFi.begin(ssid, pwd);\n\n  while (WiFi.status()\u00a0!= WL_CONNECTED) \n  {\n    // Blink LED while we're connecting:\n    digitalWrite(LED_PIN, ledState);\n    ledState = (ledState + 1)\u00a0% 2; // Flip ledState\n    delay(500);\n    Serial.print(\".\");\n  }\n\n  Serial.println();\n  Serial.println(\"WiFi connected!\");\n  Serial.print(\"IP address: \");\n  Serial.println(WiFi.localIP());\n}\n\nvoid requestURL(const char * host, uint8_t port)\n{\n  printLine();\n  Serial.println(\"Connecting to domain: \" + String(host));\n\n  // Use WiFiClient class to create TCP connections\n  WiFiClient client;\n  if (!client.connect(host, port))\n  {\n    Serial.println(\"connection failed\");\n    return;\n  }\n  Serial.println(\"Connected!\");\n  printLine();\n\n  // This will send the request to the server\n  client.print((String)\"GET / HTTP/1.1\\r\\n\" +\n               \"Host: \" + String(host) + \"\\r\\n\" +\n               \"Connection: close\\r\\n\\r\\n\");\n  unsigned long timeout = millis();\n  while (client.available() == 0) \n  {\n    if (millis() - timeout &gt; 5000) \n    {\n      Serial.println(\"&gt;&gt;&gt; Client Timeout\u00a0!\");\n      client.stop();\n      return;\n    }\n  }\n\n  // Read all the lines of the reply from server and print them to Serial\n  while (client.available()) \n  {\n    String line = client.readStringUntil('\\r');\n    Serial.print(line);\n  }\n\n  Serial.println();\n  Serial.println(\"closing connection\");\n  client.stop();\n}\n\nvoid printLine()\n{\n  Serial.println();\n  for (int i=0; i&lt;30; i++)\n    Serial.print(\"-\");\n  Serial.println();\n}\n</code></pre> <p>Then open the serial monitor .</p> <p></p> <p>When the  \u201cWiFi connected!\u201d  is printed on the serial monitor ,press the BOOT button, your ESP32 wifi/ble module will send a request to example.com and you can see a few message of HTML is printed the serial monitor.</p> <p></p>"},{"location":"Products/Arduino/esp32-wifible-board-v10.html#ap","title":"AP","text":"<p>Open and upload the \u201cap.ino\u201d code.</p> <pre><code>#include \"WiFi.h\"\n\n#define AP_SSID  \"esp32\"\n\nenum {STEP_AP, STEP_END ,STEP};\n\nvoid onButton(){\n  static uint32_t step = STEP_AP;\n  switch(step){\n\n    case STEP_AP://AP Only\n      WiFi.mode(WIFI_AP);\n      Serial.println(\"** Starting AP\");\n      WiFi.softAP(AP_SSID);\n    break;\n    case STEP_END:\n    Serial.println(\"** Stopping AP\");\n      WiFi.mode(WIFI_OFF);\n\n    default:\n    break;\n  }\n\n if(step == STEP){\n    step = STEP_AP;\n  } else {\n    step++;\n  }\n  //little debounce\n  delay(100);\n}\n\nvoid WiFiEvent(WiFiEvent_t event){\n    switch(event) {\n        case SYSTEM_EVENT_AP_START:\n            Serial.println(\"AP Started\");\n            WiFi.softAPsetHostname(AP_SSID);\n            break;\n        case SYSTEM_EVENT_AP_STOP:\n            Serial.println(\"AP Stopped\");\n            break;\n\n        default:\n            break;\n    }\n}\n\nvoid setup() {\n    Serial.begin(115200);\n    pinMode(0, INPUT_PULLUP);\n    WiFi.onEvent(WiFiEvent);\n    Serial.print(\"ESP32 SDK: \");\n    Serial.println(ESP.getSdkVersion());\n    Serial.println(\"Press the button to select the next mode\");\n}\n\nvoid loop() {\n    static uint8_t lastPinState = 1;\n    uint8_t pinState = digitalRead(0);\n    if(!pinState &amp;&amp; lastPinState){\n        onButton();\n    }\n    lastPinState = pinState;\n}\n</code></pre> <p></p> <p>Open the serial monitor.</p> <p>Then press the BOOT key to start AP pattern.</p> <p></p> <p>The \u201cAP started \u201c will be printed on the serial minotor. Now you can turn on mobile phones to search WIFI \u201cesp32\u201d and connect to it.</p>"},{"location":"Products/Arduino/esp32-wifible-board-v10.html#resource","title":"Resource","text":"<ul> <li>Code for arduino</li> <li>ESP32S_WIFI_BLE_Board_v1.0_Eagle+schematic</li> </ul>"},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html","title":"ESP8266 IOT Board(Arduino IDE or NodeMCU Lua Programming)","text":""},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#introduction","title":"Introduction","text":"<p>This is a ESP8266 IOT board- our take on an 'all-in-one' ESP8266 WiFi development board with built in USB and battery charging. It\u2019s an ESP8266 WiFi module with all the extras you need, The most important part is an ESP8266 WiFi microcontroller clocked at 80 MHz and at 3.3V logic. This microcontroller contains a Tensilica chip core as well as a full WiFi stack. You can program the microcontroller using the Arduino IDE for an easy-to-run Internet of Things core. We wired up a USB-Serial chip that can upload code. It also has auto-reset so no noodling with pins and reset button pressings. To make it easy to use for portable projects, we added a connector for 3.7V Lithium polymer batteries and built in battery charging. You don't need a battery, it will run just fine straight from the micro USB connector. But, if you do have a battery, you can take it on the go, then plug in the USB to recharge. The board will automatically switch over to USB power when its available. Comes fully assembled and tested, with a USB interface that lets you quickly use it with the Arduino IDE or NodeMCU Lua. (It comes preprogrammed with the Lua interpretter) We also toss in some header so you can solder it in and plug into a solderless breadboard. Lipoly battery and USB cable not included (but we do have lots of options in the shop if you'd like!)</p> <p>Model: DPO82666E </p>"},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#features","title":"Features","text":"<ul> <li>Dimensions(mm): 50.0(L)x35.0(W)x7.3(H)</li> <li>Light weight</li> <li>ESP8266 @ 80MHz with 3.3V logic/power</li> <li>4MB of FLASH (32 MBit)</li> <li>Built in WiFi 802.11 b/g/n</li> <li>3.3V regulator with 500mA peak current output</li> <li>CP2012 USB-Serial converter onboard with 921600 max baudrate for uploading</li> <li>Auto-reset support for getting into bootload mode before firmware upload</li> <li>9 x GPIO pins - can also be used as I2C and SPI</li> <li>1 x analog inputs 1.0V max</li> <li>Built in 100mA LiPoly charger with charging status indicator LED, can also cut a trace to disable the charger</li> <li>Pin #0 red LED for general purpose blinking. Pin #2 blue LED for bootloading debug &amp; general purpose blinking</li> <li>Power/enable pin</li> <li>4 mounting holes</li> <li>Reset button</li> </ul>"},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#interface-function","title":"Interface Function","text":"<p>Micro USB port - it use for upload the program and update firmware,you can also charge the battery Battery interface - you can power this board with a lipo battery by this port Reset button - to have a reset Flash button - it use for update the firmware  </p>"},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#usage","title":"Usage","text":""},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#hardware-installation","title":"Hardware installation","text":""},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#1power-management","title":"1.Power Management","text":"<p>It's easy to power it both when connected to a computer as well as lipo battery </p>"},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#2using-nodemcu-lua","title":"2.Using NodeMCU Lua","text":""},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#prepareation","title":"Prepareation","text":"<p>ESP8266 IOT board comes pre-programmed with NodeMCU's lua interpretter. The Lua interpretter runs on the ESP8266 and you can type in commands and read out the results over serial. In order to upload code to the ESP8266 and use the serial console, connect any data-capable micro USB cable to the IOT board and the other side to your computer's USB port.Maybe you need to install the cp2102 USB driver,you can download driver hear.</p>"},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#load-the-firmware","title":"Load the firmware","text":"<p>If you want to burning the firmware,please refer the following steps. Our ESP8266 IOT Board had comes preprogrammed with the Lua interpretter.You can direct use it.  1.Download the tool nodemcu-flasher-master,unzip it and choose the right loading software according to your computer system(32 bit or 64 bit) ,open it you can see as bellow: </p> <p>Note:The COM Port you should choose what are you using. 2.Download the firmware and click the config button,then load the firmware.</p> <p></p> <p>3.Then click the \"Flash\" button to load the firmware,as bellow:</p> <p></p> <p>when the firmware is flashing the blue led in the ESP8266 IOT Board will continuous flashing .</p>"},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#open-up-serial-console","title":"Open up serial console","text":"<p>Next up, we need to choose a development tool such as LuaLoader/ NodeMCUStudioIDE/ Decoda. Now do a demonstration with the LuaLoader. First, disconnected the usb cable and run the LuaLoader;  Click the menu \"Setting\", choose the\"Comm Port Settings\", and it'll popup a \"Serial Advanced Setting\", you could set the port there.  Then connect the USB cable with it, and click the \"Connect\" button on the top of menu.  </p> <p> Input command statement into the below edit box.  and it will output that: </p> <p>Also you use some of the function of the display on the right of the NodeMCU Lua. 1.GPIO Function</p> <p></p> <p>2.you can check the information about the chip and restart NodeMcu.like as bellow:</p> <p></p> <p>3.Connect the wireless networks around you</p> <p></p> <p>4.Download the program</p> <p>In its bottom right corner you will see something about download program function button.</p> <p></p>"},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#3using-arduino-ide","title":"3.Using Arduino IDE","text":"<p>1.Install the Arduino IDE 1.6.4 or greater Download Arduino IDE from Arduino.cc (1.6.4 or greater) - don't use 1.6.2! You can use your existing IDE if you have already installed it.\uff08We're seeing some difficulties with IDE 1.6.6 so please try 1.6.5 or skip 1.6.6!\uff09 You can also try downloading the ready-to-go package from the ESP8266-Arduino project, if the proxy is giving you problems</p> <p>2.Install the COM/Serial port driver for USB. In order to upload code to the ESP8266 and use the serial console, connect any data-capable micro USB cable to ESP8266 IOT Board and the other side to your computer's USB port.</p> <p>3.Install the ESP8266 Board Package  Open Arduino v1.6.4 preferences  </p> <p>Enter the below URL into Additional Board Manager URLs field</p> <pre><code>http://arduino.esp8266.com/stable/package_esp8266com_index.json \n</code></pre> <p></p> <p>Next, use the Board manager to install the ESP8266 package</p> <p> </p> <p>Note: you should close the Arduino v1.6.4 and restart it again.</p> <p>4.Setup ESP8266 Support When you've restarted, select Generic ESP8266 Module from the Tools-&gt;Board dropdown </p> <p>80 MHz as the CPU frequency  15200 baud upload speed (You can also try faster baud rates, we were able to upload at a blistering 921600 baud but sometimes it fails &amp; you have to retry)  The matching COM port for your FTDI or USB-Serial cable </p> <p>and nodemcu as the reset method  Check also that you have</p> <ul> <li>Flash Mode \"QIO\"</li> <li>Flash Frequency \"40MHz\"</li> <li>Upload Using \"Serial\"</li> <li>CPU Frequency \"80 MHz\"</li> <li>Flash Size \"4M\"</li> <li>Reset Method \"nodemcu\"</li> </ul>"},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#4using-luaeditor","title":"4.Using Luaeditor","text":"<p>We use this Luaeditor to edit the program,as follow shows  </p> <p>When you finish your editing, please save as a lua file.</p> <p></p>"},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#5upload-the-program","title":"5.Upload the program","text":"<p>1\uff1aClick the \"Upload file\" then open the file we save on last step.  2: After uploading, you just need to click the \"do file\" and observe the oled. </p>"},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#faq","title":"FAQ","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#how-to-buy","title":"How to buy","text":"<p>You can click here to buy ESP8266 IOT Board(Arduino IDE or NodeMCU Lua Programming).</p>"},{"location":"Products/Arduino/esp8266-iot-boardarduino-ide-or-nodemcu-lua-programming.html#resources","title":"Resources","text":"<ul> <li>Elecrow ESP8266 IOT Board Design files V1.0</li> <li>Crowtail-_ESP8266_Node_MCU_v2.0.zip</li> <li>Elecrow Tools and firmware</li> </ul>"},{"location":"Products/Arduino/io-shield-for-arduino-nano.html","title":"IO Shield For Arduino Nano","text":""},{"location":"Products/Arduino/io-shield-for-arduino-nano.html#description","title":"Description","text":"<p>This Arduino Nano IO Shield can easy support Nano and Pro. Because the Arduino Nano and Pro is too small to connect to jumper wires or breadboard. So this Nano IO Shield is born. The shield has lead out all IOs of Nano or Pro. Module: MCS01005S</p> <p></p> <p></p>"},{"location":"Products/Arduino/io-shield-for-arduino-nano.html#features","title":"Features","text":"<ul> <li>Analog/Digital inputs with VCC/GND</li> <li>Digital IO port 13 ports prepared to digital modules or servos</li> <li>Analog IO Port 6 ports prepared to analog sensor input</li> <li>Breakout I2C and UART communicate port.</li> </ul>"},{"location":"Products/Arduino/io-shield-for-arduino-nano.html#specification","title":"Specification","text":"<ul> <li>Dimension: 57.2 * 53.5mm</li> </ul>"},{"location":"Products/Arduino/io-shield-for-arduino-nano.html#schematic","title":"Schematic","text":"<ul> <li>Reserved port&amp;GVS on top</li> </ul> <ul> <li>Voltage ragulator:5V to 3.3V</li> </ul> <ul> <li>Slot for NANO board</li> </ul> <ul> <li>Serial port</li> </ul> <ul> <li>3V3</li> </ul> <ul> <li>LED</li> </ul> <ul> <li>Power module</li> </ul> <ul> <li>GVS at the bottom</li> </ul> <ul> <li>Reserved port available for UNO at the bottom</li> </ul>"},{"location":"Products/Arduino/io-shield-for-arduino-nano.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Arduino/larduino-mini.html","title":"Larduino Mini","text":""},{"location":"Products/Arduino/larduino-mini.html#introduction","title":"Introduction","text":"<p>Larduino Mini is a new Arduino mainboard compatible with original Arduino interfaces. Larduino Mini compatible to Arduino existing program, shield and IDE.</p> <p>In addition, it has more special function. it can working on overclocking state in some applications, the maximum operating frequency is 32Mhz, which is two times the ordinary Arduino.</p> <p>Programable internal 32MHz calibrated oscillator can help you achieve the seamless switching operating frequency(125Khz to 32Mhz) in your application.</p> <p>Larduino Mini cost low, but powerful, it can satisfy the user demand for low cost DIY.</p> <p>Model: (Discontinued\uff09 </p>"},{"location":"Products/Arduino/larduino-mini.html#features","title":"Features","text":"<ul> <li>Ultra low price, high performance.</li> <li>Compatible to Arduino existing program, shield and IDE.</li> <li>Compatible to original Arduino Pro Mini layout and dimension.</li> <li>Operating clock can reach up to 32MHz(default\uff1a16Mhz).</li> <li>Programable internal 32MHz Calibrated Oscillator.</li> <li>Surport operating voltage: 3.3V/5V.</li> <li>I2C and Serial Grove compatible connector.</li> <li>Wide input voltage range(RAW Pin)\uff1a6-16V.</li> <li>Internal temperature sensor.</li> </ul>"},{"location":"Products/Arduino/larduino-mini.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Arduino/larduino-mini.html#specifications","title":"Specifications","text":"Processor LGT8F88A Flash Memory 8 KB SRAM 2 KB Data FLASH\uff08EEPROM like\uff09 504 Byte Maximum operating clock 32 Mhz Operating voltage 1.8~5.5 V IO pin drive current MAX\uff08Output\uff09 63.1 mA(1) IO pin drive current MAX\uff08Sink\uff09 80 mA(2) <p>(1)\\(2):Surported Pin: D0~D5, with special setting by LarduinoIOEnhance library (Has been included in the Larduino_Mini_Support_Package). Normally the drive current is 12.3mA(Sink) and 36.8mA(Output).</p>"},{"location":"Products/Arduino/larduino-mini.html#electrical-characteristics","title":"Electrical characteristics","text":"Parameter Min. Typical Max. Uint Supply voltage\uff08RAW Pin\uff09 6 7 16 V Supply voltage\uff08VCC Pin\uff09 2.0 5 5.3 V HBM ESD - 4000 - V Temperature -40 25 85 C"},{"location":"Products/Arduino/larduino-mini.html#how-to-use","title":"How to use?","text":"<p>Step 1: Install new version Arduino IDE in your computer.</p> <p>(Surport Arduino 1.0.X and Arduino 1.5.X) Step 2: Download the Larduino Mini Support Package.</p> <p> Step 3: Install Larduino Mini Support Package to Arduino IDE:</p> <p>PS: Before do this, please make sure your Arduino IDE is closed. Unzip the support package file, and move the two Folders(libraries and hardware) to: MacOSX\uff1a /Users/user/Documents/Arduino Windows: C:\\Users\\&lt;USERNAME&gt;\\Documents\\Arduino Linux/Ubuntu: /home/&lt;USERNAME&gt;/sketchbook You can check Arduino-&gt;File-&gt;Preferences to find your support file installation directory.  In my OS, the support package Installed here.  Step 4: Connect Larduino board to your computer with a USB-Serial adapter and USB cable.</p> <p>We recommend you to use our USB Transformer, if you used other USB-Serial adapter, please skip step 5, find and Install your hardware driver by yourself.</p> <p> </p> <p>Step 5: Install the driver of the USB Transformer in your OS.</p> <p>Detailed installation please refer to our WIKI of USB Transformer.Step 6: After the driver installation is complete, open the Arduino IDE.</p> <ol> <li>Select the board: Click Tools -&gt; Board -&gt; Larduino-Core w/ LGT8F88A. </li> <li>Select the COM: Click Tools -&gt; Serial Port -&gt; COMX(which connected with Larduino Mini.)  Step 7: An example of program: Click File -&gt; Examples -&gt; which you want.</li> </ol> <p>Now, let's do a LED flash test.1. Open the blink example.    2. Upload the blink example to Larduino.  3. LED is flashing.     Enjoy yourself!  PS:  The flash size of the Larduino Mini is 7168 Byte(include bootloader), so some of the bigger application may not support at now.  We will launch bigger flash size version of Larduino in the near future, please pay attention to us. Author: Joney E-mail: joney.s@foxmail.com Sparking Work Space</p>"},{"location":"Products/Arduino/larduino-mini.html#version-tracker","title":"Version Tracker","text":"Revision Descriptions Release Date Larduino Mini v0.9b 1. Initial public release Mar 13, 2014 Larduino Mini v1.0 1. Modify the logo position. May 8, 2014"},{"location":"Products/Arduino/larduino-mini.html#resource","title":"Resource","text":"<p>Larduino Mini Support Package</p> <p>Larduino MINI v1.0 Source_File</p> <p>LGT8F88A Datasheet</p>"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v10.html","title":"Leonardo GPRS/GSM IOT Board v1.0","text":""},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v10.html#description","title":"Description","text":"<p>The Leonardo GPRS/GSM IOT Board to provide your project a way of convenient remote control, It\u2019s widely used in remote control, telemetry, communication, automatic control and so on. It can receive phone calls and text message to control the relay ON or OFF. What more, this boards have four relay so that it can control several appliances at the same time.</p> <p>Meanwhile, this boards serves as the main control system applied to smart home. Not only that, it has a mobile phone card that used to realize the idea of furniture anywhere and anytime easily. It can also be used an Arduino/Crowduino to realize the operation of other modules.</p> <p>Model: WCW07517B </p>"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v10.html#features","title":"Features","text":"<ul> <li>GPRS/GSM function</li> <li>Standard Micro SIM Card</li> <li>Power Interface\uff1aUSB,DC</li> <li>Working Frequency: 16MHz</li> <li>Compliant to GSM phase 2/2+</li> <li>Supports 3.0V to 5.0V logic level</li> <li>Microcontroller: ATmega32u4,8-bit AVR MCU</li> <li>Low power consumption, 1mA in sleep mode</li> <li>Supports load: DC/AD maximum current:2A AC:100~240V</li> <li>Controlled by AT Command (3GPP TS 27.007, 27.005 and SIMCOM enhanced AT Commands).</li> <li>Quad-Band 850 / 900/ 1800 / 1900 MHz - would work on GSM networks in all countries across the world.</li> <li>Class 4 (2 W @ 850 / 900 MHz)</li> <li>Class 1 (1 W @ 1800 / 1900MHz)</li> </ul>"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v10.html#specifications","title":"Specifications","text":"Item  Min  Typical  Max  Unit  USB 5 5 5 VDC  External power 7 - 12 VDC  Current 40 40 40 mA  Dimensions(with antenna)  107.0 x 65.0 x 24.0 mm  Temperature -30~+85 \u00b0C"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v10.html#interface-function","title":"Interface Function","text":"<p>Net Status - tell the status about SIM808 linking to the net Antenna - connected to external antenna External Power - Vin connected to external 5~9VDC power supply USB Power - connected to computer and power supply ISP - Burn bootloader Rst Key - Restart system Power key - power up and down for SIM808 Power Status - tell whether sys power Work Status - tell whether the power of SIM808 is on Relay1-4 - relay channel,normall off  </p>"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v10.html#cautions","title":"Cautions","text":"<p>Make sure your SIM card is unlocked.The product is provided as is without an insulating enclosure. Please observe ESD precautions specially in dry (low humidity) weather.</p>"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v10.html#hardware-installtion","title":"Hardware installtion","text":"<p>1.Insert an Micro SIM card to SIM Card Holder 6 Pin Holder for SIM Cards. Both 1.8 volts and 3.0 volts SIM Cards are supported by SIM808 - the SIM card voltage type is automatically detected.</p> <p></p> <p>2.Make sure the antenna pad buckled properly - A miniature coaxial RF connector is present on the GPRS Shield board to connect with a GSM Antenna. The connector present on the GPRS Shield is called a U.FL connecto. The GSM Antenna supplied with the GPRS Shield has an SMA connector (and not an RP-SMA connector) on it. A patch cord is also supplied with the GPRS Shield to interface the antenna to the board. The connection topology is shown in the diagram below:Auto power on but if cannot open and that you can open it manual opration below this picture</p> <p></p> <p>3.Upload the following code.</p> <p>File:SMS control relay.zip</p> <pre><code>/*\n * Author: Elecrow Keen\n * Date:6/30/2017\n * IDE V1.8.2 \n * Email:keen@elecrow.com    \n * Function: SMS control relay\n * Please note:\n    When the the board receive \"R1O\" by SMS, the relay 1 will be open and the \"R1C\" that it will be close. \n\n    \"R1O\"/\"\"R1C\" means:\n      R -&gt;  Relay\n      1 -&gt;  Relay 1 \n      O -&gt;  Open\n      C -&gt;  Close\n\n    It also used Relay2,Relay3 and Relay4.\n */\n\n#define DEBUG true    //Open the debug information \n\n // the number of the Relay pin\nconst int Relay1 = 3;\nconst int Relay2 = 2;\nconst int Relay3 = 4;\nconst int Relay4 = 5;\n/*\nR1O means open  relay 1\nR1C means close relay 1\nThe same as others \n*/\nString R1O = \"R1O\";\nString R1C = \"R1C\";\nString R2O = \"R2O\";\nString R2C = \"R2C\";\nString R3O = \"R3O\";\nString R3C = \"R3C\";\nString R4O = \"R4O\";\nString R4C = \"R4C\";\n\nchar target[] =\"+CMTI\";  \nint sms_no;\nString get_message = \"\";   \n\nvoid setup() {  \n      Serial.begin(19200); \n      Serial1.begin(19200); \n      for(int i=2;i&lt;6;i++){ // initialize the Relay pins as an output:\n        pinMode(i,OUTPUT);\n      }\n      for(int i=2;i&lt;6;i++){// initialize the Relay pins status:\n        digitalWrite(i,LOW);\n      }\n      //Power on the SIM800C\n      pinMode(9,OUTPUT);\n      digitalWrite(9,HIGH);\n      delay(3000);\n      digitalWrite(9,LOW);\n      delay(1000);\n      sendData(\"AT\",2000,DEBUG);\n      sendData(\"AT+CMGF=1\",1000,DEBUG);        //Set the SMS in text mode\n} \n\nvoid loop() { \n       if(Serial1.available()&gt;0){    \n          if(Serial1.find(target)){                  //If receive a new SMS\n             sms_no = Serial1.parseInt();            //Get the SMS ID        \n             get_message = \"AT+CMGR=\"+(String)sms_no; //The command of the content of the SMS\n             Serial.println(\"******************** Print the relay status *********************\" );\n             Data_handling(get_message,500,DEBUG);    //Get the content of the SMS \n             Serial.println(\"*****************************END*********************************\" );\n         } \n     }\n     while(Serial1.read() &gt;= 0){}                     // Clear serial buffer   \n}\n\nvoid Data_handling(String command, const int timeout, boolean debug)  //data handling function\n{\n    String response = \"\";    \n    Serial1.println(command); \n    long int time = millis();\n    while( (time+timeout) &gt; millis()){\n      while(Serial1.available()){       \n        response += (char)Serial1.read(); \n      }  \n    }    \n   if (response.indexOf(R1O)&gt;=0) {\n    digitalWrite(Relay1,HIGH);\n    if(debug){\n    Serial.println(\"Open Relay 1\");\n    }\n    }\n   else if (response.indexOf(R1C)&gt;=0) {\n    digitalWrite(Relay1,LOW);\n    if(debug){\n    Serial.println(\"Close Relay 1\");\n    }\n   }\n   else if(response.indexOf(R2O)&gt;=0) {\n    digitalWrite(Relay2,HIGH);\n    if(debug){\n    Serial.println(\"Open Relay 2\");\n    }\n   }\n   else if(response.indexOf(R2C)&gt;=0) {\n    digitalWrite(Relay2,LOW);\n    if(debug){\n    Serial.println(\"Close Relay 2\");\n    }\n   }\n   else if (response.indexOf(R3O)&gt;=0) {\n    digitalWrite(Relay3,HIGH);\n    if(debug){\n    Serial.println(\"Open Relay 3\");\n    }\n   }\n   else if(response.indexOf(R3C)&gt;=0) {\n    digitalWrite(Relay3,LOW);\n    if(debug){\n    Serial.println(\"Close Relay 3\");\n    }\n   }\n   else if(response.indexOf(R4O)&gt;=0) {\n    digitalWrite(Relay4,HIGH);\n    if(debug){\n    Serial.println(\"Open Relay 4\");\n    }\n   }\n   else if(response.indexOf(R4C)&gt;=0) {\n    digitalWrite(Relay4,LOW);\n    if(debug){\n    Serial.println(\"Close Relay 4\");\n    }\n   }else\n   Serial.println(\"....Error message....\");\n}\n\nvoid sendData(String command, const int timeout, boolean debug)  //Send command function\n{\n    String response = \"\";    \n    Serial1.println(command); \n    long int time = millis();\n    while( (time+timeout) &gt; millis()){\n      while(Serial1.available()){       \n        response += (char)Serial1.read(); \n      }  \n    }    \n    if(debug){\n      Serial.print(response);\n    }    \n}\n</code></pre> <p></p> <p>4.Power supply for GPRS shield - Select power source with the switch on board, you can select the 5V power supply from arduino or exteral power.Select the 5V source from Arduino as the following picture:</p> <p>5.Turn on the GSM/GPRS Board Turn on through Hardware. Press the the 'POWERKEY' for few seconds until Power-on indicator(Green) is on</p> <p></p> <p>6.Running the Sketches In each serial monitor window, you can see a \u2018s\u2019 and then Send a text message to the test card; if the light turn on that it normally. For example, you can send \u2018R1O\u2019 to this than first light turn on and send \u2018R1C\u2019 to it then turn off.</p> <p></p>"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v10.html#debug-through-computer","title":"Debug through computer","text":""},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v10.html#resource","title":"Resource","text":"<p>File:Leonardo.zip</p>"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v11.html","title":"Leonardo GPRS/GSM IOT Board v1.1","text":""},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v11.html#description","title":"Description","text":"<p>The Leonardo GPRS/GSM IOT Board to provide your project a way of convenient remote control, It\u2019s widely used in remote control, telemetry, communication, automatic control and so on. It can receive phone calls and text message to control the relay ON or OFF. What more, this boards have four relay so that it can control several appliances at the same time.</p> <p>Meanwhile, this boards serves as the main control system applied to smart home. Not only that, it has a mobile phone card that used to realize the idea of furniture anywhere and anytime easily. It can also be used an Arduino/Crowduino to realize the operation of other modules.</p> <p>Model: WCW07517B </p>"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v11.html#features","title":"Features","text":"<ul> <li>GPRS/GSM function</li> <li>Standard Micro SIM Card</li> <li>Power Interface\uff1aUSB,DC</li> <li>Working Frequency: 16MHz</li> <li>Compliant to GSM phase 2/2+</li> <li>Supports 3.0V to 5.0V logic level</li> <li>Microcontroller: ATmega32u4,8-bit AVR MCU</li> <li>Low power consumption, 1mA in sleep mode</li> <li>Supports load: DC/AD maximum current:2A AC:100~240V</li> <li>Controlled by AT Command (3GPP TS 27.007, 27.005 and SIMCOM enhanced AT Commands).</li> <li>Quad-Band 850 / 900/ 1800 / 1900 MHz - would work on GSM networks in all countries across the world.</li> <li>Class 4 (2 W @ 850 / 900 MHz)</li> <li>Class 1 (1 W @ 1800 / 1900MHz)</li> </ul>"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v11.html#specifications","title":"Specifications","text":"Item  Min  Typical  Max  Unit  USB 5 5 5 VDC  External power 7 - 12 VDC  Current 40 40 40 mA  Dimensions(with antenna)  107.0 x 65.0 x 24.0 mm  Temperature -30~+85 \u00b0C"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v11.html#interface-function","title":"Interface Function","text":"<p>Net Status - tell the status about SIM808 linking to the net Antenna - connected to external antenna External Power - Vin connected to external 5~9VDC power supply USB Power - connected to computer and power supply ISP - Burn bootloader Rst Key - Restart system Power key - power up and down for SIM808 Power Status - tell whether sys power Work Status - tell whether the power of SIM808 is on Relay1-4 - relay channel,normall off  </p>"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v11.html#cautions","title":"Cautions","text":"<ul> <li>Make sure your SIM card is unlocked.</li> <li>The product is provided as is without an insulating enclosure. Please observe ESD precautions specially in dry (low humidity) weather.</li> </ul>"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v11.html#hardware-installtion","title":"Hardware installtion","text":"<p>1.Insert an Micro SIM card to SIM Card Holder 6 Pin Holder for SIM Cards. Both 1.8 volts and 3.0 volts SIM Cards are supported by SIM808 - the SIM card voltage type is automatically detected.</p> <p></p> <p>2.Make sure the antenna pad buckled properly - A miniature coaxial RF connector is present on the GPRS Shield board to connect with a GSM Antenna. The connector present on the GPRS Shield is called a U.FL connecto. The GSM Antenna supplied with the GPRS Shield has an SMA connector (and not an RP-SMA connector) on it. A patch cord is also supplied with the GPRS Shield to interface the antenna to the board. The connection topology is shown in the diagram below:Auto power on but if cannot open and that you can open it manual opration below this picture</p> <p></p> <p>3.Upload the following code.</p> <p>File:SMS control relay.zip</p> <pre><code>/*\n * Author: Elecrow Keen\n * Date:6/30/2017\n * IDE V1.8.2 \n * Email:keen@elecrow.com    \n * Function: SMS control relay\n * Please note:\n    When the the board receive \"R1O\" by SMS, the relay 1 will be open and the \"R1C\" that it will be close. \n\n    \"R1O\"/\"\"R1C\" means:\n      R -&gt;  Relay\n      1 -&gt;  Relay 1 \n      O -&gt;  Open\n      C -&gt;  Close\n\n    It also used Relay2,Relay3 and Relay4.\n */\n\n#define DEBUG true    //Open the debug information \n\n // the number of the Relay pin\nconst int Relay1 = 3;\nconst int Relay2 = 2;\nconst int Relay3 = 4;\nconst int Relay4 = 5;\n/*\nR1O means open  relay 1\nR1C means close relay 1\nThe same as others \n*/\nString R1O = \"R1O\";\nString R1C = \"R1C\";\nString R2O = \"R2O\";\nString R2C = \"R2C\";\nString R3O = \"R3O\";\nString R3C = \"R3C\";\nString R4O = \"R4O\";\nString R4C = \"R4C\";\n\nchar target[] =\"+CMTI\";  \nint sms_no;\nString get_message = \"\";   \n\nvoid setup() {  \n      Serial.begin(19200); \n      Serial1.begin(19200); \n      for(int i=2;i&lt;6;i++){ // initialize the Relay pins as an output:\n        pinMode(i,OUTPUT);\n      }\n      for(int i=2;i&lt;6;i++){// initialize the Relay pins status:\n        digitalWrite(i,LOW);\n      }\n      //Power on the SIM800C\n      pinMode(9,OUTPUT);\n      digitalWrite(9,HIGH);\n      delay(3000);\n      digitalWrite(9,LOW);\n      delay(1000);\n      sendData(\"AT\",2000,DEBUG);\n      sendData(\"AT+CMGF=1\",1000,DEBUG);        //Set the SMS in text mode\n} \n\nvoid loop() { \n       if(Serial1.available()&gt;0){    \n          if(Serial1.find(target)){                  //If receive a new SMS\n             sms_no = Serial1.parseInt();            //Get the SMS ID        \n             get_message = \"AT+CMGR=\"+(String)sms_no; //The command of the content of the SMS\n             Serial.println(\"******************** Print the relay status *********************\" );\n             Data_handling(get_message,500,DEBUG);    //Get the content of the SMS \n             Serial.println(\"*****************************END*********************************\" );\n         } \n     }\n     while(Serial1.read() &gt;= 0){}                     // Clear serial buffer   \n}\n\nvoid Data_handling(String command, const int timeout, boolean debug)  //data handling function\n{\n    String response = \"\";    \n    Serial1.println(command); \n    long int time = millis();\n    while( (time+timeout) &gt; millis()){\n      while(Serial1.available()){       \n        response += (char)Serial1.read(); \n      }  \n    }    \n   if (response.indexOf(R1O)&gt;=0) {\n    digitalWrite(Relay1,HIGH);\n    if(debug){\n    Serial.println(\"Open Relay 1\");\n    }\n    }\n   else if (response.indexOf(R1C)&gt;=0) {\n    digitalWrite(Relay1,LOW);\n    if(debug){\n    Serial.println(\"Close Relay 1\");\n    }\n   }\n   else if(response.indexOf(R2O)&gt;=0) {\n    digitalWrite(Relay2,HIGH);\n    if(debug){\n    Serial.println(\"Open Relay 2\");\n    }\n   }\n   else if(response.indexOf(R2C)&gt;=0) {\n    digitalWrite(Relay2,LOW);\n    if(debug){\n    Serial.println(\"Close Relay 2\");\n    }\n   }\n   else if (response.indexOf(R3O)&gt;=0) {\n    digitalWrite(Relay3,HIGH);\n    if(debug){\n    Serial.println(\"Open Relay 3\");\n    }\n   }\n   else if(response.indexOf(R3C)&gt;=0) {\n    digitalWrite(Relay3,LOW);\n    if(debug){\n    Serial.println(\"Close Relay 3\");\n    }\n   }\n   else if(response.indexOf(R4O)&gt;=0) {\n    digitalWrite(Relay4,HIGH);\n    if(debug){\n    Serial.println(\"Open Relay 4\");\n    }\n   }\n   else if(response.indexOf(R4C)&gt;=0) {\n    digitalWrite(Relay4,LOW);\n    if(debug){\n    Serial.println(\"Close Relay 4\");\n    }\n   }else\n   Serial.println(\"....Error message....\");\n}\n\nvoid sendData(String command, const int timeout, boolean debug)  //Send command function\n{\n    String response = \"\";    \n    Serial1.println(command); \n    long int time = millis();\n    while( (time+timeout) &gt; millis()){\n      while(Serial1.available()){       \n        response += (char)Serial1.read(); \n      }  \n    }    \n    if(debug){\n      Serial.print(response);\n    }    \n}\n</code></pre> <p></p> <p>4.Power supply for GPRS shield - Select power source with the switch on board, you can select the 5V power supply from arduino or exteral power.Select the 5V source from Arduino as the following picture:</p> <p>5.Turn on the GSM/GPRS Board Turn on through Hardware. Press the the 'POWERKEY' for few seconds until Power-on indicator(Green) is on</p> <p></p> <p>6.Running the Sketches In each serial monitor window, you can see a \u2018s\u2019 and then Send a text message to the test card; if the light turn on that it normally. For example, you can send \u2018R1O\u2019 to this than first light turn on and send \u2018R1C\u2019 to it then turn off.</p> <p></p>"},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v11.html#debug-through-computer","title":"Debug through computer","text":""},{"location":"Products/Arduino/leonardo-gprsgsm-iot-board-v11.html#resource","title":"Resource","text":"<p>File:Leonardo.zip</p>"},{"location":"Products/Arduino/nano-168arduino-compatible.html","title":"Nano 168(Arduino Compatible)","text":""},{"location":"Products/Arduino/nano-168arduino-compatible.html#description","title":"Description","text":"<p>The Nano 168 is a small, complete, and breadboard-friendly board based on the ATmega328 (Arduino Nano 3.0) or ATmega168 (Arduino Nano 2.x).It have an integrated on-board USB. As the function, It has almost all the analog and digital pins that the UNO or Duemilanove has and the same function as Duemilanove or UNO except the Microcontroller is using Mega 168. Its price is cheaper than Nano 328(Arduino compatible), the only difference of them is the MicroController, one using Mega 168 and the other one using Mega 328. This Nano 168 can give more selections for your project. With the smaller and portable package. This Nano 168 can go with the IO Shield for Arduino Nano, it would be more friendly and convenient for users to enter the Arduino world and make use of Arduino to make their dream into reality. As an upgrade version of Arduino Nano, the Nano 168 is 100% compatible to Arduino Nano and its shield and IDEs. On the hardware part, remarkable changes are taken to improve the flexibility and user experience. Model: MCA03168A</p> <p></p> <p></p>"},{"location":"Products/Arduino/nano-168arduino-compatible.html#features","title":"Features","text":"<ul> <li>Power OK red LED, Green (TX), green (RX) and green (L) LED</li> <li>Upgraded 5V voltage sourcing, more powerful drive capability</li> <li>Mini-B USB for programming and serial monitor, TX&amp;RX breakout for application as USB-UART convertor</li> <li>Surface-Mount ICSP header</li> <li>Standard 2.54mm spacing DIP (breadboard friendly)</li> </ul>"},{"location":"Products/Arduino/nano-168arduino-compatible.html#specification","title":"Specification","text":"Item Value Micro controller ATmega168 Operating Voltage(logic level) 5V Input Voltage(recommended) 7-12 V Input Voltage(limits) 6-20 V Digital I/O Pins 14 (of which 6 provide PWM output) Analog Input Pins 8 DC Current per I/O Pin 40 mA Flash Memory 16 KB (ATmega168) or 32 KB (ATmega328) of which 2 KB used by bootloader SRAM 1 KB (ATmega168) or 2 KB (ATmega328) EEPROM 512 bytes (ATmega168) or 1 KB (ATmega328) Clock Speed 16 MHz Dimension 0.73\" x 1.70\""},{"location":"Products/Arduino/nano-168arduino-compatible.html#power","title":"Power","text":"<p>The Arduino Nano can be powered via the Mini-B USB connection, 6-20V unregulated external power supply (pin 30), or 5V regulated external power supply (pin 27). The power source is automatically selected to the highest voltage source. The FTDI FT232RL chip on the Nano is only powered if the board is being powered over USB. As a result, when running on external (non-USB) power, the 3.3V output (which is supplied by the FTDI chip) is not available and the RX and TX LEDs will flicker if digital pins 0 or 1 are high.</p>"},{"location":"Products/Arduino/nano-168arduino-compatible.html#memory","title":"Memory","text":"<p>The ATmega168 has 16 KB of flash memory for storing code (of which 2 KB is used for the bootloader); the ATmega328 has 32 KB, (also with 2 KB used for the bootloader). The ATmega168 has 1 KB of SRAM and 512 bytes of EEPROM (which can be read and written with the EEPROM library); the ATmega328 has 2 KB of SRAM and 1 KB of EEPROM.</p>"},{"location":"Products/Arduino/nano-168arduino-compatible.html#pin-layout","title":"Pin Layout","text":"Pin No. Pin Name Type Description 1-2, 5-16 D0-D13 I/O Digital input/output port 0 to 13 3, 28 RST Input Reset(active low) 4,29 GND PWR Supply ground 17 3V3 Output +3.3V output(from FTDI) 18 AREF Input ADC reference 19-26 A0-A7 Input Analog input channel 0 to 7 27 +5V Output or Input +5V output(from on-board regulator) or  +5V input(from external power supply) 30 VIN PWR Supply voltage"},{"location":"Products/Arduino/nano-168arduino-compatible.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Arduino/nano-168arduino-compatible.html#usage","title":"Usage","text":""},{"location":"Products/Arduino/nano-168arduino-compatible.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs:  </p> Nano 168 Get one now <p>STEP2 Connect Nano 168 to PC via a USB cable.</p>"},{"location":"Products/Arduino/nano-168arduino-compatible.html#software","title":"Software","text":"<p>STEP1 Download program files Nano_test.zip STEP2 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cATmega168\u201d from the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure.  STEP 3.Open the program in the Arduino IDE</p> <pre><code>/*\n  Analog input, analog output, serial output\n\n Reads an analog input pin, maps the result to a range from 0 to 255\n and uses the result to set the pulsewidth modulation (PWM) of an output pin.\n Also prints the results to the serial monitor.\n\n The circuit:\n * potentiometer connected to analog pin 0.\n   Center pin of the potentiometer goes to the analog pin.\n   side pins of the potentiometer go to +5V and ground\n * LED connected from digital pin 9 to ground\n\n created 29 Dec. 2008\n modified 9 Apr 2012\n by Tom Igoe\n\n This example code is in the public domain.\n\n */\n\n// These constants won't change.  They're used to give names\n// to the pins used:\nconst int analogInPin = A0;  // Analog input pin that the potentiometer is attached to\nconst int analogOutPin = 9; // Analog output pin that the LED is attached to\nint led = 13;\nint sensorValue = 0;        // value read from the pot\nint outputValue = 0;        // value output to the PWM (analog out)\n\nvoid setup() {\n  // initialize serial communications at 9600 bps:\n  Serial.begin(9600); \n    pinMode(led, OUTPUT);    \n}\n\nvoid loop() {\n  // read the analog in value:\n  sensorValue = analogRead(analogInPin);            \n  // map it to the range of the analog out:\n  outputValue = map(sensorValue, 0, 1023, 0, 255);  \n  // change the analog out value:\n  analogWrite(analogOutPin, outputValue);           \n\n  // print the results to the serial monitor:\n  Serial.print(\"sensor = \" );                       \n  Serial.print(sensorValue);      \n  Serial.print(\"\\t output = \");      \n  Serial.println(outputValue);   \n\n  // wait 2 milliseconds before the next loop\n  // for the analog-to-digital converter to settle\n  // after the last reading:\n // delay(2);                     \n   digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)\n  delay(500);               // wait for a second\n  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW\n  delay(500);               // wait for a second\n}\n</code></pre> <p>STEP4 Click the  to upload the code to the Arduino Nano STEP5 After downloading the test program, open the Serial Monitor, which shows output, L (yellow) and TX (green) LED lights on the board flashing, PWR (blue) LED lights on long </p>"},{"location":"Products/Arduino/nano-168arduino-compatible.html#faqs","title":"FAQs","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Arduino/nano-168arduino-compatible.html#resources","title":"Resources","text":"<p>Nano_test.zip</p>"},{"location":"Products/Arduino/rfm69-shield.html","title":"RFM69 Shield","text":""},{"location":"Products/Arduino/rfm69-shield.html#introduction","title":"Introduction","text":"<p>The RFM69 Shield- 434MHZ is an inexpensive and versatile radio module. You can use it to send text or binary data between two or hundreds of modules. It\u2019s perfect for building inexpensive short-range wireless networks for home automation, citizen science, and more.</p> <p>Model: ACS15238R </p>"},{"location":"Products/Arduino/rfm69-shield.html#features","title":"Features","text":"<ul> <li>Frequency Range = Software configurable from ~240MHz to 980MHz</li> <li>Sensitivity = -118 dBm</li> <li>+17 dBm Max Output Power (Configurable)</li> <li>Data Rate = 1 to 128 kbps</li> <li>Digital RSSI</li> <li>Wake-on-radio</li> <li>Configurable packet structure</li> <li>Preamble detector</li> <li>TX and RX 64 byte FIFOs</li> <li>Low battery detector</li> <li>Temperature sensor and 8-bit ADC</li> <li>-40 to +85 \u00b0C temperature range</li> <li>Dimensions(mm):47.2(L)x53.5(W)x23.5(H)</li> </ul>"},{"location":"Products/Arduino/rfm69-shield.html#usage","title":"Usage","text":"<p>The RFM69 Sheild is very easy to use. You need at least two of the shield and two Crowduino board. This program is used two this shield.</p> <p>1. Plug the RFM69 shield into the Crowduino and connect the shield to the computer by USB cable.</p> <p></p> <p>2. Download the RFM69.zip Library. Unzip and put it in the libraries file of Arduino IDE by the path: ..\\arduino-1.0.x\\libraries;</p> <p>3. Before you upload the code to your Arduino, you\u2019ll need to customize it for each node. Use the code below, and make the following changes for each separate node.</p>"},{"location":"Products/Arduino/rfm69-shield.html#node-1","title":"Node 1","text":"<p>Let's set it up for your FIRST node:</p> <p>1.Near the top of the code, look for #define NETWORKID, and change the value to 0. This will be the network all your nodes are part of, so it should be the same for all your nodes. (You can of course make this any number from 0 to 255, as long as it's the same for all your nodes.)</p> <p>2.Now look for the #define MYNODEID line, and change the value to 1. That will be this node's address.</p> <p>3.Look for the #define TONODEID line, and change the value to 2. That will be the other node's address; the one you'll be talking to.</p> <p>4.Below these lines will be a section for defining the radio frequency of your RFM69HCW board. Uncomment the line corresponding to your board's frequency, and make sure the others are commented (have // in front of them. If you forget it, the frequency is marked on the bottom of your RFM69HCW board).</p> <p>5.If you want to use encryption, change the #define ENCRYPT value to true, and put a 16-character string of your choice into the ENCRYPTKEY value. This key must be the same for all &lt;&gt;nodes on your network. Keep it a secret!</p> <p>6.Finally, if you wish to use acknowledgements, set USEACK to true. If not, set it to false. Use the same setting for all your nodes.</p> <p>7.Now upload the sketch to your FIRST node. Remember that you should set the \u201cTools/Port\u201d menu to the COM port you wrote down earlier for the FIRST node, and if you're using a 3.3V Arduino Pro as we recommend, you should set the \u201cTools/Board\u201d menu to \u201cArduino Pro or Pro Mini\u201d and \u201cTools/Processor\u201d to \u201cATmega328 (3.3V, 8MHz)\u201d</p>"},{"location":"Products/Arduino/rfm69-shield.html#node-2","title":"Node 2","text":"<p>Time to modify the sketch for the SECOND node.</p> <p>Go back up to the #define MYNODEID line, and change the number to 2. That will be this node\u2019s address.</p> <p>Now look for the #define TONODEID line, and change the number to 1. That will be the other node\u2019s address; the one you\u2019ll be talking to.</p> <p>See how we swapped the MYNODEID and TONODEID numbers? This way each node will send messages to the other one.</p> <p>Upload the sketch to your SECOND node. Change the \u201cTools/Port\u201d menu to the second COM Port you wrote down from above, and upload. That\u2019s it, we\u2019re done!</p>"},{"location":"Products/Arduino/rfm69-shield.html#load-and-modify-the-code","title":"Load and Modify the Code","text":"<p>Copy the code from the below window into the Arduino IDE (be sure the editing window is completely blank first). After you\u2019ve installed the RFM69 library, you can also find this code in the Arduino IDE under \u201cFile / Examples / RFM69 / SFE_RFM69HCW_example.ino\u201d. Don\u2019t forget to make the changes mentioned above.</p> <pre><code>Copy the code from the below window into the Arduino IDE (be sure the editing window is completely blank first). After you\u2019ve installed the RFM69 library, you can also find this code in the Arduino IDE under \u201cFile / Examples / RFM69 / SFE_RFM69HCW_example.ino\u201d. Don\u2019t forget to make the changes mentioned above.\n</code></pre>"},{"location":"Products/Arduino/rfm69-shield.html#running-the-sketches","title":"Running the Sketches","text":"<p>You now have two nodes that will send messages to each other, but, to use them, we\u2019ll need to open two serial terminals.</p> <p>One way to do this is to run two separate Arduino IDEs. You\u2019ll have to actually start Arduino twice - you can\u2019t just open a \u201cnew\u201d code window from the first IDE.</p> <p>Set one IDE to the COM port of the first node and the other to the COM port of the second. Then, open serial monitor windows from both IDEs.</p> <p>In each serial monitor window, you\u2019ll need to set the baud rate to 9600 and make sure the \u201cline ending\u201d dropdown is set to \u201ccarriage return.\u201d (The example code uses carriage returns as a signal to send a packet.)</p> <p>Once both windows are up, you should be able to type messages in the text entry box at the top of one window and press return to send the message to the other window. Try it!</p> <p></p>"},{"location":"Products/Arduino/rfm69-shield.html#resources","title":"Resources","text":"<p>RFM69.zip</p>"},{"location":"Products/Arduino/screw-shield.html","title":"Screw Shield","text":""},{"location":"Products/Arduino/screw-shield.html#description","title":"Description","text":"<p>The Screw Shield extends all pins of the Arduino out to 3.5mm pitch screw terminals. It also has a lot of the utility provided by Arduino Protoshield, including: a large prototyping space of both connected and unconnected 0.1\" spaced through-holes, a couple 5V and GND busses, a reset button, and a 5mm green LED. The Screw terminal can be screwed directly to the terminal on the thread and is reliable and convenient. It can be plugged into the Arduino controller. You can use this shield to save yourself from the bad port connection. Feel secure with this arduino-compatible screw shield. Module\uff1aMCS01110</p> <p></p> <p></p>"},{"location":"Products/Arduino/screw-shield.html#schematic","title":"Schematic","text":""},{"location":"Products/Arduino/screw-shield.html#faqs","title":"FAQs","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Arduino/screw-shield.html#resources","title":"Resources","text":"<p>ScrewShield-Eaglefile.zip</p>"},{"location":"Products/Arduino/smart-pump-shield.html","title":"Smart Pump Shield","text":""},{"location":"Products/Arduino/smart-pump-shield.html#description","title":"Description","text":"<p>The smart Pump Shield is based on Arduino Lenardo which has integrated into the mainboard. The mainboard will send the command to turn on the pump and suck water into the switch, the switch will separate the stream and will give just enough water for your plants. Then it will close the pump and the switch and continue to check when does your plant needs water. We add a RTC to set timing watering and a 0.96 inch OLED to show the time and the soil moisture status.</p> <p>Model: PSMC18001M </p> <p></p>"},{"location":"Products/Arduino/smart-pump-shield.html#features","title":"Features","text":"<ul> <li>Eliminates the need for messy jumpers and breadboards, connect all sensors and modules with ease!</li> <li>Integrated Arduino UNO into the main board, program it easily.</li> <li>Power the board with single 12V power supply directly.</li> <li>4 interfaces for sensors, one interface for water switch and one interface for motor or pump.</li> </ul>"},{"location":"Products/Arduino/smart-pump-shield.html#specifications","title":"Specifications","text":"Item Value Size of the box 25 x 19 x 5.7cm Length of water pipe 5m Length of 4 Pin Crowtail cable 1m"},{"location":"Products/Arduino/smart-pump-shield.html#interfaces","title":"Interfaces","text":""},{"location":"Products/Arduino/smart-pump-shield.html#usage","title":"Usage","text":""},{"location":"Products/Arduino/smart-pump-shield.html#hardware-connection","title":"Hardware Connection","text":"<p>Connect the Smart Pump Board to your computer system  Attach the micro USB side of the cable to the Smart Pump Board and the other end of the USB cable to an USB port in your computer. Notice\uff1aPlease power the board by DC power when you upload the code   </p>"},{"location":"Products/Arduino/smart-pump-shield.html#software","title":"Software","text":"<p>STEP 1. Download the library and the program </p> <ul> <li>1.Download the Library: Watering_kit_library.zip and extract it. Copy it to the file-libraries in the arduino IDE file,i.e. D:\\Program Files (x86)\\Arduino\\libraries.</li> <li>2.Download the program at watering_kit.zip Extract the file from the zip file. The filename is watering_kit.ino</li> </ul> <p>STEP 2. Configure which controller board will be used in the Arduino IDE</p> <p>On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Leonardo\u201dfrom the available options. </p> <p>STEP 3. Configure which communication port to use</p> <p>The Arduino IDE needs to know in which USB computer port the Arduino Leonardo controller is connected in order to communicate with it. To do so, select \u201cTools&gt;Port\u201d and select the COM port that indicates Arduino Leonardo. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure.  Once completed, proceed to the next section to upload the program into the Arduino IDE and program the Arduino Leonard controller in the Smart Pump Board.</p> <p>STEP 4. Load the program in the Arduino IDE</p> <p> </p> <p>STEP 5. Click the  to upload the code to the Arduino board</p>"},{"location":"Products/Arduino/smart-pump-shield.html#assembling-the-components","title":"Assembling the components","text":"<p>Note: For an overview of the process please watch this YouTube video . 1. Attach the cable to the Soil Humidity Sensors as shown in the figure. Repeat for each sensor.  2. Connect the Soil Humidity Sensors to the Smart Pump Board  3. Connect the Water Pump and the Four-way Valve to the Smart Pump Board  4. Cut the plastic water pipe     First cut: for water source to water pump input (depends on water source height)     Second cut: water pump output to five-way valve input. (depends on how you locate the plants)     Third cut: 4 pieces for the output valves in the five-way valve to the input of the four-way water valves. (depends on how you locate the plants)     Fourth cut: 4 pieces for the output valves of the four-way water valves to the soil where each plant is planted. (depends on how you locate the plants)  5. Connect the Water Pipes     Cut the water pipe and divide them to 6 parts. Make sure the pipe that goes inside the water source will be long enough to reach the water. We\u2019ll connect 2 of the pipes to the pump, one sucks the water from the water sources while the other connects to the five-way water pipe.      Connect five pipes to the valves.   6. Power it Up!     Just power the board with single 12V power supply directly! The shield will split the power between the Leonardo and the other devices. That way, the Leonardo will get 5V while the pump and the switch will get 12V.      </p>"},{"location":"Products/Arduino/smart-pump-shield.html#faqs","title":"FAQs","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Arduino/smart-pump-shield.html#resources","title":"Resources","text":"<p>Crowtail-Smart_Pump_Shield-V3.2.zip</p>"},{"location":"Products/Arduino/text.html","title":"TEXT","text":""},{"location":"Products/Arduino/text.html#interface-function","title":"Interface Function","text":"<ul> <li>Onboard Ports and Functions</li> </ul> Basic Function Overview Prototype Parameter Descripition createSprite() The createSprite() function is used in the LovyanGFX library to create graphic sprites. Before drawing patterns, the screen size needs to be configured. LGFX_Sprite createSprite(int16_t w, int16_t h); w: the width of the sprite. h: the height of the sprite. Return value: an object of type LGFX_Sprite, representing the created graphic sprite. fillRect() The fillRect() function is used in the LovyanGFX library to draw rectangles. void fillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color); x, y: the coordinates of the upper-left corner of the rectangle. w, h: the width and height of the rectangle. color: the fill color. It can be an RGB888 format color value or an RGB565 format color value. drawLine() The drawLine() function is used in the LovyanGFX library to draw straight lines. void drawLine(int32_t x0, int32_t y0, int32_t x1, int32_t y1, uint32_t color); x0, y0: the starting coordinates of the line. x1, y1: the ending coordinates of the line. color: the color of the line. It can be an RGB888 format color value or an RGB565 format color value. drawCircle() The drawCircle() function is used in the LovyanGFX library to draw circles. void drawCircle(int32_t x, int32_t y, int32_t r, uint32_t color); x, y: the coordinates of the center of the circle. r: the radius of the circle. color: the color of the circle. It can be an RGB888 format color value or an RGB565 format color value. loadFont() The loadFont() function is used in the LovyanGFX library to load small fonts. void loadFont(small); small: the type of small font to be loaded. setTextColor() The setTextColor() function is used in the LovyanGFX library to set the text and background colors. void setTextColor(uint32_t color1, uint32_t color2); Color1: the color of the text. It can be an RGB888 format color value or an RGB565 format color value. Color2: the color of the background. It can be an RGB888 format color value or an RGB565 format color value. drawString() The drawString() function is used in the LovyanGFX library to draw strings. void drawString(const char* str, int32_t x, int32_t y); str: the string to be drawn. x, y: the coordinates of the lower-left corner of the string. pushSprite() The pushSprite() function is used in the LovyanGFX library to draw graphic sprites on the screen. After drawing the pattern, this function needs to be called. void pushSprite(int32_t x, int32_t y); x: the horizontal coordinate of the sprite on the screen. y: the vertical coordinate of the sprite on the screen."},{"location":"Products/Arduino-Kit/growcube.html","title":"GrowCube","text":""},{"location":"Products/Arduino-Kit/growcube.html#description","title":"Description","text":"<p>GrowCube is a smart watering product designed by Elecrow. It offers you a variety of plant watering methods, with four independent soil moisture sensors and water outlets design, GrowCube can water four plants intelligently and independently. In addition, by monitoring soil moisture in real-time, GrowCube can water plants autonomously and take good care of your plants. Module: AAK45440K </p>"},{"location":"Products/Arduino-Kit/growcube.html#key-features","title":"Key Features","text":"<ul> <li>Intelligent Automatic Watering</li> </ul> <p>\u2460 Obtaining soil moisture data for plant growth in real-time by reliable soil moisture sensors  \u2461 GrowCube APP contains over 3000 kinds of plants growth humidity guidance data, keeping a comfortable growth humidity environment for the plant  \u2462 Alternative option to avoid watering during the sun exposure period   </p> <ul> <li>APP Exclusive Plant Housekeeper</li> </ul> <p>\u2460 Illustrating the plant soil moisture curves and recording the watering operations  \u2461 Dedicated plant diary for recording the growth process  \u2462 Real-time display of environmental temperature &amp; humidity and soil humidity  \u2463 Massive knowledge-base database for plant maintenance to better cultivate your lovely plants</p> <ul> <li>Comfortable Use in Multiple Scenarios</li> </ul> <p>\u2460 Three watering modes, it also supports watering manually and timing quantitatively  \u2461 Equipped with 1.5L large water tank, provides enough water for 2 weeks by one refill  \u2462 Availability on external water supply is sufficient for large outdoor watering demand  \u2463 The original nozzle is suitable for various sizes of plant pots  \u2464 Simple and stylish appearance matches the watering scenarios in office, home and many other places   \u2465 GrowCube APP supports multi devices working simultaneously, switching freely between different usage scenarios  \u2466 Offline operation - the device can operate normally when there is no active network</p> <ul> <li>Easy to Operate and Easy to Use</li> </ul> <p>\u2460 Easy and quick installation with the aid of sensor magnetic plug-and-play interface design   \u2461 One-click settings to start the GrowCube APP  \u2462 Adding water is easy and convenient   \u2463 Built in smart protection systems for water shortage alarm, block prevention and sensor detection.</p>"},{"location":"Products/Arduino-Kit/growcube.html#host-appearance","title":"Host Appearance","text":"<p>Water Tank  Press to open and close, maximum water capacity is 1.5L. </p> <p>Unlock Button  GrowCube will be locked when the blockage occurs or the water tank is empty or the sensor is abnormal for more than 3 times. After troubleshooting or adding water, press the unlock button to restore normal operation of the device. If you hold down the button for 3 seconds, the network will be reconfigured. </p> <p>Reset Button Hole  Press and hold the reset button with something like a needle for 3 seconds then restore GrowCube to factory settings. </p> <p>Temperature And Humidity Sensor  Measure the ambient temperature and humidity of GrowCube.</p> <p>Working Status Indicators </p> Status Indication Solid Blue Network successfully connected Quick flashing Blue Network Connecting Slow flashing Blue Network connection failed Solid Red Sensor abnormality Quick flashing Red Water outlet is blocked Slow flashing Red Water shortage Flashing Red and Blue Waiting for network configuration <p>External Water Tank Hole  When an external large water tank is required, using a water pipe to connect the external water tank from this hole. </p> <p>Soil Moisture Sensor Interface A/B/C/D  Interfaces for independent 4-way soil moisture sensor. </p> <p>Power Supply  12V/2A power adapter interface.</p> <p>Water Outlet Interface a/b/c/d  Independent four water outlets. Using water outlet and soil moisture sensor in pair. A-a, B-b, C-c, D-d.</p>"},{"location":"Products/Arduino-Kit/growcube.html#get-started","title":"Get Started","text":""},{"location":"Products/Arduino-Kit/growcube.html#installation","title":"Installation","text":""},{"location":"Products/Arduino-Kit/growcube.html#steps-to-use-growcube","title":"Steps To Use GrowCube","text":"<ol> <li> <p>Install the filter, install the filter at the water inlet of the water tank, and insert it vertically as shown in the figure right.  </p> </li> <li> <p>Connect the soil moisture sensor to the GrowCube and insert the other end into the soil. There are four sensor interfaces(Marked A to D) on the GrowCube, and you can connect a sensor to any one of them. For example, when using port a to water plants, connect the sensor to port A of the GrowCube(Pay attention to the buckle position of the sensor connector and device interface). Then insert the soil moisture sensor vertically into the soil, the insertion depth should be more than \u2154 of the sensor, and the sensor insertion position should be as close as possible to the rhizome of the plant.  </p> </li> <li> <p>Cut water pipes based on the distance from GrowCube to plants.  </p> </li> <li> <p>Connect the cut water pipe to GrowCube. Note that when you use sensor \u201cA\u201d for the plant,you should use a water outlet \u201ca\u201d at the same time.  </p> </li> <li> <p>Connect the water pipe to the nozzle.  </p> </li> <li> <p>Bend the nozzle to fit the size of the plant disk so that the nozzle can reach the root area of the flower as much as possible.   </p> </li> <li> <p>Fix the nozzle through the bracket if necessary.  </p> </li> <li> <p>Fill the GrowCube tank with water, being careful not to exceed the maximum level.  </p> </li> </ol> <p> Note :  According to different usage scenarios, an external water source can also be used to supply water.    First, unplug the rubber plug on the back of GrowCube.    Then, insert the water tube into the water cube through the external hole.     Next, unplug the filter at the water inlet inside the GrowCube box, and insert the water pipe into the water inlet.    In order to prevent the GrowCube from alarming due to lack of water in the water pipe, please keep the inlet and outlet pipes full of water ( via manual watering), and then set the auto watering mode or smart watering mode. </p> <ol> <li>Turn on the power supply of GrowCube, wait for the red and blue lights to flash alternately, which means the state of waiting for network configuration.  </li> </ol>"},{"location":"Products/Arduino-Kit/growcube.html#install-app","title":"Install APP","text":"<p>Android users go to Google Play to search for \"GrowCube\" , download and install it.  iOS users go to the Apple Store to search for \"GrowCube\", download and install it.  </p>"},{"location":"Products/Arduino-Kit/growcube.html#network-configuration","title":"Network Configuration","text":"<p>The GrowCube has two working modes, Networking Mode and Direct Connection Mode. We recommend users to use the networking mode, which is connected to the router wifi at home or the wifi in the office environment, the device and the mobile phone can establish a local area network connection. Multiple devices can be added this way. Of course, if you are in an environment without WiFi, you can also use direct connection mode. The device itself will open access point, allowing the phone to connect directly. In direct connection mode, only one device can be controlled at the same time and only locally stored plants can be added instead of using the cloud database.</p>"},{"location":"Products/Arduino-Kit/growcube.html#networking-mode","title":"Networking Mode","text":"<p>Before configuring the network for the GrowCube, let's take a look at how GrowCube Networking Mode works:    The GrowCube is connected through the home / office WiFi network, it is the intermediary between mobile phone and GrowCube information transmission.  Here are the steps for GrowCube to configure the network: </p> <ul> <li> <ol> <li>Open the app and enter the Mode Selection page, select \"Networking Mode\" and enter the  Set GrowCube Network 'page, enter the home/office WiFi name and home/office WiFi password to be used, click \"Continue\", and there will be a pop-up \"XXXX (your WiFi name) has been Saved\";</li> </ol> </li> </ul> <p>Note:  There is a drop-down selection menu at the WiFi name, users can choose WiFi by themselves, the recently used WiFi will be displayed first, do not use 5G network as it is currently not supported. </p> <p></p> <ul> <li> <ol> <li>Go to Connect The Device page, make sure that the red and blue indicators on the front of the GrowCube are flashing alternately before you initiate the connection, if not, the device is not ready to be connected. Please press the side button for 3s until you hear the \"beep\" sound. At this time, you can search for the WiFi named GrowCube xxxx launched by the device itself, where xxxx is a random combination of numbers and letters. Use your phone to connect the WiFi as prompted, check \"The above operations have been confirmed\" , and then click \"Next\". If the phone is already connected to the WiFi, the Networking page can be normally entered, and the App will send the WiFi name and password just saved to GrowCube, then GrowCube will connect by itself.</li> </ol> </li> </ul> <p></p> <ul> <li> <ol> <li>After enter the Networking page, turn on the phone WiFi and disconnect the WiFi connection between the phone and GrowCube. And then connect the previously saved home/office WiFi to ensure that the phone and the device are connected to the same wireless network. In this page, the App will continuously check:</li> </ol> </li> </ul> <p>\u2460 Whether the device has been connected to the home/office WiFi ,  \u2461 Whether the phone has also been connected to the corresponding home/office WiFi ,  \u2462 Whether the device and the phone have established connections through the home/office WiFi .    If the first step fails, the interface will pop up as follows, and you can choose to re-enter or reconnect. Re-entering will return to the WiFi Configuration page and re-enter the WiFi name and password. If you choose to reconnect, it will try to connect again using the current saved WiFi name and password.    If the second step fails, the interface will pop up as follows, you need to disconnect the WiFi connection between the mobile phone and GrowCube and then connect to the current home/office WiFi.    If the third step fails, the interface will pop up as follows, you can choose to reset or reconnect. Resetting will re-enter the Mode Selection page. Reconnecting is to return to the page and perform three rounds of connection attempts and detection again. If the above three steps are completed, the configuration is successful.  </p> <ul> <li> <ol> <li>After the network configuration successfully saved, enter the Configured Successfully page and generate the device name. The name can be renamed according to your preferences. At this time, the blue indicator on the front of GrowCube is solid.</li> </ol> </li> </ul> <p></p> <ul> <li> <ol> <li>Click \"Click here into the homepage\" to enter the Home page of the GrowCube APP and start your smart maintenance journey.</li> </ol> </li> </ul> <p></p>"},{"location":"Products/Arduino-Kit/growcube.html#direct-connection-mode","title":"Direct Connection Mode","text":"<ul> <li>1.Select \"Direct connection mode\" on the Mode Selection page and enter the page of the Directly Connected Device. Connect the WiFi named GrowCube xxxx as prompted and click \"Next\".</li> </ul> <ul> <li>2.After the device is successfully connected to the mobile phone, enter the Configured Successfully page, generate the device name, click \"Click here into the homepage\" to enter the GrowCube APP home page.</li> </ul>"},{"location":"Products/Arduino-Kit/growcube.html#watering-parameter-settings","title":"Watering Parameter Settings","text":"<ul> <li>1. Add Plants</li> </ul> <p>On the Plants page\uff0cclick to add plants. Do not add exceed four plants.  </p> <ul> <li>2. Choose Water Outlet</li> </ul> <p>According to the soil moisture sensor interface and water outlet used by the added plant, select the corresponding watering outlet in the APP. Note that the soil moisture sensor interface should be paired with the water outlet. In this example, the soil moisture sensor of A is used, so it is necessary to choose a as the plant watering outlet accordingly.   </p> <ul> <li>3. Choose Plant</li> </ul> <p>Enter \"plant name\" in the search box, and when you find the plant, click to select it.   </p> <ul> <li>4. Choose Watering Mode For Plant</li> </ul> <p>Choose the watering mode according to your need.  </p> <ul> <li>5. Save Settings And Start Smart Watering</li> </ul> <p>Give the plant a nice nickname, such as \"my beauty\" and click Save to start planting. If you choose the smart watering mode, you can also choose whether to avoid watering during the sun exposure period. Turn on the switch and the device will not water from 9AM-6PM every day.    Back to the Plants page, you can see all the plants being planted. Click on the blank space except for the plant name and plant picture to enter the detailed page of the plant's watering status. Click on the plant name or plant picture to enter the detailed introduction page of the plant.   </p> <ul> <li>*6. Add New Category</li> </ul> <p>If the plant is not found in the plant database, please go to the Garden first, and then click toadd a new plant category. Enter the plant nickname, scientific name and take a photo of the plant. After customizing the suitable humidity range, click \"Save\". Go back to the Plants pageand click to enter Add Plant page. You can find the plant in the  list. After selecting it, click \"Save\" to add the plant successfully.  </p>"},{"location":"Products/Arduino-Kit/growcube.html#faqs","title":"FAQS","text":"<p>Q1\uff1a Does the device fail to run in direct connection mode?  A\uff1aIn the direct connection mode, the mobile phone is connected to the WiFi sent by the device itself. If the connection fails, please re-plug and unplug the device.  Q2: Failed to establish connection between mobile phone and WiFi in network mode?  A: Firstly, check whether the home/office WiFi is stable and whether it is a 5G network (the device does not support 5G network at present). Then check whether the input home/office WiFi and password is correct. Finally, check whether there are incorrect connections caused by multiple GrowCube devices in the same environment.  Q3: Can't use the plant database?  A: Check whether the device is in direct connection mode, because in direct connection mode, the mobile phone is connected to the WiFi of the device, which does not have the function of networking.   Q4: What is the purpose of the Micro USB port on the back of the device?  A: The Micro USB port is used to flash the firmware before the device leaves the factory. Do not use it to power the device.  Q5: Once the power supply is plugged in, the blue and red lights of the device doesn\u2019t turn on?  A: Please check whether 12V/2A power supply is used.   Q6: The sensor value is abnormal, such as high value or no change.  A: Check whether the insertion position of the sensor is normal (whether it is in the vicinity of the spray nozzle); Check whether there are foreign bodies such as dust or dirt in the magnetic suction interface of the sensor; Check whether the magnetic suction cable is broken or damaged; Check whether the surface of the sensor is broken or damaged; Check whether the pot is inserted wrong; Check whether the water supply from the pipe is normal or low.  Q7: Silicone nozzle does not give water\uff1f  A: Check whether the connector is blocked; Check whether the water outlet and water pipe are blocked; Check whether the spray hole is blocked by silt  Q8: Is the device waterproof and can be used outdoors?  The soil moisture sensor is made of waterproof material, which can be used in many scenarios such as balcony, backyard, office, indoor, etc. However, since a sensor is also installed on the side of the device to obtain the air temperature and humidity, there is a small opening, so the device can prevent certain splashes but is not suitable for immersion in water.  Q9: Can I DIY pipes from one junction to three or more points?  Yes. You can just DIY from one junction to many points in automatic watering mode, it all depends on your ideas and needs . You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/CrowVision/crowvision-1162727-capacitive-touch-screen-portable-hd-1366768-ips-lcd-display.html","title":"CrowVision 11.6'' Capacitive Touch Screen Portable HD 1366*768 IPS LCD Display","text":""},{"location":"Products/CrowVision/crowvision-1162727-capacitive-touch-screen-portable-hd-1366768-ips-lcd-display.html#description","title":"Description","text":"<p>CrowVision 11.6-inch touch screen is designed for all-in-one machines. It features a 1366*768 high-resolution screen and IPS panel, providing a superior visual experience. The industrial design-style rear-fixed metal structure is compatible with various SBC single-board computers, with a reasonable layout and neat wiring, making it easy to power up and use with simple operations.If you're looking for a high-performance, easy-to-assemble, and feature-rich all-in-one computer, CrowVision is the perfect choice for you.</p> <p>The screen uses HDMI-compatible communication and supports capacitive multi-touch. It has reserved interfaces and buttons for speakers and other accessories, making it adaptable to different usage scenarios. It is perfectly compatible with multiple operating systems (Raspbian, Ubuntu, Windows, Android, MAC OS, and Chrome OS) and common single-board computers, making it plug-and-play. You can also design a unique and exquisite protective shell for the screen and assemble it for a complete and distinctive look.You can use our 3D printing service to create a beautiful protective shell.</p> <p>This screen can be widely used in automation application control system displays, personal DIY projects, secondary screen/second window displays, single-board computer audio-video display equipment, HDMI communication devices, game console expansion screens, and other scenarios.</p> <p>Model: CRV00114L </p> <p></p>"},{"location":"Products/CrowVision/crowvision-1162727-capacitive-touch-screen-portable-hd-1366768-ips-lcd-display.html#compatibility","title":"Compatibility","text":"Name Display&amp;Touch Rear Fixing Power Support Raspberry Pi 4 Model B \u2714 \u2714 \u2714 Raspberry Pi 3 Model B/B+ \u2714 \u2714 \u2714 Raspberry Pi Zero WH \u2714 \u2714 \u2714 Nvidia Jetson Nano Developer Kit \u2714 \u2714 \u2714 Beaglebone \u2714 \u2714 \u2714 Rock Pi 4 Model C \u2714 \u2714 \u2714 Rock Pi 4 Model B \u2714 \u2714 \u274c Rock Pi N10 Model A \u2714 \u274c \u274c Odroid-C4 \u2714 \u2714 \u274c Odroid-N2+ \u2714 \u274c \u274c Orange Pi 4B \u2714 \u2714 \u2714 LattePanda V1 \u2714 \u2714 \u2714 LattePanda Delta 432 \u2714 \u274c \u274c PineA64-LTS \u2714 \u274c \u2714 Pine64 ROCKPro 64 \u2714 \u274c \u274c Banana Pi M5 \u2714 \u2714 \u2714 Asus Tinker Board 2S \u2714 \u2714 \u274c Raspberry Pi 400 \u2714 / \u2714 Laptop with HDMI \u2714 / \u274c MacBook \u2714 / \u274c Xbox \u2714 / \u274c Nintendo Switch \u2714 / \u274c"},{"location":"Products/CrowVision/crowvision-1162727-capacitive-touch-screen-portable-hd-1366768-ips-lcd-display.html#feature","title":"Feature","text":"<ul> <li>11.6-inch high-resolution screen with 1366*768 resolution, IPS panel, and 178\u00b0 wide viewing angle provides a better visual experience</li> <li>Wide compatibility, compatible with multiple operating systems (Raspbian, Ubuntu, Windows, Android, MAC OS, and Chrome OS)</li> <li>Supports audio, video, and capacitive touch, plug and play</li> <li>Unique rear fixing structure with sliding fixing pillars, compatible with most single-board computer models, easy to assemble</li> <li>Integrates a variety of peripheral interfaces (such as speakers, headphones, keypads, touchscreens) and onboard OSD adjustment keys</li> <li>Mainboard equipped with power conversion function of output 5V/3A, not need to separately connect an external power supply for the single-board computer.</li> </ul>"},{"location":"Products/CrowVision/crowvision-1162727-capacitive-touch-screen-portable-hd-1366768-ips-lcd-display.html#specification","title":"Specification","text":"<ul> <li>Size: 11.6 Inch</li> <li>Touch Type: 5-point Capacitive Touch</li> <li>Resolution: 1366*768</li> <li>Color Depth: 16M</li> <li>Viewing angle: 178\u00b0Wide Viewing Angle</li> <li>Display Type: IPS Panel</li> <li>Screen Type: TFT-LCD</li> <li>External power supply: 12V-2A</li> <li>Digital input: HDMI-compatible interface</li> <li>Interface: 1xKeypad interface, 1x Power supply 5V output, 1x Mini HD interface, 1xTouch interface, 1x Speaker interface, 1x Headphone socket,1x Power supply 12V input</li> <li>Compatibility System: Raspbian, Ubuntu, Windows, Android, MAC OS, and Chrome OS,etc.</li> <li>Active Area: 144*256.13mm(W*H)</li> <li>Dimension Size: 184.2*290.8MM(W*H)</li> </ul>"},{"location":"Products/CrowVision/crowvision-1162727-capacitive-touch-screen-portable-hd-1366768-ips-lcd-display.html#hardware-overview","title":"Hardware Overview","text":""},{"location":"Products/CrowVision/crowvision-1162727-capacitive-touch-screen-portable-hd-1366768-ips-lcd-display.html#usage","title":"Usage","text":"<ul> <li>1.Connect the Single Board Computer and Touch Screen Display as shown in the figure;</li> </ul> <p>Or connect the Host Device and Touch Screen Display as shown in the figure; </p> <ul> <li>2.Connect the Power Adapter and Touch Screen Display as shown in the figure;</li> </ul> <p></p> <ul> <li>3.If you use the Touch Screen Display with Macbook or Raspberry Pi, please download CrowVision_Driver.zip at this page and click the file as shown in the figure to upgrade the system.</li> </ul> <p></p> <ul> <li>4.Push \"menu\" botton to enter first level menu and make settings.</li> <li>Push it again, you can enter second level menu and third level menu.</li> <li>Push \"up\" and \"down\" botton, you can choose the option you want to change and do some change in it.</li> <li>If you want to go back to the first level menu, push \"enter\" botton.</li> </ul> <p></p>"},{"location":"Products/CrowVision/crowvision-1162727-capacitive-touch-screen-portable-hd-1366768-ips-lcd-display.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/CrowVision/crowvision-1162727-capacitive-touch-screen-portable-hd-1366768-ips-lcd-display.html#resource","title":"Resource","text":"<ul> <li>CrowVision_Driver.zip</li> </ul>"},{"location":"Products/CrowVision/crowvision-7022-touch-screen-capacitive-portable-hdmi-compatible-1024600-ips-lcd-monitor.html","title":"CrowVision 7.0\" Touch Screen Capacitive Portable HDMI-compatible 1024*600 IPS LCD Monitor","text":""},{"location":"Products/CrowVision/crowvision-7022-touch-screen-capacitive-portable-hdmi-compatible-1024600-ips-lcd-monitor.html#description","title":"Description","text":"<p>CrowVision 7-inch touch screen is designed for all-in-one machines. It features a 1024*600 high-resolution screen and IPS panel, providing a superior visual experience. The industrial design-style rear-fixed metal structure is compatible with various SBC single-board computers, with a reasonable layout and neat wiring, making it easy to power up and use with simple operations. It also supports a vertical screen. If you're looking for a high-performance, easy-to-assemble, and feature-rich all-in-one computer, CrowVision is the perfect choice for you.</p> <p>The screen uses HDMI-compatible communication and supports capacitive multi-touch. It has reserved interfaces and buttons for speakers and other accessories, making it adaptable to different usage scenarios. It can be used with a variety of commonly available single-board computers such as Raspberry Pi, Jetson Nano, and is plug-and-play, while also being fully compatible with the operating systems of single-board computers (such as Raspbian, Ubuntu, Windows, Android, MAC OS, and Chrome OS, etc.). You can also design a unique and exquisite protective shell for the screen and assemble it for a completely distinctive look. You can use our 3D printing service to create a beautiful protective shell.</p> <p>This screen can be widely used in automation application control system displays, personal DIY projects, secondary screen/second window displays, single-board computer audio-video display equipment, HDMI-compatible communication devices, game console expansion screens, and other scenarios.</p> <p>Model: CRV00117L </p> <p></p>"},{"location":"Products/CrowVision/crowvision-7022-touch-screen-capacitive-portable-hdmi-compatible-1024600-ips-lcd-monitor.html#feature","title":"Feature","text":"<ul> <li>7-inch high-resolution screen with 1024*600 resolution, IPS panel, and 178\u00b0 wide viewing angle provides a better visual experience;</li> <li>Unique rear fixing structure with sliding fixing pillars, compatible with most single-board computer models, easy to assemble;</li> <li>Wide compatibility, compatible with multiple operating systems (Raspbian, Ubuntu, Windows, Android, MAC OS, and Chrome OS);</li> <li>Supports audio, video, and capacitive touch, plug and play;</li> <li>Integrates a variety of peripheral interfaces (such as speakers, headphones, keypads, touchscreens) and onboard OSD adjustment keys;</li> <li>Mainboard is equipped with power conversion function output 5V/3A, not need to separately connect an external power supply for the single-board computer.</li> </ul>"},{"location":"Products/CrowVision/crowvision-7022-touch-screen-capacitive-portable-hdmi-compatible-1024600-ips-lcd-monitor.html#specification","title":"Specification","text":"<ul> <li>Size: 7 Inch</li> <li>Touch Type: 5-point Capacitive Touch</li> <li>Resolution: 1024*600</li> <li>Color Depth: 16M</li> <li>Vertical Screen: supported</li> <li>Viewing angle: 178\u00b0Wide Viewing Angle</li> <li>Display Type: IPS Panel</li> <li>Screen Type: TFT-LCD</li> <li>External power supply: 12V-2A</li> <li>Digital input: HDMI-compatible interface</li> <li>Interface: 1xKeypad interface, 1x Power supply 5V output, 1x Mini HD interface, 1xTouch interface, 1x Speaker interface, 1x Headphone socket,1x Power supply 12V input</li> <li>CompatibilitySystem: Raspbian, Ubuntu, Windows, Android, MAC OS, and Chrome OS,etc.</li> <li>Active Area: 99.9*167mm(W*L)</li> <li>Dimension Size: 110.3*204mm(W*L)</li> <li>Net weight: 298g</li> </ul>"},{"location":"Products/CrowVision/crowvision-7022-touch-screen-capacitive-portable-hdmi-compatible-1024600-ips-lcd-monitor.html#compatibility","title":"Compatibility","text":""},{"location":"Products/CrowVision/crowvision-7022-touch-screen-capacitive-portable-hdmi-compatible-1024600-ips-lcd-monitor.html#resources","title":"Resources","text":"<p>Crowvision_7.0_Display_Specification CrowVision_7.0_Schematic_Diagram</p>"},{"location":"Products/Crowbits/crowbits-2g-module.html","title":"Crowbits-2G Module","text":""},{"location":"Products/Crowbits/crowbits-2g-module.html#description","title":"Description","text":"<p>Crowbits- OLED is constructed from 128 x 64 dot matrix OLED module. The display offers high brightness, self-emission, high contrast ratio, slim/thin outline, wide viewing angle, wide temperature range and low power consumption.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-2g-module.html#features","title":"Features","text":"<ul> <li>GSM</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-2g-module.html#specification","title":"Specification","text":"<ul> <li>Interface Type: UART</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 56(L)*31(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-2g-module.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board. And Crowbits-Key Board module.</p> <p>2. Connect the module to the D4 and D5 interface of the Crowbits-UNO board, and Crowbits-Key Board connect the MIC interface of the Crowbits-2G Module. As shown in the figure:</p> <p></p> <p>3. Upload the following code to the Crowbits-UNO board.</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(4, 5); // RX, TX\n\nvoid setup() {\n  // Open serial communications and wait for port to open:\n  Serial.begin(9600);\n  while (!Serial) {\n    ; // wait for serial port to connect. Needed for native USB port only\n  }\n\n\n  Serial.println(\"test uart!\");\n\n  // set the data rate for the SoftwareSerial port\n  mySerial.begin(9600);\n}\n\nvoid loop() { // run over and over\n  if (mySerial.available()) {\n    Serial.write(mySerial.read());\n  }\n  if (Serial.available()) {\n    mySerial.write(Serial.read());\n  }\n}\n</code></pre> <p>4. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. Then send a command to call.</p> <ul> <li>AT return OK // The serial port connection is normal</li> <li>AT+CREG? Return +CREG: 0,1 // Indicates successful network registration</li> <li>AT+CSQ //Test signal strength</li> <li>ATD10086; //Call</li> <li>ATH // hang up the phone</li> <li>ATA // answer the phone</li> </ul> <p></p>"},{"location":"Products/Crowbits/crowbits-315mhz-controller.html","title":"Crowbits-315MHz Controller","text":""},{"location":"Products/Crowbits/crowbits-315mhz-controller.html#description","title":"Description","text":"<p>The 315MHz controller is suitable for wireless control, you can use the remote controller to control all the four outputs.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-315mhz-controller.html#features","title":"Features","text":"<ul> <li>Remote controller</li> </ul>"},{"location":"Products/Crowbits/crowbits-315mhz-controller.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 56(L)*31(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-315mhz-controller.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply; Four output modules, such as Crowbits-LED; And a remote control.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Turn on the power. Press the button on the remote control, the LED of the corresponding interface will light up.</p> <p></p> <p></p> <p></p>"},{"location":"Products/Crowbits/crowbits-315mhz-emitter.html","title":"Crowbits-315Mhz Emitter","text":""},{"location":"Products/Crowbits/crowbits-315mhz-emitter.html#description","title":"Description","text":"<p>It uses 315Mhz simplex wireless communication. This module is small, affordable and easy to carry, suitable for indoor and outdoor wireless communication systems, and anti-theft systems, household appliances.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-315mhz-emitter.html#features","title":"Features","text":"<ul> <li>Remote controller system</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-315mhz-emitter.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-315mhz-emitter.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare two Crowbits motherboards, such as Crowbits-UNO board. And a Crowbits-315Mhz Emitter board. Two output modules, such as Crowbits-LED.</p> <p>2. Connect the Crowbits-315Mhz Receiver board to the D2 interface of the Crowbits-UNO board and Crowbits-LED to the D11 interface.</p> <p>3. Connect the Crowbits-315Mhz Emitter board to the D9 interface of another Crowbits-UNO board and Crowbits-LED to the D5 interface.</p> <p>4. Download the \u201ctransmitter\u201d program to the motherboard with the Crowbits-315Mhz Emitter module.</p> <pre><code>// transmitter.pde\n//\n// Simple example of how to use VirtualWire to transmit messages\n// Implements a simplex (one-way) transmitter with an TX-C1 module\n//\n// See VirtualWire.h for detailed API docs\n// Author: Mike McCauley (mikem@open.com.au)\n// Copyright (C) 2008 Mike McCauley\n// $Id: transmitter.pde,v 1.3 2009/03/30 00:07:24 mikem Exp $\n\n#include &lt;VirtualWire.h&gt;\n#undef int\n#undef abs\n#undef double\n#undef float\n#undef round\n\n//TX-PIN 9\n//LED-PIN 4\n#define LedPin 5\n\nvoid setup()\n{\n    pinMode(LedPin,OUTPUT);\n    Serial.begin(9600);   // Debugging only\n    Serial.println(\"setup\");\n\n    // Initialise the IO and ISR\n    vw_set_ptt_inverted(true); // Required for DR3100\n    vw_setup(2000);  // Bits per sec\n}\n\nvoid loop()\n{\n    const char *msg = \"hello\";\n\n    digitalWrite(LedPin, true); // Flash a light to show transmitting\n    vw_send((uint8_t *)msg, strlen(msg));\n    vw_wait_tx(); // Wait until the whole message is gone\n    Serial.print(\"Send: \");\n    Serial.println(msg);\n    digitalWrite(LedPin, false);\n    delay(1000);\n}\n</code></pre> <p>5. Download the \u201creceiver\u201d program to the motherboard with the Crowbits-315Mhz Receiver module.</p> <pre><code>// receiver.pde\n//\n// Simple example of how to use VirtualWire to receive messages\n// Implements a simplex (one-way) receiver with an Rx-B1 module\n//\n// See VirtualWire.h for detailed API docs\n// Author: Mike McCauley (mikem@open.com.au)\n// Copyright (C) 2008 Mike McCauley\n// $Id: receiver.pde,v 1.3 2009/03/30 00:07:24 mikem Exp $\n\n#include &lt;VirtualWire.h&gt;\n#undef int\n#undef abs\n#undef double\n#undef float\n#undef round\n\n//RX-PIN  2\n//LED-PIN 11\n\n#define LedPin 11\n\nvoid setup()\n{\n  pinMode(LedPin, OUTPUT);\n  Serial.begin(9600);   // Debugging only\n  Serial.println(\"setup\");\n\n  // Initialise the IO and ISR\n  vw_set_ptt_inverted(true); // Required for DR3100\n  vw_setup(2000);    // Bits per sec\n\n  vw_rx_start();       // Start the receiver PLL running\n}\n\nvoid loop()\n{\n  char buf[VW_MAX_MESSAGE_LEN];\n  char buflen = VW_MAX_MESSAGE_LEN;\n\n  if (vw_get_message(buf, &amp;buflen)) // Non-blocking\n  {\n    int i;\n\n    digitalWrite(LedPin, true); // Flash a light to show received good message\n    // Message with a good checksum received, dump it.\n    Serial.print(\"Got: \");\n\n    for (i = 0; i &lt; buflen; i++)\n    {\n      Serial.print(buf[i]);\n    }\n    Serial.println(\"\");\n    digitalWrite(LedPin, false);\n  }\n}\n</code></pre> <p>6. After the download procedure is completed, if the Crowbits-315Mhz Receiver module receives the information, the LED light connected to the D11 port will be on.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-315mhz-receiver.html","title":"Crowbits-315Mhz Receiver","text":""},{"location":"Products/Crowbits/crowbits-315mhz-receiver.html#description","title":"Description","text":"<p>It uses 315Mhz simplex wireless communication. This module is small, affordable and easy to carry, suitable for indoor and outdoor wireless communication systems, and anti-theft systems, household appliances.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-315mhz-receiver.html#features","title":"Features","text":"<ul> <li>Remote controller system</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-315mhz-receiver.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-315mhz-receiver.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare two Crowbits motherboards, such as Crowbits-UNO board. And a Crowbits-315Mhz Emitter board. Two output modules, such as Crowbits-LED.</p> <p>2. Connect the Crowbits-315Mhz Receiver board to the D2 interface of the Crowbits-UNO board and Crowbits-LED to the D11 interface.</p> <p>3. Connect the Crowbits-315Mhz Emitter board to the D9 interface of another Crowbits-UNO board and Crowbits-LED to the D5 interface.</p> <p>4. Download the \u201ctransmitter\u201d program to the motherboard with the Crowbits-315Mhz Emitter module.</p> <pre><code>// transmitter.pde\n//\n// Simple example of how to use VirtualWire to transmit messages\n// Implements a simplex (one-way) transmitter with an TX-C1 module\n//\n// See VirtualWire.h for detailed API docs\n// Author: Mike McCauley (mikem@open.com.au)\n// Copyright (C) 2008 Mike McCauley\n// $Id: transmitter.pde,v 1.3 2009/03/30 00:07:24 mikem Exp $\n\n#include &lt;VirtualWire.h&gt;\n#undef int\n#undef abs\n#undef double\n#undef float\n#undef round\n\n//TX-PIN 9\n//LED-PIN 4\n#define LedPin 5\n\nvoid setup()\n{\n    pinMode(LedPin,OUTPUT);\n    Serial.begin(9600);   // Debugging only\n    Serial.println(\"setup\");\n\n    // Initialise the IO and ISR\n    vw_set_ptt_inverted(true); // Required for DR3100\n    vw_setup(2000);  // Bits per sec\n}\n\nvoid loop()\n{\n    const char *msg = \"hello\";\n\n    digitalWrite(LedPin, true); // Flash a light to show transmitting\n    vw_send((uint8_t *)msg, strlen(msg));\n    vw_wait_tx(); // Wait until the whole message is gone\n    Serial.print(\"Send: \");\n    Serial.println(msg);\n    digitalWrite(LedPin, false);\n    delay(1000);\n}\n</code></pre> <p>5. Download the \u201creceiver\u201d program to the motherboard with the Crowbits-315Mhz Receiver module.</p> <pre><code>// receiver.pde\n//\n// Simple example of how to use VirtualWire to receive messages\n// Implements a simplex (one-way) receiver with an Rx-B1 module\n//\n// See VirtualWire.h for detailed API docs\n// Author: Mike McCauley (mikem@open.com.au)\n// Copyright (C) 2008 Mike McCauley\n// $Id: receiver.pde,v 1.3 2009/03/30 00:07:24 mikem Exp $\n\n#include &lt;VirtualWire.h&gt;\n#undef int\n#undef abs\n#undef double\n#undef float\n#undef round\n\n//RX-PIN  2\n//LED-PIN 11\n\n#define LedPin 11\n\nvoid setup()\n{\n  pinMode(LedPin, OUTPUT);\n  Serial.begin(9600);   // Debugging only\n  Serial.println(\"setup\");\n\n  // Initialise the IO and ISR\n  vw_set_ptt_inverted(true); // Required for DR3100\n  vw_setup(2000);    // Bits per sec\n\n  vw_rx_start();       // Start the receiver PLL running\n}\n\nvoid loop()\n{\n  char buf[VW_MAX_MESSAGE_LEN];\n  char buflen = VW_MAX_MESSAGE_LEN;\n\n  if (vw_get_message(buf, &amp;buflen)) // Non-blocking\n  {\n    int i;\n\n    digitalWrite(LedPin, true); // Flash a light to show received good message\n    // Message with a good checksum received, dump it.\n    Serial.print(\"Got: \");\n\n    for (i = 0; i &lt; buflen; i++)\n    {\n      Serial.print(buf[i]);\n    }\n    Serial.println(\"\");\n    digitalWrite(LedPin, false);\n  }\n}\n</code></pre> <p>6. After the download procedure is completed, if the Crowbits-315Mhz Receiver module receives the information, the LED light connected to the D11 port will be on.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-80cm-infrared-proximity-sensor.html","title":"Crowbits-80cm Infrared Proximity Sensor","text":""},{"location":"Products/Crowbits/crowbits-80cm-infrared-proximity-sensor.html#description","title":"Description","text":"<p>The Sharp distance sensors are a popular choice for many projects that require accurate distance measurements. This IR sensor is more economical than sonar rangefinders, yet it provides much better performance than other IR alternatives. Interfacing to most microcontrollers is straightforward: the single analog output can be connected to an analog-to-digital converter for taking distance measurements, or the output can be connected to a comparator for threshold detection</p> <p></p>"},{"location":"Products/Crowbits/crowbits-80cm-infrared-proximity-sensor.html#features","title":"Features","text":"<ul> <li>\uf06cHigh precision</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-80cm-infrared-proximity-sensor.html#specification","title":"Specification","text":"<ul> <li>Distance measuring range: 10 cm to 80 cm (4\" to 32\")</li> <li>Operating voltage: 3.3V</li> <li>Response time: 38 \u00b1 10ms</li> </ul>"},{"location":"Products/Crowbits/crowbits-80cm-infrared-proximity-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1.You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2.Connect the module to the A0 interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3.Upload the following code to the Crowbits-UNO board.</p> <pre><code>/*\n *      \n *      VCC -- VCC  \n *      GND -- GND  \n *      Signal -- Analog 0 \n */\n#define pin A0\n\nvoid setup () {\n    Serial.begin (9600);\n    pinMode (pin, INPUT);\n}\n\nvoid loop () {\n    uint16_t value = analogRead (pin);\n    uint16_t range = get_gp2d12 (value);\n    Serial.print(\"Analog value:\");\n    Serial.println (value);\n    Serial.print (\"Distance:\");\n    Serial.print (range);\n    Serial.println (\" mm\");\n    Serial.println ();\n    delay (500);\n}\n\nuint16_t get_gp2d12 (uint16_t value) {\n    if (value &lt; 10) value = 10;\n    return ((67870.0 / (value - 3.0)) - 40.0);\n}\n</code></pre> <p>4.After the upload is successful, open the serial port monitor, the baud rate is set to 9600. Place an object in front of the sensor and the serial port will print its distance.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-9g-servo.html","title":"Crowbits-9G Servo","text":""},{"location":"Products/Crowbits/crowbits-9g-servo.html#description","title":"Description","text":"<p>The module is a high quality, low-cost servo for all your mechatronic needs. It comes with a 3-pin power and control cable, mounting hardware. Hope you can make your work easier by using it.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-9g-servo.html#features","title":"Features","text":"<ul> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-9g-servo.html#specification","title":"Specification","text":"<ul> <li>Compatible with Crowbits</li> <li>Operating Voltage: 3.3V</li> </ul>"},{"location":"Products/Crowbits/crowbits-9g-servo.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1.You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2.Connect the module to the D11 interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3.Download the library \u201cServo\u201d. Unzip and put it in the libraries file of the Arduino IDE, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Upload the following code to the Crowbits-UNO board.</p> <p>// Sweep</p> <p>// by BARRAGAN &lt;http://barraganstudio.com&gt;</p> <p>// This example code is in the public domain.</p> <pre><code>#include &lt;Servo.h&gt; \n\nServo myservo;  // create servo object to control a servo \n                // a maximum of eight servo objects can be created \n\nint pos = 0;    // variable to store the servo position \n\nvoid setup() \n{ \n  myservo.attach(11);  // attaches the servo on pin 11 to the servo object \n} \n\n\nvoid loop() \n{ \n  for(pos = 0; pos &lt; 180; pos += 1)  // goes from 0 degrees to 180 degrees \n  {                                  // in steps of 1 degree \n    myservo.write(pos);              // tell servo to go to position in variable 'pos' \n    delay(15);                       // waits 15ms for the servo to reach the position \n  } \n  for(pos = 180; pos&gt;=1; pos-=1)     // goes from 180 degrees to 0 degrees \n  {                                \n    myservo.write(pos);              // tell servo to go to position in variable 'pos' \n    delay(15);                       // waits 15ms for the servo to reach the position \n  } \n}\n</code></pre> <p>5.After the upload is successful, you can see the steering gear is turning.</p>"},{"location":"Products/Crowbits/crowbits-adjustable-infrared-sensor.html","title":"Crowbits-Adjustable Infrared Sensor","text":""},{"location":"Products/Crowbits/crowbits-adjustable-infrared-sensor.html#description","title":"Description","text":"<p>This infrared distance switch features a high-sensitivity photo reflector to perform distance detection function, ranging from 3cm to 80cm. When the infrared light emitted by the emitter gets reflected on a surface that blocked it, the phototransistor can pick up the signal for distance calculation. Also a potentiometer for adjustment is arranged for easy and clear use. It is small, easy to use/assemble, and inexpensive. Useful for robotics, interactive media, industrial assembly line, etc.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-adjustable-infrared-sensor.html#features","title":"Features","text":"<ul> <li>Easy to use/assemble</li> <li>High-sensitivity</li> </ul>"},{"location":"Products/Crowbits/crowbits-adjustable-infrared-sensor.html#specification","title":"Specification","text":"<ul> <li>Power supply: 3.3V</li> <li>Current: 100mA</li> <li>Range: 3-80cm adjustable</li> <li>Wire length: 20cm</li> </ul>"},{"location":"Products/Crowbits/crowbits-adjustable-infrared-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1.You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2.Connect the module to the D2 interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3.Upload the following code to the Crowbits-UNO board.</p> <pre><code>void setup()  {\n Serial.begin(9600);\n pinMode(2,INPUT);\n}\nvoid loop()  {\n while(1)  {\n   delay(500);\n   if(digitalRead(2)==LOW)  {\n     Serial.println(\"object detected.\");\n   }\n   else  {\n     Serial.println(\"no object detected.\");\n   }\n }\n}\n</code></pre> <p>4.After the upload is successful, open the serial port monitor, the baud rate is set to 9600. When an object is detected, the serial port will print \u201cobject detected.\u201d</p> <p></p>"},{"location":"Products/Crowbits/crowbits-air-quality-sensor.html","title":"Crowbits-Air Quality Sensor","text":""},{"location":"Products/Crowbits/crowbits-air-quality-sensor.html#description","title":"Description","text":"<p>This sensor is designed for a comprehensive monitor over indoor air condition. It's responsive to a wide scope of harmful gases, as carbon monoxide, alcohol, acetone, thinner, formaldehyde and so on. Due to the measuring mechanism, this sensor can\u2019t output specific data to describe target gases' concentrations quantitatively. But it's still competent enough to be used in applications that require only qualitative results, like auto refresher sprayers and auto air cycling systems.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-air-quality-sensor.html#features","title":"Features","text":"<ul> <li>Cost efficient</li> <li>Responsive to a wide scope of target gases</li> </ul>"},{"location":"Products/Crowbits/crowbits-air-quality-sensor.html#specification","title":"Specification","text":"<ul> <li>Interface Type: Analog input</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-air-quality-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the A2 interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Download the library \u201cAirQuality\u201d. Unzip and put it in the libraries file, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Upload the following code to the Crowbits-UNO board.</p> <pre><code>/*\n  AirQuality Demo V1.0.\n  connect to A0 to start testing. it will needs about 20s to start \n* By: http://www.seeedstudio.com\n*/\n#include\"AirQuality.h\"\n#include\"Arduino.h\"\nAirQuality airqualitysensor;\nint current_quality =-1;\n\nvoid setup()\n{\n    Serial.begin(9600);\n    airqualitysensor.init(14);\n}\nvoid loop()\n{\n    current_quality=airqualitysensor.slope();\n    if (current_quality &gt;= 0)// if a valid data returned.\n    {\n        if (current_quality==0)\n            Serial.println(\"High pollution! Force signal active\");\n        else if (current_quality==1)\n            Serial.println(\"High pollution!\");\n        else if (current_quality==2)\n            Serial.println(\"Low pollution!\");\n        else if (current_quality ==3)\n            Serial.println(\"Fresh air\");\n    }\n}\n\nISR(TIMER1_OVF_vect)\n{\n    if(airqualitysensor.counter==61)//set 2 seconds as a detected duty\n    {\n\n            airqualitysensor.last_vol=airqualitysensor.first_vol;\n            airqualitysensor.first_vol=analogRead(A2);\n            airqualitysensor.counter=0;\n            airqualitysensor.timer_index=1;\n            PORTB=PORTB^0x20;\n    }\n    else\n    {\n        airqualitysensor.counter++;\n    }\n}\n</code></pre> <p>5.After the upload is successful, open the serial port monitor, the baud rate is set to 9600. The serial port will print out the current air quality related information.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-barometer-sensor.html","title":"Crowbits-Air Quality Sensor","text":""},{"location":"Products/Crowbits/crowbits-barometer-sensor.html#description","title":"Description","text":"<p>The BMP180 offers a pressure measuring range of 300 to 1100 hPa with an accuracy down to 0.02 hPa in advanced resolution mode. It\u2019s based on piezo-resistive technology for high accuracy, ruggedness and long term stability. These come factory-calibrated, with the calibration coefficients already stored in ROM.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-barometer-sensor.html#features","title":"Features","text":"<ul> <li>Ultra-low power consumption</li> <li>Low noise measurements</li> <li>Wide barometric pressure range</li> </ul>"},{"location":"Products/Crowbits/crowbits-barometer-sensor.html#specification","title":"Specification","text":"<ul> <li>Interface Type: I2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-barometer-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the I2C interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Download the library \u201cSFE_BMP180\u201d. Unzip and put it in the libraries file of the Arduino IDE, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Upload the following code to the Crowbits-UNO board.</p> <pre><code>#include &lt;SFE_BMP180.h&gt;\n#include &lt;Wire.h&gt;\n\n// You will need to create an SFE_BMP180 object, here called \"pressure\":\n\nSFE_BMP180 pressure;\n\n#define ALTITUDE 1655.0 // Altitude of SparkFun's HQ in Boulder, CO. in meters\n\nvoid setup()\n{\n  Serial.begin(9600);\n  Serial.println(\"REBOOT\");\n\n  // Initialize the sensor (it is important to get calibration values stored on the device).\n\n  if (pressure.begin())\n    Serial.println(\"BMP180 init success\");\n  else\n  {\n    // Oops, something went wrong, this is usually a connection problem,\n    // see the comments at the top of this sketch for the proper connections.\n\n    Serial.println(\"BMP180 init fail\\n\\n\");\n    while(1); // Pause forever.\n  }\n}\n\nvoid loop()\n{\n  char status;\n  double T,P,p0,a;\n\n  // Loop here getting pressure readings every 10 seconds.\n\n  // If you want sea-level-compensated pressure, as used in weather reports,\n  // you will need to know the altitude at which your measurements are taken.\n  // We're using a constant called ALTITUDE in this sketch:\n\n  Serial.println();\n  Serial.print(\"provided altitude: \");\n  Serial.print(ALTITUDE,0);\n  Serial.print(\" meters, \");\n  Serial.print(ALTITUDE*3.28084,0);\n  Serial.println(\" feet\");\n\n  // If you want to measure altitude, and not pressure, you will instead need\n  // to provide a known baseline pressure. This is shown at the end of the sketch.\n\n  // You must first get a temperature measurement to perform a pressure reading.\n\n  // Start a temperature measurement:\n  // If request is successful, the number of ms to wait is returned.\n  // If request is unsuccessful, 0 is returned.\n\n  status = pressure.startTemperature();\n  if (status\u00a0!= 0)\n  {\n    // Wait for the measurement to complete:\n    delay(status);\n\n    // Retrieve the completed temperature measurement:\n    // Note that the measurement is stored in the variable T.\n    // Function returns 1 if successful, 0 if failure.\n\n    status = pressure.getTemperature(T);\n    if (status\u00a0!= 0)\n    {\n      // Print out the measurement:\n      Serial.print(\"temperature: \");\n      Serial.print(T,2);\n      Serial.print(\" deg C, \");\n      Serial.print((9.0/5.0)*T+32.0,2);\n      Serial.println(\" deg F\");\n\n      // Start a pressure measurement:\n      // The parameter is the oversampling setting, from 0 to 3 (highest res, longest wait).\n      // If request is successful, the number of ms to wait is returned.\n      // If request is unsuccessful, 0 is returned.\n\n      status = pressure.startPressure(3);\n      if (status\u00a0!= 0)\n      {\n        // Wait for the measurement to complete:\n        delay(status);\n\n        // Retrieve the completed pressure measurement:\n        // Note that the measurement is stored in the variable P.\n        // Note also that the function requires the previous temperature measurement (T).\n        // (If temperature is stable, you can do one temperature measurement for a number of pressure measurements.)\n        // Function returns 1 if successful, 0 if failure.\n\n        status = pressure.getPressure(P,T);\n        if (status\u00a0!= 0)\n        {\n          // Print out the measurement:\n          Serial.print(\"absolute pressure: \");\n          Serial.print(P,2);\n          Serial.print(\" mb, \");\n          Serial.print(P*0.0295333727,2);\n          Serial.println(\" inHg\");\n\n          // The pressure sensor returns abolute pressure, which varies with altitude.\n          // To remove the effects of altitude, use the sealevel function and your current altitude.\n          // This number is commonly used in weather reports.\n          // Parameters: P = absolute pressure in mb, ALTITUDE = current altitude in m.\n          // Result: p0 = sea-level compensated pressure in mb\n\n          p0 = pressure.sealevel(P,ALTITUDE); // we're at 1655 meters (Boulder, CO)\n          Serial.print(\"relative (sea-level) pressure: \");\n          Serial.print(p0,2);\n          Serial.print(\" mb, \");\n          Serial.print(p0*0.0295333727,2);\n          Serial.println(\" inHg\");\n\n          // On the other hand, if you want to determine your altitude from the pressure reading,\n          // use the altitude function along with a baseline pressure (sea-level or other).\n          // Parameters: P = absolute pressure in mb, p0 = baseline pressure in mb.\n          // Result: a = altitude in m.\n\n          a = pressure.altitude(P,p0);\n          Serial.print(\"computed altitude: \");\n          Serial.print(a,0);\n          Serial.print(\" meters, \");\n          Serial.print(a*3.28084,0);\n          Serial.println(\" feet\");\n        }\n        else Serial.println(\"error retrieving pressure measurement\\n\");\n      }\n      else Serial.println(\"error starting pressure measurement\\n\");\n    }\n    else Serial.println(\"error retrieving temperature measurement\\n\");\n  }\n  else Serial.println(\"error starting temperature measurement\\n\");\n\n  delay(5000);  // Pause for 5 seconds.\n}\n</code></pre> <p>5. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. The serial port will print out the corresponding information.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-bright-led.html","title":"Crowbits-Bright LED","text":""},{"location":"Products/Crowbits/crowbits-bright-led.html#description","title":"Description","text":"<p>The bright LED is a digital output module, it\u2019s small but puts out a bright light. Which has a high brightness and large angle LED.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-bright-led.html#features","title":"Features","text":"<ul> <li>Can provide a strong light source for your project, lighting and etc</li> <li>Digital output module</li> </ul>"},{"location":"Products/Crowbits/crowbits-bright-led.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-bright-led.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an input module, such as Crowbits-Switch.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power, press the button of the self-locking switch, and the Bright LED will light up, otherwise, it will be off.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-button.html","title":"Crowbits-Button","text":""},{"location":"Products/Crowbits/crowbits-button.html#description","title":"Description","text":"<p>The button is a digital input module, it acts like a switch of a door. When you press it, the door opens. You can do an unlimited amount of projects using a button and it's definitely one of the most important modules.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-button.html#features","title":"Features","text":"<ul> <li>Momentary Button</li> <li>Digital input module</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-button.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-button.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When you press the button, the LED behind it will light up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-buzzer.html","title":"Crowbits-Buzzer","text":""},{"location":"Products/Crowbits/crowbits-buzzer.html#description","title":"Description","text":"<p>The buzzer is a digital output module, it makes a sound when receives the signal. Typical uses of buzzer include alarm devices, timers, etc.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-buzzer.html#features","title":"Features","text":"<ul> <li>Easy to use the piezoelectric buzzer</li> <li>Digital output module</li> </ul>"},{"location":"Products/Crowbits/crowbits-buzzer.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Oscillation Frequency: (2.7 \u00b10.3) KHz</li> <li>Sound Pressure Level: \u226580dB</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-buzzer.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an input module, such as Crowbits-Switch.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p>3. Then, turn on the power, the buzzer will beep when you press the self-locking switch.</p> <p></p> <p>Note: Please tear off the paper on the buzzer when you want to use it for the buzzer to work properly. The paper on top is in order to protect it while shipping and transporting.</p>"},{"location":"Products/Crowbits/crowbits-collision-sensor.html","title":"Crowbits-Collision Sensor","text":""},{"location":"Products/Crowbits/crowbits-collision-sensor.html#description","title":"Description","text":"<p>The collision sensor is a digital input module, it is based on the collision component, which has high sensitivity and can detect any collision movement.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-collision-sensor.html#features","title":"Features","text":"<ul> <li>Digital input module</li> <li>Easy to use</li> <li>High sensitivity</li> </ul>"},{"location":"Products/Crowbits/crowbits-collision-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-collision-sensor.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When you hit the sensor with your hand, the LED behind it will light up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-color-sensor.html","title":"Crowbits-Color Sensor","text":""},{"location":"Products/Crowbits/crowbits-color-sensor.html#description","title":"Description","text":"<p>This module is based on the color sensor TCS3414CS with digital output I2C. Based on the 8*2 array of filtered photodiodes and 16-bits analog-to-digital converters, you can gain the color chromaticity of ambient light or the color of objects. Of the 16 photodiodes, 4 have red filters, 4 have green filters, 4 have blue filters and 4 have no filter(clear). With the synchronization input pin, an external pulsed light source can provide precise synchronous conversion control.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-color-sensor.html#features","title":"Features","text":"<ul> <li>SYNC Input Synchronizes Integration Cycle to Modulated Light Sources</li> </ul>"},{"location":"Products/Crowbits/crowbits-color-sensor.html#specification","title":"Specification","text":"<ul> <li>Interface Type: I2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 56(L)*56(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-color-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1.You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2.Connect the module to the I2C interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3.Download the library \u201cAdafruit_TCS34725-master\u201d. Unzip and put it in the libraries file of the Arduino IDE, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4.Upload the following code to the Crowbits-UNO board.</p> <pre><code>#include &lt;Wire.h&gt;\n#include \"Adafruit_TCS34725.h\"\n\n// Pick analog outputs, for the UNO these three work well\n// use ~560  ohm resistor between Red &amp; Blue, ~1K for green (its brighter)\n#define redpin 2\n#define greenpin 4\n#define bluepin 6\n// for a common anode LED, connect the common pin to +5V\n// for common cathode, connect the common to ground\n\n// set to false if using a common cathode LED\n#define commonAnode true\n\n// our RGB -&gt; eye-recognized gamma color\nbyte gammatable[256];\n\n\nAdafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_50MS, TCS34725_GAIN_4X);\n\nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"Color View Test!\");\n\n  if (tcs.begin()) {\n    Serial.println(\"Found sensor\");\n  } else {\n    Serial.println(\"No TCS34725 found ... check your connections\");\n    while (1); // halt!\n  }\n\n  // use these three pins to drive an LED\n  pinMode(redpin, OUTPUT);\n  pinMode(greenpin, OUTPUT);\n  pinMode(bluepin, OUTPUT);\n\n  // thanks PhilB for this gamma table!\n  // it helps convert RGB colors to what humans see\n  for (int i=0; i&lt;256; i++) {\n    float x = i;\n    x /= 255;\n    x = pow(x, 2.5);\n    x *= 255;\n\n    if (commonAnode) {\n      gammatable[i] = 255 - x;\n    } else {\n      gammatable[i] = x;      \n    }\n    //Serial.println(gammatable[i]);\n  }\n}\n\n\nvoid loop() {\n  uint16_t clear, red, green, blue;\n\n  tcs.setInterrupt(false);      // turn on LED\n\n  delay(60);  // takes 50ms to read \n\n  tcs.getRawData(&amp;red, &amp;green, &amp;blue, &amp;clear);\n\n  tcs.setInterrupt(true);  // turn off LED\n\n  Serial.print(\"C:\\t\"); Serial.print(clear);\n  delay(1000);\n  Serial.print(\"\\tR:\\t\"); Serial.print(red);\n  delay(1000);\n  Serial.print(\"\\tG:\\t\"); Serial.print(green);\n  delay(1000);\n  Serial.print(\"\\tB:\\t\"); Serial.print(blue);\n  delay(1000);\n\n  // Figure out some basic hex code for visualization\n  uint32_t sum = clear;\n  float r, g, b;\n  r = red; r /= sum;\n  g = green; g /= sum;\n  b = blue; b /= sum;\n  r *= 256; g *= 256; b *= 256;\n  Serial.print(\"\\t\");\n  Serial.print((int)r, HEX); Serial.print((int)g, HEX); Serial.print((int)b, HEX);\n  Serial.println();\n\n  //Serial.print((int)r ); Serial.print(\" \"); Serial.print((int)g);Serial.print(\" \");  Serial.println((int)b );\n\n  analogWrite(redpin, gammatable[(int)r]);\n  analogWrite(greenpin, gammatable[(int)g]);\n  analogWrite(bluepin, gammatable[(int)b]);\n}\n</code></pre> <p>5. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. Pointing the sensor at different colors will output different values. When facing different colors, the value of CRBG changes significantly.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-currentpower-sensor.html","title":"Crowbits-CurrentPower Sensor","text":""},{"location":"Products/Crowbits/crowbits-currentpower-sensor.html#description","title":"Description","text":"<p>The module can detect the size of the current in the circuit. By detecting the size of the current, you can learn about the power consumption of the circuit, the power of other meta-electronic devices and so on.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-currentpower-sensor.html#features","title":"Features","text":"<ul> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-currentpower-sensor.html#specification","title":"Specification","text":"<ul> <li>Interface Type: I2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Measuring voltage range: DC 0-26V</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-currentpower-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board. An expansion module, such as Crowbits-Terminal board. There is also a power supply motherboard and a load motherboard.</p> <p>2. Connect the module to the I2C interface on the Crowbits-UNO board, Crowbits-Terminal is connected behind it. The connection requirements are as follows.</p> <p>2.1. Connect the ground of the power supply main board and the ground of the load PCB board with a DuPont line.</p> <p>2.2. Connect the 5V output of the power supply motherboard to the positive terminal of the Crowbits-Current Power terminal with a DuPont cable.</p> <p>2.3. Connect the negative pole of the Crowbits-Current Power terminal to the 5V input end of the load PCB board with Dupont wire.</p> <p>2.4. Use a MINI USB cable to connect the external 5V power supply to the power supply PCB.</p> <p>2.5.Connect the GND on the Crowbits-Terminal board to the GND of the load motherboard with a DuPont cable.</p> <p></p> <p>3. Download the library \u201cINA219\u201d. Unzip and put it in the libraries file of the Arduino IDE, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Upload the following code to the Crowbits-UNO board.</p> <pre><code>#include &lt;Wire.h&gt;\n#include &lt;Adafruit_INA219.h&gt;\n\nAdafruit_INA219 ina219;\n\nvoid setup(void) \n{\n  Serial.begin(9600);\n  while (!Serial) {\n      // will pause Zero, Leonardo, etc until serial console opens\n      delay(1);\n  }\n\n  uint32_t currentFrequency;\n\n  Serial.println(\"Hello!\");\n\n  // Initialize the INA219.\n  // By default the initialization will use the largest range (32V, 2A).  However\n  // you can call a setCalibration function to change this range (see comments).\n  ina219.begin();\n  // To use a slightly lower 32V, 1A range (higher precision on amps):\n  //ina219.setCalibration_32V_1A();\n  // Or to use a lower 16V, 400mA range (higher precision on volts and amps):\n  //ina219.setCalibration_16V_400mA();\n\n  Serial.println(\"Measuring voltage and current with INA219 ...\");\n}\n\nvoid loop(void) \n{\n  float shuntvoltage = 0;\n  float busvoltage = 0;\n  float current_mA = 0;\n  float loadvoltage = 0;\n\n  shuntvoltage = ina219.getShuntVoltage_mV();\n  busvoltage = ina219.getBusVoltage_V();\n  current_mA = ina219.getCurrent_mA();\n  loadvoltage = busvoltage + (shuntvoltage / 1000);\n\n  Serial.print(\"Bus Voltage:   \"); Serial.print(busvoltage); Serial.println(\" V\");\n  Serial.print(\"Shunt Voltage: \"); Serial.print(shuntvoltage); Serial.println(\" mV\");\n  Serial.print(\"Load Voltage:  \"); Serial.print(loadvoltage); Serial.println(\" V\");\n  Serial.print(\"Current:       \"); Serial.print(current_mA); Serial.println(\" mA\");\n  Serial.println(\"\");\n\n  delay(2000);\n}\n</code></pre> <p>5. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. The serial port will print out the voltage, current, and power values, as shown in the figure:</p> <p></p>"},{"location":"Products/Crowbits/crowbits-dc-motor.html","title":"Crowbits-DC Motor","text":""},{"location":"Products/Crowbits/crowbits-dc-motor.html#description","title":"Description","text":"<p>The DC motor is a digital output module, it\u2019s a rotary electrical machine that converts direct current electrical energy into mechanical energy. Use the DC motor, you can make your projects spin, turn and twist.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-dc-motor.html#features","title":"Features","text":"<ul> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-dc-motor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-dc-motor.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an input module, such as Crowbits-Button.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Turn on the power.</p> <p>1)Set the toggle switch on the DC Motor board to F, when you press and hold the button, you can see that the DC motor is rotating forward;</p> <p>2)Set the toggle switch on the DC Motor board to R, when you press and hold the button, you can see the DC motor reverse.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-dht11-sensor.html","title":"Crowbits-DHT11 Sensor","text":""},{"location":"Products/Crowbits/crowbits-dht11-sensor.html#description","title":"Description","text":"<p>Temperature and humidity sensors refer to devices or devices that can convert temperature and humidity into electrical signals that can be easily measured and processed.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-dht11-sensor.html#features","title":"Features","text":"<ul> <li>Digital reading accuracy</li> </ul>"},{"location":"Products/Crowbits/crowbits-dht11-sensor.html#specification","title":"Specification","text":"<ul> <li>Interface Type\uff1aGPIO</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-dht11-sensor.html#application-ideas","title":"Application Ideas","text":"<p>Display test information</p>"},{"location":"Products/Crowbits/crowbits-dht11-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the A0 interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Download the library Crowbits-DHT11 Sensor library. Unzip and put it in the libraries file, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Upload the following code to the Crowbits-UNO board.</p> <pre><code>// Example testing sketch for various DHT humidity/temperature sensors\n// Written by ladyada, public domain\n\n#include \"DHT.h\"\n\n#define DHTPIN A0     // what pin we're connected to\n\n// Uncomment whatever type you're using!\n#define DHTTYPE DHT11   // DHT 11 \n//#define DHTTYPE DHT22   // DHT 22  (AM2302)\n//#define DHTTYPE DHT21   // DHT 21 (AM2301)\n\n// Connect pin 1 (on the left) of the sensor to +5V\n// Connect pin 2 of the sensor to whatever your DHTPIN is\n// Connect pin 4 (on the right) of the sensor to GROUND\n// Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor\n\nDHT dht(DHTPIN, DHTTYPE);\n\nvoid setup() \n{\n    Serial.begin(9600); \n    Serial.println(\"DHTxx test!\");\n\n    dht.begin();\n}\n\nvoid loop() \n{\n    // Reading temperature or humidity takes about 250 milliseconds!\n    // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)\n    float h = dht.readHumidity();\n    float t = dht.readTemperature();\n\n    // check if returns are valid, if they are NaN (not a number) then something went wrong!\n    if (isnan(t) || isnan(h)) \n    {\n        Serial.println(\"Failed to read from DHT\");\n    } \n    else \n    {\n        Serial.print(\"Humidity: \"); \n        Serial.print(h);\n        Serial.print(\"\u00a0%\\t\");\n        Serial.print(\"Temperature: \"); \n        Serial.print(t);\n        Serial.println(\" *C\");\n    }\n}\n</code></pre> <p>5.After the code is uploaded successfully, Open the debug window and observe the displayed humidity and temperature.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-dht20.html","title":"Crowbits-DHT20","text":""},{"location":"Products/Crowbits/crowbits-dht20.html#description","title":"Description","text":"<p>DHT20 is an intelligent temperature and humidity sensor module that can convert temperature and humidity into electrical signals to easily measure temperature and humidity. The module is equipped with a newly designed ASIC dedicated chip, an improved MEMS semiconductor capacitive humidity sensor element and a standard temperature sensor element. After comprehensive improvement, DHT20 reduces power consumption and cost, while greatly improving measurement accuracy, power supply voltage, measurement range, response time, stability, etc.; it has the characteristics of no calibration, low power consumption, high accuracy, and high stability. Using fully calibrated digital I2C communication interface, it has fast response, strong anti-interference ability and high cost performance.</p> <p> </p>"},{"location":"Products/Crowbits/crowbits-dht20.html#technical-specifications","title":"Technical specifications","text":"<p>Working voltage: DC2.2V+5.5V</p> <p>Measuring range</p> <ul> <li>Humidity: 0%-100% RH</li> <li>Temperature: -40~80\u00b0C</li> </ul> <p>Error range</p> <ul> <li>Humidity: \u00b13% RH</li> <li>Temperature: \u00b10.5\u00b0C</li> </ul> <p>Resolution</p> <ul> <li>Humidity: \u00b10.024% RH</li> <li>Temperature: 0.01\u00b0C</li> </ul> <p>Response time</p> <ul> <li>Humidity: \u03c463% condition is less than 8 seconds</li> <li>Temperature: \u03c463% condition mini5 seconds, max30 seconds</li> </ul> <p>Interface type: I2C Size: 31.5 (L)*24.5(W)*13(H)mm</p>"},{"location":"Products/Crowbits/crowbits-dht20.html#application-scenarios","title":"Application scenarios","text":"<p>Test environment temperature and humidity information</p>"},{"location":"Products/Crowbits/crowbits-dht20.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the A4 and A5 interface on the Crowbits-UNO board, as shown in the figure below:</p> <p> </p> <p>3. Download the Crowbit-DHT20 software file and unzip it and place it in the libraries folder of the Arduino IDE. Run Arduino.exe, Open path: Crowtail-DHT20 --&gt; examples --&gt; DHT20 --&gt; DHT20.ino</p> <pre><code>#include &lt;DHT20.h&gt;\n/*!\n * @brief Construct the function\n * @param pWire IC bus pointer object and construction device, can both pass or not pass parameters, Wire in default.\n * @param address Chip IIC address, 0x38 in default.\n */\nDHT20  dht20;\nvoid setup()\n{\n  Serial.begin(115200);\n  //Initialize sensor\n  while(dht20.begin())\n{\n    Serial.println(\"Initialize sensor failed\");\n    delay(1000);\n   }\n}\n\nvoid loop()\n{\n  //Get ambient temperature\n  Serial.print(\"temperature:\"); Serial.print(dht20.getTemperature());Serial.print(\"\u2103\");\n  //Get relative humidity\n  Serial.print(\"  humidity:\"); Serial.print(dht20.getHumidity()*100);Serial.println(\" %RH\");\n    delay(1000);\n}\n</code></pre> <p>4. Upload it to your Crowbits-UNO board, open the COM serial port, select 115200 for the baud rate at the bottom right, and the monitor displays the current environmental temperature and relative humidity information.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-digital-display.html","title":"Crowbits-Digital Display","text":""},{"location":"Products/Crowbits/crowbits-digital-display.html#description","title":"Description","text":"<p>The nixie tube is composed of four 7-segment nixie tubes. Each 7-segment nixie tube can display a number. It can display all the parameters that can be represented by numbers, such as time, date, and temperature. The module has an LED driver chip TM1650, which can communicate through the I2C interface. When the module receives data, it is encoded by TM1650 and sent to the digital display.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-digital-display.html#features","title":"Features","text":"<ul> <li>4-digit red alpha-numeric display</li> </ul>"},{"location":"Products/Crowbits/crowbits-digital-display.html#specification","title":"Specification","text":"<ul> <li>Interface Type\uff1aI2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 56(L)*31(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-digital-display.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Time display</li> <li>Stopwatch</li> </ul>"},{"location":"Products/Crowbits/crowbits-digital-display.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of digital display.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the I2C interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Download the library Crowbits-Digital Display library. Unzip and put it in the libraries file, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Upload the following code to the Crowbits-UNO board.</p> <pre><code>/*\n  Demo code of P21 - 4 Digital 7-Segment LED with Time Separator\n  by maker studio\n*/\n#include \"TM1650.h\"\n#include &lt;inttypes.h&gt;\nstatic uint8_t TubeTab[] = {\n               0x3F,0x06,0x5B,0x4F,\n               0x66,0x6D,0x7D,0x07,\n               0x7F,0x6F,0x77,0x7C,\n               0x39,0x5E,0x79,0x71,   \n               };//0~9,A,B,C,D,E,F  \nstatic uint8_t TubeTabwithPoit[] = {\n               0xBF,0x86,0xDB,0xCF,\n               0xE6,0xED,0xFD,0x87,\n               0xFF,0xEF   \n               };//0~9  \nTM1650 DigitalLED(A5,A4);\nint8_t number[] = {0,0,0,0};\nvoid setup()\n{\n  //Serial.begin(9600);\n}\n\nvoid loop()\n{\n    DigitalLED.clearDisplay();\n     delay(1000);\n     DigitalLED.display(0,TubeTab[1]);\n     DigitalLED.display(1,TubeTab[2]);\n     DigitalLED.display(2,TubeTab[3]);\n     DigitalLED.display(3,TubeTab[4]);\n     delay(1000);\n     DigitalLED.clearDisplay();\n     delay(100);\n     DigitalLED.display(0,TubeTabwithPoit[5]);\n     DigitalLED.display(1,TubeTabwithPoit[6]);\n     DigitalLED.display(2,TubeTabwithPoit[7]);\n     DigitalLED.display(3,TubeTabwithPoit[8]);\n     delay(1000);\n}\n</code></pre> <p>5. After the code is uploaded successfully, you will see the following display on the digital tube.</p> <p></p> <p></p>"},{"location":"Products/Crowbits/crowbits-digital-light-sensor.html","title":"Crowbits-Digital Light Sensor","text":""},{"location":"Products/Crowbits/crowbits-digital-light-sensor.html#description","title":"Description","text":"<p>This module is based on the I2C light-to-digital converter TSL2561 to transform light intensity to a digital signal. Different from traditional analog light sensor, this digital module features a selectable light spectrum range due to its dual light sensitive diodes: infrared and full spectrum.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-digital-light-sensor.html#features","title":"Features","text":"<ul> <li>Programmable interrupt function with User-Defined Upper and lower threshold settings</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-digital-light-sensor.html#specification","title":"Specification","text":"<ul> <li>Interface Type: I2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-digital-light-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the I2C interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Download the library \u201cDigital_Light_Sensor\u201d. Unzip and put it in the libraries file, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Upload the following code to the Crowbits-UNO board.</p> <pre><code>/*\n * Digital_Light_Sensor.ino\n * A library for TSL2561\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n#include &lt;Wire.h&gt;\n#include &lt;Digital_Light_TSL2561.h&gt;\nvoid setup()\n{\n  Wire.begin();\n  Serial.begin(9600);\n  TSL2561.init();\n}\n\nvoid loop()\n{\n  Serial.print(\"The Light value is: \");\n  Serial.println(TSL2561.readVisibleLux());\n  delay(1000);\n}\n</code></pre> <p>5. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. The stronger the light, the greater the output value, as shown in the figure:</p> <p></p>"},{"location":"Products/Crowbits/crowbits-digital-potentiometer.html","title":"Crowbits-Digital Potentiometer","text":""},{"location":"Products/Crowbits/crowbits-digital-potentiometer.html#description","title":"Description","text":"<p>The high-precision digital adjustable potentiometer is a potentiometer that can be adjusted by digital signals. It functions like a linear potentiometer. It controls the circuit by adjusting the resistance value in the circuit, but here it is controlled by digital signals.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-digital-potentiometer.html#features","title":"Features","text":"<ul> <li>Digital and Programmable</li> <li>High resistance resolution</li> <li>Temperature compensation</li> </ul>"},{"location":"Products/Crowbits/crowbits-digital-potentiometer.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-digital-potentiometer.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board. 2 digital input modules, such as Crowbits-Button and Crowbits-touch sensor. 1 digital output module, such as Crowbits-LED.</p> <p>2. Connect the Crowbits-Digital Potentiometer to the D2 and D3 interface. The keys are connected to the D5 and D10 interfaces respectively. And the Crowbits-LED is connected to the SIG_OUT pin on Crowbits-Digital Potentiometer board.</p> <p></p> <p>3. Upload the following code to the Crowbits-UNO board.</p> <pre><code>#define dig_INC 3\n#define dig_UD  2\n#define key_INC 5\n#define key_UD 10\n\nint dig_UD_status = HIGH;\nint n;\n\nvoid setup()\n{\n  pinMode(dig_INC, OUTPUT);\n  pinMode(dig_UD, OUTPUT);\n  pinMode(key_INC, INPUT);\n  pinMode(key_UD, INPUT);\n  Serial.begin(9600);\n  init_digital_potentiometer(); //\u521d\u59cb\u5316\n}\n\n\nvoid loop()\n{\n  if (digitalRead(key_INC) == HIGH)\n  {\n    delay(10);\n    if (digitalRead(key_INC) == HIGH)\n    {\n      dig_UD_status = !dig_UD_status;\n      digitalWrite(dig_UD, dig_UD_status);\n      delay(1);\n      Serial.print(\"Status key pressed,\");\n      if (dig_UD_status == HIGH)\n      {\n        Serial.println(\"The current status is increased:\");\n      }\n      else\n      {\n        Serial.println(\"The current status is reduced:\");\n      }\n      while (digitalRead(key_INC) == HIGH);\n    }\n  }\n  if (digitalRead(key_UD) == HIGH)\n  {\n    delay(10);\n    if (digitalRead(key_UD) == HIGH)\n    {\n      for (n = 20; n &gt;= 0; n--)\n      {\n        digitalWrite(dig_INC, LOW);\n        delay(2);\n        digitalWrite(dig_INC, HIGH);\n        delay(2);\n      }\n      while (digitalRead(key_UD) == HIGH);\n    }\n  }\n}\n\nvoid init_digital_potentiometer()\n{\n  int i;\n  for (i = 100; i &gt;= 0; i--)\n  {\n    digitalWrite(dig_INC, LOW);\n    delay(1);\n    digitalWrite(dig_INC, HIGH);\n  }\n  digitalWrite(dig_UD, HIGH);\n  delay(1);\n}\n</code></pre> <p>4. After the upload is successful, open the serial port monitor, the baud rate is set to 9600.</p> <ul> <li> <p>When you press the button connected to the D5 port, the current status of serial port printing is increased, and then press the button connected to the D10 port, the LED light will gradually turn on.</p> </li> <li> <p>When you press the button connected to the D5 port, the current status of the serial port printing is reduced, and then press the button connected to the D10 port, the LED light will gradually dim.</p> </li> </ul> <p></p> <p></p>"},{"location":"Products/Crowbits/crowbits-eeprom.html","title":"Crowbits-EEPROM","text":""},{"location":"Products/Crowbits/crowbits-eeprom.html#description","title":"Description","text":"<p>If you need to do some data storage in Arduino but found that the EEPROM in ATmega chip too limited, then this Crowbits-EEPROM is your best choice. This module is based on the EEPROM chip AT24C256, which has 256k bit capacity. It communicates with Arduino with I2C bus, helps you do much more data storage easily.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-eeprom.html#features","title":"Features","text":"<ul> <li>Onboard chip AT24C256 chip</li> <li>Data is not lost when power off</li> </ul>"},{"location":"Products/Crowbits/crowbits-eeprom.html#specification","title":"Specification","text":"<ul> <li>Interface Type: I2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 56(L)*31(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-eeprom.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the I2C interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Upload the following code to the Crowbits-UNO board.</p> <pre><code>#include &lt;Wire.h&gt;\n#define EEPROM_ADDR 0x50           // I2C Buss address of 24LC256 256K EEPROM\n\nvoid setup()\n{\n  Wire.begin();                        // join I2C bus (address optional for master)\n  Serial.begin(9600);\n\n  // TESTS FOR EACH FUNCTION BEGIN HERE\n  Serial.println(\"Writing Test:\");\n  for (int i=0; i&lt;20; i++){            // loop for first 20 slots\n    i2c_eeprom_write_byte(EEPROM_ADDR,i,i+65);   // write address + 65 A or 97 a\n    Serial.print(\". \");\n    delay(10);                         // NEED THIS DELAY!\n  }\n  Serial.println(\"\");\n  delay(500);\n\n  Serial.println(\"Reading Test:\");\n  for (int i=0; i&lt;20; i++){            // loop for first 20 slots\n    Serial.write(i2c_eeprom_read_byte(EEPROM_ADDR, i));\n    Serial.print(\" \");\n  }\n\n  // setup for page tests . . .\n  byte PageData[30];                   // array that will hold test data for a page\n  byte PageRead[30];                   // array that will hold result of data for a page\n  for (int i=0; i&lt;30; i++){            // zero both arrays for next test\n    PageData[i] = 0;\n    PageRead[i] = 0;\n  }\n  Serial.println(\"\");\n  for (int i=0; i&lt;30; i++) PageData[i] = i+33;  // fill up array for next test char 33 =\u00a0!\n\n  Serial.println(\"Writing Page Test:\");\n  i2c_eeprom_write_page(EEPROM_ADDR, 100, PageData, 28 ); // 28 bytes/page is max\n\n  Serial.println(\"Reading Page Test:\");\n  i2c_eeprom_read_buffer( EEPROM_ADDR, 100, PageRead, 28);\n  for (int i=0; i&lt;28; i++){\n    Serial.write(PageRead[i]);    // display the array read\n    Serial.print(\" \");\n  }\n}\n\nvoid loop()\n{\n}\n\nvoid i2c_eeprom_write_byte( int deviceaddress, unsigned int eeaddress, byte data )\n{\n  int rdata = data;\n  Wire.beginTransmission(deviceaddress);\n  Wire.write((int)(eeaddress &gt;&gt; 8));    // Address High Byte\n  Wire.write((int)(eeaddress &amp; 0xFF));  // Address Low Byte\n  Wire.write(rdata);\n  Wire.endTransmission();\n}\n\n// Address is a page address, 6-bit (63). More and end will wrap around\n// But data can be maximum of 28 bytes, because the Wire library has a buffer of 32 bytes\nvoid i2c_eeprom_write_page\n( int deviceaddress, unsigned int eeaddresspage, byte* data, byte length )\n{\n  Wire.beginTransmission(deviceaddress);\n  Wire.write((int)(eeaddresspage &gt;&gt; 8)); // Address High Byte\n  Wire.write((int)(eeaddresspage &amp; 0xFF)); // Address Low Byte\n  byte c;\n  for ( c = 0; c &lt; length; c++)\n    Wire.write(data[c]);\n  Wire.endTransmission();\n  delay(10);                           // need some delay\n}\n\nbyte i2c_eeprom_read_byte( int deviceaddress, unsigned int eeaddress )\n{\n  byte rdata = 0xFF;\n  Wire.beginTransmission(deviceaddress);\n  Wire.write((int)(eeaddress &gt;&gt; 8));    // Address High Byte\n  Wire.write((int)(eeaddress &amp; 0xFF));  // Address Low Byte\n  Wire.endTransmission();\n  Wire.requestFrom(deviceaddress,1);\n  if (Wire.available()) rdata = Wire.read();\n  return rdata;\n}\n\n// should not read more than 28 bytes at a time!\nvoid i2c_eeprom_read_buffer( int deviceaddress, unsigned int eeaddress, byte *buffer, int length )\n{\n  Wire.beginTransmission(deviceaddress);\n  Wire.write((int)(eeaddress &gt;&gt; 8));    // Address High Byte\n  Wire.write((int)(eeaddress &amp; 0xFF));  // Address Low Byte\n  Wire.endTransmission();\n  Wire.requestFrom(deviceaddress,length);\n  //int c = 0;\n  for ( int c = 0; c &lt; length; c++ )\n    if (Wire.available()) buffer[c] = Wire.read();\n}\n</code></pre> <p>4. After the upload is successful, open the serial port monitor, the baud rate is set to 9600, you can see the following print information.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-electromagnet.html","title":"Crowbits-Electromagnet","text":""},{"location":"Products/Crowbits/crowbits-electromagnet.html#description","title":"Description","text":"<p>The electromagnet is a digital output module, it is a type of magnet in which the magnetic field is produced by an electric current. Equipped with this feature, you can make a mini device for picking up and moving magnetic material.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-electromagnet.html#features","title":"Features","text":"<ul> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-electromagnet.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-electromagnet.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an input module, such as Crowbits-Switch.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Turn on the power. When you press the button of the self-locking switch, the LED of Crowbits-Electromagnet board will light up.</p> <p>4. Then let it absorb the magnetic screw, and you'll see that the screw attaches to the electromagnet. When you release the self-locking switch, the screw on the electromagnet will fall off.</p> <p></p> <p></p>"},{"location":"Products/Crowbits/crowbits-encoder.html","title":"Crowbits-Encoder","text":""},{"location":"Products/Crowbits/crowbits-encoder.html#description","title":"Description","text":"<p>The rotary encoder can convert the angular displacement and linear Displacement to the electrical signal, and then convert the electrical signal to the electrical pulse. The numbers of the pulse can be converted to the value of the angular displacement. There are two output pins of this module including signal A and signal B. We can determine the position of the detent and the direction of the rotation by sense the value of the output pins.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-encoder.html#features","title":"Features","text":"<ul> <li>Incremental encoder</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-encoder.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-encoder.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module. 1.You need to prepare a Crowbits motherboard, such as Crowbits-UNO board. 2.Connect the module to the D2 and D3 interface of the Crowbits-UNO board, as shown in the figure: 3.Upload the following code to the Crowbits-UNO board.</p> <pre><code>#define ENCODER_A_PIN 2\n#define ENCODER_B_PIN 3\nlong position;\n\nvoid setup(){\n\n  pinMode(ENCODER_A_PIN, INPUT);\n  pinMode(ENCODER_B_PIN, INPUT);\n  attachInterrupt(0, read_quadrature, CHANGE);\n  Serial.begin(9600);\n}\n\nvoid loop(){\n   Serial.print(\"Position: \");\n   Serial.println(position, DEC);\n   delay(1000);\n}\n\nvoid read_quadrature(){  \n\n  if (digitalRead(ENCODER_A_PIN) == LOW){   \n    //Check clockwise or counterclockwise\n    if (digitalRead(ENCODER_B_PIN) == LOW)\n      position++;\n  }\n\n  else{ \n    if (digitalRead(ENCODER_B_PIN) == LOW)\n      position--;\n  }\n}\n</code></pre> <p>4. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. Rotate the encoder, the serial port will print out the position information, as shown in the figure:</p>"},{"location":"Products/Crowbits/crowbits-expansion.html","title":"Crowbits-Expansion","text":""},{"location":"Products/Crowbits/crowbits-expansion.html#description","title":"Description","text":"<p>The expansion module is used to expand the signal pins of other modules.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-expansion.html#features","title":"Features","text":"<ul> <li>Expand signal pin</li> </ul>"},{"location":"Products/Crowbits/crowbits-expansion.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 56(L)*31(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-expansion.html#usage","title":"Usage","text":"<p>1.Control the motor forward and reverse through 2 buttons</p> <p>1)You also need to prepare a power module, such as Crowbits-Power Supply. An output module, such as Crowbits-DC Motor. Two input modules, such as Crowbits-Touch Sensor and Crowbits-Switch.</p> <p>2)The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3)Turn on the power. You could touch the touch sensor to control the motor to rotate forward, or press the self-locking switch to control the motor to reverse.</p> <p></p> <p></p>"},{"location":"Products/Crowbits/crowbits-flame-sensor.html","title":"Crowbits-Flame Sensor","text":""},{"location":"Products/Crowbits/crowbits-flame-sensor.html#description","title":"Description","text":"<p>The flame sensor is a digital input module, it\u2019s designed to detect the flame, which is widely used in a flame detection device.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-flame-sensor.html#features","title":"Features","text":"<ul> <li>Digital input module</li> <li>Easy to use</li> <li>High sensitivity</li> </ul>"},{"location":"Products/Crowbits/crowbits-flame-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-flame-sensor.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When the sensor detects flame, the LED behind it will light up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-g1-4-water-flow-sensor.html","title":"Crowbits-G1-4 Water Flow Sensor","text":""},{"location":"Products/Crowbits/crowbits-g1-4-water-flow-sensor.html#description","title":"Description","text":"<p>Water flow sensor consists of magnetic core, rotating impeller, external casing and sensor and a hall-effect sensor. When water flows through the rotor, rotor rolls, it activates the magnetic core to trigger switch action speed changes with different rate of flow. The hall-effect sensor outputs the corresponding pulse signals, users can get the flow speed via detecting the pulse. It is suitable to detect flow in water dispenser or coffee machine</p> <p></p>"},{"location":"Products/Crowbits/crowbits-g1-4-water-flow-sensor.html#features","title":"Features","text":"<ul> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-g1-4-water-flow-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Operating Temperature: \u226480\u2103</li> <li>Liquid Temperature: \u2264120\u2103</li> <li>Operating Humidity: 35%\uff5e90%RH</li> <li>Water Pressure: \u22642.0MPa</li> <li>Storage Temperature: -25\uff5e+ 80\u2103</li> <li>Storage Humidity: 25%\uff5e95%RH</li> </ul>"},{"location":"Products/Crowbits/crowbits-g1-4-water-flow-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1.You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2.Connect the module to the D2 interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3.Upload the following code to the Crowbits-UNO board.</p> <pre><code>// reading liquid flow rate using Crowduino and Water Flow Sensor\n\nvolatile int NbTopsFan; //measuring the rising edges of the signal\nint Calc;                               \nint WaterFlowsensor = 2;    //The pin location of the sensor\n\nvoid rpm ()     //This is the function that the interupt calls \n{ \n  NbTopsFan++;  //This function measures the rising and falling edge of the hall effect sensors signal\n} \nvoid setup() \n{ \n  pinMode(WaterFlowsensor, INPUT); //initializes digital pin 2 as an input\n  Serial.begin(9600); //This is the setup function where the serial port is initialised,\n  attachInterrupt(0, rpm, RISING); //and the interrupt is attached\n} \n// the loop() method runs over and over again,\n// as long as the Arduino has power\nvoid loop ()    \n{\n  NbTopsFan = 0;   //Set NbTops to 0 ready for calculations\n  sei();          //Enables interrupts\n  delay (1000);   //Wait 1 second\n  cli();      //Disable interrupts\n  Calc = (NbTopsFan * 60 / 73); //(Pulse frequency x 60) / 73Q, = flow rate in L/hour \n  Serial.print (Calc, DEC); //Prints the number calculated above\n  Serial.print (\" L/hour\\r\\n\"); //Prints \"L/hour\" and returns a  new line\n}\n</code></pre> <p>4.After the upload is successful, open the serial port monitor, the baud rate is set to 9600. The serial port will print out the current water flow.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-gas-sensor.html","title":"Crowbits-Gas Sensor","text":""},{"location":"Products/Crowbits/crowbits-gas-sensor.html#description","title":"Description","text":"<p>This module is a converter that converts a gas integral number into a corresponding electrical signal. It mainly uses the chemical potential difference between two electrodes. One electrode measures the gas concentration in the gas, and the other electrode is a fixed reference electrode When the concentration of a certain measured gas exceeds the standard, the concentration value will be higher than the electrical signal of the reference electrode, and the module will output the corresponding concentration value effect.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-gas-sensor.html#features","title":"Features","text":"<ul> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-gas-sensor.html#specification","title":"Specification","text":"<ul> <li>Interface Type: Analog input</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-gas-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the I2C interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3.Upload the following code to the Crowbits-UNO board.</p> <pre><code>void setup() \n{\n  Serial.begin(9600);\n}\n\nvoid loop() \n{\n  float sensor_volt;\n  float sensorValue;\n\n  sensorValue = analogRead(A2);\n  sensor_volt = sensorValue / 1024 * 5.0;\n\n  Serial.print(\"sensor_volt = \");\n  Serial.print(sensor_volt);\n  Serial.println(\"V\");\n  delay(1000);\n}\n</code></pre> <p>4.After the upload is successful, open the serial port monitor, the baud rate is set to 9600.When gas is detected, the voltage value output by the serial port will change.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-gesture-sensor.html","title":"Crowbits-Gesture Sensor","text":""},{"location":"Products/Crowbits/crowbits-gesture-sensor.html#description","title":"Description","text":"<p>The sensor on Crowbits-Gesture is PAJ7620U2 that integrates gesture recognition function with general I2C interface into a single chip. It can recognize 9 basic gestures, and these gestures information can be simply accessed via the I2C bus. You can use Gesture as an input device to control another module, or a computer, mobile phone, smart car, robot, and more with a simple swipe of your hand.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-gesture-sensor.html#features","title":"Features","text":"<ul> <li>Built-in proximity detection</li> </ul>"},{"location":"Products/Crowbits/crowbits-gesture-sensor.html#specification","title":"Specification","text":"<ul> <li>Gesture speed in Normal Mode: 60\u00b0/s to 600\u00b0/s</li> <li>Ambient light immunity: &lt; 100k Lux</li> <li>Gesture speed in Gaming Mode: 60\u00b0/s to 1200\u00b0/s</li> <li>Interface Type: I2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-gesture-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1.You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2.Connect the module to the I2C interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3.Download the library \u201cPaj7620\u201d. Unzip and put it in the libraries file, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4.Upload the following code to the Crowbits-UNO board.</p> <pre><code>/*\n * Copyright (c) 2015 seeed technology inc.\n * Website    : www.seeed.cc\n * Author     : Wuruibin\n * Modified Time: June 2015\n * Description: This demo can recognize 9 gestures and output the result, including move up, move down, move left, move right,\n *              move forward, move backward, circle-clockwise, circle-counter clockwise, and wave.\n * \n * The MIT License (MIT)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n#include &lt;Wire.h&gt;\n#include \"paj7620.h\"\n\n/* \nNotice: When you want to recognize the Forward/Backward gestures, your gestures' reaction time must less than GES_ENTRY_TIME(0.8s). \n        You also can adjust the reaction time according to the actual circumstance.\n*/\n#define GES_REACTION_TIME       500             // You can adjust the reaction time according to the actual circumstance.\n#define GES_ENTRY_TIME          800             // When you want to recognize the Forward/Backward gestures, your gestures' reaction time must less than GES_ENTRY_TIME(0.8s). \n#define GES_QUIT_TIME           1000\n\nvoid setup()\n{\n    uint8_t error = 0;\n\n    Serial.begin(9600);\n    Serial.println(\"\\nPAJ7620U2 TEST DEMO: Recognize 9 gestures.\");\n\n    error = paj7620Init();          // initialize Paj7620 registers\n    if (error) \n    {\n        Serial.print(\"INIT ERROR,CODE:\");\n        Serial.println(error);\n    }\n    else\n    {\n        Serial.println(\"INIT OK\");\n    }\n    Serial.println(\"Please input your gestures:\\n\");\n}\n\nvoid loop()\n{\n    uint8_t data = 0, data1 = 0, error;\n\n    error = paj7620ReadReg(0x43, 1, &amp;data);             // Read Bank_0_Reg_0x43/0x44 for gesture result.\n    if (!error) \n    {\n        switch (data)                                   // When different gestures be detected, the variable 'data' will be set to different values by paj7620ReadReg(0x43, 1, &amp;data).\n        {\n            case GES_RIGHT_FLAG:\n                delay(GES_ENTRY_TIME);\n                paj7620ReadReg(0x43, 1, &amp;data);\n                if(data == GES_FORWARD_FLAG) \n                {\n                    Serial.println(\"Forward\");\n                    delay(GES_QUIT_TIME);\n                }\n                else if(data == GES_BACKWARD_FLAG) \n                {\n                    Serial.println(\"Backward\");\n                    delay(GES_QUIT_TIME);\n                }\n                else\n                {\n                    Serial.println(\"Right\");\n                }          \n                break;\n            case GES_LEFT_FLAG: \n                delay(GES_ENTRY_TIME);\n                paj7620ReadReg(0x43, 1, &amp;data);\n                if(data == GES_FORWARD_FLAG) \n                {\n                    Serial.println(\"Forward\");\n                    delay(GES_QUIT_TIME);\n                }\n                else if(data == GES_BACKWARD_FLAG) \n                {\n                    Serial.println(\"Backward\");\n                    delay(GES_QUIT_TIME);\n                }\n                else\n                {\n                    Serial.println(\"Left\");\n                }          \n                break;\n            case GES_UP_FLAG:\n                delay(GES_ENTRY_TIME);\n                paj7620ReadReg(0x43, 1, &amp;data);\n                if(data == GES_FORWARD_FLAG) \n                {\n                    Serial.println(\"Forward\");\n                    delay(GES_QUIT_TIME);\n                }\n                else if(data == GES_BACKWARD_FLAG) \n                {\n                    Serial.println(\"Backward\");\n                    delay(GES_QUIT_TIME);\n                }\n                else\n                {\n                    Serial.println(\"Up\");\n                }          \n                break;\n            case GES_DOWN_FLAG:\n                delay(GES_ENTRY_TIME);\n                paj7620ReadReg(0x43, 1, &amp;data);\n                if(data == GES_FORWARD_FLAG) \n                {\n                    Serial.println(\"Forward\");\n                    delay(GES_QUIT_TIME);\n                }\n                else if(data == GES_BACKWARD_FLAG) \n                {\n                    Serial.println(\"Backward\");\n                    delay(GES_QUIT_TIME);\n                }\n                else\n                {\n                    Serial.println(\"Down\");\n                }          \n                break;\n            case GES_FORWARD_FLAG:\n                Serial.println(\"Forward\");\n                delay(GES_QUIT_TIME);\n                break;\n            case GES_BACKWARD_FLAG:       \n                Serial.println(\"Backward\");\n                delay(GES_QUIT_TIME);\n                break;\n            case GES_CLOCKWISE_FLAG:\n                Serial.println(\"Clockwise\");\n                break;\n            case GES_COUNT_CLOCKWISE_FLAG:\n                Serial.println(\"anti-clockwise\");\n                break;  \n            default:\n                paj7620ReadReg(0x44, 1, &amp;data1);\n                if (data1 == GES_WAVE_FLAG) \n                {\n                    Serial.println(\"wave\");\n                }\n                break;\n        }\n    }\n    delay(100);\n}\n</code></pre> <p>5. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. When you gesture to the sensor, the serial port will print out the corresponding gesture, as shown in the figure.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-gps.html","title":"Crowbits-GPS","text":""},{"location":"Products/Crowbits/crowbits-gps.html#description","title":"Description","text":"<p>GPS is a high-precision radio navigation positioning system based on aerial satellites. It can provide accurate geographic location, vehicle speed and accurate time information anywhere in the world and near-Earth space.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-gps.html#features","title":"Features","text":"<ul> <li>Low power consumption</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-gps.html#specification","title":"Specification","text":"<ul> <li>Interface Type: UART</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 56(L)*31(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-gps.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the D2 and D3 interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Upload the following code to the Crowbits-UNO board.</p> <pre><code>//at 9600 bps 8-N-1\n//Computer is connected to Arduino/Crowduino\n//SoftSerial Shield is connected to the Software UART:D2&amp;D3 \n\n#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial SoftSerial(2, 3);\nunsigned char buffer[256]; // buffer array for data recieve over serial port\nint count=0;     // counter for buffer array \nvoid setup()\n{\n  SoftSerial.begin(9600);               // the SoftSerial baud rate   \n  Serial.begin(9600);             // the Serial port of Arduino baud rate.\n\n}\n\nvoid loop()\n{\n  if (SoftSerial.available())              // if date is comming from softwareserial port ==&gt; data is comming from SoftSerial shield\n  {\n    while(SoftSerial.available())          // reading data into char array \n    {\n      buffer[count++]=SoftSerial.read();     // writing data into array\n      if(count == 256)break;\n  }\n    Serial.write(buffer,count);            // if no data transmission ends, write buffer to hardware serial port\n    clearBufferArray();              // call clearBufferArray function to clear the storaged data from the array\n    count = 0;                       // set counter of while loop to zero\n  }\n  if (Serial.available())            // if data is available on hardwareserial port ==&gt; data is comming from PC or notebook\n    SoftSerial.write(Serial.read());       // write it to the SoftSerial shield\n}\nvoid clearBufferArray()              // function to clear buffer array\n{\n  for (int i=0; i&lt;count;i++)\n    { buffer[i]=NULL;}                  // clear all index of array with command NULL\n}\n</code></pre> <p>4. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. The serial port will print the GPS address information.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-grayscale-sensor.html","title":"Crowbits-Grayscale Sensor","text":""},{"location":"Products/Crowbits/crowbits-grayscale-sensor.html#description","title":"Description","text":"<p>The grayscale sensor is an analog sensor. The gray-scale sensor uses different detection colors to reflect different levels of light, and the photoresistor uses different principles to detect the color depth of light returned by different detection surfaces. It is used to distinguish black from other colors when the ambient light interference is not very serious.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-grayscale-sensor.html#features","title":"Features","text":"<ul> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-grayscale-sensor.html#specification","title":"Specification","text":"<ul> <li>Interface Type: Analog input</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-grayscale-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the A2 interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Upload the following code to the Crowbits-UNO board.</p> <pre><code>void setup()\n{\n  Serial.begin(9600); // open serial port, set the baud rate to 9600 bps\n}\nvoid loop()\n{\n      int val;\n      val=analogRead(A2);   //connect grayscale sensor to Analog 0\n      Serial.println(val,DEC);//print the value to serial        \n      delay(1000);\n}\n</code></pre> <p>4. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. When you point the sensor at a white surface object and a black surface object, the value printed by the serial port is not different.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-hall-sensor.html","title":"Crowbits-Hall Sensor","text":""},{"location":"Products/Crowbits/crowbits-hall-sensor.html#description","title":"Description","text":"<p>The hall sensor is a digital input module that is used to measure the magnitude of a magnetic field, it converts the change of magnetic field into a change in output voltage.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-hall-sensor.html#features","title":"Features","text":"<ul> <li>Digital input module</li> <li>Easy to use</li> <li>High sensitivity</li> </ul>"},{"location":"Products/Crowbits/crowbits-hall-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-hall-sensor.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When the sensor detects N polar magnetic field, the LED behind it will light up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-htu21d-humiture-sensor.html","title":"Crowbits-HTU21D Humiture Sensor","text":""},{"location":"Products/Crowbits/crowbits-htu21d-humiture-sensor.html#description","title":"Description","text":"<p>Our Crowbits add a new sensor about environmental monitoring that called Crowbits-HTU21D Humiture Sensor, which is a low-cost, easy to use, highly accurate, digital humidity and temperature sensor. The sensor outputs the calibrated digital signal in standard I2C format. HTU21D series module designed for low-power/small-volume application design, with good quality, fast response speed, anti-interference ability, cost-effective advantages, very low power consumption. It\u2019s ideal for environmental sensing and data logging and perfect for a weather stations or humidor control systems.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-htu21d-humiture-sensor.html#features","title":"Features","text":"<ul> <li>Low-cost</li> <li>High precision</li> </ul>"},{"location":"Products/Crowbits/crowbits-htu21d-humiture-sensor.html#specification","title":"Specification","text":"<ul> <li>Interface Type: I2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 56(L)*56(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-htu21d-humiture-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1.You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2.Connect the module to the I2C interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3.Download the library SparkFunHTU21D. Unzip and put it in the libraries file, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4.Upload the following code to the Crowbits-UNO board.</p> <pre><code>/* \n HTU21D Humidity Sensor Example Code\n By: Nathan Seidle\n SparkFun Electronics\n Date: September 15th, 2013\n License: This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).\n\n Uses the HTU21D library to display the current humidity and temperature\n\n Open serial monitor at 9600 baud to see readings. Errors 998 if not sensor is detected. Error 999 if CRC is bad.\n\n Hardware Connections (Breakoutboard to Arduino):\n -VCC = 3.3V\n -GND = GND\n -SDA = A4 (use inline 330 ohm resistor if your board is 5V)\n -SCL = A5 (use inline 330 ohm resistor if your board is 5V)\n\n */\n\n#include &lt;Wire.h&gt;\n#include \"SparkFunHTU21D.h\"\n\n//Create an instance of the object\nHTU21D myHumidity;\n\nvoid setup()\n{\n  Serial.begin(9600);\n  Serial.println(\"HTU21D Example!\");\n\n  myHumidity.begin();\n}\n\nvoid loop()\n{\n  float humd = myHumidity.readHumidity();\n  float temp = myHumidity.readTemperature();\n\n  Serial.print(\"Time:\");\n  Serial.print(millis());\n  Serial.print(\" Temperature:\");\n  Serial.print(temp, 1);\n  Serial.print(\"C\");\n  Serial.print(\" Humidity:\");\n  Serial.print(humd, 1);\n  Serial.print(\"%\");\n\n  Serial.println();\n  delay(1000);\n}\n</code></pre> <p>5. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. The serial port will print out the current temperature and humidity values.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-ir-emitter.html","title":"Crowbits-IR Emitter","text":""},{"location":"Products/Crowbits/crowbits-ir-emitter.html#description","title":"Description","text":"<p>The Crowbits-IR Emitter is an LED make from gallium arsenide, with its color centered around 940nm. It's used to transmit infrared signals through an infrared LED, while there is an Infrared receiver to get the signals on the other side. We can not only use the emitter to transmit data or commands, but also to emulate remotes to control your home appliance using an Arduino.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-ir-emitter.html#features","title":"Features","text":"<ul> <li>Remote controller system</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-ir-emitter.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-ir-emitter.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare two Crowbits motherboards, such as Crowbits-UNO board. And a Crowbits-IR Receiver board.</p> <p>2. Connect the Crowbits-IR Receiver board to the D2 interface of the Crowbits-UNO board. Connect the Crowbits-IR Emitter board to the D9 interface of another Crowbits-UNO board.</p> <p></p> <p>3. Download the library \u201cIRSendRev\u201d. Unzip and put it in the libraries file, for example C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;IRSendRev-&gt;sendTest. Download this program to the motherboard connected to the Crowbits-IR Emitter module.</p> <pre><code>//**************\n//IR sent demo v1.0\n//Connect the IR sent pins to D3 for this demo\n//******************************\n#include &lt;IRSendRev.h&gt;\n\nvoid setup()\n{\n    //enableIROut(38);\n}\n//unsigned char d[] = {9, 90, 91, 11, 31, 4, 1, 2, 3, 4};\nunsigned char d[] = {15, 70, 70, 20, 60, 10, 1, 2, 3, 4,5,6,7,8,9,10};\n//Very Important:\n//the first parameter(15): the data that needs to be sent;\n//the next 2 parameter(70,70): the logic high and low duration of \"Start\";\n//the next 2 parameter(20,60): the logic \"short\" and \"long\"duration in the communication\n//                             that to say:  if \"0\", the high duration is 20ms and  low is 20 ms; while logic \"1\",\n//                              the high duration is 20 ms and low is 60 ms;\n//the next 2 parameter(10): number of data you will sent;\n//the next parameter(1, 2, 3, 4,5,6,7,8,9,10): data you will sent\u00a0;\nvoid loop()\n{\n    IR.Send(d, 38);//sent the data via 38Kz IR\n    delay(1000);\n}\n</code></pre> <p>5.Open the code directly by the path:File -&gt; Example -&gt;IRSendRev-&gt;revTest. Download this program to the motherboard connected to the Crowbits-IR Receiver module.</p> <pre><code>//**************\n//IR receive demo v1.0\n//Connect the IR sent pins to D2 for this demo\n//******************************\n#include &lt;IRSendRev.h&gt;\n//#include &lt;IRSendRevInt.h&gt;\n\nvoid setup()\n{\n    Serial.begin(9600);\n    IR.Init(2);\n    Serial.println(\"init over\");\n}\n\nunsigned char dta[20];\n\nvoid loop()\n{\n    if(IR.IsDta())\n    {\n       // IR.Recv(dta);\n        int length= IR.Recv(dta);\n        for (int i =0;i&lt;length;i++)\n        {\n          Serial.print(dta[i]);\n          Serial.print(\"\\t\");\n        }\n        Serial.println();\n// Very Important:\n// the received data is comprised of the trsmission parameters , please refer to \n// the sendTest.ino in the library\u00a0;\n    }\n\n\n}\n</code></pre> <p>6. After downloading the two programs, open the serial port of the motherboard connected to the Crowbits of the Crowbits-IR Receiver module, the baud rate is set to 9600, and then you will receive the information sent by the transmitter module, as shown in the figure:</p> <p></p>"},{"location":"Products/Crowbits/crowbits-ir-receiver.html","title":"Crowbits-IR Receiver","text":""},{"location":"Products/Crowbits/crowbits-ir-receiver.html#description","title":"Description","text":"<p>The Crowbits-IR Receiver module uses the HS0038B which is miniaturized receivers for infrared remote control system and it is the standard IR remote control receiver series, supporting all major transmission codes. The IR detector have a demodulator inside that looks for modulated IR at 38 KHz. We often use the two Crowbits-IR Receiver and the Crowbits-IR Emitter to work together.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-ir-receiver.html#features","title":"Features","text":"<ul> <li>Remote controller system</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-ir-receiver.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-ir-receiver.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare two Crowbits motherboards, such as Crowbits-UNO board. And a Crowbits-IR Emitter board.</p> <p>2. Connect the Crowbits-IR Receiver board to the D2 interface of the Crowbits-UNO board. Connect the Crowbits-IR Emitter board to the D9 interface of another Crowbits-UNO board.</p> <p></p> <p>3. Download the library \u201cIRSendRev\u201d. Unzip and put it in the libraries file, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;IRSendRev-&gt;sendTest. Download this program to the motherboard connected to the Crowbits-IR Emitter module.</p> <pre><code>//**************\n//IR sent demo v1.0\n//Connect the IR sent pins to D3 for this demo\n//******************************\n#include &lt;IRSendRev.h&gt;\n\nvoid setup()\n{\n    //enableIROut(38);\n}\n//unsigned char d[] = {9, 90, 91, 11, 31, 4, 1, 2, 3, 4};\nunsigned char d[] = {15, 70, 70, 20, 60, 10, 1, 2, 3, 4,5,6,7,8,9,10};\n//Very Important:\n//the first parameter(15): the data that needs to be sent;\n//the next 2 parameter(70,70): the logic high and low duration of \"Start\";\n//the next 2 parameter(20,60): the logic \"short\" and \"long\"duration in the communication\n//                             that to say:  if \"0\", the high duration is 20ms and  low is 20 ms; while logic \"1\",\n//                              the high duration is 20 ms and low is 60 ms;\n//the next 2 parameter(10): number of data you will sent;\n//the next parameter(1, 2, 3, 4,5,6,7,8,9,10): data you will sent\u00a0;\nvoid loop()\n{\n    IR.Send(d, 38);//sent the data via 38Kz IR\n    delay(1000);\n}\n</code></pre> <p>5. Open the code directly by the path:File -&gt; Example -&gt;IRSendRev-&gt;revTest. Download this program to the motherboard connected to the Crowbits-IR Receiver module.</p> <pre><code>//**************\n//IR receive demo v1.0\n//Connect the IR sent pins to D2 for this demo\n//******************************\n#include &lt;IRSendRev.h&gt;\n//#include &lt;IRSendRevInt.h&gt;\n\nvoid setup()\n{\n    Serial.begin(9600);\n    IR.Init(2);\n    Serial.println(\"init over\");\n}\n\nunsigned char dta[20];\n\nvoid loop()\n{\n    if(IR.IsDta())\n    {\n       // IR.Recv(dta);\n        int length= IR.Recv(dta);\n        for (int i =0;i&lt;length;i++)\n        {\n          Serial.print(dta[i]);\n          Serial.print(\"\\t\");\n        }\n        Serial.println();\n// Very Important:\n// the received data is comprised of the trsmission parameters , please refer to \n// the sendTest.ino in the library\u00a0;\n    }\n\n\n}\n</code></pre> <p>6. After downloading the two programs, open the serial port of the motherboard connected to the Crowbits of the Crowbits-IR Receiver module, the baud rate is set to 9600, and then you will receive the information sent by the transmitter module, as shown in the figure:</p> <p></p>"},{"location":"Products/Crowbits/crowbits-ir-reflective-sensor.html","title":"Crowbits-IR Reflective Sensor","text":""},{"location":"Products/Crowbits/crowbits-ir-reflective-sensor.html#description","title":"Description","text":"<p>The IR reflective sensor is a digital input module, it acts like a pair of eyes inside your circuit, it senses objects around it and takes action. In real life, the IR reflective sensor is often used as car tracking devices.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-ir-reflective-sensor.html#features","title":"Features","text":"<ul> <li>Easy to use</li> <li>Digital input module</li> </ul>"},{"location":"Products/Crowbits/crowbits-ir-reflective-sensor.html#application","title":"Application","text":"<ul> <li>Obstacle Detection</li> <li>Compact disk players, Copiers, Game machines</li> </ul>"},{"location":"Products/Crowbits/crowbits-ir-reflective-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-ir-reflective-sensor.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When the sensor detects an object, the LED behind it will light up.</p>"},{"location":"Products/Crowbits/crowbits-ir-temperature-sensor.html","title":"Crowbits-IR Temperature Sensor","text":""},{"location":"Products/Crowbits/crowbits-ir-temperature-sensor.html#description","title":"Description","text":"<p>This IR temperature sensor is a non-contact temperature measure model by using the MLX90614, which one is in small size and low cost with a measurement resolution of 0.02\u2103. Thanks to its low noise amplifier, 17-bit ADC and powerful DSP unit, high accuracy and resolution of the thermometer are achieved.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-ir-temperature-sensor.html#features","title":"Features","text":"<ul> <li>High precision</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-ir-temperature-sensor.html#specification","title":"Specification","text":"<ul> <li>Interface Type: I2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-ir-temperature-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the I2C interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Download the library \u201cI2Cmaster\u201d. Unzip and put it in the libraries file, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Upload the following code to the Crowbits-UNO board.</p> <pre><code>#include &lt;i2cmaster.h&gt;\n\n\nvoid setup(){\n    Serial.begin(9600);\n    Serial.println(\"Setup...\");\n\n    i2c_init(); //Initialise the i2c bus\n    PORTC = (1 &lt;&lt; PORTC4) | (1 &lt;&lt; PORTC5);//enable pullups\n}\n\nvoid loop(){\n    int dev = 0x5A&lt;&lt;1;\n    int data_low = 0;\n    int data_high = 0;\n    int pec = 0;\n\n    i2c_start_wait(dev+I2C_WRITE);\n    i2c_write(0x07);\n\n    // read\n    i2c_rep_start(dev+I2C_READ);\n    data_low = i2c_readAck(); //Read 1 byte and then send ack\n    data_high = i2c_readAck(); //Read 1 byte and then send ack\n    pec = i2c_readNak();\n    i2c_stop();\n\n    //This converts high and low bytes together and processes temperature, MSB is a error bit and is ignored for temps\n    double tempFactor = 0.02; // 0.02 degrees per LSB (measurement resolution of the MLX90614)\n    double tempData = 0x0000; // zero out the data\n    int frac; // data past the decimal point\n\n    // This masks off the error bit of the high byte, then moves it left 8 bits and adds the low byte.\n    tempData = (double)(((data_high &amp; 0x007F) &lt;&lt; 8) + data_low);\n    tempData = (tempData * tempFactor)-0.01;\n\n    float celcius = tempData - 273.15;\n    float fahrenheit = (celcius*1.8) + 32;\n\n    Serial.print(\"Celcius: \");\n    Serial.println(celcius);\n\n    Serial.print(\"Fahrenheit: \");\n    Serial.println(fahrenheit);\n\n    delay(1000); // wait a second before printing again\n}\n</code></pre> <p>5. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. The serial port will print out temperature information.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-keyboard.html","title":"Crowbits-Keyboard","text":""},{"location":"Products/Crowbits/crowbits-keyboard.html#description","title":"Description","text":"<p>Each key on the keyboard can input various numbers and symbols, which also integrated a microphone. You can use it for scenarios such as phone buttons. Add a lot of fun to your project.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-keyboard.html#features","title":"Features","text":"<ul> <li>SMD silicone silent keyboard</li> </ul>"},{"location":"Products/Crowbits/crowbits-keyboard.html#specification","title":"Specification","text":"<ul> <li>Interface Type: Analog input</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 56(L)*56(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-keyboard.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the A2 interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Upload the following code to the Crowbits-UNO board.</p> <pre><code>int sensorPin = A2;\nint sensorValue = 0;\nint a = 0;\n\nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"Please press a Key\");\n}\n\nvoid loop() \n{\n  sensorValue = analogRead(sensorPin);\n  a = sensorValue;\n  // a = sensorValue/10;\n  //Serial.println(sensorValue);\n  if (a &gt;= 0 &amp;&amp; a &lt;= 40 ) {\n    Serial.println(\"7\");\n   // Serial.println(a);\n    delay(500);\n  }\n\n  if (a &gt;= 50 &amp;&amp; a &lt;= 90 ) {\n    Serial.println(\"8\");\n   // Serial.println(a);\n    delay(500);\n  }\n\n  if (a &gt;= 100 &amp;&amp; a &lt;= 150 ) {\n    Serial.println(\"9\");\n   // Serial.println(a);\n    delay(500);\n  }\n  if (a &gt;= 160 &amp;&amp; a &lt;= 200 ) {\n    Serial.println(\"+\");\n   // Serial.println(a);\n    delay(500);\n  }\n  if (a &gt;= 230 &amp;&amp; a &lt;= 270 ) {\n    Serial.println(\"4\");\n    delay(500);\n  }\n  if (a &gt;= 290 &amp;&amp; a &lt;= 330 ) {\n    Serial.println(\"5\");\n   // Serial.println(a);\n    delay(500);\n  }\n  if (a &gt;= 350 &amp;&amp; a &lt;= 390 ) {\n    Serial.println(\"6\");\n   // Serial.println(a);\n    delay(500);\n  }\n  if (a &gt;= 420 &amp;&amp; a &lt;= 460 ) {\n    Serial.println(\"-\");\n    //Serial.println(a);\n    delay(500);\n  }\n  if (a &gt;= 480 &amp;&amp; a &lt;= 520 ) {\n    Serial.println(\"1\");\n   // Serial.println(a);\n    delay(500);\n  }\n  if (a &gt;= 545 &amp;&amp; a &lt;= 585 ) {\n    Serial.println(\"2\");\n   // Serial.println(a);\n    delay(500);\n  }\n  if (a &gt;= 600 &amp;&amp; a &lt;= 640 ) {\n    Serial.println(\"3\");\n    //Serial.println(a);\n    delay(500);\n  }\n  if (a &gt;= 670 &amp;&amp; a &lt;= 710 ) {\n    Serial.println(\"*\");\n   // Serial.println(a);\n    delay(500);\n  }\n  if (a &gt;= 735 &amp;&amp; a &lt;= 775 ) {\n    Serial.println(\".\");\n   // Serial.println(a);\n    delay(500);\n  }\n  if (a &gt;= 790 &amp;&amp; a &lt;= 835 ) {\n    Serial.println(\"0\");\n   // Serial.println(a);\n    delay(500);\n  }\n  if (a &gt;= 860 &amp;&amp; a &lt;= 900 ) {\n    Serial.println(\"=\");\n    //Serial.println(a);\n    delay(500);\n  }\n  if (a &gt; 900 &amp;&amp; a &lt;= 945 ) {\n    Serial.println(\"/\");\n   // Serial.println(a);\n    delay(500);\n  }\n}\n</code></pre> <p>4. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. Press the keys on the keyboard, the serial port will output the corresponding numbers and symbols.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-laser-ranging-sensor.html","title":"Crowbits-Laser Ranging Sensor","text":""},{"location":"Products/Crowbits/crowbits-laser-ranging-sensor.html#description","title":"Description","text":"<p>If you want to measure something more accurate and faster. This module fully meets the requirements. And the specific crowtail interface will provide convenience for us to use it with Arduino. The VL53L0X is a new generation Time-of-Flight (ToF) laser-ranging module housed in the smallest package on the market today, providing accurate distance measurement whatever the target reflectances unlike conventional technologies. It can measure absolute distances up to 2m, setting a new benchmark in ranging performance levels, opening the door to various new applications. The VL53L0X integrates a leading-edge SPAD array (Single Photon Avalanche Diodes) and embeds ST\u2019s second generation FlightSenseTM patented technology. The VL53L0X\u2019s 940nm VCSEL emitter (Vertical Cavity Surface-Emitting Laser), is totally invisible to the human eye, coupled with internal physical infrared filters, it enables longer ranging distance, higher immunity to ambient light and better robustness to cover-glass optical cross-talk.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-laser-ranging-sensor.html#features","title":"Features","text":"<ul> <li>Fully integrated miniature module</li> <li>Advanced embedded optical cross-talk compensation to simplify cover glass selection</li> <li>Class 1 laser device compliant with latest standard IEC 60825-1:2014 - 3<sup>rd</sup> edition</li> </ul>"},{"location":"Products/Crowbits/crowbits-laser-ranging-sensor.html#specification","title":"Specification","text":"<ul> <li>Interface Type: I2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 56(L)*56(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-laser-ranging-sensor.html#applications","title":"Applications","text":"<ul> <li>User detection for Personal Computers/ Laptops/Tablets and IoT (Energy saving)</li> <li>Robotics (obstacle detection).</li> </ul>"},{"location":"Products/Crowbits/crowbits-laser-ranging-sensor.html#usage","title":"Usage","text":"<p>Usage The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the I2C interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Upload the following code to the Crowbits-UNO board.</p> <pre><code>//the original code by Ted Meyers\n//posted here: https://groups.google.com/d/msg/diyrovers/lc7NUZYuJOg/ICPrYNJGBgAJ\n\n#include &lt;Wire.h&gt;\n\n#define VL53L0X_REG_IDENTIFICATION_MODEL_ID         0xc0\n#define VL53L0X_REG_IDENTIFICATION_REVISION_ID      0xc2\n#define VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD   0x50\n#define VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD 0x70\n#define VL53L0X_REG_SYSRANGE_START                  0x00\n#define VL53L0X_REG_RESULT_INTERRUPT_STATUS         0x13\n#define VL53L0X_REG_RESULT_RANGE_STATUS             0x14\n#define address 0x29\n\nbyte gbuf[16];\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Wire.begin();        // join i2c bus (address optional for master)\n  Serial.begin(9600);  // start serial for output\n  Serial.println(\"VLX53LOX test started.\");\n}\n\nvoid loop() {\n  Serial.println(\"----- START TEST ----\");\n  test();\n  Serial.println(\"----- END TEST ----\");\n  Serial.println(\"\");\n  delay(1000);\n}\n\nvoid test() {\n  byte val1 = read_byte_data_at(VL53L0X_REG_IDENTIFICATION_REVISION_ID);\n  Serial.print(\"Revision ID: \"); Serial.println(val1);\ndelay(1000);\n  val1 = read_byte_data_at(VL53L0X_REG_IDENTIFICATION_MODEL_ID);\n  Serial.print(\"Device ID: \"); Serial.println(val1);\ndelay(1000);\n  val1 = read_byte_data_at(VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD);\n  Serial.print(\"PRE_RANGE_CONFIG_VCSEL_PERIOD=\"); Serial.println(val1); \n  Serial.print(\" decode: \"); Serial.println(VL53L0X_decode_vcsel_period(val1));\ndelay(1000);\n  val1 = read_byte_data_at(VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD);\n  Serial.print(\"FINAL_RANGE_CONFIG_VCSEL_PERIOD=\"); Serial.println(val1);\n  Serial.print(\" decode: \"); Serial.println(VL53L0X_decode_vcsel_period(val1));\ndelay(1000);\n  write_byte_data_at(VL53L0X_REG_SYSRANGE_START, 0x01);\n\n  byte val = 0;\n  int cnt = 0;\n  while (cnt &lt; 100) { // 1 second waiting time max\n    delay(10);\n    val = read_byte_data_at(VL53L0X_REG_RESULT_RANGE_STATUS);\n    if (val &amp; 0x01) break;\n    cnt++;\n  }\n  if (val &amp; 0x01) Serial.println(\"ready\"); else Serial.println(\"not ready\");\n\n  read_block_data_at(0x14, 12);\n  uint16_t acnt = makeuint16(gbuf[7], gbuf[6]);\n  uint16_t scnt = makeuint16(gbuf[9], gbuf[8]);\n  uint16_t dist = makeuint16(gbuf[11], gbuf[10]);\n  byte DeviceRangeStatusInternal = ((gbuf[0] &amp; 0x78) &gt;&gt; 3);\n\n  Serial.print(\"ambient count: \"); Serial.println(acnt);\n  delay(1000);\n  Serial.print(\"signal count: \");  Serial.println(scnt);\n  delay(1000);\n  Serial.print(\"distance \");       Serial.println(dist);\n  delay(1000);\n  Serial.print(\"status: \");        Serial.println(DeviceRangeStatusInternal);\n  delay(1000);\n}\n\nuint16_t bswap(byte b[]) {\n  // Big Endian unsigned short to little endian unsigned short\n  uint16_t val = ((b[0] &lt;&lt; 8) &amp; b[1]);\n  return val;\n}\n\nuint16_t makeuint16(int lsb, int msb) {\n    return ((msb &amp; 0xFF) &lt;&lt; 8) | (lsb &amp; 0xFF);\n}\n\nvoid write_byte_data(byte data) {\n  Wire.beginTransmission(address);\n  Wire.write(data);\n  Wire.endTransmission();\n}\n\nvoid write_byte_data_at(byte reg, byte data) {\n  // write data word at address and register\n  Wire.beginTransmission(address);\n  Wire.write(reg);\n  Wire.write(data);\n  Wire.endTransmission();\n}\n\nvoid write_word_data_at(byte reg, uint16_t data) {\n  // write data word at address and register\n  byte b0 = (data &amp;0xFF);\n  byte b1 = ((data &gt;&gt; 8) &amp;&amp; 0xFF);\n\n  Wire.beginTransmission(address);\n  Wire.write(reg);\n  Wire.write(b0);\n  Wire.write(b1);\n  Wire.endTransmission();\n}\n\nbyte read_byte_data() {\n  Wire.requestFrom(address, 1);\n  while (Wire.available() &lt; 1) delay(1);\n  byte b = Wire.read();\n  return b;\n}\n\nbyte read_byte_data_at(byte reg) {\n  //write_byte_data((byte)0x00);\n  write_byte_data(reg);\n  Wire.requestFrom(address, 1);\n  while (Wire.available() &lt; 1) delay(1);\n  byte b = Wire.read();\n  return b;\n}\n\nuint16_t read_word_data_at(byte reg) {\n  write_byte_data(reg);\n  Wire.requestFrom(address, 2);\n  while (Wire.available() &lt; 2) delay(1);\n  gbuf[0] = Wire.read();\n  gbuf[1] = Wire.read();\n  return bswap(gbuf); \n}\n\nvoid read_block_data_at(byte reg, int sz) {\n  int i = 0;\n  write_byte_data(reg);\n  Wire.requestFrom(address, sz);\n  for (i=0; i&lt;sz; i++) {\n    while (Wire.available() &lt; 1) delay(1);\n    gbuf[i] = Wire.read();\n  }\n}\n\n\nuint16_t VL53L0X_decode_vcsel_period(short vcsel_period_reg) {\n  // Converts the encoded VCSEL period register value into the real\n  // period in PLL clocks\n  uint16_t vcsel_period_pclks = (vcsel_period_reg + 1) &lt;&lt; 1;\n  return vcsel_period_pclks;\n}\n</code></pre> <p>4. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. Place an object in front of the sensor, the serial port will show the distance of the object, as shown in the figure:</p> <p></p>"},{"location":"Products/Crowbits/crowbits-led-bar.html","title":"Crowbits-LED Bar","text":""},{"location":"Products/Crowbits/crowbits-led-bar.html#description","title":"Description","text":"<p>The LED light bar is a digital output module. Through the light bar, you can display the battery power, voltage value, water depth, sound size, and any other scene that needs to represent the gradient value.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-led-bar.html#features","title":"Features","text":"<ul> <li>Detect various signals</li> </ul>"},{"location":"Products/Crowbits/crowbits-led-bar.html#specification","title":"Specification","text":"<ul> <li>Interface Type\uff1aGPIO</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-led-bar.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Display test information</li> </ul>"},{"location":"Products/Crowbits/crowbits-led-bar.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of digital display.</p> <p>1.You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2.Connect the module to the D2 and D3 interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3.Download the library Crowbits-LED Bar library. Unzip and put it in the libraries file, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4.Upload the following code to the Crowbits-UNO board.</p> <pre><code>/*\n  Crowtai LED Bar - Level Example\n  This example will show you how to use setLevel() function of this library.\n  The setLevel() function illuminates the given number of LEDs from either side.\n\n  Syntax setLevel(level)\n  0  = all LEDs off\n  5  = 5 LEDs on\n  10 = all LEDs on\n*/\n\n#include &lt;Grove_LED_Bar.h&gt;\nGrove_LED_Bar bar(2, 3, 0);  // Clock pin, Data pin, Orientation\n\nvoid setup()\n{\n  // nothing to initialize\n  Serial.begin(9600);\n  bar.begin();\n}\n\nvoid loop()\n{\n  // Walk through the levels\n  for (int i = 0; i &lt;= 10; i++)\n  {\n    bar.setLevel(i);\n    delay(1000);\n  }\n\n}\n</code></pre> <p>5. After the code is uploaded successfully, you will see the light bar change.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-led-matrix.html","title":"Crowbits-LED Matrix","text":""},{"location":"Products/Crowbits/crowbits-led-matrix.html#description","title":"Description","text":"<p>The I2C communication protocol uses only 2 pins, and you can have up to 8 selectable I2C addresses so thats a total of 8 matrices, each one controlling 8x8 LEDs for 64 total LEDs. We offer three LED matrix to you-red ,blue and green. You need to pay attention to that the driver can turn LEDs on and off but does not have the ability to individually PWM dim them. This chip is rock solid, has Arduino &amp; Pi example code written for it and is easy to use.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-led-matrix.html#features","title":"Features","text":"<ul> <li>8*8 LED matrix</li> </ul>"},{"location":"Products/Crowbits/crowbits-led-matrix.html#specification","title":"Specification","text":"<ul> <li>Interface Type: I2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 56(L)*56(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-led-matrix.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the I2C interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Download the library \u201cAdafruit_GFX\u201d and \u201cAdafruit_LEDBackpack\u201d. Unzip and put it in the libraries file, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Upload the following code to the Crowbits-UNO board.</p> <pre><code>/*************************************************** \n  This is a library for our I2C LED Backpacks\n\n  Designed specifically to work with the Adafruit LED Matrix backpacks \n  ----&gt; http://www.adafruit.com/products/872\n  ----&gt; http://www.adafruit.com/products/871\n  ----&gt; http://www.adafruit.com/products/870\n\n  These displays use I2C to communicate, 2 pins are required to \n  interface. There are multiple selectable I2C addresses. For backpacks\n  with 2 Address Select pins: 0x70, 0x71, 0x72 or 0x73. For backpacks\n  with 3 Address Select pins: 0x70 thru 0x77\n\n  Adafruit invests time and resources providing this open source code, \n  please support Adafruit and open-source hardware by purchasing \n  products from Adafruit!\n\n  Written by Limor Fried/Ladyada for Adafruit Industries.  \n  BSD license, all text above must be included in any redistribution\n ****************************************************/\n\n#include &lt;Wire.h&gt;\n#include &lt;Adafruit_GFX.h&gt;\n#include \"Adafruit_LEDBackpack.h\"\n\nAdafruit_8x8matrix matrix = Adafruit_8x8matrix();\n\nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"8x8 LED Matrix Test\");\n\n  matrix.begin(0x70);  // pass in the address\n}\n\nstatic const uint8_t PROGMEM\n  smile_bmp[] =\n  { B00111100,\n    B01000010,\n    B10100101,\n    B10000001,\n    B10100101,\n    B10011001,\n    B01000010,\n    B00111100 },\n  neutral_bmp[] =\n  { B00111100,\n    B01000010,\n    B10100101,\n    B10000001,\n    B10111101,\n    B10000001,\n    B01000010,\n    B00111100 },\n  frown_bmp[] =\n  { B00111100,\n    B01000010,\n    B10100101,\n    B10000001,\n    B10011001,\n    B10100101,\n    B01000010,\n    B00111100 };\n\nvoid loop() {\n  matrix.clear();\n  matrix.drawBitmap(0, 0, smile_bmp, 8, 8, LED_ON);\n  matrix.writeDisplay();\n  delay(500);\n\n  matrix.clear();\n  matrix.drawBitmap(0, 0, neutral_bmp, 8, 8, LED_ON);\n  matrix.writeDisplay();\n  delay(500);\n\n  matrix.clear();\n  matrix.drawBitmap(0, 0, frown_bmp, 8, 8, LED_ON);\n  matrix.writeDisplay();\n  delay(500);\n\n  matrix.clear();      // clear display\n  matrix.drawPixel(0, 0, LED_ON);  \n  matrix.writeDisplay();  // write the changes we just made to the display\n  delay(500);\n\n  matrix.clear();\n  matrix.drawLine(0,0, 7,7, LED_ON);\n  matrix.writeDisplay();  // write the changes we just made to the display\n  delay(500);\n\n  matrix.clear();\n  matrix.drawRect(0,0, 8,8, LED_ON);\n  matrix.fillRect(2,2, 4,4, LED_ON);\n  matrix.writeDisplay();  // write the changes we just made to the display\n  delay(500);\n\n  matrix.clear();\n  matrix.drawCircle(3,3, 3, LED_ON);\n  matrix.writeDisplay();  // write the changes we just made to the display\n  delay(500);\n\n  matrix.setTextSize(1);\n  matrix.setTextWrap(false);  // we dont want text to wrap so it scrolls nicely\n  matrix.setTextColor(LED_ON);\n  for (int8_t x=0; x&gt;=-36; x--) {\n    matrix.clear();\n    matrix.setCursor(x,0);\n    matrix.print(\"Hello\");\n    matrix.writeDisplay();\n    delay(100);\n  }\n  matrix.setRotation(3);\n  for (int8_t x=7; x&gt;=-36; x--) {\n    matrix.clear();\n    matrix.setCursor(x,0);\n    matrix.print(\"World\");\n    matrix.writeDisplay();\n    delay(100);\n  }\n  matrix.setRotation(0);\n}\n</code></pre> <p>5. After the code is uploaded successfully, you can see the patterns and words displayed on the 8 * 8 dot matrix.</p> <p></p> <p></p>"},{"location":"Products/Crowbits/crowbits-led-red-green-yellow.html","title":"Crowbits-LED (Red Green Yellow)","text":""},{"location":"Products/Crowbits/crowbits-led-red-green-yellow.html#description","title":"Description","text":"<p>The LED is a digital output module, it will bring light to your project. Crowbits includes 3 different type of LED colors, all are the same except the color. The kit includes: Red LED, Green LED and Yellow LED.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-led-red-green-yellow.html#features","title":"Features","text":"<ul> <li>5mm LED</li> <li>Digital output module</li> </ul>"},{"location":"Products/Crowbits/crowbits-led-red-green-yellow.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-led-red-green-yellow.html#usage","title":"Usage","text":"<p>1.You also need to prepare a power module, such as Crowbits-Power Supply, and an input module, such as Crowbits-Touch Sensor.</p> <p>2.The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3.Then, turn on the power. When you touch the sensor with your hand, the LED light will light up; Otherwise, the LED will be off.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-light-sensor.html","title":"Crowbits-Light Sensor","text":""},{"location":"Products/Crowbits/crowbits-light-sensor.html#description","title":"Description","text":"<p>The light sensor is an analog input module, it controls your circuit with light. The light sensor measures the light intensity to know how dark or bright the environment is to activate your circuit.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-light-sensor.html#features","title":"Features","text":"<ul> <li>Light-control switch</li> <li>Analog input module</li> </ul>"},{"location":"Products/Crowbits/crowbits-light-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-light-sensor.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power.</p> <ul> <li> <p>When you place the sensor in a place with strong light, the LED connected behind will not light.</p> </li> <li> <p>when you place the sensor in a place with weak light, the LED connected behind will light up.</p> </li> </ul> <p></p>"},{"location":"Products/Crowbits/crowbits-linear-potentiometer.html","title":"Crowbits-Linear Potentiometer","text":""},{"location":"Products/Crowbits/crowbits-linear-potentiometer.html#description","title":"Description","text":"<p>The linear potentiometer is an analog input module, it changes the resistance of the whole circuit to control your circuit.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-linear-potentiometer.html#features","title":"Features","text":"<ul> <li>Analog input module</li> <li>Linear resistance taper</li> </ul>"},{"location":"Products/Crowbits/crowbits-linear-potentiometer.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>The range of resistance of the potentiometer: 0~5K\u03a9</li> <li>18mm long slide length</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-linear-potentiometer.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. Sliding the rheostat, you can see that the LED will have a progressive effect of darkening or brightening.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-logic-and.html","title":"Crowbits-Logic AND","text":""},{"location":"Products/Crowbits/crowbits-logic-and.html#description","title":"Description","text":"<p>The logic AND is a logic gate that creates rules for your circuit, gives you more ability to create interesting and complex interactions..The logic AND has two inputs and one output, only both of the inputs are true, the output is true. The interface of the logic AND is a digital interface, it will output a logic-high/low (1/0) signal.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-logic-and.html#features","title":"Features","text":"<ul> <li>Dual input port.</li> <li>Single output port.</li> <li>Output indicator.</li> </ul>"},{"location":"Products/Crowbits/crowbits-logic-and.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 56(L)*31(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-logic-and.html#usage","title":"Usage","text":"<p>1) You also need a power module, such as Crowbits-Power Supply; An input module, such as Crowbits-Switch and Crowbits-Touch Sensor; An extension module, such as Crowbits-LED.</p> <p>2) The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3) Then, turn on the power. When you press the self-locking switch and press the Touch Sensor, the LED light.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-logic-input.html","title":"Crowbits-Logic Input","text":""},{"location":"Products/Crowbits/crowbits-logic-input.html#description","title":"Description","text":"<p>The logic Input is a small and convenient way to input digital logic commands (high or low) into your circuit. The logic input has two states, logic low and logic high (1 and 0). The number 0 on the board means logic low-level, the number 1 means logic high-level. When sliding the switch to 1, it will output a logic high-level signal. Otherwise, slide the switch to 0, it will output a logic low-level signal.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-logic-input.html#features","title":"Features","text":"<ul> <li>Single input port.</li> <li>Single output port.</li> <li>Output indicator.</li> </ul>"},{"location":"Products/Crowbits/crowbits-logic-input.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-logic-input.html#usage","title":"Usage","text":"<p>1. You also need a power module, such as Crowbits-Power Supply; An input module, such as Crowbits-Logic input; An extension module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p>3. Turn on the power. When sliding the switch to 0, the LED lights off.</p> <p></p> <p>4. When sliding the switch to 1, the LED light.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-logic-not.html","title":"Crowbits-Logic NOT","text":""},{"location":"Products/Crowbits/crowbits-logic-not.html#description","title":"Description","text":"<p>The logic NOT is a logic gate that uses one input signal to control one output signal, it creates rules for your circuit. The interface of the logic NOT is a digital interface, it will output a logic-high or low (1 or 0) signal.The logic NOT has one input and one output, the output does a reverse operation on the input, which means if you send a logic-high signal to the input, the logic NOT will output a logic-low signal.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-logic-not.html#features","title":"Features","text":"<ul> <li>Single input port.</li> <li>Single output port.</li> <li>Output indicator.</li> </ul>"},{"location":"Products/Crowbits/crowbits-logic-not.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-logic-not.html#usage","title":"Usage","text":"<p>1)You also need a power module, such as Crowbits-Power Supply; An input module, such as Crowbits-Touch Sensor and Crowbits-Logic NOT; An extension module, such as Crowbits-LED.</p> <p>2)The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3)Then, turn on the power. the LED light.</p> <p></p> <p>4)When you press the Touch Sensor, the LED lights off.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-logic-or.html","title":"Crowbits-Logic OR","text":""},{"location":"Products/Crowbits/crowbits-logic-or.html#description","title":"Description","text":"<p>The logic OR is a logic gate that creates an OR rule for your circuit. But unlike AND, the logic OR is a good option for projects where you want to detect two inputs but don't care which input is activated.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-logic-or.html#features","title":"Features","text":"<ul> <li>Single output port.</li> </ul> <pre><code>*Output indicator.\n</code></pre>"},{"location":"Products/Crowbits/crowbits-logic-or.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 56(L)*31(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-logic-or.html#usage","title":"Usage","text":"<p>1)You also need a power module, such as Crowbits-Power Supply; An input module, such as Crowbits-Switch and Crowbits-Touch Sensor; An extension module, such as Crowbits-LED.</p> <p>2)The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3)Then, turn on the power. When you press the self-locking switch or press the Touch Sensor, the LED light.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-magnetic-switch.html","title":"Crowbits-Magnetic Switch","text":""},{"location":"Products/Crowbits/crowbits-magnetic-switch.html#description","title":"Description","text":"<p>The magnetic is a digital input module, it is an electrical switch activated by the magnetic field, it can be used to detect the magnetic field.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-magnetic-switch.html#features","title":"Features","text":"<ul> <li>Digital input module</li> </ul>"},{"location":"Products/Crowbits/crowbits-magnetic-switch.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-magnetic-switch.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. When the sensor detects the presence of a magnet, the LED behind it will light up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-microbit-compatible.html","title":"Crowbits-Microbit Compatible","text":""},{"location":"Products/Crowbits/crowbits-microbit-compatible.html#description","title":"Description","text":"<p>The main controller expansion board can input and output various data, various digital quantities, and module quantities. Through the 40Pin micro: bit golden finger slot, the function pins of Crowbits-Microbit are led out, which is convenient for docking with other functional modules and becomes a communication bridge between each module and the main control, so as to realize the data reception of each module and the main control board And send to realize data feedback and control of each module.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-microbit-compatible.html#features","title":"Features","text":"<ul> <li>Strong driving force</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-microbit-compatible.html#specification","title":"Specification","text":"<ul> <li>Output Voltage: 3.3V DC</li> <li>Charging method: DC 5V Micro USB</li> <li>Battery capacity: 650mAh</li> <li>Dimensions: 56(L)*56(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-microbit-compatible.html#usage","title":"Usage","text":"<p>The micro: bit motherboard needs to be inserted into the main control board before it can be used. The leads can be connected to other input and output magnetic suction modules. These modules can be controlled by programming the micro: bit.</p>"},{"location":"Products/Crowbits/crowbits-microphone.html","title":"Crowbits-Microphone","text":""},{"location":"Products/Crowbits/crowbits-microphone.html#description","title":"Description","text":"<p>The microphone is an analog input module that can be used as an ear for your circuit, it detects the sound from the environment.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-microphone.html#features","title":"Features","text":"<ul> <li>Low-power, omnidirectional microphone</li> <li>Analog input module</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-microphone.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-microphone.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-Buzzer.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When a sound is detected around, the buzzer connected behind will make a sound.</p>"},{"location":"Products/Crowbits/crowbits-moisture-sensor.html","title":"Crowbits-Moisture Sensor","text":""},{"location":"Products/Crowbits/crowbits-moisture-sensor.html#description","title":"Description","text":"<p>This is a capacitive soil moisture sensor, it can measure the soil moisture level of your plant by capacitive sensing. Compared with other types of moisture sensor, the capacitive soil moisture sensor is made of a corrosion resistant material, which will provide a long service life. This moisture sensor can be used to detect the moisture of soil to monitor if the plants need water.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-moisture-sensor.html#features","title":"Features","text":"<ul> <li>Corrosion resistant</li> <li>Soil moisture sensor based on soil capacitive measurement</li> <li>Easy to use</li> <li>High sensitivity</li> </ul>"},{"location":"Products/Crowbits/crowbits-moisture-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating voltage: 3.3V</li> <li>Size: 20 (W)*92.5(L)</li> </ul>"},{"location":"Products/Crowbits/crowbits-moisture-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1.You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2.Connect the module to the A3 interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3.Upload the following code to the Crowbits-UNO board.</p> <pre><code>void setup() {                \n // initialize the digital pin5 as an output.\n Serial.begin(9600); // open serial port, set the baud rate to 9600 bps\n}\n\nint val0=A3;\n\nint SensorValue0=0;\n\nvoid loop() {\n\n    SensorValue0 = analogRead(val0); //connect sensor to Analog 0\n\n  Serial.print(\"SensorValue0:\"); //print the value to serial\n  Serial.println(SensorValue0); //print the value to serial\n\n  delay(100);\n}\n</code></pre> <p>4.After the upload is successful, open the serial port monitor, the baud rate is set to 9600. Put the sensor in the soil, the serial port will output the corresponding voltage value.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-mosfet.html","title":"Crowbits-MOSFET","text":""},{"location":"Products/Crowbits/crowbits-mosfet.html#description","title":"Description","text":"<p>The MOSFET is a digital output module, it\u2019s a kind of switch that enables you to control large current with small current.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-mosfet.html#features","title":"Features","text":"<ul> <li>A small current to control large currents</li> </ul>"},{"location":"Products/Crowbits/crowbits-mosfet.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-mosfet.html#usage","title":"Usage","text":"<p>1.Control fan with relay</p> <p>1)You also need a power module, such as Crowbits-Power Supply; An input module, such as Crowbits-Switch; An extension module, such as Crowbits-Terminal.</p> <p>2)The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3)We need to connect the S_IN interface on the Crowbits-MOSFET board to a 3.3V power supply. So, we connect the VCC interface on Crowbits-terminal board to the S_IN Interface on Crowbits-MOSFET board with Dupont line.</p> <p>4)We need to connect the fan's negative pole on the GND interface on the Crowbits-MOSFET board, the positive pole of the fan on the D_OUT Interface on Crowbits-MOSFET board.</p> <p></p> <p>5)Then, turn on the power. When you press the self-locking switch, the small fan starts to turn. When you release the self-locking switch, the small fan stops to turn.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-mp3.html","title":"Crowbits-MP3","text":""},{"location":"Products/Crowbits/crowbits-mp3.html#description","title":"Description","text":"<p>MP3 is a tiny-size and compact audio module. This module also supports general file systems like FAT16 and FAT32.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-mp3.html#features","title":"Features","text":"<ul> <li>Easy to use</li> <li>MP3, WMV and WAV audio format supported</li> <li>FAT16, FAT32 files system supported</li> </ul>"},{"location":"Products/Crowbits/crowbits-mp3.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 56(L)*31(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-mp3.html#usage","title":"Usage","text":""},{"location":"Products/Crowbits/crowbits-mp3.html#1playing-music","title":"1.Playing music","text":"<p>1)You also need a power module, such as Crowbits-Power Supply; A SD card containing songs in mp3 format; A 2PIn interface speaker.</p> <p>2)Insert the SD card into the holder and connect the speaker to the \u201cSpeaker seat\".</p> <p>3)Turn the toggle switch on the Crowbits-MP3 board to the \"Audio\" position.</p> <p>4)The connection mode is shown in the figure.</p> <p></p> <p>5)Turn on the power.</p> <ul> <li> <p>You could press the \u201cPLAY\u201d button on the Crowbits-MP3 board, which can play and pause songs.</p> </li> <li> <p>You could press the \u201cUP\u201d button on the Crowbits-MP3 board, which can switch to the next song.</p> </li> <li> <p>You could press the \u201cDOWN\u201d button on the Crowbits-MP3 board, which can switch to the previous song.</p> </li> <li> <p>You could long-press the \"UP\" button on the Crowbits-MP3 board, which can increase the volume.</p> </li> <li> <p>You could long-press the \"DOWN\" button on the Crowbits-MP3 board, which can lower the volume.</p> </li> </ul>"},{"location":"Products/Crowbits/crowbits-nfc.html","title":"Crowbits-NFC","text":""},{"location":"Products/Crowbits/crowbits-nfc.html#description","title":"Description","text":"<p>The Crowbits-NFC module (Near Field Communications) uses a highly integrated transceiver module PN532 which handles contactless communication at 13.56MHz. It is designed to use IIC (default) communication protocols. You can read and write a 13.56MHz tag with this module or implement point to point data exchange with two NFC Shields.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-nfc.html#features","title":"Features","text":"<ul> <li>Uses as a PFID reader with Mifare one tags and cards(13.56 MHz).</li> </ul>"},{"location":"Products/Crowbits/crowbits-nfc.html#specification","title":"Specification","text":"<ul> <li>Interface Type: I2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-nfc.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the I2C interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Download the library \u201cCrowbits-NFC\u201d. Unzip it and copy the folder inside to the libraries file of the Arduino IDE, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Upload the following code to the Crowbits-UNO board.</p> <pre><code>#if 0\n#include &lt;SPI.h&gt;\n#include &lt;PN532_SPI.h&gt;\n#include &lt;PN532.h&gt;\n#include &lt;NfcAdapter.h&gt;\n\nPN532_SPI pn532spi(SPI, 10);\nNfcAdapter nfc = NfcAdapter(pn532spi);\n#else\n\n#include &lt;Wire.h&gt;\n#include &lt;PN532_I2C.h&gt;\n#include &lt;PN532.h&gt;\n#include &lt;NfcAdapter.h&gt;\n\nPN532_I2C pn532_i2c(Wire);\nNfcAdapter nfc = NfcAdapter(pn532_i2c);\n#endif\n\nvoid setup(void) {\n    Serial.begin(9600);\n    Serial.println(\"NDEF Reader\");\n    nfc.begin();\n}\n\nvoid loop(void) {\n    Serial.println(\"\\nScan a NFC tag\\n\");\n    if (nfc.tagPresent())\n    {\n        NfcTag tag = nfc.read();\n        tag.print();\n    }\n    delay(5000);\n}\n</code></pre> <p>5. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. Put the NFC card in the detection area, the serial port will print out the corresponding information.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-non-contact-liquid-level-sensor.html","title":"Crowbits-Non-Contact Liquid Level Sensor","text":""},{"location":"Products/Crowbits/crowbits-non-contact-liquid-level-sensor.html#description","title":"Description","text":"<p>Intelligent non-contact liquid level sensor (here in after referred to as the liquid level sensor) adopted the advanced signal processing technology and high-speed signal processing chip, broke through the vessel wall thickness, the influence of realized in an airtight container level of real non-contact detection. Liquid level sensor (probe) installed on the outer wall of the container to be tested on the lower part (level of high and low), non-metallic containers without the hole, easy to install, do not affect production. Can realize various toxic substances of high pressure airtight container, strong acid, strong alkali and all kinds of liquid level detection. The material of liquid level sensor for liquid medium and container no special requirements, can be widely used.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-non-contact-liquid-level-sensor.html#features","title":"Features","text":"<ul> <li>No direct contact with liquid</li> <li>Working Voltage: 3.3V</li> <li>Induction distance can reach more than 12 mm</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-non-contact-liquid-level-sensor.html#specification","title":"Specification","text":"<ul> <li>The thickness of the induction (sensitivity) 0 \uff5e 20 mm</li> <li>humidity 5% \uff5e 100%</li> <li>The material ABS.</li> <li>Waterproof properties IP67</li> <li>Sensor dimensions(mm):28.3(L)x28.3(W)x17.0(H)</li> <li>Cable length:58.5cm</li> </ul>"},{"location":"Products/Crowbits/crowbits-non-contact-liquid-level-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1.You need to prepare a Crowbits motherboard, such as Crowbits-UNO board. And an output module, such as Crowbits-LED.</p> <p>2.Connect the Crowbits-Non-Contact Liquid Level Sensor to the D2 interface of the Crowbits-UNO board, and Crowbits-LED to the D9 Interface.</p> <p>3.Upload the following code to the Crowbits-UNO board.</p> <pre><code>int liquid_level=2;\nint buzzer=9;\nint liquid_state=0;\n\nvoid setup()\n{\n   pinMode( liquid_level,INPUT);\n   pinMode(buzzer,OUTPUT);\n}\n\nvoid loop()\n{\n liquid_state=digitalRead(liquid_level);\n if(liquid_state==HIGH)\n {\n digitalWrite(buzzer,HIGH);\n }\n else\n {\n  digitalWrite(buzzer,LOW);\n }\n}\n</code></pre> <p>4. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. Then send a command to call.</p>"},{"location":"Products/Crowbits/crowbits-oled.html","title":"Crowbits-OLED","text":""},{"location":"Products/Crowbits/crowbits-oled.html#description","title":"Description","text":"<p>Crowbits- OLED is constructed from 128 x 64 dot matrix OLED module. The display offers high brightness, self-emission, high contrast ratio, slim/thin outline, wide viewing angle, wide temperature range and low power consumption.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-oled.html#features","title":"Features","text":"<ul> <li>Low power consumption</li> </ul>"},{"location":"Products/Crowbits/crowbits-oled.html#specification","title":"Specification","text":"<ul> <li>Display Color: Blue</li> <li>Resolution: 128x64</li> <li>Interface Type: I2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 56(L)*31(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-oled.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the I2C interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. The following sketch demonstrates a simple application of the module.</p> <p>4.Connect the module to the I2C interface on the Crowbits-UNO board, as shown in the figure:</p> <pre><code>#include \"U8glib.h\"\nU8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);  \n\nvoid drawURL(void)\n{\n   u8g.setFont(u8g_font_9x18);\n   u8g.drawStr(25,10,\"Elecrow\");\n   u8g.setFont(u8g_font_7x14);\n   u8g.drawStr(5,35,\"www.elecrow.com\");\n\n}\nvoid setup(void) {\n}\n\nvoid loop(void) {\n  // picture loop\n  u8g.firstPage();  \n  do {\n    drawURL();\n  u8g.setColorIndex(1);\n  } while( u8g.nextPage() );  \n  // rebuild the picture after some delay\n  delay(200);  \n}\n</code></pre> <p>5. After the code is uploaded successfully, you will see the following words displayed on the OLED screen.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-one-wire-waterproof-temperature-sensor.html","title":"Crowbits-One Wire Waterproof Temperature Sensor","text":""},{"location":"Products/Crowbits/crowbits-one-wire-waterproof-temperature-sensor.html#description","title":"Description","text":"<p>This is a waterproofed version of the DS18B20 Temperature sensor. Handy for when you need to measure something far away, or in wet conditions. While the sensor is good up to 125 degree, the cable is jacketed in PVC so we suggest keeping it under 100 degree. Because they are digital, you don't get any signal degradation even over long distances! The DS18B20 provides 9 to 12-bit (configurable) temperature readings over a 1-Wire interface, so that only one wire (and ground) needs to be connected from a central microprocessor. It Usable with 3.0-5.5V systems. Because each DS18B20 contains a unique silicon serial number, multiple DS18B20s can exist on the same 1-Wire bus. This allows for placing temperature sensors in many different places. Applications where this feature is useful include HVAC environmental controls, sensing temperatures inside buildings, equipment or machinery, and process monitoring and control. </p>"},{"location":"Products/Crowbits/crowbits-one-wire-waterproof-temperature-sensor.html#features","title":"Features","text":"<ul> <li>9 to 12bit selectable resolution</li> <li>one digital pin for communication</li> <li>Multiple sensors can share one pin</li> <li>Query time is less than 750ms</li> </ul>"},{"location":"Products/Crowbits/crowbits-one-wire-waterproof-temperature-sensor.html#specification","title":"Specification","text":"<ul> <li>3.0V to 5.5V input</li> <li>Temperature range: -55 to +125 degree</li> <li>0.5degree Accuracy from -10 to +85 degree</li> <li>Stainless steel tube 6mm diameter by 30mm long</li> <li>Cable length: 90cm</li> </ul>"},{"location":"Products/Crowbits/crowbits-one-wire-waterproof-temperature-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1.You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2.Connect the module to the D2 interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3.Download the library \u201cDS18B20\u201d. Unzip and put it in the libraries file of the Arduino IDE, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4.Upload the following code to the Crowbits-UNO board.</p> <pre><code>#include &lt;OneWire.h&gt;\nOneWire  ds(2);  // on pin 10\n\nvoid setup(void) {\n  Serial.begin(9600);\n}\n\nvoid loop(void) {\n  byte i;\n  byte present = 0;\n  byte type_s;\n  byte data[12];\n  byte addr[8];\n  float celsius, fahrenheit;\n\n  if ( !ds.search(addr)) {\n    Serial.println(\"No more addresses.\");\n    Serial.println();\n    ds.reset_search();\n    delay(250);\n    return;\n  }\n\n  Serial.print(\"ROM =\");\n  for( i = 0; i &lt; 8; i++) {\n    Serial.write(' ');\n    Serial.print(addr[i], HEX);\n  }\n\n  if (OneWire::crc8(addr, 7)\u00a0!= addr[7]) {\n      Serial.println(\"CRC is not valid!\");\n      return;\n  }\n  Serial.println();\n\n  // the first ROM byte indicates which chip\n  switch (addr[0]) {\n    case 0x10:\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\n      type_s = 1;\n      break;\n    case 0x28:\n      Serial.println(\"  Chip = DS18B20\");\n      type_s = 0;\n      break;\n    case 0x22:\n      Serial.println(\"  Chip = DS1822\");\n      type_s = 0;\n      break;\n    default:\n      Serial.println(\"Device is not a DS18x20 family device.\");\n      return;\n  } \n\n  ds.reset();\n  ds.select(addr);\n  ds.write(0x44,1);         // start conversion, with parasite power on at the end\n\n  delay(1000);     // maybe 750ms is enough, maybe not\n  // we might do a ds.depower() here, but the reset will take care of it.\n\n  present = ds.reset();\n  ds.select(addr);    \n  ds.write(0xBE);         // Read Scratchpad\n\n  Serial.print(\"  Data = \");\n  Serial.print(present,HEX);\n  Serial.print(\" \");\n  for ( i = 0; i &lt; 9; i++) {           // we need 9 bytes\n    data[i] = ds.read();\n    Serial.print(data[i], HEX);\n    Serial.print(\" \");\n  }\n  Serial.print(\" CRC=\");\n  Serial.print(OneWire::crc8(data, 8), HEX);\n  Serial.println();\n\n  // convert the data to actual temperature\n\n  unsigned int raw = (data[1] &lt;&lt; 8) | data[0];\n  if (type_s) {\n    raw = raw &lt;&lt; 3; // 9 bit resolution default\n    if (data[7] == 0x10) {\n      // count remain gives full 12 bit resolution\n      raw = (raw &amp; 0xFFF0) + 12 - data[6];\n    }\n  } else {\n    byte cfg = (data[4] &amp; 0x60);\n    if (cfg == 0x00) raw = raw &lt;&lt; 3;  // 9 bit resolution, 93.75 ms\n    else if (cfg == 0x20) raw = raw &lt;&lt; 2; // 10 bit res, 187.5 ms\n    else if (cfg == 0x40) raw = raw &lt;&lt; 1; // 11 bit res, 375 ms\n    // default is 12 bit resolution, 750 ms conversion time\n  }\n  celsius = (float)raw / 16.0;\n  fahrenheit = celsius * 1.8 + 32.0;\n  Serial.print(\"  Temperature = \");\n  Serial.print(celsius);\n  Serial.print(\" Celsius, \");\n  Serial.print(fahrenheit);\n  Serial.println(\" Fahrenheit\");\n}\n</code></pre> <p>5.After the upload is successful, open the serial port monitor, the baud rate is set to 9600. You can see the temperature value printed out.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-photo-electric-counter.html","title":"Crowbits-Photo Electric Counter","text":""},{"location":"Products/Crowbits/crowbits-photo-electric-counter.html#description","title":"Description","text":"<p>The Photo Electric Counter is a digital input module, it converts the optical signal into the electric signal. Due to the U-shaped design of the photoelectric sensor, it can be used as a mini door with a counting function for your circuit.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-photo-electric-counter.html#features","title":"Features","text":"<ul> <li>Digital input module</li> <li>Easy to use</li> <li>High sensitivity</li> </ul>"},{"location":"Products/Crowbits/crowbits-photo-electric-counter.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-photo-electric-counter.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When an object is detected in the U-shaped slot, the LED behind it will light up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-pir-sensor.html","title":"Crowbits-PIR Sensor","text":""},{"location":"Products/Crowbits/crowbits-pir-sensor.html#description","title":"Description","text":"<p>The PIR sensor is a digital input module, it's an electronic sensor that measures infrared light radiating from objects in its field of view. It's often used in PIR-based motion detectors.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-pir-sensor.html#features","title":"Features","text":"<ul> <li>Digital input module</li> </ul>"},{"location":"Products/Crowbits/crowbits-pir-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-pir-sensor.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When the sensor detects someone moving, the LED behind it lights up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-potentiometer.html","title":"Crowbits-Potentiometer","text":""},{"location":"Products/Crowbits/crowbits-potentiometer.html#description","title":"Description","text":"<p>The potentiometer is an analog input module, it acts like a variable resistor, it controls your circuit through adjusting the resistance in the whole circuit.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-potentiometer.html#features","title":"Features","text":"<ul> <li>Analog input module</li> </ul>"},{"location":"Products/Crowbits/crowbits-potentiometer.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>The range of resistance of the potentiometer: 0~5K\u03a9</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-potentiometer.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. Rotate the rheostat, you can see that the LED will have a progressive effect of darkening or brightening.</p> <p></p> <p></p>"},{"location":"Products/Crowbits/crowbits-power-supply.html","title":"Crowbits-Power Supply","text":""},{"location":"Products/Crowbits/crowbits-power-supply.html#description","title":"Description","text":"<p>The power supply is the heart of the Crowbits, The power supply is the power source of the entire Crowbits eco-system and modules, allowing to power them both by battery and power cord connection. On the technical side, the battery is a Lithium battery, the same battery that most of us have inside our phone these days. The voltage of the battery is 3.7V, 3.7 is a bit too much for our use case and the CrowBits, in order to protect them we step down using a module called DC-DC regulator from 3.7V to 3.3V - this allows us to power on the Crowbits safety. The power supply module is rechargeable, it can be charged by a 5V/1A power adapter through a micro USB interface.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-power-supply.html#features","title":"Features","text":"<ul> <li>Single output port.</li> <li>Output indicator.</li> </ul>"},{"location":"Products/Crowbits/crowbits-power-supply.html#specification","title":"Specification","text":"<ul> <li>Output Voltage: 3.3V DC</li> <li>Charging method: Micro USB 5V DC</li> <li>Dimensions: 56(L)*31(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-power-supply.html#usage","title":"Usage","text":"<p>1. You also need a power module, such as Crowbits-Power Supply; An input module, such as Crowbits-Switch; An extension module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When you press the self-locking switch, the LED light.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-power-supplys.html","title":"Crowbits-Power Supply(S)","text":""},{"location":"Products/Crowbits/crowbits-power-supplys.html#description","title":"Description","text":"<p>The power supply is the heart of the Crowbits, The power supply is the power source of the entire Crowbits eco-system and modules, allowing to power them both by battery and power cord connection. On the technical side, the battery is a Lithium battery, the same battery that most of us have inside our phone these days. The voltage of the battery is 3.7V, 3.7 is a bit too much for our use case and the CrowBits, in order to protect them we step down using a module called DC-DC regulator from 3.7V to 3.3V - this allows us to power on the Crowbits safety. The power supply module is rechargeable, it can be charged by a 5V/1A power adapter through a micro USB interface.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-power-supplys.html#features","title":"Features","text":"<ul> <li>Single output port.</li> <li>Output indicator.</li> </ul>"},{"location":"Products/Crowbits/crowbits-power-supplys.html#specification","title":"Specification","text":"<ul> <li>Output Voltage: 3.3V DC</li> <li>Charging method: Micro USB 5V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-power-supplys.html#usage","title":"Usage","text":"<p>1. You also need a power module, such as Crowbits-Power Supply; An input module, such as Crowbits-Switch; An extension module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When you press the self-locking switch, the LED light.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-pressure-sensor.html","title":"Crowbits-Pressure Sensor","text":""},{"location":"Products/Crowbits/crowbits-pressure-sensor.html#description","title":"Description","text":"<p>The pressure sensor is an analog input module, it is a touch-activated sensor. The pressure sensor controls your circuit by how much pressure you put on it.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-pressure-sensor.html#features","title":"Features","text":"<ul> <li>Analog input module</li> </ul>"},{"location":"Products/Crowbits/crowbits-pressure-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Range of forces: 0.2N to 20N (100g~10KG)</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-pressure-sensor.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Turn on the power. Press the sensor slowly and you will see that the LED behind it will gradually light up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-protoboard.html","title":"Crowbits-Protoboard","text":""},{"location":"Products/Crowbits/crowbits-protoboard.html#description","title":"Description","text":"<p>Protoboard is a module with a breadboard, you can build all kinds of circuits you want, and lead out 16 interfaces.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-protoboard.html#features","title":"Features","text":"<ul> <li>Easy to use</li> <li>Breadboard style</li> </ul>"},{"location":"Products/Crowbits/crowbits-protoboard.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 56(L)*56(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-protoboard.html#usage","title":"Usage","text":"<p>1. You can connect any position on the breadboard to the female connector with a DuPont cable, and you can output the signal to other modules.</p> <p>2. For example, I want to connect a position on the breadboard to the fourth output port, which can be connected as follows.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-pulse-sensor.html","title":"Crowbits-Pulse Sensor","text":""},{"location":"Products/Crowbits/crowbits-pulse-sensor.html#description","title":"Description","text":"<p>The Pulse Sensor is used to measure the heart rate of the human. Heart rate data can be really useful whether you\u2019re designing an exercise routine, studying your activity or anxiety levels or just want your shirt to blink with your heart beat. The problem is that heart rate can be difficult to measure. Luckily, the Pulse Sensor Amped can solve that problem! The Pulse Sensor Amped is a plug-and-play heart-rate sensor for Arduino.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-pulse-sensor.html#features","title":"Features","text":"<ul> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-pulse-sensor.html#specification","title":"Specification","text":"<ul> <li>Interface Type: Analog input</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-pulse-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the A2 interface o the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Upload the following code to the Crowbits-UNO board.</p> <pre><code>/*\n&gt;&gt; Pulse Sensor Amped 1.2 &lt;&lt;\nThis code is for Pulse Sensor Amped by Joel Murphy and Yury Gitman\n    www.pulsesensor.com \n    &gt;&gt;&gt; Pulse Sensor purple wire goes to Analog Pin 0 &lt;&lt;&lt;\nPulse Sensor sample aquisition and processing happens in the background via Timer 2 interrupt. 2mS sample rate.\nPWM on pins 3 and 11 will not work when using this code, because we are using Timer 2!\nThe following variables are automatically updated:\nSignal\u00a0:    int that holds the analog signal data straight from the sensor. updated every 2mS.\nIBI  :      int that holds the time interval between beats. 2mS resolution.\nBPM  :      int that holds the heart rate value, derived every beat, from averaging previous 10 IBI values.\nQS  :       boolean that is made true whenever Pulse is found and BPM is updated. User must reset.\nPulse\u00a0:     boolean that is true when a heartbeat is sensed then false in time with pin13 LED going out.\n\nThis code is designed with output serial data to Processing sketch \"PulseSensorAmped_Processing-xx\"\nThe Processing sketch is a simple data visualizer. \nAll the work to find the heartbeat and determine the heartrate happens in the code below.\nPin 13 LED will blink with heartbeat.\nIf you want to use pin 13 for something else, adjust the interrupt handler\nIt will also fade an LED on pin fadePin with every beat. Put an LED and series resistor from fadePin to GND.\nCheck here for detailed code walkthrough:\nhttp://pulsesensor.myshopify.com/pages/pulse-sensor-amped-arduino-v1dot1\n\nCode Version 1.2 by Joel Murphy &amp; Yury Gitman  Spring 2013\nThis update fixes the firstBeat and secondBeat flag usage so that realistic BPM is reported.\n\n*/\n\n\n//  VARIABLES\nint pulsePin = 2;                 // Pulse Sensor purple wire connected to analog pin 0\nint blinkPin = 13;                // pin to blink led at each beat\nint fadePin = 5;                  // pin to do fancy classy fading blink at each beat\nint fadeRate = 0;                 // used to fade LED on with PWM on fadePin\n\n\n// these variables are volatile because they are used during the interrupt service routine!\nvolatile int BPM;                   // used to hold the pulse rate\nvolatile int Signal;                // holds the incoming raw data\nvolatile int IBI = 600;             // holds the time between beats, must be seeded! \nvolatile boolean Pulse = false;     // true when pulse wave is high, false when it's low\nvolatile boolean QS = false;        // becomes true when Arduoino finds a beat.\n\n\nvoid setup(){\n  pinMode(blinkPin,OUTPUT);         // pin that will blink to your heartbeat!\n  pinMode(fadePin,OUTPUT);          // pin that will fade to your heartbeat!\n  Serial.begin(115200);             // we agree to talk fast!\n  interruptSetup();                 // sets up to read Pulse Sensor signal every 2mS \n   // UN-COMMENT THE NEXT LINE IF YOU ARE POWERING The Pulse Sensor AT LOW VOLTAGE, \n   // AND APPLY THAT VOLTAGE TO THE A-REF PIN\n   //analogReference(EXTERNAL);   \n}\n\n\n\nvoid loop(){\n  sendDataToProcessing('S', Signal);     // send Processing the raw Pulse Sensor data\n  if (QS == true){                       // Quantified Self flag is true when arduino finds a heartbeat\n        fadeRate = 255;                  // Set 'fadeRate' Variable to 255 to fade LED with pulse\n        sendDataToProcessing('B',BPM);   // send heart rate with a 'B' prefix\n        sendDataToProcessing('Q',IBI);   // send time between beats with a 'Q' prefix\n        QS = false;                      // reset the Quantified Self flag for next time    \n     }\n\n  ledFadeToBeat();\n\n  delay(20);                             //  take a break\n}\n\n\nvoid ledFadeToBeat(){\n    fadeRate -= 15;                         //  set LED fade value\n    fadeRate = constrain(fadeRate,0,255);   //  keep LED fade value from going into negative numbers!\n    analogWrite(fadePin,fadeRate);          //  fade LED\n  }\n\n\nvoid sendDataToProcessing(char symbol, int data ){\n    Serial.print(symbol);                // symbol prefix tells Processing what type of data is coming\n    Serial.println(data);                // the data to send culminating in a carriage return\n  }\n</code></pre> <p>4.Unzip the compressed processing file and run the processing software inside.</p> <p>5.Open the sample code PulseSensorAmpd_Processing_1dot1 in the folder, and then run the program.</p> <pre><code>//**************\n//IR receive demo v1.0\n//Connect the IR sent pins to D2 for this demo\n//******************************\n#include &lt;IRSendRev.h&gt;\n//#include &lt;IRSendRevInt.h&gt;\n\nvoid setup()\n{\n    Serial.begin(9600);\n    IR.Init(2);\n    Serial.println(\"init over\");\n}\n\nunsigned char dta[20];\n\nvoid loop()\n{\n    if(IR.IsDta())\n    {\n       // IR.Recv(dta);\n        int length= IR.Recv(dta);\n        for (int i =0;i&lt;length;i++)\n        {\n          Serial.print(dta[i]);\n          Serial.print(\"\\t\");\n        }\n        Serial.println();\n// Very Important:\n// the received data is comprised of the trsmission parameters , please refer to \n// the sendTest.ino in the library\u00a0;\n    }\n\n\n}\n</code></pre> <p>6. After downloading the two programs, open the serial port of the motherboard connected to the Crowbits of the Crowbits-IR Receiver module, the baud rate is set to 9600, and then you will receive the information sent by the transmitter module, as shown in the figure:</p> <p></p>"},{"location":"Products/Crowbits/crowbits-reaction.html","title":"Crowbits-Reaction","text":""},{"location":"Products/Crowbits/crowbits-reaction.html#description","title":"Description","text":"<p>The reaction sensor is a digital input module.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-reaction.html#features","title":"Features","text":"<ul> <li>Low power consumption</li> <li>Digital input module</li> </ul>"},{"location":"Products/Crowbits/crowbits-reaction.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-reaction.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When the sensor detects a hand is approaching, the LED behind it will light up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-recorder.html","title":"Crowbits-Recorder","text":""},{"location":"Products/Crowbits/crowbits-recorder.html#description","title":"Description","text":"<p>The recording module can record your voice, and is easy to store and read.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-recorder.html#features","title":"Features","text":"<ul> <li>Low power consumption</li> <li>User-friendly operation</li> </ul>"},{"location":"Products/Crowbits/crowbits-recorder.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-recorder.html#usage","title":"Usage","text":"<p>1. You also need a power module, such as Crowbits-Power Supply; A 2 Pin interface speaker.</p> <p>2. Connect the speaker to the seat, the connection mode is shown in the figure.</p> <p></p> <p>3. Turn on the power.</p> <ul> <li> <p>When you record, you need to press the \u201cRecord\u201d button, the LED on the board will light up until you finish recording.</p> </li> <li> <p>You could press the \u201cPlay2\u201d button to play your recording.</p> </li> <li> <p>You could press the \u201cPlay1\u201d button to pause your recording</p> </li> </ul>"},{"location":"Products/Crowbits/crowbits-relay.html","title":"Crowbits-Relay","text":""},{"location":"Products/Crowbits/crowbits-relay.html#description","title":"Description","text":"<p>The relay is a digital output module, it's an electronic control device that has a control system (also known as an input circuit) and a controlled system (also known as an output circuit), which is usually used in automatic control circuits.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-relay.html#features","title":"Features","text":"<ul> <li>A small current to control large currents</li> </ul>"},{"location":"Products/Crowbits/crowbits-relay.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-relay.html#usage","title":"Usage","text":""},{"location":"Products/Crowbits/crowbits-relay.html#1control-fan-with-relay","title":"1.Control fan with relay","text":"<p>1)You also need a power module, such as Crowbits-Power Supply; An input module, such as Crowbits-Switch; An extension module, such as Crowbits-Terminal.</p> <p>2)The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p>3)We need to connect the COM interface on the Crowbits-relay board to a 3.3V power supply. So, we connect the VCC interface on Crowbits-terminal board to the COM port on Crowbits-Relay board with Dupont line.</p> <p>4)We need to connect the fan's negative pole on the GND interface on the Crowbits-terminal board, the positive pole of the fan on the NC Interface or NO Interface on Crowbits-Relay board. For example, I'm connecting to the NO interface.</p>"},{"location":"Products/Crowbits/crowbits-rgb-led.html","title":"Crowbits-RGB LED","text":""},{"location":"Products/Crowbits/crowbits-rgb-led.html#description","title":"Description","text":"<p>It is composed of two RGB lamp beads and can display various colors. Respond to changes in input signals in monochrome, full-color, and gradual manner. Users can control all the LED with only one microcontroller pin! Besides, the LED bar can be also chainable, that is, you can connect more than one LED bar together to make your project more dreamful. In this module , you can control every LED whit different color at the same time.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-rgb-led.html#features","title":"Features","text":"<ul> <li>Can achieve 256-level brightness display</li> </ul>"},{"location":"Products/Crowbits/crowbits-rgb-led.html#specification","title":"Specification","text":"<ul> <li>Interface Type\uff1aGPIO</li> <li>Operating Voltage: 3.3V DC</li> <li>imensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-rgb-led.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Display test information</li> </ul>"},{"location":"Products/Crowbits/crowbits-rgb-led.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the D4 interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Download the library Crowbits-RGB LED library. Unzip and put it in the libraries file, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Open the code directly by the path: File-&gt; Example-&gt; Adafruit_NeoPixel-&gt; strandtest.Upload the following code to the Crowbits-UNO board.</p> <pre><code>#include &lt;Adafruit_NeoPixel.h&gt;\n\n#define PIN 4\n\n// Parameter 1 = number of pixels in strip\n// Parameter 2 = pin number (most are valid)\n// Parameter 3 = pixel type flags, add together as needed:\n//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)\n//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)\n//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)\n//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)\nAdafruit_NeoPixel strip = Adafruit_NeoPixel(60, PIN, NEO_GRB + NEO_KHZ800);\n\nvoid setup() {\n  strip.begin();\n  strip.show(); // Initialize all pixels to 'off'\n}\n\nvoid loop() {\n  // Some example procedures showing how to display to the pixels:\n  colorWipe(strip.Color(255, 0, 0), 50); // Red\n  colorWipe(strip.Color(0, 255, 0), 50); // Green\n  colorWipe(strip.Color(0, 0, 255), 50); // Blue\n  // Send a theater pixel chase in...\n  theaterChase(strip.Color(127, 127, 127), 50); // White\n  theaterChase(strip.Color(127,   0,   0), 50); // Red\n  theaterChase(strip.Color(  0,   0, 127), 50); // Blue\n\n  rainbow(20);\n  rainbowCycle(20);\n  theaterChaseRainbow(50);\n}\n\n// Fill the dots one after the other with a color\nvoid colorWipe(uint32_t c, uint8_t wait) {\n  for(uint16_t i=0; i&lt;strip.numPixels(); i++) {\n      strip.setPixelColor(i, c);\n      strip.show();\n      delay(wait);\n  }\n}\n\nvoid rainbow(uint8_t wait) {\n  uint16_t i, j;\n\n  for(j=0; j&lt;256; j++) {\n    for(i=0; i&lt;strip.numPixels(); i++) {\n      strip.setPixelColor(i, Wheel((i+j) &amp; 255));\n    }\n    strip.show();\n    delay(wait);\n  }\n}\n\n// Slightly different, this makes the rainbow equally distributed throughout\nvoid rainbowCycle(uint8_t wait) {\n  uint16_t i, j;\n\n  for(j=0; j&lt;256*5; j++) { // 5 cycles of all colors on wheel\n    for(i=0; i&lt; strip.numPixels(); i++) {\n      strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) &amp; 255));\n    }\n    strip.show();\n    delay(wait);\n  }\n}\n\n//Theatre-style crawling lights.\nvoid theaterChase(uint32_t c, uint8_t wait) {\n  for (int j=0; j&lt;10; j++) {  //do 10 cycles of chasing\n    for (int q=0; q &lt; 3; q++) {\n      for (int i=0; i &lt; strip.numPixels(); i=i+3) {\n        strip.setPixelColor(i+q, c);    //turn every third pixel on\n      }\n      strip.show();\n\n      delay(wait);\n\n      for (int i=0; i &lt; strip.numPixels(); i=i+3) {\n        strip.setPixelColor(i+q, 0);        //turn every third pixel off\n      }\n    }\n  }\n}\n\n//Theatre-style crawling lights with rainbow effect\nvoid theaterChaseRainbow(uint8_t wait) {\n  for (int j=0; j &lt; 256; j++) {     // cycle all 256 colors in the wheel\n    for (int q=0; q &lt; 3; q++) {\n        for (int i=0; i &lt; strip.numPixels(); i=i+3) {\n          strip.setPixelColor(i+q, Wheel( (i+j)\u00a0% 255));    //turn every third pixel on\n        }\n        strip.show();\n\n        delay(wait);\n\n        for (int i=0; i &lt; strip.numPixels(); i=i+3) {\n          strip.setPixelColor(i+q, 0);        //turn every third pixel off\n        }\n    }\n  }\n}\n\n// Input a value 0 to 255 to get a color value.\n// The colours are a transition r - g - b - back to r.\nuint32_t Wheel(byte WheelPos) {\n  if(WheelPos &lt; 85) {\n   return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);\n  } else if(WheelPos &lt; 170) {\n   WheelPos -= 85;\n   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);\n  } else {\n   WheelPos -= 170;\n   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);\n  }\n}\n</code></pre> <p>5. After successfully uploading the code, you will see the color of the light change.</p> <p></p> <p></p>"},{"location":"Products/Crowbits/crowbits-rgb-matrix.html","title":"Crowbits-RGB Matrix","text":""},{"location":"Products/Crowbits/crowbits-rgb-matrix.html#description","title":"Description","text":"<p>The RGB Matrix module is an 8 * 8 matrix display module composed of 64 rgb led lamp beads. It can respond to changes in input signals in monochrome, full-color, gradual, and horse racing modes, and can also display simple graphics.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-rgb-matrix.html#features","title":"Features","text":"<ul> <li>Low power consumption</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-rgb-matrix.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 56(L)*56(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-rgb-matrix.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the D11 interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Download the library FastLED-3.2.10. Unzip and put it in the libraries file, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Upload the following code to the Crowbits-UNO board.</p> <pre><code>#include &lt;FastLED.h&gt;\n#define NUM_LEDS 64\n\nCRGBArray&lt;NUM_LEDS&gt; leds;\n\nvoid setup() { FastLED.addLeds&lt;WS2812B,11,GRB&gt;(leds, NUM_LEDS); }\n\nvoid loop(){ \n  static uint8_t hue;\n  for(int i = 0; i &lt; NUM_LEDS/2; i++) {   \n    // fade everything out\n    leds.fadeToBlackBy(40);\n\n    // let's set an led value\n    leds[i] = CHSV(hue++,255,255);\n\n    // now, let's first 20 leds to the top 20 leds, \n    leds(NUM_LEDS/2,NUM_LEDS-1) = leds(NUM_LEDS/2 - 1 ,0);\n    FastLED.delay(33);\n  }\n}\n</code></pre> <p>5. After the upload is successful, you can see the phenomenon that the RGB lights alternate from red, green and blue.</p> <p></p> <p></p>"},{"location":"Products/Crowbits/crowbits-rtc.html","title":"Crowbits-RTC","text":""},{"location":"Products/Crowbits/crowbits-rtc.html#description","title":"Description","text":"<p>If you want to make your own electronic watch, an RTC module is needed to generate you the right timer, with low power consumption. Crowbits-RTC module is based on the clock chip DS1307 which communicate with microcontrollers with I2C protocol. The clock/calendar provides seconds, minutes, hours, day, date, month, and year information. The end of the month date is automatically adjusted for months with fewer than 31 days, including corrections for leap year.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-rtc.html#features","title":"Features","text":"<ul> <li>Low power consumption</li> </ul>"},{"location":"Products/Crowbits/crowbits-rtc.html#specification","title":"Specification","text":"<ul> <li>Interface Type: I2C</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 56(L)*56(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-rtc.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the I2C interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Download the library \u201cRTC\u201d. Unzip and put it in the libraries file of the Arduino IDE, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Upload the following code to the Crowbits-UNO board.</p> <pre><code>#include &lt;Wire.h&gt;\n#include \"RTClib.h\"\nRTC_DS1307 RTC;\n\nvoid setup () {\n    Serial.begin(9600);\n    Wire.begin();\n    RTC.begin();\n  if (! RTC.isrunning()) {\n    Serial.println(\"RTC is NOT running!\");\n    // following line sets the RTC to the date &amp; time this sketch was compiled\n    RTC.adjust(DateTime(__DATE__, __TIME__));\n  }\n}\nvoid loop () {\n    DateTime now = RTC.now(); \n    Serial.print(now.year(), DEC);\n    Serial.print('/');\n    Serial.print(now.month(), DEC);\n    Serial.print('/');\n    Serial.print(now.day(), DEC);\n    Serial.print(' ');\n    Serial.print(now.hour(), DEC);\n    Serial.print(':');\n    Serial.print(now.minute(), DEC);\n    Serial.print(':');\n    Serial.print(now.second(), DEC);\n    Serial.println(); \n    delay(1000);\n}\n</code></pre> <p>5. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. You can see the time when the serial port is printed out.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-servo-control.html","title":"Crowbits-Servo Control","text":""},{"location":"Products/Crowbits/crowbits-servo-control.html#description","title":"Description","text":"<p>The servo control is a digital input module that used to control the servo. The servo is a type of motor that can rotate at a certain angle, the rotation direction and angle can be controlled by the servo control.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-servo-control.html#features","title":"Features","text":"<ul> <li>Digital input module</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-servo-control.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Angle range: -90 degrees to 90 degrees</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-servo-control.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and a servo.</p> <p>2. The connection mode is shown in the figure.</p> <p>3. Turn on the power. You could press \"Mode\" key to select the working mode.</p> <ul> <li>Manual: This is a manual mode, you could turn the rheostat to control the rotation of the servo.</li> <li>Origin: This is back to the origin mode. When you switch this mode, the servo will return to the origin.</li> <li>Auto: This is an automatic mode, which automatically controls the rotation of the servo.</li> </ul>"},{"location":"Products/Crowbits/crowbits-switch.html","title":"Crowbits-Switch","text":""},{"location":"Products/Crowbits/crowbits-switch.html#description","title":"Description","text":"<p>The switch is a digital input module, it comes with its own mechanical locking function. It is useful in controlling power connections most of the time.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-switch.html#features","title":"Features","text":"<ul> <li>Own mechanical locking function</li> <li>Digital input module</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-switch.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-switch.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power, press the button of the self-locking switch, the LED behind it will light up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-terminal.html","title":"Crowbits-Terminal","text":""},{"location":"Products/Crowbits/crowbits-terminal.html#description","title":"Description","text":"<p>The terminal is a transfer module, it allows you to connect output modules with Crowbits by jumper wire. Compared with traditional screw terminals, our screw terminal module doesn\u2019t require a screwdriver or other tools to operate, the jumper wire can be directly inserted into the terminal by hand.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-terminal.html#features","title":"Features","text":"<ul> <li>3.3V/5V Compatible</li> <li>High current/voltage adaptable</li> </ul>"},{"location":"Products/Crowbits/crowbits-terminal.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-terminal.html#usage","title":"Usage","text":"<p>The Crowbits-Terminal has four ports including GND, VCC and two other ports. It usually be used to interface Crowtail wires(signals) with other external non-Crowtail modules</p> <p></p>"},{"location":"Products/Crowbits/crowbits-thumb-joystick.html","title":"Crowbits-Thumb Joystick","text":""},{"location":"Products/Crowbits/crowbits-thumb-joystick.html#description","title":"Description","text":"<p>It is composed of two sliding rheostats of X-axis and Y-axis, which can control the operated object or object to move left, right, up and down. There is a sliding resistor on the left and bottom of the rocker. When there is no sliding, the rocker is at the middle 0 point. When the rocker is moved up and down, the sliding resistance in the left direction starts to move, and the resistance value changes When the joystick is moved to the left and right, the resistance value of the lower sliding resistance changes. The main control device will read these two values to judge the change of the joystick, and you can determine in which direction the joystick moves.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-thumb-joystick.html#features","title":"Features","text":"<ul> <li>Analog output (Maximal value will be got when the button is pushed)</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-thumb-joystick.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 56(L)*31(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-thumb-joystick.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the A2 and A3 interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Upload the following code to the Crowbits-UNO board</p> <pre><code>int joystick_x = 0;\nint joystick_y = 0;\nint key_value = 0;\n\nvoid setup()\n{\n  Serial.begin(9600);\n}\n\n\nvoid loop()\n{\n  joystick_scan();\n  key_scan();\n  delay(200);\n}\n\nvoid joystick_scan()\n{\n  joystick_x = analogRead(A3);\n  joystick_y = analogRead(A2);\n  Serial.println(joystick_x);\n  Serial.println(joystick_y);\n  if ((joystick_x &lt; 535) &amp;&amp; (joystick_y &gt; 760))\n  {\n    Serial.println(\"UP\");\n  }\n  if ((joystick_x &lt; 535) &amp;&amp; (joystick_y &lt; 260))\n  {\n    Serial.println(\"DOWN\");\n  }\n  if ((joystick_x &gt; 760) &amp;&amp; (joystick_y &lt; 535))\n  {\n    Serial.println(\"LEFT\");\n  }\n  if ((joystick_x &lt; 280) &amp;&amp; (joystick_y &lt; 535))\n  {\n    Serial.println(\"RIGHT\");\n  }\n}\n\nvoid key_scan()\n{\n  key_value = analogRead(A0);\n  //Serial.println(key_value);\n  if ((key_value &lt; 890) &amp;&amp; (key_value &gt; 850))\n  {\n    Serial.println(\"K1 Button press\");\n  }\n  if ((key_value &lt; 365) &amp;&amp; (key_value &gt; 325))\n  {\n    Serial.println(\"K2 Button press\");\n  }\n  if ((key_value &lt; 60) &amp;&amp; (key_value &gt; 20))\n  {\n    Serial.println(\"K3 Button press\");\n  }\n  if ((key_value &lt; 540) &amp;&amp; (key_value &gt; 500))\n  {\n    Serial.println(\"K4 Button press\");\n  }\n}\n</code></pre> <p>4. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. By shaking the remote sensing, you can see the direction and position information of the serial port printing.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-tilt-switch.html","title":"Crowbits-Tilt Switch","text":""},{"location":"Products/Crowbits/crowbits-tilt-switch.html#description","title":"Description","text":"<p>The tilt switch is a digital input module, it turns on and off depending on the tilt direction, it can be used to detect the tilt orientation.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-tilt-switch.html#features","title":"Features","text":"<ul> <li>Digital input module</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-tilt-switch.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-tilt-switch.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When the tilt switch is tilted, the LED behind it will light up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-touch-sensor.html","title":"Crowbits-Touch Sensor","text":""},{"location":"Products/Crowbits/crowbits-touch-sensor.html#description","title":"Description","text":"<p>The touch sensor is a digital input module, it\u2019s a capacitive touch sensor. The touch sensor only has to be touched by an object to operate, it can be used as a touch switch.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-touch-sensor.html#features","title":"Features","text":"<ul> <li>Low power consumption</li> <li>Digital input module</li> </ul>"},{"location":"Products/Crowbits/crowbits-touch-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-touch-sensor.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p>3. Then, turn on the power. When the sensor detects a hand touch, the LED behind it will light up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-tpl5111-timer.html","title":"Crowbits-TPL5111 Timer","text":""},{"location":"Products/Crowbits/crowbits-tpl5111-timer.html#description","title":"Description","text":"<p>TPL5111 Timer is a stand-alone breakout that will turn any electronics into low-power electronics. It can be used to activate or deactivate your electronic device via internal time (The timing time can be up to 1 hour).</p> <p></p>"},{"location":"Products/Crowbits/crowbits-tpl5111-timer.html#features","title":"Features","text":"<ul> <li>6 kinds of timing time</li> <li>Timer accuracy: 1% (typical)</li> <li>Timing mode: manual</li> <li>Digital input module</li> </ul>"},{"location":"Products/Crowbits/crowbits-tpl5111-timer.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-tpl5111-timer.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Turn on the power. Toggle a time on the DIP switch (for example, I set it to 10s), press the \"Start\" button, the LED light behind it will turn on after 10s.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-trigger-delay.html","title":"Crowbits-Trigger Delay","text":""},{"location":"Products/Crowbits/crowbits-trigger-delay.html#description","title":"Description","text":"<p>The trigger delay can keep the signal outputs by input module for a certain period of time. The trigger delay is based on an RC circuit, an RC circuit (resistor-capacitor circuit) is an electric circuit composed of resistors and capacitor, which is a way to create a time delay in your circuit. The RC delay circuit works on the principle of the RC charging and discharging. We know that the capacitor is able to store electrical energy they act like small batteries and can store or release the energy as required. When power for the delay module, the capacitor will be charged, and when the voltage of the capacitor reaches a certain value, the capacitor will discharge. The charging and discharging of the energy of a capacitor takes a certain time that we called time delay.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-trigger-delay.html#features","title":"Features","text":"<ul> <li>Single input port.</li> <li>Single output port.</li> <li>Output indicator.</li> </ul>"},{"location":"Products/Crowbits/crowbits-trigger-delay.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-trigger-delay.html#usage","title":"Usage","text":"<p>1)You also need a power module, such as Crowbits-Power Supply; An input module, such as Crowbits-Touch Sensor and Crowbits-Trigger delay; An extension module, such as Crowbits-LED.</p> <p>2)The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3)Then, press the Touch Sensor. the LED light.</p> <p></p> <p>4)Let go of Touch Sensor\uff0cthe LED slowly goes out.</p> <p></p> <p>5)Rotate the knob to adjust the speed of the LED light off.</p>"},{"location":"Products/Crowbits/crowbits-ultrasonic-ranging-sensor.html","title":"Crowbits-Ultrasonic Ranging Sensor","text":""},{"location":"Products/Crowbits/crowbits-ultrasonic-ranging-sensor.html#description","title":"Description","text":"<p>This HC-SR04 Ultrasonic Ranging Sensor is a non-contact distance measurement module with stable performance and high ranging accuracy, with the inexpensive price. The measurement range can be up to 5M, which would be helpful for your project such as robotic Obstacle Avoidance and so on.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-ultrasonic-ranging-sensor.html#features","title":"Features","text":"<ul> <li>High precision</li> <li>Stable</li> </ul>"},{"location":"Products/Crowbits/crowbits-ultrasonic-ranging-sensor.html#specification","title":"Specification","text":"<ul> <li>Ranging distance: 2cm to 500 cm</li> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-ultrasonic-ranging-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of digital display.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the D4 and D5 interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Download the library \u201cUltrasonic\u201d. Unzip and put it in the libraries file, for example: C:\\Program Files (x86)\\Arduino\\libraries.</p> <p>4. Upload the following code to the Crowbits-UNO board.</p> <pre><code>#include &lt;Ultrasonic.h&gt;\nUltrasonic ultrasonic(4,5);//Init an Ultrasonic object\nint Distance;\nvoid setup() {\nSerial.begin(9600);\n}\n\nvoid loop()\n{\n Distance=ultrasonic.Ranging(CM);//get the current result;\n delay(100);\n Serial.print(\"the distance is \");\n Serial.println(Distance);\n delay(1000);\n}\n</code></pre> <p>5. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. Put an object in front of the sensor, the serial port will print the corresponding distance, as shown in the figure:</p> <p></p>"},{"location":"Products/Crowbits/crowbits-uno.html","title":"Crowbits-UNO","text":""},{"location":"Products/Crowbits/crowbits-uno.html#description","title":"Description","text":"<p>The Crowbits-UNO mainboard is a microcontroller board that completely compatible with the Arduino UNO. It is based on the Atmega328P, which is widely also used in the Arduino Uno.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-uno.html#features","title":"Features","text":"<ul> <li>Wireless programming</li> <li>With Bluetooth module</li> <li>Battery powered</li> </ul>"},{"location":"Products/Crowbits/crowbits-uno.html#specification","title":"Specification","text":"<ul> <li>Output Voltage: 3.3V DC</li> <li>Charging method: DC 5V Micro USB</li> <li>Battery capacity: 650mAh</li> <li>Dimensions: 56(L)*56(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-uno.html#usage","title":"Usage","text":"<p>The interface design is compatible with any module in the Crowbits suite.</p>"},{"location":"Products/Crowbits/crowbits-uv-sensor.html","title":"Crowbits-UV Sensor","text":""},{"location":"Products/Crowbits/crowbits-uv-sensor.html#description","title":"Description","text":"<p>The Crowbits-UV Sensor is easy to use the ultraviolet light sensor. The MP8511 UV (ultraviolet) Sensor works by outputting an analog signal in relation to the amount of UV light that's detected. This breakout can be very handy in creating devices that warn the user of sunburn or detect the UV index as it relates to weather conditions.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-uv-sensor.html#features","title":"Features","text":"<ul> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-uv-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-uv-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2. Connect the module to the A2 and A3 interface of the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3. Upload the following code to the Crowbits-UNO board.</p> <pre><code>/* \nMP8511 UV Sensor Read Example\nThe MP8511 UV Sensor outputs an analog signal in relation to the amount of UV light it detects.\nThis sensor detects 280-390nm light most effectively. This is categorized as part of the UVB (burning rays)\nspectrum and most of the UVA (tanning rays) spectrum.\nThere's lots of good UV radiation reading out there: \n*/\n//Hardware pin definitions\nint UVOUT = A3; //Output from the sensor\nint REF_3V3 = A2; //3.3V power on the Arduino board\nvoid setup()\n{\n Serial.begin(9600);\n pinMode(UVOUT, INPUT);\n pinMode(REF_3V3, INPUT);\n Serial.println(\"MP8511 example\");\n}\nvoid loop()\n{\n int uvLevel = averageAnalogRead(UVOUT);\n int refLevel = averageAnalogRead(REF_3V3);\n //Use the 3.3V power pin as a reference to get a very accurate output value from sensor\n float outputVoltage = 3.3 / refLevel * uvLevel;  \n float uvIntensity = mapfloat(outputVoltage, 0.99, 2.9, 0.0, 15.0);\n Serial.print(\"MP8511 output: \");\n Serial.print(uvLevel);\n Serial.print(\" MP8511 voltage: \");\n Serial.print(outputVoltage);\n Serial.print(\" UV Intensity (mW/cm^2): \");\n Serial.print(uvIntensity);  \n Serial.println();  \n delay(100);\n}\n//Takes an average of readings on a given pin\n//Returns the average\nint averageAnalogRead(int pinToRead)\n{\n  byte numberOfReadings = 8;\n  unsigned int runningValue = 0; \n  for(int x = 0\u00a0; x &lt; numberOfReadings\u00a0; x++)\n    runningValue += analogRead(pinToRead);\n  runningValue /= numberOfReadings;\n  return(runningValue);  \n}\n//The Arduino Map function but for floats\nfloat mapfloat(float x, float in_min, float in_max, float out_min, float out_max)\n{\n  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n</code></pre> <p>4. After the upload is successful, open the serial port monitor, the baud rate is set to 9600, you can see the following print information.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-vibration-motor.html","title":"Crowbits-Vibration Motor","text":""},{"location":"Products/Crowbits/crowbits-vibration-motor.html#description","title":"Description","text":"<p>The vibration motor is a digital output module, it's similar to the device that makes your cellphone shake when you get a message or call. You can make your projects vibrate with this vibration motor.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-vibration-motor.html#features","title":"Features","text":"<ul> <li>High reliability</li> <li>Strengthen Vibration</li> </ul>"},{"location":"Products/Crowbits/crowbits-vibration-motor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-vibration-motor.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an input module, such as Crowbits-Switch.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When you press the button of the self-locking switch, the vibration motor will vibrate.</p>"},{"location":"Products/Crowbits/crowbits-vibration-sensor.html","title":"Crowbits-Vibration Sensor","text":""},{"location":"Products/Crowbits/crowbits-vibration-sensor.html#description","title":"Description","text":"<p>The vibration sensor is a digital input module, it senses the vibration from the environment, then transfers the vibration signal to the output module, it can be used as a vibrate switch.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-vibration-sensor.html#features","title":"Features","text":"<ul> <li>Digital input module</li> </ul>"},{"location":"Products/Crowbits/crowbits-vibration-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-vibration-sensor.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When the vibration sensor detects a vibration, the LED will light up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-voltage-sensor.html","title":"Crowbits-Voltage Sensor","text":""},{"location":"Products/Crowbits/crowbits-voltage-sensor.html#description","title":"Description","text":"<p>This module can detect the voltage in the circuit, which is very convenient for your design.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-voltage-sensor.html#features","title":"Features","text":"<ul> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-voltage-sensor.html#specification","title":"Specification","text":"<ul> <li>Interface Type: Analog input</li> <li>Operating Voltage: 3.3V DC</li> <li>Measuring voltage range: DC 0-15V</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-voltage-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1. You need to prepare a Crowbits motherboard, such as Crowbits-UNO board. You also need an expansion board, such as Crowbits-Terminal board.</p> <p>2. Connect the module to the A2 interface on the Crowbits-UNO board. Crowbits-Terminal board is behind it.</p> <p>3. Connect the positive pole of the power supply to be tested to the positive terminal on the Crowbits-Voltage Sensor board, and the negative terminal to the negative terminal on the Crowbits-Voltage Sensor board.</p> <p></p> <p>4.Upload the following code to the Crowbits-UNO board.</p> <pre><code>float val11; \nint pin = A2;\nvoid setup() \n{    \n Serial.begin(9600);   \n pinMode(pin,INPUT);\n Serial.println(\"Emartee.Com\");   \n Serial.println(\"Voltage: \");   \n Serial.print(\"V  \"); \n} \nvoid loop() \n{       \n float temp;       \n val11=analogRead(pin);       \n// temp=(val11/1024*3.3)*2;   \n  temp=(val11/1024*3.3)*4;            //temp=(val11/1024*3.3)*((R101+R102)/R102);   \n Serial.println(temp);        \n// Serial.println(val11);   \n delay(1000); \n}\n</code></pre> <p>5. After the upload is successful, open the serial port monitor, the baud rate is set to 9600. You can see that the serial port will print out the corresponding voltage value.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-water-sensor.html","title":"Crowbits-Water Sensor","text":""},{"location":"Products/Crowbits/crowbits-water-sensor.html#description","title":"Description","text":"<p>The water sensor is a digital input module, it is sensitive to the water, which can be used to detect the presence of water.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-water-sensor.html#features","title":"Features","text":"<ul> <li>High sensitivity</li> <li>Digital input module</li> </ul>"},{"location":"Products/Crowbits/crowbits-water-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating Voltage: 3.3V DC</li> <li>Supply mode: Crowbits Power Module</li> <li>Dimensions: 31.5(L)*24.5(W)*13(H) mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-water-sensor.html#usage","title":"Usage","text":"<p>1. You also need to prepare a power module, such as Crowbits-Power Supply, and an output module, such as Crowbits-LED.</p> <p>2. The connection mode is shown in the figure, but the signal feet of the input module and the output module must be connected.</p> <p></p> <p>3. Then, turn on the power. When the sensor detects the presence of water, the LED behind it will light up.</p> <p></p>"},{"location":"Products/Crowbits/crowbits-wifi.html","title":"Crowbits-WiFi","text":""},{"location":"Products/Crowbits/crowbits-wifi.html#description","title":"Description","text":"<p>The Crowbits-WiFi module based on ESP-12, which is an ultra-low power UART-WiFi module. It has excellent dimensions and ULP technology compared to other similar modules. The module is a special design for mobile devices and the Internet of things. For example, you can use this module transmit date with its serial port. It is easy to communicate with others device</p> <p></p>"},{"location":"Products/Crowbits/crowbits-wifi.html#features","title":"Features","text":"<ul> <li>WiFi module</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowbits/crowbits-wifi.html#specification","title":"Specification","text":"<ul> <li>Interface Type: UART</li> <li>Operating Voltage: 3.3V DC</li> <li>imensions: 31.5(L)*24.5(W)*13(H)mm</li> </ul>"},{"location":"Products/Crowbits/crowbits-wifi.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of the module.</p> <p>1.You need to prepare a Crowbits motherboard, such as Crowbits-UNO board.</p> <p>2.Connect the module to the D2 and D3 interface on the Crowbits-UNO board, as shown in the figure:</p> <p></p> <p>3.Upload the following code to the Crowbits-UNO board.</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n\n#define DEBUG true\n\nSoftwareSerial esp8266(2,3); // make RX Arduino line is pin 2, make TX Arduino line is pin 3.\n                             // This means that you need to connect the TX line from the esp to the Arduino's pin 2\n                             // and the RX line from the esp to the Arduino's pin 3\nvoid setup()\n{\n  Serial.begin(115200);\n  esp8266.begin(115200); // your esp's baud rate might be different\n  sendData(\"AT+RST\\r\\n\",2000,DEBUG); // reset module\n  sendData(\"AT+CWMODE=2\\r\\n\",1000,DEBUG); // configure as access point\n  sendData(\"AT+CIFSR\\r\\n\",1000,DEBUG); // get ip address\n  sendData(\"AT+CIPMUX=1\\r\\n\",1000,DEBUG); // configure for multiple connections\n  sendData(\"AT+CIPSERVER=1,80\\r\\n\",1000,DEBUG); // turn on server on port 80\n}\n\nvoid loop()\n{\n  if(esp8266.available()) // check if the esp is sending a message \n  {\n    /*\n    while(esp8266.available())\n    {\n      // The esp has data so display its output to the serial window \n      char c = esp8266.read(); // read the next character.\n      Serial.write(c);\n    } */\n\n    if(esp8266.find(\"+IPD,\"))\n    {\n     delay(1000);\n\n     int connectionId = esp8266.read()-48; // subtract 48 because the read() function returns \n                                           // the ASCII decimal value and 0 (the first decimal number) starts at 48\n\n     String webpage = \"&lt;h1&gt;Hello World!&lt;/h1&gt;\";\n     String cipSend = \"AT+CIPSEND=\";\n     cipSend += connectionId;\n     cipSend += \",\";\n     cipSend +=webpage.length();\n     cipSend +=\"\\r\\n\";\n\n     sendData(cipSend,1000,DEBUG);\n     sendData(webpage,1000,DEBUG);\n\n     String closeCommand = \"AT+CIPCLOSE=\"; \n     closeCommand+=5; // append connection id\n     closeCommand+=\"\\r\\n\";    \n     sendData(closeCommand,3000,DEBUG);\n    }\n  }\n}\n\n\nString sendData(String command, const int timeout, boolean debug)\n{\n    String response = \"\";\n\n    esp8266.print(command); // send the read character to the esp8266\n\n    long int time = millis();\n\n    while( (time+timeout) &gt; millis())\n    {\n      while(esp8266.available())\n      {      \n        // The esp has data so display its output to the serial window \n        char c = esp8266.read(); // read the next character.\n        response+=c;\n      }  \n    }\n\n    if(debug)\n    {\n      Serial.print(response);\n    }    \n    return response;\n}\n</code></pre> <p></p> <p>4. After the upload is successful, open the serial port monitor, the baud rate is set to 115200. The serial port will display wireless network related information.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--13-inch-oled-v10.html","title":"Crowtail- 1.3 Inch OLED v1.0","text":""},{"location":"Products/Crowtail/crowtail--13-inch-oled-v10.html#bold-text-description","title":"Bold text Description","text":"<p>Crowtail- OLED is constructed from 128 x 64 dot matrix OLED module. The display offers high brightness, self-emission, high contrast ratio, slim/thin outline, wide viewing angle, wide temperature range and low power consumption.</p> <p>Model: CRT01112O</p> <p></p>"},{"location":"Products/Crowtail/crowtail--13-inch-oled-v10.html#features","title":"Features","text":"<p>Connection Mode:I(IIC)</p> <p>Voltage: 5V</p> <p>Display Color:Blue/Black</p> <p>Resolution:128x64</p> <p>Interface:I2C</p> <p>Wide range of working temperature: -20\u00b0C~70\u00b0C</p> <p>Dimensions(mm):50.0(L)x35.0(W)x6.8(H)</p>"},{"location":"Products/Crowtail/crowtail--13-inch-oled-v10.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p>Connect the Crowtail- 1.3 Inch OLED to I port.</p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Download the library OLED library;Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;U8glib-&gt;Ele_0_96_12864.</p> <pre><code>#include \"U8glib.h\"\nU8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);    \nvoid drawColorBox(void)\n{\n u8g_uint_t w,h;\n u8g_uint_t r, g, b;\n w = u8g.getWidth()/32;\n h = u8g.getHeight()/8;\n for( b = 0; b &lt; 4; b++ )\n   for( g = 0; g &lt; 8; g++ )\n     for( r = 0; r &lt; 8; r++ )\n     {\n       u8g.setColorIndex((r&lt;&lt;5) |  (g&lt;&lt;2) | b );\n       u8g.drawBox(g*w + b*w*8, r*h, w, h);\n     }\n}\nvoid drawLogo(uint8_t d)\n{\n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(8+d, 30+d, \"E\");\n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(30+d,30+d,\"l\");\n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(40+d,30+d,\"e\"); \n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(55+d,30+d,\"c\");\n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(70+d,30+d,\"r\");\n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(85+d,30+d,\"o\");\n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(100+d,30+d,\"w\");\n}\n\nvoid drawURL(void)\n{\n u8g.setFont(u8g_font_4x6);\n u8g.drawStr(35,54,\"www.elecrow.com\");\n\n}\nvoid draw(void) {\n if ( u8g.getMode() == U8G_MODE_R3G3B2 ) {\n   drawColorBox();\n }\n u8g.setColorIndex(1);\n if ( U8G_MODE_GET_BITS_PER_PIXEL(u8g.getMode()) &gt; 1 ) {\n   drawLogo(2);\n   u8g.setColorIndex(2);\n   drawLogo(1);\n   u8g.setColorIndex(3);\n }\n drawLogo(0);\n drawURL();\n\n}\n\nvoid setup(void) {\n}\n\nvoid loop(void) {\n // picture loop\n u8g.firstPage();  \n do {\n   draw();\n u8g.setColorIndex(1);\n } while( u8g.nextPage() );  \n // rebuild the picture after some delay\n delay(200);  \n}\n</code></pre> <p>5.Upload the Code,you shoule see the display of OLED.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--13-inch-oled-v10.html#resource","title":"Resource","text":"<ul> <li>OLED demo code</li> <li>Crowtail- OLED eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--3-axis-digital-accelerometer.html","title":"Crowtail- 3-Axis Digital Accelerometer","text":""},{"location":"Products/Crowtail/crowtail--3-axis-digital-accelerometer.html#description","title":"Description","text":"<p>This is a high resolution digital accelerometer providing you at max 3.9mg/LSB resolution and large \u00b116g measurement range. It's base on an advanced 3-axis IC ADXL345. Have no worry to implement it into your free-fall detection project, cause it's robust enough to survive up to 10,000g shock. Meanwhile, it's agile enough to detect single and double taps. It's ideal for motion detection, Gesture detection as well as robotics.</p> <p>Model: CT0056ADA</p> <p></p>"},{"location":"Products/Crowtail/crowtail--3-axis-digital-accelerometer.html#specification","title":"Specification","text":"<ul> <li>Input Voltage: 3.3V, 5V</li> <li>3 axis sensing</li> <li>Small, low-profile package: 14-Terminal LGA</li> <li>High sensitivity</li> <li>Low power 0.1 mA in standby mode at VS = 2.5 V (typical)</li> <li>10,000 g shock survival</li> <li>RoHS/WEEE lead-free compliant</li> <li>Crowtail compatible interface</li> <li>Dimensions(mm):20.0(L)x20.0(W)x9.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--3-axis-digital-accelerometer.html#usage","title":"Usage","text":"<p>Every accelerometer has been individually tested before shipping to you. But in rare cases, you might need to reset the zero-offset by yourself.</p> <p>Here below we show you how to read the raw data and obtain data in the unit of g, AKA g-force, from this accelerometer. </p> <p>1. Plug it onto the I2C port of your Crowtail- Base Shield.</p> <p>2. Download the Crowtail- 3-Axis Digital Accelerometer Program and unpack it into arduino-1.0\\libraries in your Arduino installation folder.</p> <p>3. Open the demo code directly by the path:File -&gt; Example -&gt;DigitalAccelerometer_ADXL345-&gt;ADXL345_demo_code.</p> <p>4. Upload the code and open the serial monitor.</p> <p>5. Open the serial monitor to check the result.  </p> <p>The outputs of this sensor consist of two parts: raw data and 3-axis acceleration info converted into the unit of gravity, \"g\".</p>"},{"location":"Products/Crowtail/crowtail--3-axis-digital-accelerometer.html#resource","title":"Resource","text":"<ul> <li>Crowtail- 3-Axis Digital Accelerometer Program</li> <li>Crowtail- 3-Axis Digital Accelerometer eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--3-axis-digital-compass.html","title":"Crowtail- 3-Axis Digital Compass","text":""},{"location":"Products/Crowtail/crowtail--3-axis-digital-compass.html#description","title":"Description","text":"<p>Crowtail-3-Axis Compass module, a member of Crowtail family uses I\u00b2C based Honeywell HMC5883L digital compass. This ASIC is equipped with high resolution HMC118X magneto-resistive sensors and a 12-bit ADC. It provides compass heading accuracy up to 1\u00b0 to 2\u00b0. Signal conditioning like amplification, automatic degaussing strap drivers and offset cancellation are inbuilt. This grove module also includes a MIC5205-3.3 for power supply requirement. Hence user can connect any 3.3V to 6V DC power supply.</p> <p>Model: CT0059ADC</p> <p></p>"},{"location":"Products/Crowtail/crowtail--3-axis-digital-compass.html#specification","title":"Specification","text":"<ul> <li>Crowtail compatible interface</li> <li>3-Axis Magneto-resistive type sensors</li> <li>I\u00b2C serial interface</li> <li>2.0cm x 2.0cm Crowtail module</li> <li>1\u00b0 to 2\u00b0 Degree heading accuracy</li> <li>Up to 116 Hz Maximum output rate</li> <li>Built-In self test</li> <li>Dimensions(mm):20.0(L)x20.0(W)x9.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--3-axis-digital-compass.html#usage","title":"Usage","text":"<p>This demo is going to show you how to read raw data, how to calibrate the data with your local magnetic declination angle and how to get heading angle. First off, before any action you are going to take, you need to prepare a parameter you are going to use in your demo. That's your local magnetic declination.You can find it out in degree via the magnetic declination webpage. For example, mine is -2\u00b037\u2019, which is -2.617 degree. Then transfer it from degree to radians, and there you get the \"declinationAngle\". For example, in my case, declinationAngle = -2.617 / \uff082*\u03c0\uff09= -0.0456752665 rad. Three significant figures are enough. So I would shorten it into -0.0456 rad. And this is the parameter you are going to replace the value of \"declinationAngle\" in the domo code with.</p> <p>1. Plug it onto the I2C port of your Crowtail- Base Shield. </p> <p>2. Download the Crowtail- 3-Axis Digital Compass Program and unpack it into arduino-1.0\\libraries in your Arduino installation folder.</p> <p>3. Open the demo code directly by the path:File -&gt; Example -&gt;Digital Compass -&gt;HMC5883L_Example.</p> <pre><code>// Reference the I2C Library\n#include &lt;Wire.h&gt;\n// Reference the HMC5883L Compass Library\n#include &lt;HMC5883L.h&gt;\n\n//#include \"Streaming.h\"\n\n// Store our compass as a variable.\nHMC5883L compass;\n// Record any errors that may occur in the compass.\nint error = 0;\n\nMagnetometerScaled valueOffset;\n\n\n// Out setup routine, here we will configure the microcontroller and compass.\nvoid setup()\n{\n  // Initialize the serial port.\n  Serial.begin(9600);\n  delay(2000);\n  Serial.println(\"Starting the I2C interface.\");\n  Wire.begin(); // Start the I2C interface.\n\n  Serial.println(\"Constructing new HMC5883L\");\n\n  Serial.println(\"Setting scale to +/- 1.3 Ga\");\n  error = compass.setScale(1.3); // Set the scale of the compass.\n  if(error\u00a0!= 0) // If there is an error, print it out.\n    Serial.println(compass.getErrorText(error));\n\n  Serial.println(\"Setting measurement mode to continous.\");\n  error = compass.setMeasurementMode(MEASUREMENT_CONTINUOUS); // Set the measurement mode to Continuous\n  if(error\u00a0!= 0) // If there is an error, print it out.\n    Serial.println(compass.getErrorText(error));\n\n  compassCalibrate();\n}\n\n// calibrate offset of x, y and z\nvoid compassCalibrate(void)\n{\n  //Serial &lt;&lt; \"&gt;&gt;&gt;&gt; calibrate the compass\\n\";\n  Serial.println(\"calibrate the compass\");\n  MagnetometerScaled valueMax = {0, 0, 0};\n  MagnetometerScaled valueMin = {0, 0, 0};\n\n  // calculate x, y and z offset\n\n  //Serial &lt;&lt; \"please rotate the compass\" &lt;&lt; endl;\n  Serial.println(\"please rotate the compass\");\n  int xcount = 0;\n  int ycount = 0;\n  int zcount = 0;\n  boolean xZero = false;\n  boolean yZero = false;\n  boolean zZero = false;\n  MagnetometerScaled value;\n  while (xcount &lt; 3 || ycount &lt; 3 || zcount &lt; 3) {\n    value = compass.readScaledAxis();\n    if ((fabs(value.XAxis) &gt; 600) || (fabs(value.YAxis) &gt; 600) || (fabs(value.ZAxis) &gt; 600)) {\n      continue;\n    }\n\n    if (valueMin.XAxis &gt; value.XAxis) {\n      valueMin.XAxis = value.XAxis;\n    } else if (valueMax.XAxis &lt; value.XAxis) {\n      valueMax.XAxis = value.XAxis;\n    }\n\n    if (valueMin.YAxis &gt; value.YAxis) {\n      valueMin.YAxis = value.YAxis;\n    } else if (valueMax.YAxis &lt; value.YAxis) {\n      valueMax.YAxis = value.YAxis;\n    }\n\n    if (valueMin.ZAxis &gt; value.ZAxis) {\n      valueMin.ZAxis = value.ZAxis;\n    } else if (valueMax.ZAxis &lt; value.ZAxis) {\n      valueMax.ZAxis = value.ZAxis;\n    }\n\n\n    if (xZero) {\n      if (fabs(value.XAxis) &gt; 50) {\n        xZero = false;\n        xcount++;\n      }\n    } else {\n      if (fabs(value.XAxis) &lt; 40) {\n        xZero = true;\n      }\n    }\n\n    if (yZero) {\n      if (fabs(value.YAxis) &gt; 50) {\n        yZero = false;\n        ycount++;\n      }\n    } else {\n      if (fabs(value.YAxis) &lt; 40) {\n        yZero = true;\n      }\n    }\n\n    if (zZero) {\n      if (fabs(value.ZAxis) &gt; 50) {\n        zZero = false;\n        zcount++;\n      }\n    } else {\n      if (fabs(value.ZAxis) &lt; 40) {\n        zZero = true;\n      }\n    }\n\n    delay(30);\n  }\n\n  valueOffset.XAxis = (valueMax.XAxis + valueMin.XAxis) / 2;\n  valueOffset.YAxis = (valueMax.YAxis + valueMin.YAxis) / 2;\n  valueOffset.ZAxis = (valueMax.ZAxis + valueMin.ZAxis) / 2;\n#if 0 \n  Serial &lt;&lt; \"max: \" &lt;&lt; valueMax.XAxis &lt;&lt; '\\t' &lt;&lt; valueMax.YAxis &lt;&lt; '\\t' &lt;&lt; valueMax.ZAxis &lt;&lt; endl;\n  Serial &lt;&lt; \"min: \" &lt;&lt; valueMin.XAxis &lt;&lt; '\\t' &lt;&lt; valueMin.YAxis &lt;&lt; '\\t' &lt;&lt; valueMin.ZAxis &lt;&lt; endl;\n  Serial &lt;&lt; \"offset: \" &lt;&lt; valueOffset.XAxis &lt;&lt; '\\t' &lt;&lt; valueOffset.YAxis &lt;&lt; '\\t' &lt;&lt; valueOffset.ZAxis &lt;&lt; endl;\n\n  Serial &lt;&lt; \"&lt;&lt;&lt;&lt;\" &lt;&lt; endl;\n#endif  \n  Serial.print(\"max: \");\n  Serial.print(valueMax.XAxis);\n  Serial.print(valueMax.YAxis);\n  Serial.println(valueMax.ZAxis);\n  Serial.print(\"min: \");\n  Serial.print(valueMin.XAxis);\n  Serial.print(valueMin.YAxis);\n  Serial.println(valueMin.ZAxis);\n  Serial.print(\"offset: \");\n  Serial.print(valueOffset.XAxis);\n  Serial.print(valueOffset.YAxis);\n  Serial.println(valueOffset.ZAxis);\n}\n\n// Our main program loop.\nvoid loop()\n{\n  // Retrive the raw values from the compass (not scaled).\n  MagnetometerRaw raw = compass.readRawAxis();\n  // Retrived the scaled values from the compass (scaled to the configured scale).\n  MagnetometerScaled scaled = compass.readScaledAxis();\n\n  scaled.XAxis -= valueOffset.XAxis;\n  scaled.YAxis -= valueOffset.YAxis;\n  scaled.ZAxis -= valueOffset.ZAxis;\n\n  // Values are accessed like so:\n  int MilliGauss_OnThe_XAxis = scaled.XAxis;// (or YAxis, or ZAxis)\n\n  // Calculate heading when the magnetometer is level, then correct for signs of axis.\n  float yxHeading = atan2(scaled.YAxis, scaled.XAxis);\n  float zxHeading = atan2(scaled.ZAxis, scaled.XAxis);\n\n  float heading = yxHeading;\n\n  // Once you have your heading, you must then add your 'Declination Angle', which is the 'Error' of the magnetic field in your location.\n  // Find yours here: http://www.magnetic-declination.com/\n  // Mine is: -2\ufffd\ufffd37' which is -2.617 Degrees, or (which we need) -0.0456752665 radians, I will use -0.0457\n  // If you cannot find your Declination, comment out these two lines, your compass will be slightly off.\n  float declinationAngle = -0.0457;\n  heading += declinationAngle;\n\n  // Correct for when signs are reversed.\n  if(heading &lt; 0)\n    heading += 2*PI;\n\n  // Check for wrap due to addition of declination.\n  if(heading &gt; 2*PI)\n    heading -= 2*PI;\n\n  // Convert radians to degrees for readability.\n  float headingDegrees = heading * 180/M_PI; \n\n  float yxHeadingDegrees = yxHeading * 180 / M_PI;\n  float zxHeadingDegrees = zxHeading * 180 / M_PI;\n\n  // Output the data via the serial port.\n  // Output(raw, scaled, heading, headingDegrees);\n\n//  Serial &lt;&lt; scaled.XAxis &lt;&lt; ' ' &lt;&lt; scaled.YAxis &lt;&lt; ' ' &lt;&lt; scaled.ZAxis &lt;&lt; endl;\n//  Serial &lt;&lt; \"arctan y/x: \" &lt;&lt; yxHeadingDegrees &lt;&lt; \" \\tarctan z/x: \" &lt;&lt; zxHeadingDegrees &lt;&lt; endl;\n\n  Serial.print(scaled.XAxis);\n  Serial.print(scaled.YAxis);\n  Serial.println(scaled.ZAxis);\n\n  Serial.print(\"arctan y/x: \");\n  Serial.print(yxHeadingDegrees);\n  Serial.print(\"arctan z/x: \");  \n  Serial.print(zxHeadingDegrees);\n\n  // Normally we would delay the application by 66ms to allow the loop\n  // to run at 15Hz (default bandwidth for the HMC5883L).\n  // However since we have a long serial out (104ms at 9600) we will let\n  // it run at its natural speed.\n  delay(1000);//of course it can be delayed longer.\n}\n\n// Output the data down the serial port.\nvoid Output(MagnetometerRaw raw, MagnetometerScaled scaled, float heading, float headingDegrees)\n{\n   Serial.print(\"Raw:\\t\");\n   Serial.print(raw.XAxis);\n   Serial.print(\"   \");   \n   Serial.print(raw.YAxis);\n   Serial.print(\"   \");   \n   Serial.print(raw.ZAxis);\n   Serial.print(\"   \\tScaled:\\t\");\n\n   Serial.print(scaled.XAxis);\n   Serial.print(\"   \");   \n   Serial.print(scaled.YAxis);\n   Serial.print(\"   \");   \n   Serial.print(scaled.ZAxis);\n\n   Serial.print(\"   \\tHeading:\\t\");\n   Serial.print(heading);\n   Serial.print(\" Radians   \\t\");\n   Serial.print(headingDegrees);\n   Serial.println(\" Degrees   \\t\");\n}\n</code></pre> <p>4. Upload the code and open the serial monitor.</p> <p>5. Open the serial monitor to check the result.  </p>"},{"location":"Products/Crowtail/crowtail--3-axis-digital-compass.html#resource","title":"Resource","text":"<ul> <li>Crowtail- 3-Axis Digital Compass Program</li> <li>Crowtail- 3-Axis Digital Compass eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--3-axis-digital-gyro.html","title":"Crowtail- 3-Axis Digital Gyro","text":""},{"location":"Products/Crowtail/crowtail--3-axis-digital-gyro.html#description","title":"Description","text":"<p>Crowtail - 3-Axis Digital Gyro module based on ITG 3200. It is the world\u2019s first single-chip, digital-output, 3-axis MEMS motion processing gyro optimised for gaming, 3D mice, and motion-based remote control applications for Internet connected Digital TVs and Set Top Boxes. The ITG-3200 features three 16-bit analog-to-digital converters (ADCs) for digitising the gyro outputs, a user-selectable internal low-pass filter bandwidth, and a Fast-Mode I2C (400kHz) interface.</p> <p>Model: CT0058ADG </p> <p></p>"},{"location":"Products/Crowtail/crowtail--3-axis-digital-gyro.html#specification","title":"Specification","text":"<ul> <li>Supply Voltage: 3.3V, 5V</li> <li>Operation Current: 6.5mA</li> <li>Standby current: 5\u03bcA</li> <li>Sensitivity: 14 LSBs per \u00b0/sec</li> <li>Full scale range: \u00b12000\u00b0/sec</li> <li>Acceleration: 10,000g for 0.3ms</li> <li>On-chip temperature sensor</li> <li>Crowtail compatible interface</li> <li>Three integrated 16-bit ADCs</li> <li>\u00b12000\u00b0/s full scale range and 14.375 LSBs per \u00b0/s sensitivity</li> <li>Integrated amplifiers and low-pass filters</li> <li>Hermetically sealed for temp and humidity resistance</li> <li>Dimensions(mm):20.0(L)x20.0(W)x9.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--3-axis-digital-gyro.html#usage","title":"Usage","text":"<p>Here below we show you how to get data from this digital gyro,the data is in the unit of rad/s. </p> <p>1. Plug it onto the I2C port of your Crowtail- Base Shield.</p> <p>2. Download the Crowtail- 3-Axis Digital Gyro Program and unpack it into arduino-1.0\\libraries in your Arduino installation folder.</p> <p>3. Open the demo code directly by the path:File -&gt; Example -&gt; 3-Axis_Digital_Gyro -&gt; ITG3200_gyro.</p> <p>4. Upload the code and open the serial monitor.</p> <pre><code>#include &lt;Wire.h&gt;\n#include \"ITG3200.h\"\n\nITG3200 gyro;\nvoid setup()\n{\n    Serial.begin(9600);\n    gyro.init();\n    gyro.zeroCalibrate(200,10);//sample 200 times to calibrate and it will take 200*10ms\n}\n\nvoid loop()\n{\n    Serial.print(\"Temperature = \");\n    Serial.print(gyro.getTemperature());\n    Serial.println(\" C\");\n\n    int16_t x,y,z;\n    gyro.getXYZ(&amp;x,&amp;y,&amp;z);\n    Serial.print(\"values of X , Y , Z: \");\n    Serial.print(x);\n    Serial.print(\" , \");\n    Serial.print(y);\n    Serial.print(\" , \");\n    Serial.println(z);\n\n    float ax,ay,az;\n    gyro.getAngularVelocity(&amp;ax,&amp;ay,&amp;az);\n    Serial.print(\"Angular Velocity of X , Y , Z: \");\n    Serial.print(ax);\n    Serial.print(\" , \");\n    Serial.print(ay);\n    Serial.print(\" , \");\n    Serial.print(az);\n    Serial.println(\" degrees per second\");\n    Serial.println(\"*************\");\n    delay(1000);\n}\n</code></pre> <p>5. Open the serial monitor to check the result. </p>"},{"location":"Products/Crowtail/crowtail--3-axis-digital-gyro.html#resource","title":"Resource","text":"<ul> <li>Crowtail- 3-Axis Digital Gyro Program</li> <li>eagle Crowtail- 3-Axis Digital Gyro eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--315mhz-rf-receiver-with-transmitter.html","title":"Crowtail- 315Mhz RF Receiver with Transmitter","text":""},{"location":"Products/Crowtail/crowtail--315mhz-rf-receiver-with-transmitter.html#description","title":"Description","text":"<p>Crowtail- 315Mhz RF Receiver with Transmitter consists of two parts,Transmitter and Receiver. It uses 315Mhz simplex wireless communication. This Crowtail is small, affordable and easy to carry, suitable for indoor and outdoor wireless communication systems, and anti-theft systems, household appliances .....</p> <p>Model: CRT02059R</p> <p></p>"},{"location":"Products/Crowtail/crowtail--315mhz-rf-receiver-with-transmitter.html#features","title":"Features","text":"<ul> <li>Communication: AM</li> <li>Operating frequency: 315MHz</li> <li>Frequency stability: \u00b1 75KHZ</li> <li>Transmitting power: \u2264 500MW</li> <li>Quiescent current: \u2264 0.1UA</li> <li>Emission current: 3 ~ 50MA</li> <li>Operating voltage: DC 3 ~ 12V</li> </ul>"},{"location":"Products/Crowtail/crowtail--315mhz-rf-receiver-with-transmitter.html#specification","title":"Specification","text":"<p>Dimensions(mm):40.0(L)x20.0(W)x9.8(H)</p> Item Description LED Control Mode Digital Pin of Arduino Working Voltage 5V Supply Mode Crowtail Interface"},{"location":"Products/Crowtail/crowtail--315mhz-rf-receiver-with-transmitter.html#usage","title":"Usage","text":"<p>1. Connect the Crowtail-315M-receiver to Base Shield's digital port 11 with Crowtail Cable.</p> <p></p> <p>2. Connect the Crowtail-315M-transmitter to Base Shield's digital port 12 with Crowtail Cable.</p> <p></p> <p>3.Plug it onto the Arduino/Crowduino. Connect the board to PC using USB cable.</p> <p></p> <p>4.Download *VirtualWire library for Crowduino boards,Unzip and put it in the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries;</p> <p>5.Download the Receiver code to Crowtail with Crowntail-NFC-Receiver connected,then upload to Arduino or Crowduino board.</p> <pre><code>// receiver.pde\n/*\nstatic uint8_t vw_rx_pin = 11;\n\n// The digital IO pin number of the transmitter data\nstatic uint8_t vw_tx_pin = 12;\n*/\n#include &lt;VirtualWire.h&gt;\n#undef int\n#undef abs\n#undef double\n#undef float\n#undef round\nvoid setup()\n{\n    Serial.begin(9600); // Debugging only\n    Serial.println(\"setup\");\n\n    // Initialise the IO and ISR\n    vw_set_ptt_inverted(true); // Required for DR3100\n    vw_setup(2000);  // Bits per sec\n\n    vw_rx_start();       // Start the receiver PLL running\n}\n\nvoid loop()\n{\n    uint8_t buf[VW_MAX_MESSAGE_LEN];\n    uint8_t buflen = VW_MAX_MESSAGE_LEN;\n\n    if (vw_get_message(buf, &amp;buflen)) // Non-blocking\n    {\n    int i;\n\n        digitalWrite(13, true); // Flash a light to show received good message\n    // Message with a good checksum received, dump it.\n    Serial.print(\"Got: \");\n\n    for (i = 0; i &lt; buflen; i++)\n    {\n        Serial.print(char(buf[i]));\n        Serial.print(\" \");\n    }\n    Serial.println(\"\");\n        digitalWrite(13, false);\n    }\n}\n</code></pre> <p>6.Download the Transmitter code to Crowtail with Crowntail-NFC-Transmitter connected,then upload to Arduino or Crowduino board.</p> <pre><code>// transmitter.pde\n/*\nstatic uint8_t vw_rx_pin = 11;\n\n// The digital IO pin number of the transmitter data\nstatic uint8_t vw_tx_pin = 12;\n*/\n#include &lt;VirtualWire.h&gt;\n#undef int\n#undef abs\n#undef double\n#undef float\n#undef round\nvoid setup()\n{\n    Serial.begin(9600);   // Debugging only\n    Serial.println(\"setup\");\n\n    // Initialise the IO and ISR\n    vw_set_ptt_inverted(true); // Required for DR3100\n    vw_setup(2000);  // Bits per sec\n}\n\nvoid loop()\n{\n    const char *msg = \"hello\";\n\n    digitalWrite(13, true); // Flash a light to show transmitting\n    vw_send((uint8_t *)msg, strlen(msg));\n    vw_wait_tx(); // Wait until the whole message is gone\n    Serial.println(\"hello\");\n    digitalWrite(13, false);\n    delay(200);\n}\n</code></pre> <p>7.After successfully upload the code. You can open the monitor and see the data from Arduino, as below:</p> <p>a.Transmitter:</p> <p></p> <p>b.Receiver:</p> <p></p>"},{"location":"Products/Crowtail/crowtail--315mhz-rf-receiver-with-transmitter.html#resource","title":"Resource","text":"<ul> <li>VirtualWire</li> <li>315 receiver schematic</li> <li>315 transmitter schematic</li> <li>315 receiver code</li> <li>315 transmitter code</li> </ul>"},{"location":"Products/Crowtail/crowtail--4-digit-display.html","title":"Crowtail- 4-Digit Display","text":""},{"location":"Products/Crowtail/crowtail--4-digit-display.html#description","title":"Description","text":"<p>Usually 4 digit display module is a 12 pin module. But in our Crowtail gadget, we utilize a TM1637 to scale down the controlling pins into 2 Crowtail pins. It only takes 2 digital pins of Arduino or Crowduino to control the content, even the luminance of this display. For projects that require of alpha-numeric display, this can be a nice choice.</p> <p>Model: CT0060FDD</p> <p></p>"},{"location":"Products/Crowtail/crowtail--4-digit-display.html#features","title":"Features","text":"<ul> <li>Compatible with Crowtail interface</li> <li>4 digit red alpha-numeric display</li> <li>8 adjustable luminance levels</li> <li>Dimensions(mm):40.0(L)x20.0(W)x12.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--4-digit-display.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Time display</li> <li>Stopwatch</li> <li>Sensors' input display</li> </ul>"},{"location":"Products/Crowtail/crowtail--4-digit-display.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of digital display.</p> <p>1.Hardware Connection. Connect to I2C connetor on the base shield for Arduino. </p> <p>2.Download the library Crowtail- 4-Digit Display library; Unzip and put it in the libraries file : ..\\arduino-1.0\\libraries;</p> <p>3.Open \u201c_4Digital7_SegmentLED \u201d example via the path: File --&gt; TM1650 --&gt; Examples --&gt; _4Digital7_SegmentLED.</p> <pre><code>/*\n    Demo code of P21 - 4 Digital 7-Segment LED with Time Separator\n    by maker studio\n*/\n#include \"TM1650.h\"\n#include &lt;inttypes.h&gt;\nstatic uint8_t TubeTab[] = {\n                           0x3F,0x06,0x5B,0x4F,\n                           0x66,0x6D,0x7D,0x07,\n                           0x7F,0x6F,0x77,0x7C,\n                           0x39,0x5E,0x79,0x71,   \n                           };//0~9,A,B,C,D,E,F  \nstatic uint8_t TubeTabwithPoit[] = {\n                           0xBF,0x86,0xDB,0xCF,\n                           0xE6,0xED,0xFD,0x87,\n                           0xFF,0xEF   \n                           };//0~9  \nTM1650 DigitalLED(A5,A4);\nint8_t number[] = {0,0,0,0};\nvoid setup()\n{\n    //Serial.begin(9600);\n}\n\nvoid loop()\n{\n    DigitalLED.clearDisplay();\n     delay(1000);\n     DigitalLED.display(0,TubeTab[1]);\n     DigitalLED.display(1,TubeTab[2]);\n     DigitalLED.display(2,TubeTab[3]);\n     DigitalLED.display(3,TubeTab[4]);\n     delay(1000);\n     DigitalLED.clearDisplay();\n     delay(100);\n     DigitalLED.display(0,TubeTabwithPoit[5]);\n     DigitalLED.display(1,TubeTabwithPoit[6]);\n     DigitalLED.display(2,TubeTabwithPoit[7]);\n     DigitalLED.display(3,TubeTabwithPoit[8]);\n     delay(1000);\n}\n</code></pre> <p>4.Upload it into your Crowduino board and observe the Digit-Display.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--4-digit-display.html#resource","title":"Resource","text":"<ul> <li>Crowtail- 4-Digit Display Program</li> <li>Crowtail- 4-Digit Display eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html","title":"Crowtail- 4G SIM-A7670E","text":""},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html#description","title":"Description","text":"<p>This Crowtail series 4G module is a high-performance LTE Cat1 wireless module. It uses the SIM A7670E communication module from Simcom and communicates through a UART interface, which enables 4G data transmission and voice communication. The module supports multiple LTE bands, including B1/B3/B5/B7/B8/B20, as well as WCDMA and GSM networks. In addition, it supports various protocols such as TCP/IP, FTP, HTTP, and multiple satellite navigation systems such as GPS, GLONASS, and BDS.</p> <p>The module comes with a charging interface and can be powered by a 3.7V lithium battery or a 5V type-C interface. It also has a 3.5mm headphone jack, and by connecting a headphone with a microphone, it can be used for making and receiving phone calls. Its compact size makes it easy to integrate into various IoT devices and meet various application requirements. Furthermore, its low power consumption and reliable performance are also the reasons why it is widely used in IoT, smart home, automotive, and industrial control fields.</p> <p>When paired with our expansion board (Crowtail base shield for Raspberry Pi or Crowtail base shield for Arduino), it can quickly build 4G-related projects with Arduino or Raspberry Pi boards.</p> <p>Model: CRT01260S</p> <p></p> <p></p>"},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html#features","title":"Features","text":"<ul> <li>Integrate the A7670E communication module, enabling 4G data transmission and voice communication with low power consumption and high reliability</li> <li>Supports multiple LTE bands, including B1/B3/B5/B7/B8/B20, as well as WCDMA and GSM networks</li> <li>Supports various protocols such as TCP/IP, FTP, HTTP, and multiple satellite navigation systems such as GPS, GLONASS, and BDS</li> <li>Comes with a charging interface and a headphone jack, which can be used for making and receiving phone calls by connecting a headphone with a microphone</li> <li>Small but powerful, compact size makes it easy to integrate into various IoT devices.</li> </ul>"},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html#technical-specifications","title":"Technical Specifications","text":"<ul> <li>Mainchip: SIM A7670E</li> <li>LTE-FDD: B1/B3/B5/B7/B8/B20</li> <li>GSM: 900/1800MHz</li> <li>GSM/GPRS power class:</li> </ul> <p>EGSM900: 4 (33dBm\u00b12dB) DCS1800: 1 (30dBm\u00b12dB)</p> <ul> <li>EDGE power class:</li> </ul> <p>EGSM900: E2 (27dBm\u00b13dB) DCS1800 : E1 (26dBm+3dB/-4dB)</p> <ul> <li>LTE power class: 3 (23dBm\u00b17dB)</li> <li>Supply Voltage: 4V~ 4.2V</li> <li>Power: 3.8V</li> <li>LTE(Mbps): 10(DL)/5(UL)</li> <li>GPRS/EDGE(Kbps): 236.8(DL)/236.8(UL)</li> <li>Protocol: TCP/IP/IPV4/IPV6/Multi-PDP/FTP/FTPS /HTTP/HTTPS/DNS</li> <li>Communication interface: USB / UART</li> <li>Firmware Upgrade: USB/FOTA</li> <li>Support phonebook types: SM/FD/ON/AP/SDN</li> <li>Interface: 1x Power button, 1x BAT, 1x UART, 1X Type-C, 1x SIM Card slot</li> <li>Size:35*50mm</li> <li>Net Weight: 19.5g</li> </ul>"},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html#interface-function","title":"Interface Function","text":"Name Interface/Function Definition USB-C USB-C interface, used for the power supply of the development board and the communication interface between the PC and the development board. UART None BAT Battery charging interface POWER Power button. It needs to be pressed for 1 second to let the development board enter the working state. SIM Card Slot None 4G ANT None GNSS ANT None"},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html#crowtail_4g-sim-a7670e-driver-installation","title":"Crowtail_4G SIM-A7670E driver installation","text":"<p>1. Connect Crowtail 4G SIM-A7670E to the computer, and press and hold the onboard power button for 1 second. After the network indicator lights up, open the device manager and check whether the driver of Crowtail_4G SIM-A7670E is installed. </p> <p>2. If the driver is successfully installed, three ports with different port numbers will be displayed respectively. </p> <p>3. If the driver is not installed, it will be displayed in the \"Other Devices\" column. Here you need to update the driver for each device. For the driver, see \"...\\Crowtail _4G SIM-A7670E-Windows-Driver-USB\\Windows\\...\" (need to install the corresponding driver according to the computer version). </p>"},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html#connect-to-the-mobile-network","title":"Connect to the Mobile Network","text":"<p>1. Insert the SIM card into the SIM card slot according to the silk screen instructions on the Crowtail_4G SIM-A7670E.</p> <p>2. Wait for 5 seconds, if the network indicator starts to flash at a frequency of 0.5 seconds/time, it means that it is connected to the mobile network, otherwise you need to check whether the SIM card is correctly inserted or connected. </p>"},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html#answermake-calls-test","title":"Answer/Make Calls Test","text":"<p>1. Find the sscom5.13.1.exe software and double-click to open it. </p> <p>2. Select the port number. If you are not sure whether the port number is correct, you can enter the \"AT\" command in the sending area and send it. If the serial port returns OK, it means that the currently selected port number is correct; set the baud rate to 115200. </p> <p>3. Enter ATD+receiver's mobile phone number+\";\" (for example, ATD13660643260;) and send it to make a call; connect the headset and answer it, and check whether the call sound is clear. If there is no noise or intermittent sound, it means the function is normal. </p> <p>4. When the mobile phone calls the Crowtail_4G module, enter the \"ATA\" command and send it to answer the call. </p> <p>5. If you find that the sound quality of the call is poor, or the call is intermittent, you need to check whether the 4G copper tube antenna is properly buckled in place.</p>"},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html#receivesend-message-test","title":"Receive/Send Message Test","text":"<p>1. Click \"Multiple Strings\" on the toolbar to display the interface for sending multiple strings, and enter the following text information one by one in the string (double-click comment) column:</p> <ul> <li>AT+CMGF=1</li> <li>AT+CSCS=\"UCS2\"</li> <li>AT+CSMP=17,167,0,8</li> <li>AT+CMGS=\"00310033003600350031003400340033003300370038\"</li> <li>4F60597D</li> </ul> <p></p> <p>What needs special attention is that the content to be sent and the mobile phone number used to receive the information need to be converted into Unicode codes with a Unicode tool. Here we use the Unicode.exe software. </p> <p>2. Enter 1A and check the box in front of it, then check the \"add carriage return and line feed\" at the bottom, and click the \"send\" button on the right to send instructions one by one to complete the message sending. </p> <p>3. The operation method of receiving information is also the same, input AT+CMGF=1, AT+CSCS=\"GSM\", \"AT+CNMI=2,1\" and AT+CMGR=21. </p> <p>It is important to note that when the Crowtail_4G module receives information, it will display \"data\" in the software window area. Here you need to change the number in AT+CMGR=21 to the number of the received information. </p> <p>4. Send instructions in sequence to complete the information reading; if the window area can normally display the data composed of Unicode codes, it means that the information reading is successful. </p>"},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html#gps-test","title":"GPS Test","text":"<p>1. Find the SIMCom GPS DEMO V1.07.exe software and double-click to open it. </p> <p>2. After connecting the Crowtail_4G module to the computer and pressing the power button to make the module work, open the device manager to see which ports are listed in the port column, and remember the port number of the SimTech HS-USB AT Port 9011 port and the '**SimTech HS-USB NMEA 9011**' port.</p> <p>3. Click the third icon \"Setting Comport\" below the toolbar to open the setting window; you can also click \"Module\" &gt; \"Properties...\" on the toolbar to open the setting window.   </p> <p>4. In the ComPort column, select SimTech HS-USB AT Port 9011 for NMEA COM; select 115200 for BaudRate, and finally click OK to complete the setting. </p> <p>5. Enter the command \"AT+CGNSSPWR=1\" in the text box in the lower right corner of the software and click send to enable the GNSS function; enter the command \"AT+CGNSSTST=1\" and click send to receive location information. When Command send success is displayed below the text box, it means that the command is sent successfully. </p> <p>6. Open the setting window again, change the NMEA COM option to SimTech HS-USB NMEA 9011 port, and click OK to complete the setting.   </p> <p>7. Click the first icon \"Run Comport\" at the bottom of the toolbar to start receiving location information; at this time, move the Crowtail_4G SIM-A7670E module and the computer to an open place or indoors with a satellite adapter.  (If you use a desktop computer, try to choose a place as close to the outside as possible for testing) </p> <p>8. If the satellite information received is as shown in the figure below, it means that the GPS function is qualified.   </p>"},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html#battery-charging-test","title":"Battery Charging Test","text":"<p>As shown in the figure below, connect the lithium battery to the BAT port of the Crowtail_4G module, and at the same time plug the USB end into a 5V power supply, and observe whether the charging indicator light is red. If the red light is normally on, it means that it is charging. Check whether the battery is correctly inserted into the BAT socket; the red light will turn off automatically after charging is completed. </p>"},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html#resources","title":"Resources","text":"<ul> <li>Crowtail- 4G_SIM-A7670E_Arduino_Code</li> <li>Crowtail_4G_SIM-A7670C_V1.0-eagle_file</li> <li>A7600_Series_AT_Command_Manual_V1.01.pdf</li> <li>Crowtail _4G SIM-A7670C-Windows-Driver-USB</li> </ul>"},{"location":"Products/Crowtail/crowtail--4g-sim-a7670e.html#support","title":"Support","text":"<p>If you have any problem about how to use it, you can connect to us at the bottom-right of bazzer or contact to techsupport@elecrow.com to get technology support.</p>"},{"location":"Products/Crowtail/crowtail--80cm-infrared-proximity-sensor.html","title":"Crowtail- 80cm Infrared Proximity Sensor","text":""},{"location":"Products/Crowtail/crowtail--80cm-infrared-proximity-sensor.html#description","title":"Description","text":"<p>The Sharp distance sensors are a popular choice for many projects that require accurate distance measurements. This IR sensor is more economical than sonar rangefinders, yet it provides much better performance than other IR alternatives. Interfacing to most microcontrollers is straightforward: the single analog output can be connected to an analog-to-digital converter for taking distance measurements, or the output can be connected to a comparator for threshold detection.</p> <p>Model: CT0038IPS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--80cm-infrared-proximity-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating voltage: 4.5 V to 5.5 V</li> <li>Average current consumption: 30 mA (typical)</li> <li>Distance measuring range: 10 cm to 80 cm (4\" to 32\")</li> <li>Output type: analog voltage</li> <li>Output voltage differential over distance range: 1.9 V (typical)</li> <li>Response time: 38 \u00b1 10 ms</li> <li>Weight: 3.5 g (0.12 oz)</li> <li>Dimensions(mm):44.5(L)x13.5(W)x19.0(H)</li> </ul> <p>The detection range of this version is approximately 10 cm to 80 cm (4\" to 32\"); a plot of distance versus output voltage is shown below: </p>"},{"location":"Products/Crowtail/crowtail--80cm-infrared-proximity-sensor.html#usage","title":"Usage","text":"<p>The module detects one-axis rotation with analog signal.</p> <p>1.Hardware Connection</p> <p></p> <p>2.Copy the below code to you new skecth,then upload it.</p> <pre><code>#define pin A0\n\nvoid setup () {\n    Serial.begin (9600);\n    pinMode (pin, INPUT);\n}\n\nvoid loop () {\n    uint16_t value = analogRead (pin);\n    uint16_t range = get_gp2d12 (value);\n    Serial.print(\"Analog value:\");\n    Serial.println (value);\n    Serial.print (\"Distance:\");\n    Serial.print (range);\n    Serial.println (\" mm\");\n    Serial.println ();\n    delay (500);\n}\n\nuint16_t get_gp2d12 (uint16_t value) {\n    if (value &lt; 10) value = 10;\n    return ((67870.0 / (value - 3.0)) - 40.0);\n}\n</code></pre> <p>3.Open the serial tool,you can see the distance:</p> <p></p>"},{"location":"Products/Crowtail/crowtail--80cm-infrared-proximity-sensor.html#resource","title":"Resource","text":"<ul> <li>Demo code</li> <li>Datasheet</li> </ul>"},{"location":"Products/Crowtail/crowtail--9g-servo.html","title":"Crowtail- 9G Servo","text":""},{"location":"Products/Crowtail/crowtail--9g-servo.html#description","title":"Description","text":"<p>Tower Pro SG90 is a high quality, low-cost servo for all your mechatronic needs. It comes with a 3-pin power and control cable, mounting hardware. For good use with Crowtail series products, we decide to add it to our Crowtail family. Hope you can make your work more easier by using it.</p> <p>Model: CT0064NGS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--9g-servo.html#specification","title":"Specification","text":"<ul> <li>Compatible with Crowtail</li> <li>Operating Voltage: 4.8 ~ 6.0V</li> <li>Operating Speed: 0.12sec/60 degree(4.8V)~0.1sec/60 degree(6.0V)</li> <li>Torque: 1.6kg/cm(4.8V)</li> <li>Dead Band Width: 5usec</li> <li>Temperature Range: -30\u2103~+60\u2103</li> <li>Cable Length: 22.5cm</li> <li>Servo dimensions(mm):32.2(L)x12.6(W)x31.2(H)</li> <li>Brand name: Tower Pro</li> <li>location of each pin: red (+), brown (-), yellow (signal).</li> </ul>"},{"location":"Products/Crowtail/crowtail--9g-servo.html#usage","title":"Usage","text":"<p>1. Connect the Crowtail- 9G Servo to the Digital port 9 of Crowtail - Basic Shield using a Crowtail cable</p> <p></p> <p>2.Download Crowtail- 9G Servo library the library; Unzip and put it in the libraries file : ..\\arduino-1.0\\libraries;</p> <p>3.Open \u201csweep\u201d example via the path: File --&gt; Examples --&gt; Servo --&gt;sweep.</p> <pre><code>// Sweep\n// by BARRAGAN &lt;http://barraganstudio.com&gt; \n// This example code is in the public domain.\n\n\n#include &lt;Servo.h&gt; \n\nServo myservo;  // create servo object to control a servo \n                // a maximum of eight servo objects can be created \n\nint pos = 0;    // variable to store the servo position \n\nvoid setup() \n{ \n  myservo.attach(9);  // attaches the servo on pin 9 to the servo object \n} \n\n\nvoid loop() \n{ \n  for(pos = 0; pos &lt; 180; pos += 1)  // goes from 0 degrees to 180 degrees \n  {                                  // in steps of 1 degree \n    myservo.write(pos);              // tell servo to go to position in variable 'pos' \n    delay(15);                       // waits 15ms for the servo to reach the position \n  } \n  for(pos = 180; pos&gt;=1; pos-=1)     // goes from 180 degrees to 0 degrees \n  {                                \n    myservo.write(pos);              // tell servo to go to position in variable 'pos' \n    delay(15);                       // waits 15ms for the servo to reach the position \n  } \n} \n</code></pre> <p>4.Upload it into your Crowduino board and see what will happen.</p>"},{"location":"Products/Crowtail/crowtail--9g-servo.html#resource","title":"Resource","text":"<ul> <li>Crowtail- 9G Servo Program</li> </ul>"},{"location":"Products/Crowtail/crowtail--a6-gprsgsm-module.html","title":"Crowtail- A6 GPRS/GSM Module","text":""},{"location":"Products/Crowtail/crowtail--a6-gprsgsm-module.html#description","title":"Description","text":"<p>This is a A6 GPRS/GSM Shield, which is use the newest A6 GSM/GPRS module , A6 module is a GSM/GPRS function module.It supports GSM/GPRS Quad-Band\uff08850\u30019001800/1900\uff09 network. Also, it supports voice calls,SMS messages,GPRS data service and so on .We can use it make a simple phone. The module is controlled by AT command via UART and supports 3.3V and 4.2V logical level.</p> <p>Model: CT009818G </p>"},{"location":"Products/Crowtail/crowtail--a6-gprsgsm-module.html#features","title":"Features","text":"<ul> <li>Crowtail compatible</li> <li>Work voltage: 4.2V</li> <li>Operating temperature -30 \u2103 to + 80 \u2103;</li> <li>1KG peak suction</li> <li>Low standby current</li> <li>Standby average current 3ma less;</li> <li>Support the GSM / GPRS Quad-band, including 850,900,1800,1900MHZ;</li> <li>Support China Mobile and China Unicom's 2G GSM network worldwide;</li> <li>GPRS Class 10;</li> <li>Sensitivity &lt;-105;</li> <li>Support voice calls;</li> <li>Support SMS text messaging;</li> <li>Support GPRS data traffic, the maximum data rate, download 85.6Kbps, upload 42.8Kbps;</li> <li>Supports standard GSM07.07,07.05 AT commands and extended commands Ai-Thinker;</li> <li>Supports two serial ports, a serial port to download an AT command port;</li> <li>AT command supports the standard AT and TCP / IP command interface;</li> <li>Support digital audio and analog audio support for HR, FR, EFR, AMR speech coding;</li> <li>Support ROHS, FCC, CE, CTA certification;</li> <li>SMT 42PIN</li> </ul>"},{"location":"Products/Crowtail/crowtail--a6-gprsgsm-module.html#specification","title":"Specification","text":"<ul> <li>Quad-band: 850/900/1800/1900 MHz</li> <li>GPRS multi-slot: 12, 1 to 12 may be configured</li> <li>GPRS mobile station: Class B</li> <li>Compatible with GSM Phase 2/2 +: Class 4 (2W @ 850/900 MHz) Class 1 (1W @ 1800 / 1900MHz)</li> <li>Current consumption: 1.3mA @ DRX = 5; 1.2mA @ DRX = 9</li> <li>AT command control: Standard GSM07.07,07.05 AT commands and extended commands Ai-Thinker</li> <li>SIM Application Toolkit</li> <li>GPRS Class 10: Up 85.6 kbps (upstream) &amp; 42.8Kbps (downlink)</li> <li>PBCCH support</li> <li>Coding scheme: CS 1, 2, 3, 4</li> <li>Support CSD: Up 14.4 kbps</li> <li>Support USSD</li> <li>Stack: PPP / TCP / UDP / HTTP / FTP / SMTP / MUX</li> <li>Dimensions(mm):50.0(L)x35.0(W)x7.2(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--a6-gprsgsm-module.html#cautions","title":"Cautions","text":"<ul> <li>Make sure your SIM card is unlocked.</li> <li>The product is provided as is without an insulating enclosure. Please observe ESD precautions specially in dry (low humidity) weather.</li> <li>It just supports baud rate 115200bps.</li> </ul>"},{"location":"Products/Crowtail/crowtail--a6-gprsgsm-module.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Crowtail/crowtail--a6-gprsgsm-module.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--a6-gprsgsm-module.html#hardware-installation","title":"Hardware installation","text":""},{"location":"Products/Crowtail/crowtail--a6-gprsgsm-module.html#insert-an-micro-sim-card-to-sim-card-holder","title":"Insert an Micro SIM card to SIM Card Holder","text":"<p>6 Pin Holder for SIM Cards. Both 1.8 volts and 3.0 volts SIM Cards are supported by A6 GPRS/GSM Module, the SIM card voltage type is automatically detected.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--a6-gprsgsm-module.html#connect-the-antenna","title":"Connect the Antenna","text":"<p>A miniature coaxial RF connector is present on the Crowtail- A6 GPRS/GSM Module to connect with a GSM Antenna. The connector present on the Crowtail- A6 GPRS/GSM Module is called a U.FL connecto.The GSM Antenna supplied with the GPRS Shield has an SMA connector (and not an RP-SMA connector) on it.The connection topology is shown in the diagram below:</p> <p></p>"},{"location":"Products/Crowtail/crowtail--a6-gprsgsm-module.html#plug-to-arduinocrowduino","title":"Plug to Arduino/Crowduino","text":"<p>Connect the Crowtail- A6 GPRS/GSM Module to U1 port on Crowtail- Base shield,and then plug the base shield onto Arduino.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--a6-gprsgsm-module.html#download-code","title":"Download Code","text":"<p>1. Type command in the terminal to execute different function, threr are 4 functions in the demo:</p> <p>1)If you input 't', the demo will send a SMS message to another cellphone which you set(you need set the number in the code);</p> <p>2)If you input 'd', the program will dial a call to the other cellphone that you set(it is also need you set in the code );</p> <p>3)If you input 'h', it will submit a http request to a web that you want to access(it need you set the web adress in the code), it will return a string from the website if it goes correctly;</p> <p>4)If you input 's', it will upload the datas to the pachube(for detail you can refer to the explanation in the code). I strongly recommend you input 'h' before input 's', because uploading datas to the pachube need do some setting, after execute the function of submit a http request, the setting will be set.</p> <p>2. If the program returns error in the terminal after you typed the command, don't worry, just try input the command again.</p> <pre><code>#include &lt;String.h&gt;\nunsigned char SigQ[50];\nunsigned char SigQ1[5]={'a','a','a','a','a'};\nint SIGQ=0;\n\nvoid setup()\n{\n  Serial1.begin(115200);               // the GPRS baud rate   \n  Serial.begin(115200);    // the GPRS baud rate \n  delay(500);\n//    mySerial.println(\"AT+CPIN?\");  //get the signal Quality\n//  delay(100);\n//    pinMode(9, OUTPUT); \n//  digitalWrite(9,LOW);\n//  delay(1000);\n//  digitalWrite(9,HIGH);\n//  delay(1500);\n//  digitalWrite(9,LOW);\n\n//*******************************************************\n//GetSignalQuality(); \n//*******************************************************\n  for(int x=0;x&lt;20;x++)\n    {\n\n   GetSignalQuality();   \n    delay(800);\n    for(int i=0;i&lt;26;i++)\n    {\n   if(SigQ[i]==58)\n   {    \n     int j=0;\n     int k=0;\n     i++;i++;\n     while((SigQ[i+j])!=44)\n     {\n      if((SigQ[i+j]&gt;='0'&amp;&amp;SigQ[i+j]&lt;='9'))  //&gt;=48 &lt;=57\n      {\n      SigQ1[j]=SigQ[i+j];     \n       }\n       j++;  //j=1\n     }     \n     SIGQ=SigQ1[0]-'0';\n\n     if(j==2)\n     {\n     SIGQ=SIGQ*10+SigQ1[1]-'0';\n     }  \n   Serial.println(\"\"); \n   Serial.print(\"SIGQ:\");\n   Serial.println(SIGQ);\n     }  \n   }\n   if ( Serial1.available())\n    Serial.write( Serial1.read());\n   if (SIGQ&gt;=10)\n   {\n     break;\n   }\n   if(x==20)\n   {\n    Serial.print(\"The Signal Quality is poor!\");\n   }\n   }        \n  delay(2000);\nDialVoiceCall();\nif ( Serial1.available())\n    Serial.write( Serial1.read());\n}\n\nvoid loop()\n{\n  //after start up the program, you can using terminal to connect the serial of gprs shield,\n  //if you input 't' in the terminal, the program will execute SendTextMessage(), it will show how to send a sms message,\n  //if input 'd' in the terminal, it will execute DialVoiceCall(), etc.\n// GetSignalQuality();\n delay(500);\n  if (Serial.available())\n    switch(Serial.read())\n   {\n     case 't':\n       SendTextMessage();\n       break;\n     case 'd':\n       DialVoiceCall();\n       break;\n     case 'h':\n       SubmitHttpRequest();\n       break;\n     case 's':\n       Send2Pachube();\n       break;\n     case 'q':\n       GetSignalQuality();\n       break;\n   } \n  if ( Serial1.available())\n    Serial.write( Serial1.read());\n}\n\n///SendTextMessage()\n///this function is to send a sms message\nvoid SendTextMessage()\n{\n   Serial1.print(\"AT+CMGF=1\\r\");    //Because we want to send the SMS in text mode\n  delay(100);\n   Serial1.println(\"AT + CMGS = \\\"+8613016490443\\\"\");//send sms message, be careful need to add a country code before the cellphone number\n  delay(100);\n   Serial1.println(\"GSM test message!\");//the content of the message\n  delay(100);\n   Serial1.println((char)26);//the ASCII code of the ctrl+z is 26\n  delay(100);\n   Serial1.println();\n}\n\n///DialVoiceCall\n///this function is to dial a voice call\nvoid DialVoiceCall()\n{\n   Serial1.println(\"AT+SNFS=0\");\n delay(100);\n   Serial1.println(\"ATDxxxxxxxxxx;\");//dial the number \n//mySerial.println(\"ATD + +8613826558615;\");//dial the number\n  delay(100);\n   Serial1.println();\n}\n\n///SubmitHttpRequest()\n///this function is submit a http request\n///attention:the time of delay is very important, it must be set enough \nvoid SubmitHttpRequest()\n{\n   Serial1.println(\"AT+CSQ\");\n  delay(100);\n\n  ShowSerialData();// this code is to show the data from gprs shield, in order to easily see the process of how the gprs shield submit a http request, and the following is for this purpose too.\n\n   Serial1.println(\"AT+CGATT?\");\n  delay(100);\n\n  ShowSerialData();\n\n   Serial1.println(\"AT+SAPBR=3,1,\\\"CONTYPE\\\",\\\"GPRS\\\"\");//setting the SAPBR, the connection type is using gprs\n  delay(1000);\n\n  ShowSerialData();\n\n   Serial1.println(\"AT+SAPBR=3,1,\\\"APN\\\",\\\"CMNET\\\"\");//setting the APN, the second need you fill in your local apn server\n  delay(4000);\n\n  ShowSerialData();\n\n   Serial1.println(\"AT+SAPBR=1,1\");//setting the SAPBR, for detail you can refer to the AT command mamual\n  delay(2000);\n\n  ShowSerialData();\n\n   Serial1.println(\"AT+HTTPINIT\"); //init the HTTP request\n\n  delay(2000); \n  ShowSerialData();\n\n   Serial1.println(\"AT+HTTPPARA=\\\"URL\\\",\\\"www.google.com.hk\\\"\");// setting the httppara, the second parameter is the website you want to access\n  delay(1000);\n\n  ShowSerialData();\n\n   Serial1.println(\"AT+HTTPACTION=0\");//submit the request \n  delay(10000);//the delay is very important, the delay time is base on the return from the website, if the return datas are very large, the time required longer.\n  //while(!mySerial.available());\n\n  ShowSerialData();\n\n   Serial1.println(\"AT+HTTPREAD\");// read the data from the website you access\n  delay(300);\n\n  ShowSerialData();\n\n   Serial1.println(\"\");\n  delay(100);\n}\n\n///send2Pachube()///\n///this function is to send the sensor data to the pachube, you can see the new value in the pachube after execute this function///\nvoid Send2Pachube()\n{\n   Serial1.println(\"AT+CGATT?\");\n  delay(100);\n\n  ShowSerialData();\n\n   Serial1.println(\"AT+CSTT=\\\"CMNET\\\"\");//start task and setting the APN,\n  delay(1000);\n\n  ShowSerialData();\n\n   Serial1.println(\"AT+CIICR\");//bring up wireless connection\n  delay(300);\n\n  ShowSerialData();\n\n   Serial1.println(\"AT+CIFSR\");//get local IP adress\n  delay(2000);\n\n  ShowSerialData();\n\n   Serial1.println(\"AT+CIPSPRT=0\");\n  delay(3000);\n\n  ShowSerialData();\n\n   Serial1.println(\"AT+CIPSTART=\\\"tcp\\\",\\\"api.cosm.com\\\",\\\"8081\\\"\");//start up the connection\n  delay(2000);\n\n  ShowSerialData();\n\n   Serial1.println(\"AT+CIPSEND\");//begin send data to remote server\n  delay(4000);\n  ShowSerialData();\n  String humidity = \"1031\";//these 4 line code are imitate the real sensor data, because the demo did't add other sensor, so using 4 string variable to replace.\n  String moisture = \"1242\";//you can replace these four variable to the real sensor data in your project\n  String temperature = \"30\";//\n  String barometer = \"60.56\";//\n   Serial1.print(\"{\\\"method\\\": \\\"put\\\",\\\"resource\\\": \\\"/feeds/42742/\\\",\\\"params\\\"\");//here is the feed you apply from pachube\n  delay(500);\n  ShowSerialData();\n  Serial1.print(\": {},\\\"headers\\\": {\\\"X-PachubeApiKey\\\":\");//in here, you should replace your pachubeapikey\n  delay(500);\n  ShowSerialData();\n   Serial1.print(\" \\\"_cXwr5LE8qW4a296O-cDwOUvfddFer5pGmaRigPsiO0\");//pachubeapikey\n  delay(500);\n  ShowSerialData();\n   Serial1.print(\"jEB9OjK-W6vej56j9ItaSlIac-hgbQjxExuveD95yc8BttXc\");//pachubeapikey\n  delay(500);\n  ShowSerialData();\n  Serial1.print(\"Z7_seZqLVjeCOmNbEXUva45t6FL8AxOcuNSsQS\\\"},\\\"body\\\":\");\n  delay(500);\n  ShowSerialData();\n   Serial1.print(\" {\\\"version\\\": \\\"1.0.0\\\",\\\"datastreams\\\": \");\n  delay(500);\n  ShowSerialData();\n   Serial1.println(\"[{\\\"id\\\": \\\"01\\\",\\\"current_value\\\": \\\"\" + barometer + \"\\\"},\");\n  delay(500);\n  ShowSerialData();\n   Serial1.println(\"{\\\"id\\\": \\\"02\\\",\\\"current_value\\\": \\\"\" + humidity + \"\\\"},\");\n  delay(500);\n  ShowSerialData();\n   Serial1.println(\"{\\\"id\\\": \\\"03\\\",\\\"current_value\\\": \\\"\" + moisture + \"\\\"},\");\n  delay(500);\n  ShowSerialData();\n   Serial1.println(\"{\\\"id\\\": \\\"04\\\",\\\"current_value\\\": \\\"\" + temperature + \"\\\"}]},\\\"token\\\": \\\"lee\\\"}\");\n\n\n  delay(500);\n  ShowSerialData();\n\n   Serial1.println((char)26);//sending\n  delay(5000);//waitting for reply, important! the time is base on the condition of internet \n   Serial1.println();\n\n  ShowSerialData();\n\n   Serial1.println(\"AT+CIPCLOSE\");//close the connection\n  delay(100);\n  ShowSerialData();\n}\n//*******************************************************\n  //GetSignalQuality();\n//*******************************************************\n\nvoid GetSignalQuality()\n{\n\n   Serial1.println(\"AT+CSQ\");  //get the signal Quality\n  delay(100);\n  int k=0;\n  while( Serial1.available()!=0)\n  {     \n    SigQ[k]= Serial1.read();  \n    Serial.write(SigQ[k]);\n    k+=1;\n  }\n}\n\nvoid ShowSerialData()\n{\n  while( Serial1.available()!=0)\n    Serial.write( Serial1.read());\n}\n</code></pre>"},{"location":"Products/Crowtail/crowtail--adjustable-infrared-sensor.html","title":"Crowtail- Adjustable Infrared Sensor","text":""},{"location":"Products/Crowtail/crowtail--adjustable-infrared-sensor.html#introduction","title":"Introduction","text":"<p>This infrared distance switch features a high-sensitivity photoreflector to perform distance detection function,ranging from 3cm to 50cm. When the infrared light emitted by the emitter gets reflected on a surface that blocked it, the phototransistor can pick up the signal for distance calculation. Also a potentiometer for adjustment is arranged for easy and clear use. It is small, easy to use/assemble, and inexpensive. Useful for robotics, interactive media, industrial assembly line, etc. Model: CT0036AIS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--adjustable-infrared-sensor.html#features","title":"Features","text":"<ul> <li>Power supply: 5V</li> <li>Current: 100mA</li> <li> <p>Range: 3-50cm adjustable</p> <ul> <li>Red: +5V</li> <li>Yellow: Signal</li> <li>Black: GND</li> <li>Wire length: 20cm</li> <li>Dimensions(mm):45.0(L)x23.4(W)x23.4(H)</li> </ul> </li> </ul>"},{"location":"Products/Crowtail/crowtail--adjustable-infrared-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--adjustable-infrared-sensor.html#hardware","title":"Hardware","text":"<p>Connect this sensor to your Arduino/Crowduino digital pins( D2 for example). When there is an object behind this sensor, the output would be low. </p>"},{"location":"Products/Crowtail/crowtail--adjustable-infrared-sensor.html#programming","title":"Programming","text":"<p>1.Download the following program to Arduino, Please refer to here</p> <pre><code>void setup()  {\n Serial.begin(9600);\n pinMode(2,INPUT);\n}\nvoid loop()  {\n while(1)  {\n   delay(500);\n   if(digitalRead(2)==LOW)  {\n     Serial.println(\"object detected.\");\n   }\n   else  {\n     Serial.println(\"no object detected.\");\n   }\n }\n}\n</code></pre> <p>2.open the serial monitor , and set the baudrate to 9600, you will see the output changes with the object behind this sensor or not.</p> <p>if no object:  have object: </p>"},{"location":"Products/Crowtail/crowtail--air-quality-sensor.html","title":"Crowtail- Air Quality Sensor","text":""},{"location":"Products/Crowtail/crowtail--air-quality-sensor.html#description","title":"Description","text":"<p>This sensor is designed for comprehensive monitor over indoor air condition. It's responsive to a wide scope of harmful gases, as carbon monixide, alcohol, acetone, thinner, formaldehyde and so on. Due to the measuring mechanism, this sensor can not output specific data to describe target gases' concentrations quantitatively. But it's still competent enough to be used in applications that require only qualitative results, like auto refresher sprayers and auto air cycling systems. Model: CT009989A</p> <p></p>"},{"location":"Products/Crowtail/crowtail--air-quality-sensor.html#features","title":"Features","text":"<ul> <li>Responsive to a wide scope of target gases</li> <li>Cost efficient</li> <li>Durable</li> <li>Compatible with 5V</li> <li>Dimensions(mm):40.0(L)x20.0(W)x10.2(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--air-quality-sensor.html#cautions","title":"Cautions","text":"<ul> <li>Requires relatively clean air as an initial condition.</li> <li>Long time exposure to highly polluted air can significantly weaken its sensitivity.</li> <li>Coffre-fort et armoire forte.</li> </ul>"},{"location":"Products/Crowtail/crowtail--air-quality-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--air-quality-sensor.html#with-arduino","title":"With Arduino","text":"<p>As described in Introduction, this sensor does better in providing qualitative results over a wide scope of target gases. In this demo, we define 4 statuses for reference in the .cpp file. They are:</p> <pre><code>a. air fresh -- indicating a good air condition\nb. low pollution -- indicating a rather low concentration of target gases exist.\nc. high pollution(without \"Force signal active\" message printed on serial monitor) -- you should be aware of the pollution level and consider if some measures could be taken.\nd. high pollution(with \"Force signal active\" message printed on serial monitor) -- instant measures should be taken to improve the air quality.\n</code></pre> <p>We encapsulated the decision structure in a .cpp file. You can find info in there on how to modify the thresholds. Let's try it out!</p>"},{"location":"Products/Crowtail/crowtail--air-quality-sensor.html#getting-started","title":"Getting Started","text":"<p>1. Connect the Crowtail- Air Quality Sensor to A0 port as shown in the above picture.  [</p> <p>2. Download the File :AirQuality_Sensor Library</p> <p>3. Wait at least 2 minutes after powering on for heat-up of the sensor. Then open the example below by the path: File -&gt; Example -&gt;AirQuality-&gt;AirQuality_Sensor</p> <pre><code>&lt;syntaxhighlight lang=\"Arduino\"&gt;\n#include\"AirQuality.h\"\n#include\"Arduino.h\"\nAirQuality airqualitysensor;\nint current_quality =-1;\nvoid setup()\n{\n    Serial.begin(9600);\n    airqualitysensor.init(14);\n}\nvoid loop()\n{\n    current_quality=airqualitysensor.slope();\n    if (current_quality &gt;= 0)// if a valid data returned.\n    {\n        if (current_quality==0)\n            Serial.println(\"High pollution! Force signal active\");\n        else if (current_quality==1)\n            Serial.println(\"High pollution!\");\n        else if (current_quality==2)\n            Serial.println(\"Low pollution!\");\n        else if (current_quality ==3)\n            Serial.println(\"Fresh air\")\n}\n}\n</code></pre> <p>4.When you upload the code complete,you can see the result via the serial port debug window.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--air-quality-sensor.html#resource","title":"Resource","text":"<ul> <li>Crowtail- Air Quality Sensor eagle files</li> <li>AirQuality_Sensor Library</li> </ul>"},{"location":"Products/Crowtail/crowtail--am2302-humidity26temperature-sensor.html","title":"Crowtail- AM2302 Humidity&Temperature Sensor","text":""},{"location":"Products/Crowtail/crowtail--am2302-humidity26temperature-sensor.html#description","title":"Description","text":"<p>The module contains a AM2302 temperature &amp; humidity sensor that is a complex sensor with a calibrated digital signal out.It use digital module acquisition technology and the temperature&amp;humidity sensor technology.Sensor consists of a resistance type moisture element and a NTC temperature measuring element. Because of single wire serial interface, it is easy to use the module.</p> <p>Model: CT009180A</p> <p></p>"},{"location":"Products/Crowtail/crowtail--am2302-humidity26temperature-sensor.html#specification","title":"Specification","text":"<p>Dimensions(mm):43.2(L)x20.0(W)x9.5(H)</p> <p></p>"},{"location":"Products/Crowtail/crowtail--am2302-humidity26temperature-sensor.html#usage","title":"Usage","text":"<p>This demo is going to show you how to read temperature and humidity information from this Crowtail- AM2302 Humidity&amp;Temperature Sensor.</p> <p>1.Hardware Connection The Temperature and Humidity sensor is connecting to digital port A0 of Crowtail- Base Shield.</p> <p></p> <p>2.Download AM2302 Humidity&amp;Temperature Sensor library for Arduino boards with 16MHz XTAL; Unzip and put it in the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries;</p> <p>3.Open \u201cDHTtester\u201d example via the path: File --&gt; Examples --&gt; DHT --&gt; DHTtester.</p> <pre><code>// Example testing sketch for various DHT humidity/temperature sensors\n\n#include \"DHT.h\"\n\n#define DHTPIN A0     // what pin we're connected to\n\n// Uncomment whatever type you're using!\n// #define DHTTYPE DHT11   // DHT 11 \n #define DHTTYPE DHT22   // DHT 22  (AM2302)\n//#define DHTTYPE DHT21   // DHT 21 (AM2301)\n\n// Connect pin 1 (on the left) of the sensor to +5V\n// Connect pin 2 of the sensor to whatever your DHTPIN is\n// Connect pin 4 (on the right) of the sensor to GROUND\n// Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor\n\nDHT dht(DHTPIN, DHTTYPE);\n\nvoid setup() {\n  Serial.begin(9600); \n  Serial.println(\"DHTxx test!\");\n\n  dht.begin();\n}\n\nvoid loop() {\n // Reading temperature or humidity takes about 250 milliseconds!\n // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)\n float h = dht.readHumidity();\n float t = dht.readTemperature();\n\n // check if returns are valid, if they are NaN (not a number) then something went wrong!\n if (isnan(t) || isnan(h)) {\n   Serial.println(\"Failed to read from DHT\");\n } else {\n   Serial.print(\"Humidity: \"); \n   Serial.print(h);\n   Serial.print(\"\u00a0%\\t\");\n   Serial.print(\"Temperature: \"); \n   Serial.print(t);\n   Serial.println(\" *C\");\n  }\n}\n</code></pre> <p>4.Upload it into your Arduino board and open the serial monitor to observe the temperature and relative humidity information of the environment.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--am2302-humidity26temperature-sensor.html#resource","title":"Resource","text":"<ul> <li>Crowtail- AM2302 Humidity&amp;Temperature Sensor eagle files</li> <li>AM2302 Humidity&amp;Temperature Sensor library</li> </ul>"},{"location":"Products/Crowtail/crowtail--analog-grayscale-sensor.html","title":"Crowtail- Analog Grayscale Sensor","text":""},{"location":"Products/Crowtail/crowtail--analog-grayscale-sensor.html#description","title":"Description","text":"<p>Here comes Elecrow's new Analog Ambient Light Sensor. Brand new design and much more convenient to use.This module help you to detect the light density and reflect the analog voltage signal back to Arduino controller. You can set the threshold of voltage level to trigger motors, relays or other actuators.</p> <p>Model: CT010448A</p> <p></p>"},{"location":"Products/Crowtail/crowtail--analog-grayscale-sensor.html#specification","title":"Specification","text":"<ul> <li>Supply Voltage: 3.3V to 5V</li> <li>Interface: Analog</li> <li>Dimensions(mm):20.0(L)x20.0(W)x6.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--analog-grayscale-sensor.html#usage","title":"Usage","text":"<p>Here is an example showing how to turn on the Crowtail- Analog Grayscale Sensor.</p> <p>1. Plug it onto the Analog port 0 of Crowtail - Base Shield using a Crowtail cable.</p> <p>2.Plug the Crowtail - Base Shield onto Arduino.</p> <p>3. Connect Arduino to PC by using a USB cable.</p> <p></p> <p>4. Copy and paste code below to a new Arduino sketch, and upload it to your Arduino.</p> <pre><code>void setup()\n{\n  Serial.begin(9600); // open serial port, set the baud rate to 9600 bps\n}\nvoid loop()\n{\n      int val;\n      val=analogRead(0);   //connect grayscale sensor to Analog 0\n      Serial.println(val,DEC);//print the value to serial        \n      delay(100);\n}\n</code></pre> <p>5.When you upload the code complete,you can see the led light and you can measure the gray of different objects and see the result via the serial port debug window</p> <p></p>"},{"location":"Products/Crowtail/crowtail--analog-grayscale-sensor.html#resource","title":"Resource","text":"<ul> <li>Crowtail- Analog Grayscale Sensor eagle file</li> </ul>"},{"location":"Products/Crowtail/crowtail--analog-gyro.html","title":"Crowtail- Analog Gyro","text":""},{"location":"Products/Crowtail/crowtail--analog-gyro.html#description","title":"Description","text":"<p>Crowtail- Analog Gyro is based on an angular velocity sensor(Murata-ENC-03R) that uses the phenomenon of Coriolis force.which is generated when a rotational angular velocity is applied to thevibrator.One sensor detects rotation on one axis.</p> <p>Model: CT0015AG</p> <p></p>"},{"location":"Products/Crowtail/crowtail--analog-gyro.html#feature","title":"Feature","text":"<ul> <li>Standard Crowtail Interface</li> <li>Input Voltage:5V</li> <li>Light Weight</li> <li>High Speed</li> <li>Measure X-axis Angular Velocity</li> <li>Dimensions(mm):20.0(L)x20.0(W)x6.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--analog-gyro.html#usage","title":"Usage","text":"<p>The module detects one-axis rotation with analog signal.</p> <p>1.Hardware Connection</p> <p>Connect it to A0 port of Crowtail - Base Shield,Plug the Grove - Base Shield into Arduino/Crowduino and connect them to PC using a USB cable.</p> <p></p> <p>2.Upload the below code.</p> <pre><code>int sensorPin = A0;             // select the input pin for the sensor\n\nfloat reference_Value=0;\n\nint sensorValue = 0;            // variable to store the value coming from the sensor\n\nvoid setup() {\n\n   int i;\n   float sum=0;\n   pinMode(sensorPin, INPUT);\n   Serial.begin(9600);\n   Serial.println(\"Please do not rotate it before calibrate!\");\n   Serial.println(\"Get the reference value:\");\n\n   for(i=0;i&lt;1000;i++)\n   {\n       // read the value from the sensor:\n       sensorValue = analogRead(sensorPin);\n       sum += sensorValue;\n       delay(5);\n   }\n   reference_Value = sum/1000.0;\n   Serial.println(reference_Value);\n   Serial.println(\"Now you can begain your test!\");\n}\n\nvoid loop() \n{\n\n   double angularVelocity;\n   sensorValue = analogRead(sensorPin);\n   angularVelocity =((double)(sensorValue-reference_Value)*4930.0)/1023.0/0.67; //get the angular velocity\n   Serial.print(angularVelocity);\n   Serial.println(\"deg/s\");\n   Serial.println(\" \");\n   delay(500);\n}\n</code></pre> <p>3.Now, it is time to the calibration. Put the sensor on your desk horizontally, and then press the Reset button on the Crowduino, and then Open the serial tool:</p> <p></p> <p>4.As you see the \"Now you can begin your test\", that means the calibration done. You can use the sensor now. Rotating direction can reference the following picture:</p> <p></p>"},{"location":"Products/Crowtail/crowtail--analog-gyro.html#resource","title":"Resource","text":"<ul> <li>Analog_Gyro Program</li> <li>Crowtail- Analog Gyro eagle files eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--base-shield.html","title":"Crowtail- Base Shield","text":""},{"location":"Products/Crowtail/crowtail--base-shield.html#description","title":"Description","text":"<p>The Crowtail- Base Shield plugs into Arduino and is the foundation of the Crowtail system. ALL I/O ports of the Arduino are exposed and adapted into Crowtail connectors which include digital I/O,analog I/O,and specialized ports(I2C\uff0cUART).</p> <p>Model:CT0001BS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--base-shield.html#features","title":"Features","text":"<ul> <li>Arduino UNO and Duemilanove compatible</li> <li>Compatible with all Crowtail modules</li> <li>11 Digital connectors (D2-D12)</li> <li>6 Analog connectors (A0-A5)</li> <li>2 I2C sockets</li> <li>NO SPI socket</li> <li>UART/D0-D1 connector</li> <li>ISP/ICSP header</li> <li>Green Power indicator LED</li> <li>Right angle reset button with red LED reset indicator</li> <li>Stacking connectors</li> <li>Simplified screen printing</li> <li>Dimensions(mm):69.5(L)x55.2(W)x23.5(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--base-shield.html#interface-function","title":"Interface Function","text":"<p>The purpose of the base shield is to allow easy connection of any microprocessor input and output pins to the Crowtail units. For a more detailed examination of the Base Board, please refer to the following diagram: </p> <p>D port:Digital I/O port.</p> <p>A port:Analog I/O port.</p> <p>U port:UART port.</p> <p>I port:IIC port.</p> <p>This is a pecular interface logo of all the Crowtail products. It may you easy to differentiate which module is connect to the digital port or other port.</p>"},{"location":"Products/Crowtail/crowtail--base-shield.html#resources","title":"Resources","text":"<ul> <li>Crowtail- Base Shield eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--blutooth-low-energy-module.html","title":"Crowtail- Blutooth Low Energy Module","text":""},{"location":"Products/Crowtail/crowtail--blutooth-low-energy-module.html#description","title":"Description","text":"<p>Crowtail- Blutooth Low Energy Module HM-13 is an easy to use module compatible with the existing Crowtail Base Shield, and designed for transparent wireless serial connection setup. The serial port Bluetooth module is fully qualified BT Version V4.0 EDR + BLE dual mode with complete 2.4GHz radio transceiver and baseband. It has the smallest footprint of 13.8mm x 18mm. Hope it will simplify your overall design/development cycle.</p> <p>Model: CT0018BLE</p> <p></p>"},{"location":"Products/Crowtail/crowtail--blutooth-low-energy-module.html#features","title":"Features","text":"<ul> <li>BT Version: Bluetooth Specification V4.0 BLE</li> <li>Working frequency:2.4GHz ISM band</li> <li>UART send and receive max bytes is 512.</li> <li>Other device to module in SPP mode: 90 Bytes per packet.</li> <li>Other device to module in BLE mode: 20 Bytes per packet.</li> <li>Two data transmission mode, balance mode and high speed mode.</li> <li>RF Power: -23dbm, -6dbm, 0dbm, 6dbm.</li> <li>Asynchronous Speed: 3K Bytes</li> <li>Synchronous Speed: 3K Bytes</li> <li>Service: Slave SPP, Peripheral BLE, UUID FFE0,FFE1</li> <li>Long range: SPP 30 meters, BLE 60 meters.</li> <li>Power: SPP 13.5mA, BLE 9.5mA.</li> <li>Working temperature:\u20135 ~ +65 Centigrade</li> <li>Dimensions(mm):40.0(L)x20.0(W)x6.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--blutooth-low-energy-module.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--blutooth-low-energy-module.html#connecting-bluetooth-to-pc-through-usb-uart-converter","title":"Connecting Bluetooth to PC through USB-UART converter","text":"<p>The Bluetooth provides a serial port with standard Crowtail socket, most USB-UART converter is able to use. In here we use a USBSerial adapter to connect Bluetooth and PC. </p>"},{"location":"Products/Crowtail/crowtail--blutooth-low-energy-module.html#connecting-bluetooth-to-arduino","title":"Connecting Bluetooth to Arduino","text":"<p>Since Arduino Uno have no Crowtail socket, we use Crowtail-_Base_Shield to instead. As an example, D2 and D3 are used as software UART, so plug the Crowtail cable into \"U2\" socket </p>"},{"location":"Products/Crowtail/crowtail--blutooth-low-energy-module.html#software-instruction","title":"Software Instruction","text":""},{"location":"Products/Crowtail/crowtail--blutooth-low-energy-module.html#conventions","title":"Conventions","text":"<ul> <li>In EDR mode, only slave can be configured while either master or slave can be in BLE mode.</li> <li> <p>Factory default setting:</p> <ul> <li>EDR Name HMSoft, Slave role, PinCode 1234</li> <li>BLE Name HMSoft, Slave role, PinCode 000000</li> <li>Baud: 115200, N, 8, 1;</li> <li> <p>AT Command format:</p> </li> <li> <p>Uppercase AT command format. string format, without any other symbol. (e.g. \\r or \\n).</p> </li> <li>Any incorrect command would be no response.</li> </ul> </li> </ul>"},{"location":"Products/Crowtail/crowtail--blutooth-low-energy-module.html#at-commands","title":"AT Commands","text":"<p>1. Test Command</p> Send Receive Parameter AT OK/ER/Disconnect link None <p>If module is not connected to remote device will receive: \u201cOK\u201d If module has an error, will receive: \u201cER\u201d If Module has connected, module will disconnected from remote device, if \u201cAT + NOTI\u201d is setup to 1, will receive information string 2. Query module EDR address</p> Send Receive Parameter AT+ADDE? OK+ Get: MAC None <p>3. Query module BLE address</p> Send Receive Parameter AT+ADDB? OK+ Get: MAC None <p>4. Query/Set Authentication mode</p> Send Receive Parameter Q: AT+AUTH? OK+ Get:[P1] P1: 0, 1, (Default: 0) 0 \u2013 Not authentication 1 \u2013 Must authentication S: AT+AUTH[P1] OK+ Set:[P1] <p>AT+AUTH0: allow made an insecure connection. AT+AUTH1: every connection must with authentication. 5. Query/Set A to B mode</p> Send Receive Parameter Q: AT+ATOB? OK+ Get:[P1] P1: 0, 1, (Default: 0) 0 \u2013 Not Open ATOB 1 \u2013 Open ATOB mode S: AT+ATOB[P1] OK+ Set:[P1] <p>This command must work with AT+MODE0 command. When A device (SPP mode) connect to the module and B device (BLE mode) is also connect to the module, The data string from A device send to the module will send to B device. The data string from B device send to the module is also send to the A device. 6. Query/Set baud rate</p> Send Receive Parameter Q: AT+BAUD? OK+ Get:[P1] P1: 1~7, (Default: 6). 1 - 4800 2 \u2013 9600 3 \u2013 19200 4 \u2013 38400 5 \u2013 57600 6 \u2013 115200 7 - 230400 S: AT+BAUD[P1] OK+ Set:[P1] <p>7. Clear bond information</p> Send Receive Parameter AT+BONDE OK+BONDE Clear EDR bond info AT+BONDB OK+BONDB Clear BLE bond info <p>BLE mode not supports it yet. 8. Clear Last Connected EDR Device Address</p> Send Receive Parameter AT+CLEAE OK+CLEAE None <p>9. Clear Last Connected BLE Device Address</p> Send Receive Parameter AT+CLEAB OK+CLEAB None <p>10. Query/Set Module DUAL Work Mode</p> Send Receive Parameter Q: AT+DUAL? OK+ Get:[P1] P1: 0, 1, (Default: 0) 0 \u2013 Allow dual connect. 1 \u2013 Allow one connect. S: AT+DUAL[P1] OK+ Set:[P1] <p>AT+DUAL0: allow two connections at same time (SPP and BLE). AT+DUAL1: Only allow one connection at same time (SPP or BLE) 11. Query/Set hardware flow control switch</p> Send Receive Parameter AT+FIOW? OK+ Get:[P1] P1: 0, 1,(Default: 0) 0: Hardware flow control off 1: Hardware flow control on AT+FIOW[P1] OK+ Set:[P1] <p>12. Query/Set module data transmission speed mode</p> Send Receive Parameter AT+HIGH? OK+ Get:[P1] P1: 0, 1,(Default: 0) 0: Balance mode 1: High speed mode AT+HIGH[P1] OK+ Set:[P1] <p>In balance mode, we balanced SPP and BLE with a steady speed. In high speed mode, we don\u2019t control speed, so SPP mode will got high speed. In high speed mode, module lost RESETB pin function, but you still could use \u201cAT+RESET\u201d command to reset module. 13. System Help Information</p> Send Receive Parameter AT+HELP? Help Information None <p>14. Query/Set module loaded notify</p> Send Receive Parameter AT+INIT? OK+ Get:[P1] P1: 0, 1,?, (Default: 0) 0: Loaded notify 0ff 1: Loaded notify on AT+INIT[P1] OK+ Set:[P1] <p>When \u201cAT+INIT1\u201d is setup, after module loaded, module will output \u201cOK+INIT\u201d string through UART. 15. Query/Set Module Work Mode</p> Send Receive Parameter Q: AT+MODE? OK+ Get:[P1] P1: 0, 1, (Default: 0) 0 \u2013 Data transmission. 1 \u2013 Remote control. S: AT+MODE[P1] OK+ Set:[ P1] <p>AT+MODE0: Only transfer data when connection establishment. AT+MODE1: Transfer data and response AT commands. 16. Query/Set Notify information</p> Send Receive Parameter Q: AT+NOTI? OK+ Get:[P1] P1: 0, 1, (Default: 0) 0: Don\u2019t Notify 1: Notify S: AT+NOTI[P1] OK+ Set:[ P1] <p>After AT+NOTI1, module will send connect or disconnect string through UART when module state is change: OK+CONE ======== EDR connect OK+LSTE ========= EDR disconnect OK+CONB========= BLE connect OK+LSTB ========= BLE disconnect OK+LSTA ========= except disconnect, module will reset after 500 ms. 17. Query/Set notify mode</p> Send Receive Parameter Q: AT+NOTP? OK+ Get:[P1] P1: 0, 1; default: 0 0: without address 1: with address Q: AT+NOTP[P1] OK+ Set:[ P1] <p>This command must work with \u201cAT+NOTI1\u201d, if this switch is open, when the module connect to disconnect, the prompt string will include the remote address. 18. Query/Set Module EDR name</p> Send Receive Parameter Q: AT+NAME? OK+ Get:[P1] P1: module EDR name, Max length is 12. Default: HMSoft Q: AT+NAME[P1] OK+ Set:[ P1] <p>19. Query/Set Module BLE name</p> Send Receive Parameter Q: AT+NAMB? OK+ Get:[P1] P1: module BLE name, Max length is 12. Default: HMSoft S: AT+NAMB[P1] OK+ Set:[ P1] <p>20. Query/Set PIO1 output status (System LED)e</p> Send Receive Parameter Q: AT+PIO1? OK+ Get:[P1] P1: 0, 1 0: Unconnected Output 500ms High 500ms Low, Connected output High. 1: Unconnected output Low, Connected output High. Default: 0 S: AT+ PIO1 [P1] OK+ Set:[ P1] <p>21. Query/Set PIO output status</p> Send Receive Parameter Q: AT+PIO[P1]? OK+ Get:[P1][P2] P1: 2~B (HM-12) P2: 2~3 (HM-13) 0: Output Low 1: Output High ?: Query S: AT+ PIO[P1][P2] OK+ Set:[P1][P2] <p>22. Query/Set EDR Pin Code</p> Send Receive Parameter Q: AT+PINE? OK+ Get:[P1] P1: module EDR Code Max length: 6 Default: 1234 S: AT+PINE[P1] OK+ Set:[P1] <p>23. Query/Set BLE Pin Code</p> Send Receive Parameter Q: AT+PINB? OK+ Get:[P1] P1: module BLE Code 000000~999999 Default: 000000 S: AT+PINB[P1] OK+ Set:[P1] <p>24. Query/Set UART parity bit</p> Send Receive Parameter Q: AT+PARI? OK+ Get:[P1] P1: 0, 1, 2, (Default: 0) 0: Parity None 1: Parity even 2: Parity odd S: AT+PARI[P1] OK+ Set:[P1] <p>25. Restore all setup value to factory setup</p> Send Receive Parameter AT+RENEW OK+RENEW None <p>26. Restart module</p> Send Receive Parameter AT+RESET OK+RESET None <p>27. Query BLE RSSI value</p> Send Receive Parameter AT+RSSB? OK+RSSB: [P1] P1: RSSI value 9999: No connection 9998: Try later 9997: Read error Xxxx: RSSI value <p>This command must use after \u201cAT+MODE1\u201d is setup. This command is only used by remote Bluetooth device. 28. Query EDR RSSI value</p> Send Receive Parameter AT+RSSE? OK+RSSE: [P1] P1: RSSI value 9999: No connection 9998: Try later 9997: Read error Xxxx: RSSI value <p>29. Query Last Connected EDR Device Address</p> Send Receive Parameter AT+RADE? OK+Get:MAC Address None <p>30. Query Last Connected BLE Device Address</p> Send Receive Parameter AT+RADB? OK+Get:MAC Address None <p>31. Query/Set Master and Slaver Role</p> Send Receive Parameter AT+ROLB? OK+ Get:[P1] P1: 0, 1 (default: 0) 0: Peripheral 1: Central AT+ROLB[P1] OK+ Set:[P1] <p>This command will take effect after module next power on or reset. 32. Query/Set EDR work mode</p> Send Receive Parameter Q: AT+SCAN? OK+ Get:[P1] P1: 0, 1, (Default: 0) 0: Discovery and connectable 1: Only connectable S: AT+SCAN[P1] OK+ Set:[P1] <p>33. Query/Set UART stop bit</p> Send Receive Parameter Q: AT+STOP? OK+ Get:[P1] P1: 0, 1, (Default: 0) 0: 1 stop bit 1: 2 stop bits S: AT+STOP[P1] OK+ Set:[P1] <p>34. Query Software Version</p> Send Receive Parameter AT+VERR? AT+VERS? Version Information None"},{"location":"Products/Crowtail/crowtail--blutooth-low-energy-module.html#configure-the-bluetooth-module-with-serial-under-windows","title":"Configure the Bluetooth module with Serial under Windows","text":"<p>This section shows how to configure Bluetooth with PC, some basic methods of setting could be learn. Set up hardware connection refer to \u201cHardware Installation\u201d section. You will find the blue LED on the module flashes illustrate no connection is set up. Open a serial terminal and set Baud Rate:115200, Databits: 8, Stopbits: 1 and No Flow Control. Send \u201cAT\u201d to Bluetooth with the serial terminal and \u201cOK\u201d will be return if all goes well. The Bluetooth only respond AT commands when no connection was set up, or all commands were seen as string and sent out. You can distinguish the status through LED indicates.    Then some useful configurations could be sent. Here\u2019s are some samples of commands and response. 1. Test serial connection, send \u201cAT\u201d, will return \u201cOK\u201d. 2. Restore factory settings, send \u201cAT+RENEW\u201d, return \u201cOK+RENEW\u201d. 3. Reset baud rate of serial port, send \u201cAT+BAUD2\u201d, return \u201cOK+Set:2\u201d. 4. Enable authentication, send \u201cAT+AUTH1\u201d, return \u201cOK+Set:1\u201d. 5. Reset the Bluetooth, send \u201cAT+RESET\u201d, return \u201dOK+RESET\u201d. 6. Query firmware version, send \u201cAT+VERS?\u201d, return \u201cOK+Get:HMSoftV217\u201d. 7. Query MAC of EDR, send \u201cAT+ADDE?\u201d, return \u201cOK+Get:000E0E002074\u201d. 8. Query MAC of BLE, send \u201cAT+ADDB?\u201d, return \u201cOK+Get:000E0B002074\u201d. 9. Set the name of EDR, send \u201cAT+NAMEHM-13-EDR\u201d, return \u201cOK+Set:HM-13-EDR\u201d. 10. Set the name of BLE, send \u201cAT+NAMEHM-13-BLE\u201d, return \u201cOK+Set:HM-13-BLE\u201d. 11. Set the password of EDR, send \u201cAT+PINE123451\u201d, return \u201cOK+Set:123451\u201d. 12. Set the password of BLE, send \u201cAT+PINB123451\u201d, return \u201cOK+Set:123451\u201d. 13. Enable discovery and connectable, send \u201cAT+SCAN0\u201d, return \u201cOK+Set:0\u201d. 14. Enable notify information of connection, send \u201cAT+NOTI1\u201d, return \u201cOK+Set:1\u201d. 15. Notify information include address, send \u201cAT+NOTP1\u201d, return \u201cOK+Set:1\u201d. 16. Enable user key, send \u201cAT+PIO01\u201d, return \u201cOK+Set:1\u201d. 17. Set to Central mode, send \u201cAT+ROLB1\u201d, return \u201cAT+ROLB1\u201d. Or Set to Peripheral mode, send \u201cAT+ROLB0\u201d, return \u201cAT+ROLB0\u201d.  </p>"},{"location":"Products/Crowtail/crowtail--blutooth-low-energy-module.html#data-transmission-between-two-arduinos","title":"Data transmission between Two Arduinos","text":"<p>1.Prepare a pair of Bluetooth, and Arduino or other platform to control them. Here we use two Arduino Uno. 2.Set up the connection as mentioned in section \u201cHardware Installation\u201d. 3.The program of Central and Peripheral use the same code, the only difference is the micro define at the beginning of the program. To assign the Bluetooth to Central role, Just need to modify the text to \u201c#define MASTER 1\u201d, or \u201c#define MASTER 0\u201d if Peripheral role was assigned. 4.The initialisation program flow please refer to the following flow chart. First of all we need to distinguish the presetting baud rate of the Bluetooth. After this, send commands to restore factory settings, and change baud rate from 115200 to 9600 since software serial will not working well at high baud rate. Then other parameters were configured to the Bluetooth with Reset command in the final.    After the initialisation, the Central and Peripheral will do different things, the Central will send message to Peripheral interval and print what received from Peripheral while the Peripheral only responds the Central. 5.Click here to download the test code and open HM-13_SW.ino with Arduino IDE, compile and download to Arduino Uno. Remember to configure the Bluetooth to different role by modify the macro at the beginning. 6.After downloading program, open two serial terminal windows, the LEDs on Bluetooth will flash, several seconds later, they stop to flash and keep on, this indicates that they connected to each other. According to the program is written, the Central sends message to the Peripheral continually and get feedback every time.    </p>"},{"location":"Products/Crowtail/crowtail--blutooth-low-energy-module.html#resource","title":"Resource","text":"<ul> <li>Blutooth Low Energy Module Program</li> <li>Blutooth Low Energy Module eagle files</li> <li>HM-13 reference</li> </ul>"},{"location":"Products/Crowtail/crowtail--bmp180-barometer.html","title":"Crowtail- BMP180 Barometer","text":""},{"location":"Products/Crowtail/crowtail--bmp180-barometer.html#description","title":"Description","text":"<p>The BMP180 offers a pressure measuring range of 300 to 1100 hPa with an accuracy down to 0.02 hPa in advanced resolution mode. It\u2019s based on piezo-resistive technology for high accuracy, ruggedness and long term stability. These come factory-calibrated, with the calibration coefficients already stored in ROM. What makes this sensor great is that it is nearly identical to its former rev, the BMP085!</p> <p>Model: CT0017BMP</p> <p></p>"},{"location":"Products/Crowtail/crowtail--bmp180-barometer.html#features","title":"Features","text":"<ul> <li>Digital two wire (I2C) interface</li> <li>Wide barometric pressure range</li> <li>Flexible supply voltage range</li> <li>Ultra-low power consumption</li> <li>Low noise measurement</li> <li>Factory-calibrated</li> <li>-40 to +85\u00b0C operational range, \u00b12\u00b0C temperature accuracy</li> <li>I2C address: 0x77</li> </ul>"},{"location":"Products/Crowtail/crowtail--bmp180-barometer.html#specifications","title":"Specifications","text":"<p>Dimensions(mm):40.0(L)x20.0(W)x6.8(H)</p> Item Min Typical Max Unit Voltage 3 5.0 5.5 VDC Current 1.1 / 20 uA Pressure Range 300 / 1100 hPa Faster I2C data transfer / / 3.4 MHZ"},{"location":"Products/Crowtail/crowtail--bmp180-barometer.html#usage","title":"Usage","text":"<p>Barometric condition is one of the criteria used to predict coming change in weather and deduce altitude above sea level. Here is a demo to show you how to read the barometric data from this Crowtail - Barometer Sensor (BMP180).</p> <p>1.Hardware connection</p> <p>Connect it to IIC port of Crowduino.</p> <p></p> <p>2.Download the library;Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <pre><code>// Your sketch must #include this library, and the Wire library.\n// (Wire is a standard library included with Arduino.):  \n#include &lt;SFE_BMP180.h&gt;\n#include &lt;Wire.h&gt; \n// You will need to create an SFE_BMP180 object, here called \"pressure\": \nSFE_BMP180 pressure;\n#define ALTITUDE 1655.0 \nvoid setup()\n{\n Serial.begin(9600);\n Serial.println(\"REBOOT\"); \n // Initialize the sensor (it is important to get calibration values stored on the device).\n if (pressure.begin())\n   Serial.println(\"BMP180 init success\");\n else\n {\n   // Oops, something went wrong, this is usually a connection problem,\n   // see the comments at the top of this sketch for the proper connections.\n   Serial.println(\"BMP180 init fail\\n\\n\");\n   while(1); // Pause forever.\n }\n} \nvoid loop()\n{ \n char status;\n double T,P,p0,a; \n // Loop here getting pressure readings every 10 seconds. \n // If you want sea-level-compensated pressure, as used in weather reports,\n // you will need to know the altitude at which your measurements are taken.\n // We're using a constant called ALTITUDE in this sketch:  \n Serial.println();\n Serial.print(\"provided altitude: \");\n Serial.print(ALTITUDE,0);\n Serial.print(\" meters, \");\n Serial.print(ALTITUDE*3.28084,0);\n Serial.println(\" feet\");  \n // If you want to measure altitude, and not pressure, you will instead need\n // to provide a known baseline pressure. This is shown at the end of the sketch. \n // You must first get a temperature measurement to perform a pressure reading.  \n // Start a temperature measurement:\n // If request is successful, the number of ms to wait is returned.\n // If request is unsuccessful, 0 is returned.\n  status = pressure.startTemperature();\n if (status\u00a0!= 0)\n {\n   // Wait for the measurement to complete:\n   delay(status);\n   // Retrieve the completed temperature measurement:\n   // Note that the measurement is stored in the variable T.\n   // Function returns 1 if successful, 0 if failure.\n   status = pressure.getTemperature(T);\n   if (status\u00a0!= 0)\n   {\n     // Print out the measurement:\n     Serial.print(\"temperature: \");\n     Serial.print(T,2);\n     Serial.print(\" deg C, \");\n     Serial.print((9.0/5.0)*T+32.0,2);\n     Serial.println(\" deg F\");\n\n     // Start a pressure measurement:\n     // The parameter is the oversampling setting, from 0 to 3 (highest res, longest wait).\n     // If request is successful, the number of ms to wait is returned.\n     // If request is unsuccessful, 0 is returned.\n     status = pressure.startPressure(3);\n     if (status\u00a0!= 0)\n     {\n       // Wait for the measurement to complete:\n       delay(status);\n       // Retrieve the completed pressure measurement:\n       // Note that the measurement is stored in the variable P.\n       // Note also that the function requires the previous temperature measurement (T).\n       // (If temperature is stable, you can do one temperature measurement for a number of pressure measurements.)\n       // Function returns 1 if successful, 0 if failure.\n       status = pressure.getPressure(P,T);\n       if (status\u00a0!= 0)\n       {\n         // Print out the measurement:\n         Serial.print(\"absolute pressure: \");\n         Serial.print(P,2);\n         Serial.print(\" mb, \");\n         Serial.print(P*0.0295333727,2);\n         Serial.println(\" inHg\");\n         // The pressure sensor returns abolute pressure, which varies with altitude.\n         // To remove the effects of altitude, use the sealevel function and your current altitude.\n         // This number is commonly used in weather reports.\n         // Parameters: P = absolute pressure in mb, ALTITUDE = current altitude in m.\n         // Result: p0 = sea-level compensated pressure in mb \n         p0 = pressure.sealevel(P,ALTITUDE); // we're at 1655 meters (Boulder, CO)\n         Serial.print(\"relative (sea-level) pressure: \");\n         Serial.print(p0,2);\n         Serial.print(\" mb, \");\n         Serial.print(p0*0.0295333727,2);\n         Serial.println(\" inHg\"); \n         // On the other hand, if you want to determine your altitude from the pressure reading,\n         // use the altitude function along with a baseline pressure (sea-level or other).\n         // Parameters: P = absolute pressure in mb, p0 = baseline pressure in mb.\n         // Result: a = altitude in m.\n\n         a = pressure.altitude(P,p0);\n         Serial.print(\"computed altitude: \");\n         Serial.print(a,0);\n         Serial.print(\" meters, \");\n         Serial.print(a*3.28084,0);\n         Serial.println(\" feet\");\n       }\n       else Serial.println(\"error retrieving pressure measurement\\n\");\n     }\n     else Serial.println(\"error starting pressure measurement\\n\");\n   }\n   else Serial.println(\"error retrieving temperature measurement\\n\");\n }\n else Serial.println(\"error starting temperature measurement\\n\"); \n delay(5000);  // Pause for 5 seconds.\n}\n</code></pre> <p>3.Create a new Arduino sketch and paste the codes below to it or open the code directly by the path:File -&gt; Example -&gt;SFE_BMP180_example-&gt;SFE_BMP180_example.</p> <p>4.Open the serial monitor.You should see the data from BMP0180.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--bmp180-barometer.html#resource","title":"Resource","text":"<ul> <li>BMP180 Barometer Program</li> <li>Crowtail- BMP180 Barometer eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--bmp280-barometer-sensor.html","title":"Crowtail- BMP280 Barometer Sensor","text":""},{"location":"Products/Crowtail/crowtail--bmp280-barometer-sensor.html#introduction","title":"Introduction","text":"<p>The Crowtail-BMP280 Barometer Sensor is a breakout board for Bosch BMP280 high-precision and low-power digital barometer.It can be used to measure temperature and atmospheric pressure accurately. It can be connected to a microcontroller with I2C. As the atmospheric pressure changes with altitude, it can also measure approximate altitude of a place. We have also provided highly abstracted library to make this product easier to use.</p> <p>Model: CRT00289B</p> <p></p>"},{"location":"Products/Crowtail/crowtail--bmp280-barometer-sensor.html#featrue","title":"Featrue","text":"<ul> <li>Smaller footprint, lower power consumption, lower noise measurements, lower RMS noise</li> <li>Higher resolutions for pressure and temperature, higher measuring rate</li> <li>Easy-to-use Crowtail Compatible Interface</li> <li>Can be used as an altimeter with accuracy of \u00b11 meter</li> </ul>"},{"location":"Products/Crowtail/crowtail--bmp280-barometer-sensor.html#specification","title":"Specification","text":"<ul> <li>Supply Voltage: 5V or 3.3V</li> <li>Current Consumption: 0.6 mA</li> <li>Barometric Pressure Measure</li> </ul> <pre><code> Range: 300 \u2013 1100 hPa\n Accuracy: \u00b11.0 hPa\n</code></pre> <ul> <li>Temperature Measurement</li> </ul> <pre><code> Range: -40 to 85\n Accuracy: \u00b11\n</code></pre> <ul> <li>Interface: I2C</li> <li>Crowtail Port: I2C</li> <li>Dimensions(mm):20.0(L)x20.0(W)x9.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--bmp280-barometer-sensor.html#usage","title":"Usage","text":"<p>1. Plug it onto the IIC port of Crowtail - Base Shield using a Crowtail cable.</p> <p>2.Plug the Crowtail - Base Shield onto Arduino.</p> <p>3. Connect Arduino to PC by using a USB cable.</p> <p></p> <p>4.You can find development library here</p> <p>5. Copy and paste code below to a new Arduino sketch, and upload it to your Arduino</p> <pre><code>#include \"BMP280.h\"\n#include &lt;Wire.h&gt;\n\nBMP280 bmp280;\n\nvoid setup()\n{\n  Serial.begin(9600);\n  if(!bmp280.init()){\n    Serial.println(\"Device error!\");\n  }\n}\n\nvoid loop()\n{\n  float pressure;\n\n  //get and print temperatures\n  Serial.print(\"Temp: \");\n  Serial.print(bmp280.getTemperature());\n  Serial.println(\"C\"); // The unit for  Celsius because original arduino don't support speical symbols\n\n  //get and print atmospheric pressure data\n  Serial.print(\"Pressure: \");\n  Serial.print(pressure = bmp280.getPressure());\n  Serial.println(\"Pa\");\n\n  //get and print altitude data\n  Serial.print(\"Altitude: \");\n  Serial.print(bmp280.calcAltitude(pressure));\n  Serial.println(\"m\");\n\n  Serial.println(\"\\n\");//add a line between output of different times.\n\n  delay(1000);\n}\n</code></pre> <p>5.When you upload the code complete,you can see the result via the serial port debug window</p> <p></p>"},{"location":"Products/Crowtail/crowtail--button.html","title":"Crowtail- Button","text":""},{"location":"Products/Crowtail/crowtail--button.html#description","title":"Description","text":"<p>The Crowtail-Button is a momentary push button which rebounds on its own after it is released. The button outputs a HIGH signal when pressed, and LOW when released.</p> <p>Model: CT0002BT</p> <p></p>"},{"location":"Products/Crowtail/crowtail--button.html#features","title":"Features","text":"<ul> <li>Easy to use momentary ON/OFF button</li> <li>Uses Standard 3-pin Crowtail Cables to connect to the Crowtail - Base Shield</li> <li>Dimensions(mm):20.0(L)x20.0(W)x11.4(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--button.html#usage","title":"Usage","text":"<p>Button control LED</p> <p>1.Hardware connection</p> <p></p> <p>2.Upload the following sample sketch to make the LED turn ON and OFF based on input from Crowtial - Button:</p> <pre><code>/*\n Button\n\n Turns on and off a light emitting diode(LED) connected to digital  \n pin 5, when pressing a pushbutton attached to pin 4. \n*/\n\n// set pin numbers:\nconst int buttonPin = 4;     // the number of the pushbutton pin\nconst int ledPin =  5;      // the number of the LED pin\n\n// variables will change:\nint buttonState = 0;         // variable for reading the pushbutton status\n\nvoid setup() {\n // initialize the LED pin as an output:\n pinMode(ledPin, OUTPUT);      \n // initialize the pushbutton pin as an input:\n pinMode(buttonPin, INPUT);     \n}\n\nvoid loop(){\n // read the state of the pushbutton value:\n buttonState = digitalRead(buttonPin);\n\n // check if the pushbutton is pressed.\n // if it is, the buttonState is HIGH:\n if (buttonState == HIGH) {     \n   // turn LED on:    \n   digitalWrite(ledPin, HIGH);  \n } \n else {\n   // turn LED off:\n   digitalWrite(ledPin, LOW); \n }\n}\n</code></pre> <p>3.Press the Botton, you will see the LED lights up.</p>"},{"location":"Products/Crowtail/crowtail--button.html#resource","title":"Resource","text":"<ul> <li>Button Program</li> <li>Crowtail_Button_eagle_files</li> </ul>"},{"location":"Products/Crowtail/crowtail--buzzer.html","title":"Crowtail- Buzzer","text":""},{"location":"Products/Crowtail/crowtail--buzzer.html#description","title":"Description","text":"<p>The buzzer module is for making sound in your project. It sounds when activated by a logic HIGH signal. Connect the buzzer to any of the D(digital) ports of Crowtail- Base Shiled, you can easily make it sounds with setting the related ports to logic HIHG. The buzzer module can be also connected to an analog pluse-width modulation(PWM) output to generate various of tones.</p> <p>Model: CT0003BU</p> <p></p>"},{"location":"Products/Crowtail/crowtail--buzzer.html#features","title":"Features","text":"<ul> <li>Easy to use piezoelectric buzzer</li> <li>Standard 3-pin Crowtail Cables</li> </ul>"},{"location":"Products/Crowtail/crowtail--buzzer.html#specifications","title":"Specifications","text":"<ul> <li>Operating Voltage: 5V</li> <li>Sound Output: \u226585dB</li> <li>Resonant Frequency: 2300\u00b1300Hz</li> <li>Dimensions(mm):20.0(L)x20.0(W)x9.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--buzzer.html#usage","title":"Usage","text":"<p>Follow these simple steps to build a Crowtail circuit using the buzzer:</p> <p>1.Hardware connection Use the Crowtail - Base Shield and connect the Crowtail - Buzzer module to the shield using a designated Crowtail Interface as shown below:</p> <p></p> <p>2.Upload the following sample sketch to make the Buzzer make a beeping noise:</p> <pre><code>#define buzzer 5 //connect Buzzer to digital pin5\nvoid setup() {                \n // initialize the digital pin5 as an output.\n pinMode(buzzer, OUTPUT);     \n}\n\nvoid loop() {\n digitalWrite(buzzer, HIGH);   // set the Buzzer on\n delay(500);                  // for 500ms\n digitalWrite(buzzer, LOW);   // set the Buzzer off\n delay(500);\n}\n</code></pre>"},{"location":"Products/Crowtail/crowtail--buzzer.html#resource","title":"Resource","text":"<ul> <li>Buzzer Program</li> <li>Crowtail_Buzzer_eagle_files</li> </ul>"},{"location":"Products/Crowtail/crowtail--collision-sensor.html","title":"Crowtail- Collision Sensor","text":""},{"location":"Products/Crowtail/crowtail--collision-sensor.html#description","title":"Description","text":"<p>Have you ever been bothered for detecting simple collisions with complex algorithm with an acceleration sensor? The collision sensor is here to simplify the process,. It's also omni directional, stable, and sensitive. Crowtail-collision Sensor can detect whether any collision movement or vibration happens. It will output a low pulse signal when vibration is detected. To make the output signal more reliable and neat, we added a necessary exterior circuit to reduce the noise impact. So, normal shaking will not cause any output. The sensor has a high sensitivity, then you can use it to apply to your project, such as automatic wake-up and power-down for battery management. Its working voltage is 5v which make it compatible with standard Arduino/Crowduino 5V system.</p> <p>Model: CT0061CCS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--collision-sensor.html#specification","title":"Specification","text":"<ul> <li>Wide power supply range DC3.3V to 5V</li> <li>High sensitive</li> <li>RoHS/WEEE lead-free compliant</li> <li>Clock frequency - 16MHz (may be reduced to low energy consumption by up to 1MHz)</li> <li>Dimensions(mm):28.0(L)x20.0(W)x6.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--collision-sensor.html#features","title":"Features","text":"<ul> <li>Long range</li> <li>Wide angle</li> <li>Low consumption</li> <li>DC 3.0-5.5V power supplier</li> </ul>"},{"location":"Products/Crowtail/crowtail--collision-sensor.html#usage","title":"Usage","text":"<p>1. Connect the collision sensor to the Digital port 2 of Crowtail - Basic Shield using a Crowtail cable and connect an LED to Pin 5.</p> <p></p> <p>2.Download Crowtail- Collision Sensor library the library; Unzip and put it in the libraries file : ..\\arduino-1.0\\libraries;</p> <p>3.Open \u201cCrowtail- Collision Sensor\u201d example via the path: File --&gt; Examples --&gt; Crowtail- Collision Sensor.</p> <pre><code>const int sensorPin = 2;   \nconst int ledPin =  5;      // the number of the LED pin\n\n// variables will change:\nint sensorState = 0;      \n\nvoid setup() {\n  // initialize the LED pin as an output:\n  pinMode(ledPin, OUTPUT);      \n  pinMode(sensorPin, INPUT);     \n}\n\nvoid loop(){\n  // read the state of the pushbutton value:\n  sensorState = digitalRead(sensorPin);\n  if (sensorState == HIGH) {     \n    // turn LED on:    \n    digitalWrite(ledPin,LOW);  \n  } \n  else {\n    // turn LED off:\n    digitalWrite(ledPin, HIGH); \n  }\n}\n</code></pre> <p>4.Upload it into your Arduino board and press the sheetmetal ,observe the led.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--collision-sensor.html#resource","title":"Resource","text":"<ul> <li>Crowtail- Collision Sensor Program</li> <li>Crowtail- Collision Sensor eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--current-sensor-kit.html","title":"Crowtail- Current Sensor Kit","text":""},{"location":"Products/Crowtail/crowtail--current-sensor-kit.html#description","title":"Description","text":"<p>A NEW member of our Crowtail, believe it can promote your work efficiency. The AC current sensor is based on Current transformers, it transforms the big AC current to little, and then convert to voltage with the build-in resistor so users can get the AC current value via measuring the output voltage with any microcontroller such as Arduino. The split core type makes this sensor suitable for DIY usage such as energy monitoring for house &amp; building. Model: CT0065CSK</p> <p></p>"},{"location":"Products/Crowtail/crowtail--current-sensor-kit.html#feature","title":"Feature","text":"<ul> <li>Crowtail compatible interface</li> <li>Input Current: 0~30A AC</li> <li>Output Mode: 0~1V</li> <li>Non-linearity: \u00b11%</li> <li>Turn Ratio: 1800:1</li> <li>Resistance Grade: Grade B</li> <li>Work Temperature: -25\u00b0C ~ \ufe6270\u00b0C</li> <li>Dielectric Strength(between shell and output): 1000V AC/1min 5mA</li> <li>Leading Wire in Length: 1m</li> <li>Building sample resistance: 62 ohm</li> </ul>"},{"location":"Products/Crowtail/crowtail--current-sensor-kit.html#specification","title":"Specification","text":""},{"location":"Products/Crowtail/crowtail--current-sensor-kit.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--current-sensor-kit.html#with-arduino","title":"With Arduino","text":"<p>The following sketch demonstrates a simple application of measuring the amplitude of the alternating voltage.The SIG pin will output a alternating voltage based on the alternating current being measured. You can measure the value using ADC.</p> <ul> <li>Connect the module to the analog A0 of Crowtail base board.</li> <li>Put the alternating current wire through the hole of the current transformer.</li> </ul> <p> </p> <ul> <li>Copy and paste code below to a new Arduino sketch.</li> </ul> <pre><code>#define ELECTRICITY_SENSOR A0 // Analog input pin that sensor is attached to\n\nfloat amplitude_current;               //amplitude current\nfloat effective_value;       //effective current \n\nvoid setup() \n{\n    Serial.begin(9600); \n    pins_init();\n}\nvoid loop() \n{\n    int sensor_max;\n    sensor_max = getMaxValue();\n    Serial.print(\"sensor_max = \");\n    Serial.println(sensor_max);\n    //the VCC on the Crowtai interface of the sensor is 5v\n    amplitude_current=(float)sensor_max/1024*5/800*2000000;\n    effective_value=amplitude_current/1.414;//minimum_current=1/1024*5/800*2000000/1.414=8.6(mA) \n                        //Only for sinusoidal alternating current\n    Serial.println(\"The amplitude of the current is(in mA)\");\n    Serial.println(amplitude_current,1);//Only one number after the decimal point\n    Serial.println(\"The effective value of the current is(in mA)\");\n    Serial.println(effective_value,1);\n}\nvoid pins_init()\n{\n    pinMode(ELECTRICITY_SENSOR, INPUT);\n}\n/*Function: Sample for 1000ms and get the maximum value from the SIG pin*/\nint getMaxValue()\n{\n    int sensorValue;             //value read from the sensor\n    int sensorMax = 0;\n    uint32_t start_time = millis();\n    while((millis()-start_time) &lt; 1000)//sample for 1000ms\n    {\n        sensorValue = analogRead(ELECTRICITY_SENSOR);\n        if (sensorValue &gt; sensorMax) \n        {\n            /*record the maximum sensor value*/\n            sensorMax = sensorValue;\n        }\n    }\n    return sensorMax;\n}\n</code></pre> <ul> <li>Upload the code, please click here if you do not know how to upload.</li> </ul> <p>Note: The minimum effective current that can be sensed by the code can be calculated using the equation below. minimum_current=1/1024*5/800*2000000/1.414=8.6(mA).</p> <ul> <li>Open the serial monitor, The results is as follows\uff1a</li> </ul> <p></p>"},{"location":"Products/Crowtail/crowtail--current-sensor-kit.html#resource","title":"Resource","text":"<ul> <li>EmonLib</li> <li>SCT013 Datasheet</li> <li>How to build an Arduino energy monitor</li> <li>CT sensors - Interfacing with an Arduino</li> <li>CT sensors - An introduction</li> </ul>"},{"location":"Products/Crowtail/crowtail--current-sensor.html","title":"Crowtail- Current Sensor","text":""},{"location":"Products/Crowtail/crowtail--current-sensor.html#description","title":"Description","text":"<p>This current sensor gives precise current measurement for both AC and DC signals. These are good sensors for metering and measuring overall power consumption of systems. The ACS712 current sensor measures up to 20A of DC or AC current. The ACS712 Low Current Sensor Breakout outputs an analog voltage that varies linearly with sensed current. To calibrate, first set the output offset to the desired level (with zero current on the sense lines, read output with a DVM). Then with a known current input (a 100mA limited supply works well for this), set the output deflection with the gain pot. Sensitivity is then calculated as (Vref - Vdeflect)/(current input).</p> <p>Model: CT0029CS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--current-sensor.html#features","title":"Features","text":"<ul> <li>Voltage: 5V</li> <li>MAX current:20A</li> <li>Dimensions(mm):40.0(L)x20.0(W)x6.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--current-sensor.html#usage","title":"Usage","text":"<p>Arduino test the crrrent.</p> <p>1.Hardware connection</p> <p>Connect the Crowtail- Current Sensor to A0.</p> <p> </p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Upload the following sample sketch:</p> <pre><code>void setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n float average = 0;\n for(int i = 0; i &lt; 1000; i++) {\n// average = average + (.0264 * analogRead(A0) -13.51);//for the 5A mode,  \n   average = average + (.049 * analogRead(A0) -25);// for 20A mode\n// average = average + (.742 * analogRead(A0) -37.8);// for 30A mode\n   delay(1);\n }\n Serial.print(\"Current\u00a0:\");\n Serial.print(average/1000);\n Serial.println(\"A\");\n}\n</code></pre> <p>4.Open the serial monitor.You can see the current you test.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--current-sensor.html#resource","title":"Resource","text":"<ul> <li>Current Sensor Program</li> <li>Crowtail- Current Sensor ACS712 eagle files</li> <li>ACS712.pdf</li> </ul>"},{"location":"Products/Crowtail/crowtail--currentpower-sensor.html","title":"Crowtail- CurrentPower Sensor","text":""},{"location":"Products/Crowtail/crowtail--currentpower-sensor.html#introduction","title":"Introduction","text":"<p>The Crowtail- CurrentPower Sensor will solve all your power-monitoring problems. Instead of struggling with two multimeters, you can use this breakout to measure both the high side voltage and DC current draw over I2C with 1% precision.It is use the INA219B chip that much smarter - it can handle high side current measuring, up to +26VDC, even though it is powered with 3 or 5V. It will also report back that high side voltage, which is great for tracking battery life or solar panels.</p> <p>Model: CRT00455C</p> <p></p>"},{"location":"Products/Crowtail/crowtail--currentpower-sensor.html#features","title":"Features","text":"<p>Measuring up to +26VDC</p> <p>Simultaneously measure current and voltage</p> <p>Chip:INA219BIDCNT</p> <p>Corwtail IIC interface</p> <p>IIC address: 0x40</p> <p>Dimensions(mm):40.0(L)x20.0(W)x12.0(H)</p>"},{"location":"Products/Crowtail/crowtail--currentpower-sensor.html#usage","title":"Usage","text":"<p>This demo is going to show you how to measure the voltage and current when the DC motor working. Here we use Crowtail as a load and measure it's voltage and current.</p> <p>1.Software Installation</p> <p>Download \"INA219.zip\" for arduino boards, unzip and put it in the libraries of Arduino IDE by the path : ..\\arduino-1.x.x\\libraries;</p> <p>Cope this code and upload it into your arduino board.</p> <pre><code>#include &lt;Wire.h&gt;\n#include &lt;Adafruit_INA219.h&gt;\n\nAdafruit_INA219 ina219;\n\nvoid setup(void) \n{\n  Serial.begin(115200);\n  while (!Serial) {\n      // will pause Zero, Leonardo, etc until serial console opens\n      delay(1);\n  }\n\n  uint32_t currentFrequency;\n\n  Serial.println(\"Hello!\");\n\n  // Initialize the INA219.\n  // By default the initialization will use the largest range (32V, 2A).  However\n  // you can call a setCalibration function to change this range (see comments).\n  ina219.begin();\n  // To use a slightly lower 32V, 1A range (higher precision on amps):\n  //ina219.setCalibration_32V_1A();\n  // Or to use a lower 16V, 400mA range (higher precision on volts and amps):\n  //ina219.setCalibration_16V_400mA();\n\n  Serial.println(\"Measuring voltage and current with INA219 ...\");\n}\n\nvoid loop(void) \n{\n  float shuntvoltage = 0;\n  float busvoltage = 0;\n  float current_mA = 0;\n  float loadvoltage = 0;\n\n  shuntvoltage = ina219.getShuntVoltage_mV();\n  busvoltage = ina219.getBusVoltage_V();\n  current_mA = ina219.getCurrent_mA();\n  loadvoltage = busvoltage + (shuntvoltage / 1000);\n\n  Serial.print(\"Bus Voltage:   \"); Serial.print(busvoltage); Serial.println(\" V\");\n  Serial.print(\"Shunt Voltage: \"); Serial.print(shuntvoltage); Serial.println(\" mV\");\n  Serial.print(\"Load Voltage:  \"); Serial.print(loadvoltage); Serial.println(\" V\");\n  Serial.print(\"Current:       \"); Serial.print(current_mA); Serial.println(\" mA\");\n  Serial.println(\"\");\n\n  delay(2000);\n}\n</code></pre> <p>2.Hardware Installation</p> <p>CurrentPower Sensor ----- Crowduino1 ---- Crowduino2</p> <p>IIC pin ----------------- IIC port</p> <p>Intput\"+\" ----------------- 5V</p> <p>Output\"-\" ------------------------------------- 5V</p> <p>Null -------------------- GND ---------------- GND</p> <p></p> <p>Open the serial monitor and then observe the information.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--dht20.html","title":"Crowtail-DHT20","text":""},{"location":"Products/Crowtail/crowtail--dht20.html#introduction","title":"Introduction","text":"<p>DHT20 is an intelligent temperature and humidity sensor module, which is a new upgraded product of DHT11. The module is equipped with a newly designed ASIC dedicated chip, an improved MEMS semiconductor capacitive humidity sensor element and a standard temperature sensor element. After comprehensive improvement, DHT20 reduces power consumption and costs while greatly improving its performance parameters in terms of measurement accuracy, power supply voltage, measurement range, response time, stability, etc. , far exceeding the reliability of the previous generation of sensors level. DHT20 has the characteristics of calibration-free, low power consumption, high precision, high stability, etc. It adopts a fully calibrated digital I2C interface, which has fast response, strong anti-interference ability and higher cost performance.</p> <p>Model: CRT10251D</p> <p></p>"},{"location":"Products/Crowtail/crowtail--dht20.html#specification","title":"Specification","text":"<p>Working Voltage: 2.2V~5.5V</p> <p>Measuring Range</p> <ul> <li>Humidity: 0%-100% RH</li> <li>Temperature: -40~80\u00b0C</li> </ul> <p>Accuracy:</p> <ul> <li>Humidity: \u00b13% RH</li> <li>Temperature: \u00b10.5\u00b0C</li> </ul> <p>Sensitivity:</p> <ul> <li>Humidity: \u00b10.024% RH</li> <li>Temperature: 0.01\u00b0C</li> </ul> <p>Dimensions (mm): 40.0 (length) x 20.0 (width) x 7.6 (height)</p>"},{"location":"Products/Crowtail/crowtail--dht20.html#usage","title":"Usage","text":"<p>This demo will show you how to read temperature and humidity information from this Crowtail-temperature and humidity sensor. 1. Hardware connection The temperature and humidity sensor is connected to the I2C port (A4, A5) of the Crowtail-Base Shield.</p> <p></p> <p>2. Download the temperature sensor library of the Crowtail-DHT20 board, unzip it and put it into the library file of the Arduino IDE according to the path: ..\\arduino-1.0\\libraries; 3. Open the \"DHT20\" example through the following path: Crowtail-DHT20 --&gt; examples --&gt; DHT20 --&gt; DHT20.ino.</p> <pre><code>#include &lt;DHT20.h&gt;\n/*!\n * @brief Construct the function\n * @param pWire IC bus pointer object and construction device, can both pass or not pass parameters, Wire in default.\n * @param address Chip IIC address, 0x38 in default.\n */\nDHT20  dht20;\nvoid setup()\n{\n  Serial.begin(115200);\n  //Initialize sensor\n  while(dht20.begin())\n{\n    Serial.println(\"Initialize sensor failed\");\n    delay(1000);\n   }\n}\n\nvoid loop()\n{\n  //Get ambient temperature\n  Serial.print(\"temperature:\"); Serial.print(dht20.getTemperature());Serial.print(\"C\");\n  //Get relative humidity\n  Serial.print(\"  humidity:\"); Serial.print(dht20.getHumidity()*100);Serial.println(\" %RH\");\n\n  delay(1000);\n}\n</code></pre> <p>4. Upload it to your Arduino board and open the serial port monitor to observe the temperature and relative humidity information of the environment.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--dht20.html#resource","title":"Resource","text":"<ul> <li>Crowtail-DHT20.zip</li> <li>Eagle_files.zip</li> </ul>"},{"location":"Products/Crowtail/crowtail--digital-light-sensor.html","title":"Crowtail- Infrared Temperature Sensor","text":""},{"location":"Products/Crowtail/crowtail--digital-light-sensor.html#description","title":"Description","text":"<p>This module is based on the I2C light-to-digital converter TSL2561 to transform light intensity to a digital signal. Different from traditional analog light sensor, as Crowtail - Light Sensor, this digital module features a selectable light spectrum range due to its dual light sensitive diodes: infrared and full spectrum. You can switch among three detection modes to take your readings. They are infrared mode, full spectrum and human visible mode. When running under the human visible mode, this sensor will give you readings just close to your eye feelings. Model: CT0040DLS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--digital-light-sensor.html#features","title":"Features","text":"<ul> <li>Selectable detection modes</li> <li>Measuring Range:High resolution 16-Bit digital output at 400 kHz I2C Fast-Mode</li> <li>Wide dynamic range: 0.1 - 40,000 LUX</li> <li>Wide operating temperature range: -40\u00b0C to 85\u00b0C</li> <li>Programmable interrupt function with User-Defined Upper and lower threshold settings</li> <li>Dimensions(mm):20.0(L)x20.0(W)x9.7(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--digital-light-sensor.html#usage","title":"Usage","text":"<p>1.Hardware Connection Plug the Crowtail - Digital Light Sensor onto the I2C port on Crowtail - Base Shield, and then plug the base shield onto Crowduino;</p> <p></p> <p>2.Download the library from here Digital Light Sensor Library [Digital Light Sensor Program]</p> <p>3.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>4.Create an Arduino sketch and paste the following codes to it or open the code directly by the path:File -&gt; Example -&gt;Digital_Light_Sensor-&gt;Digital_Light_Sensor.</p> <pre><code>#include &lt;Wire.h&gt;\n#include &lt;Digital_Light_TSL2561.h&gt;\nvoid setup()\n{\n  Wire.begin();\n  Serial.begin(9600);\n  TSL2561.init();\n}\n\nvoid loop()\n{\n  Serial.print(\"The Light value is: \");\n  Serial.println(TSL2561.readVisibleLux());\n  delay(1000);\n}\n</code></pre> <p>5.Upload it into your Crowduino board and open the serial monitor to see the result.try to keep out light, observe the value change.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--digital-light-sensor.html#resource","title":"Resource","text":"<ul> <li>Digital Light Sensor Program</li> <li>Crowtail- Digital Light Sensor eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--dry-reed-relay.html","title":"Crowtail- Dry-Reed Relay","text":""},{"location":"Products/Crowtail/crowtail--dry-reed-relay.html#description","title":"Description","text":"<p>The Crowtail- Dry-Reed Relay is a relay module which works through magnetizing the vibration reed via the current in the coils. Compared to electromagnetic relays, the contacts completely sealed is the biggest feature of the Dry-Reed Relay. Besides, it features simplicity in construct, compactness, fast speed and long life, which make it widely applied in many fields such as microelectronic detection, Automatic Control etc. Model: CT008559D </p>"},{"location":"Products/Crowtail/crowtail--dry-reed-relay.html#features","title":"Features","text":"<ul> <li>Crowtail Interface</li> <li>High Speed</li> <li>Good stability</li> <li>Long contact life</li> <li>Contact fully sealed</li> </ul>"},{"location":"Products/Crowtail/crowtail--dry-reed-relay.html#specification","title":"Specification","text":"<p>Dimensions(mm):40.0(L)x20.0(W)x12.0(H)</p> <p></p>"},{"location":"Products/Crowtail/crowtail--dry-reed-relay.html#usage","title":"Usage","text":"<p>The Dry-Reed Relay can support up to 60VDC 1A load. You can use it to control resistance load, but it is not applicable to inductive load(such as Motor).  The usage like this Dry-reed relay is quite alike that of common relays. 1.Connect electric light to Crowtail- Dry-Reed Relay and power for electric light.</p> <p>2.Connect Crowtail- Dry-Reed Relay to port D2 of Crowtail- Base Shield and plug it into Arduino/Crowduino.</p> <p></p> <p>3.Upload the code as bellow:</p> <pre><code>int Relay = 2;\n\n// the setup routine runs once when you press reset:\nvoid setup() {                \n  // initialize the digital pin as an output.\n  pinMode(Relay, OUTPUT);     \n}\n\n// the loop routine runs over and over again forever:\nvoid loop() {\n  digitalWrite(Relay, HIGH);   //the Relay close(HIGH is the voltage level)\n  delay(5000);               // wait for five seconds\n  digitalWrite(Relay, LOW);    //the Relay normally open by making the voltage LOW\n  delay(5000);               // wait for five seconds\n}\n</code></pre> <p>4.When you upload completed, you can see the indicator led will light on five seconds and the output port is connected ,then indicator led will light off five seconds,and the output is disconnected.</p>"},{"location":"Products/Crowtail/crowtail--dry-reed-relay.html#resources","title":"Resources","text":"<ul> <li>Crowtail- Dry-Reed Relay Eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--dual-channel-latching-module.html","title":"Crowtail- Dual Channel Latching Module","text":""},{"location":"Products/Crowtail/crowtail--dual-channel-latching-module.html#description","title":"Description","text":"<p>This is a dual-channel latching relay, it does not need continuous power to keep the state, only a rising/falling pulse is needed to change the work state. so the power supply can be cut off without changing the operating state. This module is specifically designed for low power consumption circuit design.</p> <p>Model: CRT01665R</p> <p></p>"},{"location":"Products/Crowtail/crowtail--dual-channel-latching-module.html#features","title":"Features","text":"<ul> <li>Dual Switch</li> <li>Low power consumption</li> <li>High sensitivity 150mW</li> <li>High switching capacity 60W,125VA</li> <li>Epoxy sealed for automatic wave soldering and cleaning</li> </ul>"},{"location":"Products/Crowtail/crowtail--dual-channel-latching-module.html#specification","title":"Specification","text":"<p>Dimensions(mm):50.0(L)x35.0(W)x14.3(H)</p> Parameter Description Operating Voltage 5V Set/Reset Voltage(Max) 4.0VDC Switching Voltage(Max) 35VAC/35VDC Switching Current(Max) 3A Max Switching Current 3A Set Time(Latching) 4.5(max)ms Reset Time(Latching) 3.5(max)ms"},{"location":"Products/Crowtail/crowtail--dual-channel-latching-module.html#usage","title":"Usage","text":"<p>1.Connect the segment according to the following figure. The com pin is connected to the pin5, NC connected to the GND, NO and connected to the VCC.</p> <p></p> <p>2.Relay is connected to the D3, D2 and D4 is connected to the LED.</p> <p></p> <p>3.Connect to USB, copy the program and upload it to the board</p> <p></p> <pre><code>int relay=3;\nint led1=4;\nint led2=2;\nint relayin1=5;\nvoid setup()\n{\n  pinMode(relay,OUTPUT);\n  pinMode(led1,OUTPUT);\n  pinMode(led2,OUTPUT);\n  pinMode(relayin1,INPUT);\n  // put your setup code here, to run once:\n\n}\n\nvoid loop()\n{\n  /* first lift */\n   digitalWrite(relay,HIGH);\n\n\n   /* simply relay  and wait relay response */\n   delay(200);\n   if(digitalRead(relayin1)==HIGH)\n   {\n     digitalWrite(led1,HIGH);\n     digitalWrite(led2,LOW);\n   }\n   else\n   {\n     digitalWrite(led1,LOW);\n     digitalWrite(led2,HIGH);\n   } \n   delay(5000);\n\n   /* second lift */\n   digitalWrite(relay,LOW);\n\n   /* simply relay  and wait relay response */\n   delay(200);\n   if(digitalRead(relayin1)==HIGH)\n   {\n     digitalWrite(led1,HIGH);\n     digitalWrite(led2,LOW);\n   }\n   else\n   {\n     digitalWrite(led1,LOW);\n     digitalWrite(led2,HIGH);\n   }    \n   delay(5000);\n  // put your main code here, to run repeatedly:\n\n}\n</code></pre> <p>4.You can use external power supply or USB power supply.</p> <p></p> <p>5. Observe RELAY module NO lights flashing, and green light, proved NO work! Green light; RELAY module on the NC module, NC lights flashing, and red, proved NC end work.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--dual-channel-latching-module.html#resource","title":"Resource","text":"<ul> <li>Dual Channel code</li> <li>Dual Channel schematic</li> </ul>"},{"location":"Products/Crowtail/crowtail--dust-sensor.html","title":"Crowtail- Dust Sensor","text":""},{"location":"Products/Crowtail/crowtail--dust-sensor.html#description","title":"Description","text":"<p>A NEW Crowtail product! we add a crowtail port for pluging into crowtail base board. so it can simple use for our Crowduino. The dust sensor module DSM501A is low cost, compact size for a particle density sensor.it is used to quantitative particle (&gt; 1 micron) measurement with the principle of particle counter, can sense the tobacco smoke and pollen, house dust . This sensor is consist of light emitting diode lamp, detector, signal amplifier circuit and heater, it can be used in applications such as the air cleaner or air purifier, users can used this sensor easily with sensor PWM output. Model: CT0039DSD</p> <p></p>"},{"location":"Products/Crowtail/crowtail--dust-sensor.html#feature","title":"Feature","text":"<ul> <li>PWM Output</li> <li>Compact size and lightweight</li> <li>Easy installation</li> <li>5V Single power supply</li> <li>Dimensions(mm):58.5(L)x45.0(W)x18.5(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--dust-sensor.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p></p> <p>2.Copy and paste code below to a new Arduino sketch:</p> <pre><code>#include&lt;string.h&gt;\nbyte buff[2];\nint pin = 8;//DSM501A input D8\nunsigned long duration;\nunsigned long starttime;\nunsigned long endtime;\nunsigned long sampletime_ms = 30000;\nunsigned long lowpulseoccupancy = 0;\nfloat ratio = 0;\nfloat concentration = 0;\n\nint i=0;\nvoid setup()\n{\n  Serial.begin(9600);\n  pinMode(8,INPUT);\n  starttime = millis(); \n}\nvoid loop()\n{\n  duration = pulseIn(pin, LOW);\n  lowpulseoccupancy += duration;\n  endtime = millis();\n  if ((endtime-starttime) &gt; sampletime_ms)\n  {\n    ratio = (lowpulseoccupancy-endtime+starttime + sampletime_ms)/(sampletime_ms*10.0);  // Integer percentage 0=&gt;100\n    concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve\n    Serial.print(\"lowpulseoccupancy:\");\n    Serial.print(lowpulseoccupancy);\n    Serial.print(\"    ratio:\");\n    Serial.print(ratio);\n    Serial.print(\"    DSM501A:\");\n    Serial.println(concentration);\n    lowpulseoccupancy = 0;\n    starttime = millis();\n  } \n}\n</code></pre> <p>4.Open the serial monitor. You should the test result.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--dust-sensor.html#resource","title":"Resource","text":"<ul> <li>DSM501A demo code</li> <li>DSM501 Dust Sensor Datasheet</li> </ul>"},{"location":"Products/Crowtail/crowtail--dwm1000-uwbultra-wide-band.html","title":"Crowtail- DWM1000 UWB(Ultra Wide Band)","text":""},{"location":"Products/Crowtail/crowtail--dwm1000-uwbultra-wide-band.html#description","title":"Description","text":"<p>Crowtail- DWM1000-UWB module is a fully integrated low-power module. It uses the DW1000 chip radio transceiver module to use UWB (Ultra Wideband) technology, a short-range wireless communication similar to Wi-Fi or Bluetooth, which uses a frequency bandwidth above 1 GHz. It integrates the antenna, all RF circuits, power management, and clock circuits in one module. It can be used in 2-way ranging and TDOA positioning systems to locate assets with 10cm accuracy, and supports data rates up to 6.8 Mbps while communicating with the MCU through a standard SPI serial interface.&lt;br.</p> <p>It communicates using a much broader frequency spectrum (typically hundreds of Mhz to several GHz) than traditional communication technologies. It can measure the distance between two nodes by calculating the flight time of data in the air * Lightspeed= data flight distance, so as to perform high-precision positioning, which extremely makes up for the shortcomings of indoor fuzzy positioning of IoT products in the past. Compared with the positioning of RSSI, it achieves fast data transmission at a low power consumption level, and this new technology has advanced development prospects.</p> <p>Model: CRT01163U </p> <p></p>"},{"location":"Products/Crowtail/crowtail--dwm1000-uwbultra-wide-band.html#feature","title":"Feature","text":"<ul> <li>Integrated DW1000 chip radio transceiver</li> <li>Simple integration, no RF design required</li> <li>STM32F103 main control chip</li> <li>Support high-label density</li> </ul>"},{"location":"Products/Crowtail/crowtail--dwm1000-uwbultra-wide-band.html#specification","title":"Specification","text":"<ul> <li>Working input voltage: DC 5V-500mA</li> <li>Supports IEEE 802.15.4-2011</li> <li>4 channels operating from 3.5 GHz to 6.5 GHz</li> <li>Programmable transmit power</li> <li>Ranging Accuracy: 10cm</li> <li>Working current of the base station: 165mA</li> <li>Support two-way ranging and TDOA</li> <li>Support serial communication</li> <li>Operating temperature: -10\u00b0C ~ 65\u00b0C</li> <li>Dimensions : 60*19.86mm</li> </ul>"},{"location":"Products/Crowtail/crowtail--dwm1000-uwbultra-wide-band.html#usage","title":"Usage","text":"<p>1. Prepare 2 Crowtail-DWM1000-UWB, set one as a base station and the other as a tag.</p> <p>2. Plug one end of the 4P 2.0mm cable into the Crowtail - DWM1000-UWB serial port, and the other end into the serial port to USB board, as shown in the following figure:</p> <p> </p> <p>3. Connect the serial port board to the computer with USB cable(connect the two Crowtail-DWM1000-UWB to different computers), and open the serial port tool on the computer as shown below:</p> <p> 4. Change language to English. Select the corresponding serial port and open it. Click to select Multi_ Strings to open the string interface. Select the command and send it:</p> <p> 5. Move the tag, and the distance will change.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--dwm1000-uwbultra-wide-band.html#resources","title":"Resources","text":"<p>serial port tool SSCOM Bu01-db_AT_Instruction_Set.pdf https://docs.ai-thinker.com/en/uwb  UWB_Indoor_Positioning.zip </p>"},{"location":"Products/Crowtail/crowtail--electricity-sensor.html","title":"Crowtail- Electricity Sensor","text":""},{"location":"Products/Crowtail/crowtail--electricity-sensor.html#description","title":"Description","text":"<p>The Electricity sensor module is a member of Crowtail. It is based on the TA12-200 current transformer which can transform the large AC into small amplitude. You can use it to test large alternating current up to 5A.</p> <p>Model: CT010593E</p> <p></p>"},{"location":"Products/Crowtail/crowtail--electricity-sensor.html#features","title":"Features","text":"<ul> <li>Crowtail compatible interface</li> <li>Maximum 5A input</li> <li>High accuracy</li> <li>Small size</li> </ul>"},{"location":"Products/Crowtail/crowtail--electricity-sensor.html#specification","title":"Specification","text":"<p>Dimensions(mm):40.0(L)x20.0(W)x21.7(H)</p> Items Min Norm Max Unit Transformation ratio - 2000:1 - - Input Current 0 - 5 A Output Current 0 - 2.5 mA Sampling Resistance - 800 - \u03a9 Sampling Voltage 0 - 2 V Working Frequency 20 - 20K HZ Nonlinear scale - - 0.2% - Phase Shift - - 5' - Operating Temperature -55 - 85 \u2103 Dielectric strength - 6 - KVAC/1min"},{"location":"Products/Crowtail/crowtail--electricity-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--electricity-sensor.html#with-arduino","title":"With Arduino","text":"<p>The following sketch demonstrates a simple application of measuring the amplitude of the alternating voltage.The SIG pin will output a alternating voltage based on the alternating current being measured. You can measure the value using ADC.</p> <p>Connect the module to the analog A0 of Crowtail- Base board Put the alternating current wire through the hole of the current transformer.</p> <p></p> <p>1.Copy and paste code as below to a your Arduino sketch.</p> <pre><code>/****************************************************************************/  \n//  Function: Measure the amplitude current of the alternating current and \n//            the effective current of the sinusoidal alternating current.\n//  Hardware: Crowtail - Electricity Sensor     \n//  Date:    June 2,2016\n//  by www.elecrow.com\n#define ELECTRICITY_SENSOR A0 // Analog input pin that sensor is attached to\n\nfloat amplitude_current;               //amplitude current\nfloat effective_value;       //effective current \n\nvoid setup() \n{\n    Serial.begin(9600); \n    pins_init();\n}\nvoid loop() \n{\n    int sensor_max;\n    sensor_max = getMaxValue();\n    Serial.print(\"sensor_max = \");\n    Serial.println(sensor_max);\n    //the VCC on the Crowtail interface of the sensor is 5v\n    amplitude_current=(float)sensor_max/1024*5/800*2000000;\n    effective_value=amplitude_current/1.414;//minimum_current=1/1024*5/800*2000000/1.414=8.6(mA) \n                        //Only for sinusoidal alternating current\n    Serial.println(\"The amplitude of the current is(in mA)\");\n    Serial.println(amplitude_current,1);//Only one number after the decimal point\n    Serial.println(\"The effective value of the current is(in mA)\");\n    Serial.println(effective_value,1);\n}\nvoid pins_init()\n{\n    pinMode(ELECTRICITY_SENSOR, INPUT);\n}\n/*Function: Sample for 1000ms and get the maximum value from the SIG pin*/\nint getMaxValue()\n{\n    int sensorValue;             //value read from the sensor\n    int sensorMax = 0;\n    uint32_t start_time = millis();\n    while((millis()-start_time) &lt; 1000)//sample for 1000ms\n    {\n        sensorValue = analogRead(ELECTRICITY_SENSOR);\n        if (sensorValue &gt; sensorMax) \n        {\n            /*record the maximum sensor value*/\n            sensorMax = sensorValue;\n        }\n    }\n    return sensorMax;\n}\n</code></pre> <p>Note: The minimum effective current that can be sensed by the code can be calculated using the equation below. minimum_current=1/1024*5/800*2000000/1.414=8.6(mA).</p> <p>2.Open the serial monitor, The results is as follows\uff1a</p> <p></p>"},{"location":"Products/Crowtail/crowtail--electricity-sensor.html#resource","title":"Resource","text":"<ul> <li>Crowtail- Electricity Sensor eagle file</li> </ul>"},{"location":"Products/Crowtail/crowtail--electromagnet.html","title":"Crowtail- Electromagnet","text":""},{"location":"Products/Crowtail/crowtail--electromagnet.html#description","title":"Description","text":"<p>An electromagnet is a type of magnet in which the magnetic field is produced by electric current. An electric current flowing in a wire creates a magnetic field around the wire, due to Ampere's law(see drawing below). To concentrate the magnetic field, in an electromagnet the wire is wound into a coil with many turns of wire lying side by side. The magnetic field of all the turns of wire passes through the center of the coil, creating a strong magnetic field there. Crowtail- Electromagnet can shuck 1KG weight and hold on. it easy to use, to learn electromagnet principle..</p> <p>Model: CT008617E</p> <p></p>"},{"location":"Products/Crowtail/crowtail--electromagnet.html#features","title":"Features","text":"<ul> <li>Easy to use</li> <li>Crowtail base module</li> <li>1KG peak suction</li> <li>Low standby current</li> </ul>"},{"location":"Products/Crowtail/crowtail--electromagnet.html#specifications","title":"Specifications","text":"<ul> <li>Working Voltage \uff1aDC 5V</li> <li>Working Current \uff1a 400mA</li> <li>Standby current \uff1a 200uA</li> <li>Load Weight\uff1a 1KG</li> <li>Dimensions(mm):40.0(L)x20.0(W)x20.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--electromagnet.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--electromagnet.html#with-arduino","title":"With Arduino","text":"<p>1.Hardware Connection The Crowtail- Electromagnetr is connecting to analog port D2 of Crowtail - Base Shield. A Button is connecting to D5. </p> <p>2.Copy the demo code to your sketch, then upload to Arduino or Crowduino board.</p> <pre><code>int Electromagnet = 2;\nint button = 5;\nint buttonstate;\n\nvoid setup() {                \n  pinMode(Electromagnet, OUTPUT); \n  pinMode(button, INPUT);   \n}\nvoid loop() {\n   buttonstate=digitalRead(button); \n   if(buttonstate==HIGH)\n   {\n  digitalWrite(Electromagnet, HIGH);\n  delay(200); \n\n}\nelse\n{\ndigitalWrite(Electromagnet, LOW);\n delay(200); \n}\n}\n</code></pre> <p>3. Press the Button, you will find that the magnet is magnetic, and it can adsorption something (1 kg), loosen the Button, magnetic disappeared..</p>"},{"location":"Products/Crowtail/crowtail--electromagnet.html#resource","title":"Resource","text":"<ul> <li>ZYE1-P20-15</li> <li>Crowtail- Electromagnet eagle file</li> </ul>"},{"location":"Products/Crowtail/crowtail--encoder.html","title":"Crowtail- Encoder","text":""},{"location":"Products/Crowtail/crowtail--encoder.html#description","title":"Description","text":"<p>The rotary encoder can convert the angular displacement and linear Displacement to the electrical signal,and then convert the electrical signal to the electrical pluse .The numbers of the pluse can be converted to the value of the angular displacement. There are two output pins of this module including signal A and signal B.we can determine the position of the detent and the direction of the rotation by sense the value of the output pins.</p> <p>Model: CT0004EN</p> <p></p>"},{"location":"Products/Crowtail/crowtail--encoder.html#features","title":"Features","text":"<ul> <li>Crowtail Interface.</li> <li>Incremental encoder</li> <li>360 degree rotary</li> </ul>"},{"location":"Products/Crowtail/crowtail--encoder.html#specification","title":"Specification","text":"<p>Dimensions(mm):20.0(L)x20.0(W)x36.3(H)</p>  Item  Min  Typical  Max  Unit Voltage 4.5 5.0 5.5 VDC Current 10 20 30 mA  Dimension 20 x 20 mm  Net Weight 7 g"},{"location":"Products/Crowtail/crowtail--encoder.html#usage","title":"Usage","text":"<p>This Crowtail-Encoder is very easy to use.</p> <p>1.Hardware Connection</p> <p></p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Upload the following sample sketch:</p> <pre><code>#define ENCODER_A_PIN 2\n#define ENCODER_B_PIN 3\nlong position;\n\nvoid setup(){\n\n pinMode(ENCODER_A_PIN, INPUT);\n pinMode(ENCODER_B_PIN, INPUT);\n attachInterrupt(0, read_quadrature, CHANGE);\n Serial.begin(9600);\n}\n\nvoid loop(){\n  Serial.print(\"Position: \");\n  Serial.println(position, DEC);\n  delay(1000);\n}\n\nvoid read_quadrature(){  \n\n  if (digitalRead(ENCODER_A_PIN) == LOW){   \n   //Check clockwise or counterclockwise\n   if (digitalRead(ENCODER_B_PIN) == LOW)\n     position++;\n }\n\n else{\n\n   if (digitalRead(ENCODER_B_PIN) == LOW)\n     position--;\n  }\n}\n</code></pre> <p>4.Open the serial monitor. You should see some data from Encoder.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--encoder.html#resource","title":"Resource","text":"<ul> <li>Encoder Program</li> <li>Crowtail- Encoder eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--es08a-mini-servo.html","title":"Crowtail- ES08A Mini Servo","text":""},{"location":"Products/Crowtail/crowtail--es08a-mini-servo.html#description","title":"Description","text":"<p>A NEW Crowtail product! we add a crowtail port for pluging into crowtail base board. so it can simple use for our Crowduino. This EMAX servo is an entry level servo for beginners who like to enjoy servo controlling fun. This product includes a full set of common shafts as shown in the pictures, great for small mechatronic projects.</p> <p>Model: CT0037EMS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--es08a-mini-servo.html#specification","title":"Specification","text":"<ul> <li>Compatible with Crowtail interface</li> <li>Operating Voltage: 4.8 ~ 6.0V</li> <li>Operating Speed(4.8V): 0.12 Sec/60\u00b0 at no load</li> <li>Temperature range: 0\u00b0C - 55\u00b0C</li> <li>Stall Torque(4.8V): 1.5Kgf.cm(22.2 oz.in)</li> <li>Brand name: EMax</li> <li>location of each pin: red (+), brown (-), yellow (signal).</li> <li>3 pole ferrite, all nylon gear. Top ball bearing</li> <li>Dimensions(mm):32.2(L)x11.7(W)x27.5(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--es08a-mini-servo.html#usage","title":"Usage","text":"<p>1. Connect the Crowtail- EMAX 9g ES08A Mini Servo to the Digital port 9 of Crowtail - Basic Shield using a Crowtail cable</p> <p></p> <p>2.Download Crowtail- ES08A Mini Servo library the library; Unzip and put it in the libraries file : ..\\arduino-1.0\\libraries;</p> <p>3.Open \u201csweep\u201d example via the path: File --&gt; Examples --&gt; Servo --&gt;sweep.</p> <pre><code> // Sweep\n// by BARRAGAN &lt;http://barraganstudio.com&gt; \n// This example code is in the public domain.\n\n\n#include &lt;Servo.h&gt; \n\nServo myservo;  // create servo object to control a servo \n                // a maximum of eight servo objects can be created \n\nint pos = 0;    // variable to store the servo position \n\nvoid setup() \n{ \n  myservo.attach(9);  // attaches the servo on pin 9 to the servo object \n} \n\n\nvoid loop() \n{ \n  for(pos = 0; pos &lt; 180; pos += 1)  // goes from 0 degrees to 180 degrees \n  {                                  // in steps of 1 degree \n    myservo.write(pos);              // tell servo to go to position in variable 'pos' \n    delay(15);                       // waits 15ms for the servo to reach the position \n  } \n  for(pos = 180; pos&gt;=1; pos-=1)     // goes from 180 degrees to 0 degrees \n  {                                \n    myservo.write(pos);              // tell servo to go to position in variable 'pos' \n    delay(15);                       // waits 15ms for the servo to reach the position \n  } \n} \n</code></pre> <p>4.Upload it into your Crowduino board and observe what will happen.</p>"},{"location":"Products/Crowtail/crowtail--es08a-mini-servo.html#resource","title":"Resource","text":"<ul> <li>Crowtail- ES08A Mini Servo Program</li> </ul>"},{"location":"Products/Crowtail/crowtail--extend-board-for-connection.html","title":"Crowtail- Extend board for Connection","text":""},{"location":"Products/Crowtail/crowtail--extend-board-for-connection.html#description","title":"Description","text":"<p>A Couple of extend board for further connection. Look at this Crowtail gadget, it will solve your big trouble when you want to set up a remote connection with Crowduino and Crowtail-modules. For using, you need to prepare a right length network cable, but you should notice that it can only compatible with the Straight-Through Wired Cables but not Crossover Wired Cables. It cheap and practical. Wish nice user experience.</p> <p>Model: CT0063EBC</p> <p></p>"},{"location":"Products/Crowtail/crowtail--extend-board-for-connection.html#features","title":"Features","text":"<ul> <li>Size:20mm x 40mm.</li> <li>Operate voltage: 3.3V/5V</li> <li>Compatible with Crowtail board</li> <li>Compatible Straight-Through Wired cables interface</li> </ul>"},{"location":"Products/Crowtail/crowtail--extend-board-for-connection.html#usage","title":"usage","text":"<p>The purpose of the Extend board is to allow easy extend connection.For example you can put your Crowduino board indoor and Crowtail module outdoor to achieve remote chontrol. </p>"},{"location":"Products/Crowtail/crowtail--fingerprint-sensor.html","title":"Crowtail- Fingerprint Sensor","text":""},{"location":"Products/Crowtail/crowtail--fingerprint-sensor.html#description","title":"Description","text":"<p>This all-in-one optical fingerprint sensor will make adding fingerprint detection and verification super simple. These modules are typically used in safes - there's a high powered DSP chip AS601 that does the image rendering, calculation, feature-finding and searching. Connect to any microcontroller or system with TTL serial, and send packets of data to take photos, detect prints, hash and search. You can also enroll new fingers directly - up to 120 finger prints can be stored in the onboard FLASH memory. As the usage, the fingerprint is really easy to use with the serial UART. There is already some libraries to help your using this sensor with Arduino , such as the adafruit fingerprint library.</p> <p>Model: SOT6439F</p> <p></p>"},{"location":"Products/Crowtail/crowtail--fingerprint-sensor.html#features","title":"Features","text":"<ul> <li>Communication: UART(TTL)</li> <li>Fingerprint number: 120 on default</li> <li>Can set the security level and baud rate flexibility</li> <li>Working Current@Voltage: &lt;120mA@DC3.6~6V</li> <li>Temprature: -20 - +50 degrees</li> <li>Humidity: &lt;85%</li> <li>Dimensions(mm): 55.0(L)x20.0(W)x21.5(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--fingerprint-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--fingerprint-sensor.html#wiring-for-use-with-arduino","title":"Wiring for use with Arduino","text":"<p>1.Hardware Connection</p> <p></p> <p>2.Download the Fingerprint Sensor library:Fingerprint Sensor library,Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>3.Open the code directly by the path:File -&gt; Example -&gt;Adafruit_Fingerprint\u2192fingerprint</p> <pre><code>#include &lt;Adafruit_Fingerprint.h&gt;\n#include &lt;SoftwareSerial.h&gt;\n\nint getFingerprintIDez();\n\n// pin #2 is IN from sensor (GREEN wire)\n// pin #3 is OUT from arduino  (WHITE wire)\nSoftwareSerial mySerial(2, 3);\n\n\nAdafruit_Fingerprint finger = Adafruit_Fingerprint(&amp;mySerial);\n\nvoid setup()  \n{\n  Serial.begin(9600);\n  Serial.println(\"fingertest\");\n\n  // set the data rate for the sensor serial port\n  finger.begin(57600);\n\n  if (finger.verifyPassword()) {\n    Serial.println(\"Found fingerprint sensor!\");\n  } else {\n    Serial.println(\"Did not find fingerprint sensor\u00a0:(\");\n    while (1);\n  }\n  Serial.println(\"Waiting for valid finger...\");\n}\n\nvoid loop()                     // run over and over again\n{\n  getFingerprintIDez();\n  delay(50);            //don't ned to run this at full speed.\n}\n\nuint8_t getFingerprintID() {\n  uint8_t p = finger.getImage();\n  switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image taken\");\n      break;\n    case FINGERPRINT_NOFINGER:\n      Serial.println(\"No finger detected\");\n      return p;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      return p;\n    case FINGERPRINT_IMAGEFAIL:\n      Serial.println(\"Imaging error\");\n      return p;\n    default:\n      Serial.println(\"Unknown error\");\n      return p;\n  }\n\n  // OK success!\n\n  p = finger.image2Tz();\n  switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image converted\");\n      break;\n    case FINGERPRINT_IMAGEMESS:\n      Serial.println(\"Image too messy\");\n      return p;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      return p;\n    case FINGERPRINT_FEATUREFAIL:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    case FINGERPRINT_INVALIDIMAGE:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    default:\n      Serial.println(\"Unknown error\");\n      return p;\n  }\n\n  // OK converted!\n  p = finger.fingerFastSearch();\n  if (p == FINGERPRINT_OK) {\n    Serial.println(\"Found a print match!\");\n  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {\n    Serial.println(\"Communication error\");\n    return p;\n  } else if (p == FINGERPRINT_NOTFOUND) {\n    Serial.println(\"Did not find a match\");\n    return p;\n  } else {\n    Serial.println(\"Unknown error\");\n    return p;\n  }   \n\n  // found a match!\n  Serial.print(\"Found ID #\"); Serial.print(finger.fingerID); \n  Serial.print(\" with confidence of \"); Serial.println(finger.confidence); \n}\n\n// returns -1 if failed, otherwise returns ID #\nint getFingerprintIDez() {\n  uint8_t p = finger.getImage();\n  if (p\u00a0!= FINGERPRINT_OK)  return -1;\n\n  p = finger.image2Tz();\n  if (p\u00a0!= FINGERPRINT_OK)  return -1;\n\n  p = finger.fingerFastSearch();\n  if (p\u00a0!= FINGERPRINT_OK)  return -1;\n\n  // found a match!\n  Serial.print(\"Found ID #\"); Serial.print(finger.fingerID); \n  Serial.print(\" with confidence of \"); Serial.println(finger.confidence);\n  return finger.fingerID; \n}\n</code></pre> <p>4.Upload the Code,Open up the serial monitor at 9600 baud and when prompted place your finger against the sensor that was already enrolled. You should see the following:</p> <p></p>"},{"location":"Products/Crowtail/crowtail--fingerprint-sensor.html#enrolling-with-arduino","title":"Enrolling with Arduino","text":"<p>1.Hardware Connection</p> <p>2.Download the Fingerprint Sensor library:Fingerprint Sensor library,Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>3.Open the code directly by the path:File -&gt; Example -&gt;Adafruit_Fingerprint\u2192enroll</p> <pre><code>#include &lt;Adafruit_Fingerprint.h&gt;\n#include &lt;SoftwareSerial.h&gt;\n\nuint8_t getFingerprintEnroll(int id);\n\n\n// pin #2 is IN from sensor (GREEN wire)\n// pin #3 is OUT from arduino  (WHITE wire)\nSoftwareSerial mySerial(2, 3);\n\nAdafruit_Fingerprint finger = Adafruit_Fingerprint(&amp;mySerial);\n\nvoid setup()  \n{\n  Serial.begin(9600);\n  Serial.println(\"fingertest\");\n\n  // set the data rate for the sensor serial port\n  finger.begin(57600);\n\n  if (finger.verifyPassword()) {\n    Serial.println(\"Found fingerprint sensor!\");\n  } else {\n    Serial.println(\"Did not find fingerprint sensor\u00a0:(\");\n    while (1);\n  }\n}\n\nvoid loop()                     // run over and over again\n{\n  Serial.println(\"Type in the ID # you want to save this finger as...\");\n  int id = 0;\n  while (true) {\n    while (! Serial.available());\n    char c = Serial.read();\n    if (! isdigit(c)) break;\n    id *= 10;\n    id += c - '0';\n  }\n  Serial.print(\"Enrolling ID #\");\n  Serial.println(id);\n\n  while (!  getFingerprintEnroll(id) );\n}\n\nuint8_t getFingerprintEnroll(int id) {\n  int p = -1;\n  Serial.println(\"Waiting for valid finger to enroll\");\n  while (p\u00a0!= FINGERPRINT_OK) {\n    p = finger.getImage();\n    switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image taken\");\n      break;\n    case FINGERPRINT_NOFINGER:\n      Serial.println(\".\");\n      break;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      break;\n    case FINGERPRINT_IMAGEFAIL:\n      Serial.println(\"Imaging error\");\n      break;\n    default:\n      Serial.println(\"Unknown error\");\n      break;\n    }\n  }\n\n  // OK success!\n\n  p = finger.image2Tz(1);\n  switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image converted\");\n      break;\n    case FINGERPRINT_IMAGEMESS:\n      Serial.println(\"Image too messy\");\n      return p;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      return p;\n    case FINGERPRINT_FEATUREFAIL:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    case FINGERPRINT_INVALIDIMAGE:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    default:\n      Serial.println(\"Unknown error\");\n      return p;\n  }\n\n  Serial.println(\"Remove finger\");\n  delay(2000);\n  p = 0;\n  while (p\u00a0!= FINGERPRINT_NOFINGER) {\n    p = finger.getImage();\n  }\n\n  p = -1;\n  Serial.println(\"Place same finger again\");\n  while (p\u00a0!= FINGERPRINT_OK) {\n    p = finger.getImage();\n    switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image taken\");\n      break;\n    case FINGERPRINT_NOFINGER:\n      Serial.print(\".\");\n      break;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      break;\n    case FINGERPRINT_IMAGEFAIL:\n      Serial.println(\"Imaging error\");\n      break;\n    default:\n      Serial.println(\"Unknown error\");\n      break;\n    }\n  }\n\n  // OK success!\n\n  p = finger.image2Tz(2);\n  switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image converted\");\n      break;\n    case FINGERPRINT_IMAGEMESS:\n      Serial.println(\"Image too messy\");\n      return p;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      return p;\n    case FINGERPRINT_FEATUREFAIL:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    case FINGERPRINT_INVALIDIMAGE:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    default:\n      Serial.println(\"Unknown error\");\n      return p;\n  }\n\n\n  // OK converted!\n  p = finger.createModel();\n  if (p == FINGERPRINT_OK) {\n    Serial.println(\"Prints matched!\");\n  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {\n    Serial.println(\"Communication error\");\n    return p;\n  } else if (p == FINGERPRINT_ENROLLMISMATCH) {\n    Serial.println(\"Fingerprints did not match\");\n    return p;\n  } else {\n    Serial.println(\"Unknown error\");\n    return p;\n  }   \n\n  Serial.print(\"ID \"); Serial.println(id);\n  p = finger.storeModel(id);\n  if (p == FINGERPRINT_OK) {\n    Serial.println(\"Stored!\");\n  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {\n    Serial.println(\"Communication error\");\n    return p;\n  } else if (p == FINGERPRINT_BADLOCATION) {\n    Serial.println(\"Could not store in that location\");\n    return p;\n  } else if (p == FINGERPRINT_FLASHERR) {\n    Serial.println(\"Error writing to flash\");\n    return p;\n  } else {\n    Serial.println(\"Unknown error\");\n    return p;\n  }   \n}\n</code></pre> <p>4.Upload the Code,open up the serial monitor, it will ask for you to type in the ID to enroll - use the box up top to type in a number and click Send</p> <p></p> <p>5.Then go through the enrollment process as indicated. When it has successfully enrolled a finger, it will print Stored!</p> <p></p>"},{"location":"Products/Crowtail/crowtail--fingerprint-sensor.html#resource","title":"Resource","text":"<ul> <li>Fingerprint library</li> <li>SFGDemoV2.0</li> <li>Datasheet</li> </ul>"},{"location":"Products/Crowtail/crowtail--flame-sensor.html","title":"Crowtail- Flame Sensor","text":""},{"location":"Products/Crowtail/crowtail--flame-sensor.html#description","title":"Description","text":"<p>The flame sensor can be used to detect fire and the other light sources which's wavelength at 760nm~1100nm ,it's based on the YG1006 sensor which is a fast response and high photo senstivity NPN silicon phototransistor. Due to its black epoxy, the sensor is sensitive to infrared radiation. In fire fighting robot game, The sensor plays a very important role, it can be used as a robot eyes to find the fire source.</p> <p>Model: CT0052CFS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--flame-sensor.html#features","title":"Features","text":"<ul> <li>Work Voltage: 3.3V ~ 5V</li> <li>Crowduino interface</li> <li>Easy to use</li> <li>Sensitivity can adjustable</li> <li>Dimensions(mm):32.0(L)x20.0(W)x9.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--flame-sensor.html#usage","title":"Usage","text":"<p>This demo is going to show you how to detect fire.</p> <p>1.Hardware Connection The flame sensor is connecting to digital port D2 of Crowtail - Base Shield. Crowtail-LED is connecting to D5.</p> <p></p> <p>2.Download Flame_sensor library for Crowduino boards with 16MHz XTAL; Unzip and put it in the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries;</p> <p>3.Open \u201cFlame_Sensor\u201d example via the path: File --&gt; Examples --&gt; Flame_Sensor</p> <pre><code> const int ledpin=5;\nconst int  Flame_Sensor = 2;\nvoid setup()\n{\n  pinMode(ledpin,OUTPUT);\n  pinMode(Flame_Sensor,INPUT); \n}\nvoid loop()\n{\n  if(digitalRead( Flame_Sensor)){\n  digitalWrite(ledpin,LOW);\n }\n else{\n digitalWrite(ledpin,HIGH);\n }\n}\n</code></pre> <p>4.Upload it into your Crowduino board and adjust your silp resisitance. Pay attentiong to the Crowtail-LED and LED light on the module when you put the fire far away from sensor about 10cm.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--flame-sensor.html#resource","title":"Resource","text":"<ul> <li>Flame_sensor Program</li> <li>Crowtail- Flame Sensor v1.0</li> </ul>"},{"location":"Products/Crowtail/crowtail--g122-water-flow-sensor.html","title":"Crowtail- G1\" Water Flow Sensor","text":""},{"location":"Products/Crowtail/crowtail--g122-water-flow-sensor.html#description","title":"Description","text":"<p>Crowtail- G1\" Water Flow Sensor isconsists of magnetic core, rotating impeller, external casing and sensor and a hall-effect sensor. When water flows through the rotor, rotor rolls, it activates the magnetic core to trigger switch action speed changes with different rate of flow. The hall-effect sensor outputs the corresponding pulse signals, users can get the flow speed via detecting the pulse. It is suitable to detect flow in water dispenser or coffee machine.There are also lots of other water flow sensors in other diameters for your choice.</p> <p>Model: CT008211W</p> <p></p>"},{"location":"Products/Crowtail/crowtail--g122-water-flow-sensor.html#feature","title":"Feature","text":"<ul> <li>Working Voltage: 5V\uff5e24V</li> <li>Flow Rate Range: 0.3\uff5e6L/min</li> <li>Crowtail Interface</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowtail/crowtail--g122-water-flow-sensor.html#specification","title":"specification","text":"<ul> <li>Max. Working Current: 15mA (DC 5V)</li> <li>Load Capacity: \u226410mA (DC 5V)</li> <li>Operating Temperature: \u226480\u2103</li> <li>Liquid Temperature: \u2264120\u2103</li> <li>Operating Humidity: 35%\uff5e90%RH</li> <li>Water Pressure: \u22642.0MPa</li> <li>Storage Temperature: -25\uff5e+ 80\u2103</li> <li>Storage Humidity: 25%\uff5e95%RH</li> <li>Dimensions(mm):74.2(L)x42.4(W)x41.7(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--g122-water-flow-sensor.html#usage","title":"Usage","text":"<p>Here is an example showing how to turn on the Crowtail- G1\" Water Flow Sensor.</p> <p>1. Plug it onto the Digital port 2 of Crowtail - Base Shield using a Crowtail cable.</p> <p>2.Plug the Crowtail - Base Shield onto Arduino.</p> <p>3. Connect Arduino to PC by using a USB cable.</p> <p></p> <p>4.Let the water flow connect to a water pipe.</p> <p>5. Copy and paste code below to a new Arduino sketch, and upload it to your Arduino.</p> <pre><code>  volatile int NbTopsFan; //measuring the rising edges of the signal\nint Calc;                               \nint hallsensor = 2;    //The pin location of the sensor\n\nvoid rpm ()     //This is the function that the interupt calls \n{ \n  NbTopsFan++;  //This function measures the rising and falling edge of the \n\nhall effect sensors signal\n} \n// The setup() method runs once, when the sketch starts\nvoid setup() //\n{ \n  pinMode(hallsensor, INPUT); //initializes digital pin 2 as an input\n  Serial.begin(9600); //This is the setup function where the serial port is initialised,\n\n  attachInterrupt(0, rpm, RISING); //and the interrupt is attached\n} \n// the loop() method runs over and over again,\n// as long as the Arduino has power\nvoid loop ()    \n{\n  NbTopsFan = 0;   //Set NbTops to 0 ready for calculations\n  sei();      //Enables interrupts\n  delay (1000);   //Wait 1 second\n  cli();      //Disable interrupts\n  Calc = (NbTopsFan * 60 / 7.4.5); //(Pulse frequency x 60) / 4.8.Q, = flow rate in L/hour \n\n  Serial.print (Calc, DEC); //Prints the number calculated above\n  Serial.print (\" L/hour\\r\\n\"); //Prints \"L/hour\" and returns a  new line\n}\n</code></pre> <p>6.When you upload the code complete,you can measure the water flow rate and see the result via the serial port debug window</p>"},{"location":"Products/Crowtail/crowtail--g1222-water-flow-sensor.html","title":"Crowtail- G1/2\" Water Flow Sensor","text":""},{"location":"Products/Crowtail/crowtail--g1222-water-flow-sensor.html#description","title":"Description","text":"<p>Crowtail G\u00bd \"water flow sensor isconsists of magnetic core, rotating impeller, external casing and sensor and a hall-effect sensor. When water flows through the rotor, rotor rolls, it activates the magnetic core to trigger switch action speed changes with different rate of flow. The hall-effect sensor outputs the corresponding pulse signals, users can get the flow speed via detecting the pulse. It is suitable to detect flow in water dispenser or coffee machine.There are also lots of other water flow sensors in other diameters for your choice.</p> <p>Model: CT008012W </p>"},{"location":"Products/Crowtail/crowtail--g1222-water-flow-sensor.html#feature","title":"Feature","text":"<ul> <li>Working Voltage: 5V\uff5e24V</li> <li>Flow Rate Range: 0.3\uff5e6L/min</li> <li>Crowtail Interface</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowtail/crowtail--g1222-water-flow-sensor.html#specification","title":"specification","text":"<ul> <li>Max. Working Current: 15mA (DC 5V)</li> <li>Load Capacity: \u226410mA (DC 5V)</li> <li>Operating Temperature: \u226480\u2103</li> <li>Liquid Temperature: \u2264120\u2103</li> <li>Operating Humidity: 35%\uff5e90%RH</li> <li>Water Pressure: \u22642.0MPa</li> <li>Storage Temperature: -25\uff5e+ 80\u2103</li> <li>Storage Humidity: 25%\uff5e95%RH</li> <li>Dimensions(mm):62.0(L)x36.0(W)x34.5(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--g1222-water-flow-sensor.html#usage","title":"Usage","text":"<p>Here is an example showing how to turn on the Crowtail- G\u00bd\" Water Flow Sensor.</p> <p>1. Plug it onto the Digital port 2 of Crowtail - Base Shield using a Crowtail cable.</p> <p>2.Plug the Crowtail - Base Shield onto Arduino.</p> <p>3. Connect Arduino to PC by using a USB cable.</p> <p></p> <p>4.Let the water flow connect to a water pipe.</p> <p>5. Copy and paste code below to a new Arduino sketch, and upload it to your Arduino.</p> <pre><code>  volatile int NbTopsFan; //measuring the rising edges of the signal\nint Calc;                               \nint hallsensor = 2;    //The pin location of the sensor\n\nvoid rpm ()     //This is the function that the interupt calls \n{ \n  NbTopsFan++;  //This function measures the rising and falling edge of the \n\nhall effect sensors signal\n} \n// The setup() method runs once, when the sketch starts\nvoid setup() //\n{ \n  pinMode(hallsensor, INPUT); //initializes digital pin 2 as an input\n  Serial.begin(9600); //This is the setup function where the serial port is initialised,\n\n  attachInterrupt(0, rpm, RISING); //and the interrupt is attached\n} \n// the loop() method runs over and over again,\n// as long as the Arduino has power\nvoid loop ()    \n{\n  NbTopsFan = 0;   //Set NbTops to 0 ready for calculations\n  sei();      //Enables interrupts\n  delay (1000);   //Wait 1 second\n  cli();      //Disable interrupts\n  Calc = (NbTopsFan * 60 / 7.5); //(Pulse frequency x 60) / 73.Q, = flow rate in L/hour \n\n  Serial.print (Calc, DEC); //Prints the number calculated above\n  Serial.print (\" L/hour\\r\\n\"); //Prints \"L/hour\" and returns a  new line\n}\n</code></pre> <p>6.When you upload the code complete,you can measure the water flow rate and see the result via the serial port debug window</p>"},{"location":"Products/Crowtail/crowtail--g1422-water-flow-sensor.html","title":"G1/4\" Water Flow Sensor","text":""},{"location":"Products/Crowtail/crowtail--g1422-water-flow-sensor.html#description","title":"Description","text":"<p>Crowtail G\u00bc water flow sensor is composed of magnetic core, rotating impeller, external casing and sensors, hall sensor. When the water flow through the rotor, the rotor coil, it activates the movement of the magnetic core trigger switch speed and different flow change. Using hall sensor output corresponding pulse signal, the user can through the test the speed of the pulse flow. It is suitable for the test flow in water machine or the coffee machine. There are also many other water flow sensor in choosing the diameter of the other. Water flow sensor output pulse is proportional to the flow: * 98 = flow pulse frequency.If the output frequency is 48, then water: 48/98 = 0.5 (L/min)</p> <p>Model: CT007914W</p> <p></p>"},{"location":"Products/Crowtail/crowtail--g1422-water-flow-sensor.html#feature","title":"Feature","text":"<ul> <li>Working Voltage: 5V\uff5e24V</li> <li>Flow Rate Range: 0.3\uff5e6L/min</li> <li>Crowtail Interface</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowtail/crowtail--g1422-water-flow-sensor.html#specification","title":"specification","text":"<ul> <li>Max. Working Current: 15mA (DC 5V)</li> <li>Load Capacity: \u226410mA (DC 5V)</li> <li>Operating Temperature: \u226480\u2103</li> <li>Liquid Temperature: \u2264120\u2103</li> <li>Operating Humidity: 35%\uff5e90%RH</li> <li>Water Pressure: \u22642.0MPa</li> <li>Storage Temperature: -25\uff5e+ 80\u2103</li> <li>Storage Humidity: 25%\uff5e95%RH</li> <li>Dimensions(mm):80.2(L)x34.5(W)x26.2(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--g1422-water-flow-sensor.html#usage","title":"Usage","text":"<p>Here is an example showing how to turn on the Crowtail- G\u00bc\" Water Flow Sensor.</p> <p>1. Plug it onto the Digital port 2 of Crowtail - Base Shield using a Crowtail cable.</p> <p>2.Plug the Crowtail - Base Shield onto Arduino.</p> <p>3. Connect Arduino to PC by using a USB cable.</p> <p></p> <p>4.Let the water flow connect to a water pipe.</p> <p>5. Copy and paste code below to a new Arduino sketch, and upload it to your Arduino.</p> <pre><code>  volatile int NbTopsFan; //measuring the rising edges of the signal\nint Calc;                               \nint hallsensor = 2;    //The pin location of the sensor\n\nvoid rpm ()     //This is the function that the interupt calls \n{ \n  NbTopsFan++;  //This function measures the rising and falling edge of the \n\nhall effect sensors signal\n} \n// The setup() method runs once, when the sketch starts\nvoid setup() //\n{ \n  pinMode(hallsensor, INPUT); //initializes digital pin 2 as an input\n  Serial.begin(9600); //This is the setup function where the serial port is initialised,\n\n  attachInterrupt(0, rpm, RISING); //and the interrupt is attached\n} \n// the loop() method runs over and over again,\n// as long as the Arduino has power\nvoid loop ()    \n{\n  NbTopsFan = 0;   //Set NbTops to 0 ready for calculations\n  sei();      //Enables interrupts\n  delay (1000);   //Wait 1 second\n  cli();      //Disable interrupts\n  Calc = (NbTopsFan * 60 / 98); //(Pulse frequency x 60) / 98Q, = flow rate in L/hour \n\n  Serial.print (Calc, DEC); //Prints the number calculated above\n  Serial.print (\" L/hour\\r\\n\"); //Prints \"L/hour\" and returns a  new line\n}\n</code></pre> <p>6.When you upload the code complete,you can measure the water flow rate and see the result via the serial port debug window</p>"},{"location":"Products/Crowtail/crowtail--g3422-water-flow-sensor.html","title":"Crowtail- G3/4\" Water Flow Sensor","text":""},{"location":"Products/Crowtail/crowtail--g3422-water-flow-sensor.html#description","title":"Description","text":"<p>Crowtail G\u00be \"water flow sensor Water flow sensor consists of magnetic core, rotating impeller, external casing and sensor and a hall-effect sensor. When water flows through the rotor, rotor rolls, it activates the magnetic core to trigger switch action speed changes with different rate of flow. The hall-effect sensor outputs the corresponding pulse signals, users can get the flow speed via detecting the pulse. It is suitable to detect flow in water dispenser or coffee machine.</p> <p>There are also lots of other water flow sensors in other diameters for your choice. The water flow sensor outputs pulse proportional to the water flow with: Pulse Frequency = Flow* 5.5.That is, if the output frequency is 48, then the water flow: 48/5.5= 8.72(L/min)</p> <p>Model: CT008134W</p> <p></p>"},{"location":"Products/Crowtail/crowtail--g3422-water-flow-sensor.html#feature","title":"Feature","text":"<ul> <li>Working Voltage: 5V\uff5e24V</li> <li>Flow Rate Range: 0.3\uff5e6L/min</li> <li>Crowtail Interface</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowtail/crowtail--g3422-water-flow-sensor.html#specification","title":"specification","text":"<ul> <li>Max. Working Current: 15mA (DC 5V)</li> <li>Load Capacity: \u226410mA (DC 5V)</li> <li>Operating Temperature: \u226480\u2103</li> <li>Liquid Temperature: \u2264120\u2103</li> <li>Operating Humidity: 35%\uff5e90%RH</li> <li>Water Pressure: \u22642.0MPa</li> <li>Storage Temperature: -25\uff5e+ 80\u2103</li> <li>Storage Humidity: 25%\uff5e95%RH</li> <li>Dimensions(mm):66.7(L)x42.0(W)x38.0(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--g3422-water-flow-sensor.html#usage","title":"Usage","text":"<p>Here is an example showing how to turn on the Crowtail- G\u00be\" Water Flow Sensor.</p> <p>1. Plug it onto the Digital port 2 of Crowtail - Base Shield using a Crowtail cable.</p> <p>2.Plug the Crowtail - Base Shield onto Arduino.</p> <p>3. Connect Arduino to PC by using a USB cable.</p> <p></p> <p>4.Let the water flow connect to a water pipe.</p> <p>5. Copy and paste code below to a new Arduino sketch, and upload it to your Arduino.</p> <pre><code>  volatile int NbTopsFan; //measuring the rising edges of the signal\nint Calc;                               \nint hallsensor = 2;    //The pin location of the sensor\n\nvoid rpm ()     //This is the function that the interupt calls \n{ \n  NbTopsFan++;  //This function measures the rising and falling edge of the \n\nhall effect sensors signal\n} \n// The setup() method runs once, when the sketch starts\nvoid setup() //\n{ \n  pinMode(hallsensor, INPUT); //initializes digital pin 2 as an input\n  Serial.begin(9600); //This is the setup function where the serial port is initialised,\n\n  attachInterrupt(0, rpm, RISING); //and the interrupt is attached\n} \n// the loop() method runs over and over again,\n// as long as the Arduino has power\nvoid loop ()    \n{\n  NbTopsFan = 0;   //Set NbTops to 0 ready for calculations\n  sei();      //Enables interrupts\n  delay (1000);   //Wait 1 second\n  cli();      //Disable interrupts\n  Calc = (NbTopsFan * 60 / 5.5); //(Pulse frequency x 5.5) / 98Q, = flow rate in L/hour \n\n  Serial.print (Calc, 1); //Prints the number calculated above\n  Serial.print (\" L/hour\\r\\n\"); //Prints \"L/hour\" and returns a  new line\n}\n</code></pre> <p>6.When you upload the code complete,you can measure the water flow rate and see the result via the serial port debug window</p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq2.html","title":"Crowtail- Gas Sensor(MQ2)","text":""},{"location":"Products/Crowtail/crowtail--gas-sensormq2.html#description","title":"Description","text":"<p>The Crowtail - Gas Sensor(MQ2) module is useful for gas leakage detection (in home and industry). It is suitable for detecting H2, LPG, CH4, CO, Alcohol, Smoke or Propane. Due to its high sensitivity and fast response time, measurements can be taken as soon as possible. The sensitivity of the sensor can be adjusted by using the potentiometer.</p> <p>Model: CT0043GSS </p> <p></p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq2.html#features","title":"Features","text":"<ul> <li>Wide detecting scope</li> <li>Stable and long life</li> <li>Fast response and High sensitivity</li> </ul>"},{"location":"Products/Crowtail/crowtail--gas-sensormq2.html#specification","title":"Specification","text":"<p>Dimensions(mm):40.0(L)x20.0(W)x26.9(H)</p> Item Parameter Min Typical Max Unit VCC Working Voltage 4.9 5 5.1 V PH Heating consumption 0.5 - 800 mW RL Load resistance adjustable RH Heater resistance - 33 - \u03a9 Rs Sensing Resistance 3 - 30 k\u03a9"},{"location":"Products/Crowtail/crowtail--gas-sensormq2.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Gas leakage detection.</li> <li>Toys.</li> </ul>"},{"location":"Products/Crowtail/crowtail--gas-sensormq2.html#hardware-overview","title":"Hardware Overview","text":"<p>This is a Analog output sensor. This needs to be connected to any one Analog socket in Base Shield. The examples used in this tutorial makes uses of A0 analog pin. Connect this module to the A0 port of Base Shield.</p> <p>The output voltage from the Gas sensor increases when the concentration of gas increases. Sensitivity can be adjusted by varying the potentiometer. Please note that the best preheat time for the sensor is above 24 hours. For detailed information about the MQ-2 sensor, please refer to the data-sheet provided in resource section.</p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq2.html#getting-started","title":"Getting Started","text":"<p>Connect the Grove - Gas Sensor(MQ2) to A0 port as shown in the above picture. </p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq2.html#gas-detection-basic-example","title":"Gas Detection : Basic Example","text":"<p>In this example, the sensor is connected to A0 pin. The voltage read from the sensor is displayed. This value can be used as a threshold to detect any increase/decrease in gas concentration.</p> <pre><code>void setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  float sensor_volt; \n  float sensorValue;\n\n  sensorValue = analogRead(A0);\n  sensor_volt = sensorValue/1024*5.0;\n\n  Serial.print(\"sensor_volt = \");\n  Serial.print(sensor_volt);\n  Serial.println(\"V\");\n  delay(1000);\n}\n&lt;/syntaxhighlight&gt;\n</code></pre>"},{"location":"Products/Crowtail/crowtail--gas-sensormq2.html#measurement-approximation","title":"Measurement : Approximation","text":"<p>This examples demonstrates a way to know the approximate concentration of Gas. As per the data-sheet of the MQx sensors, these equations are tested for standard conditions and are not calibrated. It may vary based on change in temperature or humidity.</p> <p>1.Keep the Gas Sensor in clean air environment. Upload the below program.</p> <pre><code>&lt;syntaxhighlight lang=\"Arduino\"&gt;\nvoid setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  float sensor_volt; \n  float RS_air; //  Get the value of RS via in a clear air\n  float R0;  // Get the value of R0 via in H2\n  float sensorValue;\n\n/*--- Get a average data by testing 100 times ---*/   \n    for(int x = 0\u00a0; x &lt; 100\u00a0; x++)\n  {\n    sensorValue = sensorValue + analogRead(A0);\n  }\n  sensorValue = sensorValue/100.0;\n/*-----------------------------------------------*/\n\n  sensor_volt = sensorValue/1024*5.0;\n  RS_air = (5.0-sensor_volt)/sensor_volt; // omit *RL\n  R0 = RS_air/9.8; // The ratio of RS/R0 is 9.8 in a clear air from Graph (Found using WebPlotDigitizer)\n\n  Serial.print(\"sensor_volt = \");\n  Serial.print(sensor_volt);\n  Serial.println(\"V\");\n\n  Serial.print(\"R0 = \");\n  Serial.println(R0);\n  delay(1000);\n\n}\n&lt;/syntaxhighlight&gt;\n&lt;br&gt;\n</code></pre> <p>2. Then, open the serial monitor of Arduino IDE. Write down the value of R0 and this needs to be used in the next program. Please node down the R0 after the reading stabilizes.</p> <p>Replace the R0 below with value of R0 tested above . Expose the sensor to any one of the gas listed above.</p> <pre><code>&lt;syntaxhighlight lang=\"Arduino\"&gt;\nvoid setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  float sensor_volt;\n  float RS_gas; // Get value of RS in a GAS\n  float ratio; // Get ratio RS_GAS/RS_air\n  int sensorValue = analogRead(A0);\n  sensor_volt=(float)sensorValue/1024*5.0;\n  RS_gas = (5.0-sensor_volt)/sensor_volt; // omit *RL\n\n  /*-Replace the name \"R0\" with the value of R0 in the demo of First Test -*/\n  ratio = RS_gas/R0;  // ratio = RS/R0 \n  /*-----------------------------------------------------------------------*/\n\n  Serial.print(\"sensor_volt = \");\n  Serial.println(sensor_volt);\n  Serial.print(\"RS_ratio = \");\n  Serial.println(RS_gas);\n  Serial.print(\"Rs/R0 = \");\n  Serial.println(ratio);\n\n  Serial.print(\"\\n\\n\");\n\n  delay(1000);\n\n}\n&lt;/syntaxhighlight&gt;\n</code></pre> <p>Now, we can get the concentration of gas from the below figure</p> <p></p> <p>According to the graph, we can see that the minimum concentration we can test is 100ppm and the maximum is 10000ppm, in a other word, we can get a concentration of gas between 0.01% and 1%. However, we can't provide a formula because the relation between ratio and concentration is nonlinear.</p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq2.html#resources","title":"Resources","text":"<ul> <li>Crowtail Gas Sensor - EAGLE (Schematic and Board) files </li> <li>Crowtail Gas Sensor - PDF Schematic</li> <li>MQ-2 Datasheet</li> </ul>"},{"location":"Products/Crowtail/crowtail--gas-sensormq3.html","title":"Crowtail- Gas Sensor(MQ3)","text":""},{"location":"Products/Crowtail/crowtail--gas-sensormq3.html#introduction","title":"Introduction","text":"<p>The Crowtail - Gas Sensor module is useful for gas leakage detecting(in home and industry). It can detect LPG, i-butane, methane, alcohol, Hydrogen, smoke and so on. Measurements can be taken as soon as possible based on its fast response time. Also the sensitivity can be adjusted by the potentiometer. The module contains a MQ-3 Gas Sensor and ETA1036. High sensitivity to alcohol and small sensitivity to benzine with a stable and long worklife are most important reasons to choose the MQ-3. The ETA1036 is a high efficiency synchronous step-up converter that can provide up to 3W of power to a boosted output from a low voltage source. The start-up voltage requires only 0.85v and the efficiency up to 96%. The MQ-3 is useful for alcohol detecting. There are different gas detectors for sale, like MQ2, MQ5 and MQ9. Below is a contrast table of them.</p> <p>Each Crowtail - Gas Sensor Kit consists of one gas sensor base and four detectors. You can switch the detector on the base according to specific target gases.</p> <ul> <li>Crowtail - Gas Sensor(MQ2)\uff1aCombustible Gas, Smoke</li> <li>Crowtail - Gas Sensor(MQ3)\uff1aAlcohol Vapor</li> <li>Crowtail - Gas Sensor(MQ5)\uff1aLPG, Natural Gas, Town Gas</li> <li>Crowtail - Gas Sensor(MQ9)\uff1aCarbon Monoxide, Coal Gas, Liquefied Gas</li> </ul> <p>Model: CT0041GST </p> <p></p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq3.html#specification","title":"Specification","text":"<ul> <li>Work Voltage: 3.3V ~ 5V</li> <li>High sensitivity to Combustible gas in wide range</li> <li>Stable performance, long life, low cost</li> <li>Simple drive circuit</li> <li>Wide detection range</li> <li>Compatible with Crowtail interface</li> <li>Dimensions(mm):40.0(L)x20.0(W)x21.5(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--gas-sensormq3.html#demonstration","title":"Demonstration","text":"<p>Connect the module with Crowtail base Shield using A0 like following picture and use the program below to gain the voltage. The higher the concentration of the gas is, the bigger the output voltage of the SIG pin gets. Sensitivity can be regulated by rotating the potentiometer. Please note that the best preheat time of the sensor is about 24 hours. For the detailed information about the sensor, please refer to the datasheet.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq3.html#resources","title":"Resources","text":"<ul> <li>MQ-2 datasheet</li> <li>MQ-3 datasheet</li> <li>MQ-5 datasheet</li> <li>MQ-9 datasheet</li> </ul>"},{"location":"Products/Crowtail/crowtail--gas-sensormq5.html","title":"Crowtail- Gas Sensor(MQ5)","text":""},{"location":"Products/Crowtail/crowtail--gas-sensormq5.html#description","title":"Description","text":"<p>The Crowtail- Gas Sensor(MQ5) module is useful for gas leakage detection (in home and industry). It is suitable for detecting H2, LPG, CH4, CO, Alcohol. Due to its high sensitivity and fast response time, measurements can be taken as soon as possible. The sensitivity of the sensor can be adjusted by using the potentiometer. </p> <p>Model: CT0044GSF</p> <p></p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq5.html#features","title":"Features","text":"<ul> <li>Wide detecting scope</li> <li>Stable and long life</li> <li>Fast response and High sensitivity</li> </ul>"},{"location":"Products/Crowtail/crowtail--gas-sensormq5.html#specification","title":"Specification","text":"<p>Dimensions(mm):40.0(L)x20.0(W)x27.4(H)</p> Item Parameter Min Typical Max Unit VCC Working Voltage 4.9 5 5.1 V PH Heating consumption 0.5 - 800 mW RL Load resistance adjustable RH Heater resistance - 31\u00b110% - \u03a9 Rs Sensing Resistance 10 - 60 k\u03a9 Scope Detecting Concentration 200 - 10000 ppm"},{"location":"Products/Crowtail/crowtail--gas-sensormq5.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Gas leakage detection.</li> <li>Toys.</li> </ul>"},{"location":"Products/Crowtail/crowtail--gas-sensormq5.html#hardware-overview","title":"Hardware Overview","text":"<p>This is a Analog output sensor. This needs to be connected to any one Analog socket in Base Shield. The examples used in this tutorial makes uses of A0 analog pin. Connect this module to the A0 port of Base Shield.</p> <p>It is possible to connect the Crowtail module to Arduino directly by using jumper wires by using the connection as shown in the below table:</p> Arduino Gas Sensor 5V VCC GND GND NC NC Analog A0 SIG <p>The output voltage from the Gas sensor increases when the concentration of gas increases. Sensitivity can be adjusted by varying the potentiometer. Please note that the best preheat time for the sensor is above 24 hours. For detailed information about the MQ-5 sensor, please refer to the data-sheet provided in resource section.</p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq5.html#getting-started","title":"Getting Started","text":"<p>Connect the Crowtail- Gas Sensor(MQ5) to A0 port as shown in the above picture. </p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq5.html#gas-detection-basic-example","title":"Gas Detection : Basic Example","text":"<p>In this example, the sensor is connected to A0 pin. The voltage read from the sensor is displayed. This value can be used as a threshold to detect any increase/decrease in gas concentration.</p> <pre><code>&lt;syntaxhighlight lang=\"Arduino\"&gt;\nvoid setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  float sensor_volt; \n  float sensorValue;\n\n  sensorValue = analogRead(A0);\n  sensor_volt = sensorValue/1024*5.0;\n\n  Serial.print(\"sensor_volt = \");\n  Serial.print(sensor_volt);\n  Serial.println(\"V\");\n  delay(1000);\n}\n\n&lt;/syntaxhighlight&gt;\n</code></pre>"},{"location":"Products/Crowtail/crowtail--gas-sensormq5.html#measurement-approximation","title":"Measurement : Approximation","text":"<p>This examples demonstrates a way to know the approximate concentration of Gas. As per the data-sheet of the MQ5 sensors, these equations are tested for standard conditions and are not calibrated. It may vary based on change in temperature or humidity.</p> <p>1.Keep the Gas Sensor in clean air environment. Upload the below program.</p> <pre><code>&lt;syntaxhighlight lang=\"Arduino\"&gt;\nvoid setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  float sensor_volt; \n  float RS_air; //  Get the value of RS via in a clear air\n  float R0;  // Get the value of R0 via in H2\n  float sensorValue;\n\n/*--- Get a average data by testing 100 times ---*/   \n    for(int x = 0\u00a0; x &lt; 100\u00a0; x++)\n  {\n    sensorValue = sensorValue + analogRead(A0);\n  }\n  sensorValue = sensorValue/100.0;\n/*-----------------------------------------------*/\n\n  sensor_volt = sensorValue/1024*5.0;\n  RS_air = (5.0-sensor_volt)/sensor_volt; // omit *RL\n  R0 = RS_air/6.5; // The ratio of RS/R0 is 6.5 in a clear air from Graph (Found using WebPlotDigitizer)\n\n  Serial.print(\"sensor_volt = \");\n  Serial.print(sensor_volt);\n  Serial.println(\"V\");\n\n  Serial.print(\"R0 = \");\n  Serial.println(R0);\n  delay(1000);\n\n}\n\n&lt;/syntaxhighlight&gt;\n&lt;br&gt;\n</code></pre> <p>2. Then, open the serial monitor of Arduino IDE. Write down the value of R0 and this needs to be used in the next program. Please node down the R0 after the reading stabilizes.</p> <p>Replace the R0 below with value of R0 tested above. Expose the sensor to any one of the gas listed above.</p> <pre><code>&lt;syntaxhighlight lang=\"Arduino\"&gt;\nvoid setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  float sensor_volt;\n  float RS_gas; // Get value of RS in a GAS\n  float ratio; // Get ratio RS_GAS/RS_air\n  int sensorValue = analogRead(A0);\n  sensor_volt=(float)sensorValue/1024*5.0;\n  RS_gas = (5.0-sensor_volt)/sensor_volt; // omit *RL\n\n  /*-Replace the name \"R0\" with the value of R0 in the demo of First Test -*/\n  ratio = RS_gas/R0;  // ratio = RS/R0 \n  /*-----------------------------------------------------------------------*/\n\n  Serial.print(\"sensor_volt = \");\n  Serial.println(sensor_volt);\n  Serial.print(\"RS_ratio = \");\n  Serial.println(RS_gas);\n  Serial.print(\"Rs/R0 = \");\n  Serial.println(ratio);\n\n  Serial.print(\"\\n\\n\");\n\n  delay(1000);\n\n}\n&lt;/syntaxhighlight&gt;\n&lt;br&gt;\n</code></pre> <p>Now, we can get the concentration of gas from the below figure</p> <p></p> <p>According to the figure, we can see that the minimum concentration we can test is 200ppm and the maximum is 10000ppm, in a other word, we can get a concentration of gas between 0.02% and 1%. However, we can't provide a formula because the relation between ratio and concentration is nonlinear.</p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq5.html#resources","title":"Resources","text":"<ul> <li>MQ-5 datasheet</li> </ul>"},{"location":"Products/Crowtail/crowtail--gas-sensormq9.html","title":"Crowtail- Gas Sensor(MQ9)","text":""},{"location":"Products/Crowtail/crowtail--gas-sensormq9.html#description","title":"Description","text":"<p>The Crowtail - Gas Sensor(MQ9) module is useful for gas leakage detection (in home and industry). It is suitable for detecting LPG, CO, CH4. Due to its high sensitivity and fast response time, measurements can be taken as soon as possible. The sensitivity of the sensor can be adjusted by using the potentiometer.</p> <p>Model: CT0045GSN </p> <p></p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq9.html#features","title":"Features","text":"<ul> <li>Wide detecting scope</li> <li>Stable and long life</li> <li>Fast response and High sensitivity</li> </ul>"},{"location":"Products/Crowtail/crowtail--gas-sensormq9.html#specification","title":"Specification","text":"<p>Dimensions(mm):40.0(L)x20.0(W)x22.0(H)</p> Item Parameter Min Typical Max Unit VCC Working Voltage 4.9 5 5.1 V PH Heating consumption 0.5 - 340 mW RL Load resistance adjustable RH Heater resistance - 33\u03a9\u00b15% - \u03a9 Rs Sensing Resistance 2 - 20000 \u03a9 CO/CH4/LPG Scope Detecting Concentration 200 - 1000/10000/10000 ppm"},{"location":"Products/Crowtail/crowtail--gas-sensormq9.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Gas leakage detection.</li> <li>Toys.</li> </ul>"},{"location":"Products/Crowtail/crowtail--gas-sensormq9.html#hardware-overview","title":"Hardware Overview","text":"<p>This is a Analog output sensor. This needs to be connected to any one Analog socket in Base Shield. The examples used in this tutorial makes uses of A0 analog pin. Connect this module to the A0 port of Base Shield.</p> <p>It is possible to connect the Grove module to Arduino directly by using jumper wires by using the connection as shown in the below table:</p> Arduino Gas Sensor 5V VCC GND GND NC NC Analog A0 SIG <p>The output voltage from the Gas sensor increases when the concentration of gas increases. Sensitivity can be adjusted by varying the potentiometer. Please note that the best preheat time for the sensor is above 24 hours. For detailed information about the MQ-9 sensor, please refer to the data-sheet provided in resource section.</p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq9.html#getting-started","title":"Getting Started","text":"<p>Connect the Crowtail- Gas Sensor(MQ9) to A0 port as shown in the above picture.</p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq9.html#gas-detection-basic-example","title":"Gas Detection : Basic Example","text":"<p>In this example, the sensor is connected to A0 pin. The voltage read from the sensor is displayed. This value can be used as a threshold to detect any increase/decrease in gas concentration.</p> <pre><code>&lt;syntaxhighlight lang=\"Arduino\"&gt;\nvoid setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  float sensor_volt; \n  float sensorValue;\n\n  sensorValue = analogRead(A0);\n  sensor_volt = sensorValue/1024*5.0;\n\n  Serial.print(\"sensor_volt = \");\n  Serial.print(sensor_volt);\n  Serial.println(\"V\");\n  delay(1000);\n}\n\n&lt;/syntaxhighlight&gt;\n</code></pre>"},{"location":"Products/Crowtail/crowtail--gas-sensormq9.html#measurement-approximation","title":"Measurement : Approximation","text":"<p>This examples demonstrates a way to know the approximate concentration of Gas. As per the data-sheet of the MQ9 sensors, these equations are tested for standard conditions and are not calibrated. It may vary based on change in temperature or humidity.</p> <p>1.Keep the Gas Sensor in clean air environment. Upload the below program.</p> <pre><code>&lt;syntaxhighlight lang=\"Arduino\"&gt;\nvoid setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  float sensor_volt; \n  float RS_air; //  Get the value of RS via in a clear air\n  float R0;  // Get the value of R0 via in LPG\n  float sensorValue;\n\n/*--- Get a average data by testing 100 times ---*/   \n    for(int x = 0\u00a0; x &lt; 100\u00a0; x++)\n  {\n    sensorValue = sensorValue + analogRead(A0);\n  }\n  sensorValue = sensorValue/100.0;\n/*-----------------------------------------------*/\n\n  sensor_volt = sensorValue/1024*5.0;\n  RS_air = (5.0-sensor_volt)/sensor_volt; // omit *RL\n  R0 = RS_air/9.9; // The ratio of RS/R0 is 9.9 in LPG gas from Graph (Found using WebPlotDigitizer)\n\n  Serial.print(\"sensor_volt = \");\n  Serial.print(sensor_volt);\n  Serial.println(\"V\");\n\n  Serial.print(\"R0 = \");\n  Serial.println(R0);\n  delay(1000);\n\n}\n\n&lt;/syntaxhighlight&gt;\n</code></pre> <p>2. Then, open the serial monitor of Arduino IDE. Write down the value of R0 and this needs to be used in the next program. Please node down the R0 after the reading stabilizes.</p> <p>Replace the R0 below with value of R0 tested above. Expose the sensor to any one of the gas listed above.</p> <pre><code>&lt;syntaxhighlight lang=\"Arduino\"&gt;\nvoid setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  float sensor_volt;\n  float RS_gas; // Get value of RS in a GAS\n  float ratio; // Get ratio RS_GAS/RS_air\n  int sensorValue = analogRead(A0);\n  sensor_volt=(float)sensorValue/1024*5.0;\n  RS_gas = (5.0-sensor_volt)/sensor_volt; // omit *RL\n\n  /*-Replace the name \"R0\" with the value of R0 in the demo of First Test -*/\n  ratio = RS_gas/R0;  // ratio = RS/R0 \n  /*-----------------------------------------------------------------------*/\n\n  Serial.print(\"sensor_volt = \");\n  Serial.println(sensor_volt);\n  Serial.print(\"RS_ratio = \");\n  Serial.println(RS_gas);\n  Serial.print(\"Rs/R0 = \");\n  Serial.println(ratio);\n\n  Serial.print(\"\\n\\n\");\n\n  delay(1000);\n\n}\n&lt;/syntaxhighlight&gt;\n</code></pre> <p>Now, we can get the concentration of gas from the below figure</p> <p></p> <p>According to the figure, we can see that the minimum concentration we can test is 200ppm and the maximum is 10000ppm, in a other word, we can get a concentration of gas between 0.02% and 1%. However, we can't provide a formula because the relation between ratio and concentration is nonlinear.</p>"},{"location":"Products/Crowtail/crowtail--gas-sensormq9.html#resources","title":"Resources","text":"<ul> <li>MQ-9 datasheet</li> </ul>"},{"location":"Products/Crowtail/crowtail--gesture.html","title":"Crowtail- Gesture","text":""},{"location":"Products/Crowtail/crowtail--gesture.html#description","title":"Description","text":"<p>The sensor on Crowtail- Gesture is PAJ7620U2 that integrates gesture recognition function with general I2C interface into a single chip. It can recognize 9 basic gestures ,and these gestures information can be simply accessed via the I2C bus.</p> <p>Application: You can use Gesture as an input device to control another Cowtail, or a computer, mobile phone, smart car, robot, and more with a simple swipe of your hand.</p> <p>Model: CT010628G</p> <p></p>"},{"location":"Products/Crowtail/crowtail--gesture.html#features","title":"Features","text":"<p>1 See 9 gestures in the following figure</p> <p></p> <p>2 Built-in proximity detection</p> <p>3 Various main boards support : Arduino UNO/Crowduino/Arduino Mega2560</p>"},{"location":"Products/Crowtail/crowtail--gesture.html#specification","title":"Specification","text":"<p>Dimensions(mm):20.0(L)x20.0(W)x11.8(H)</p> Sensor PAJ7620U2 Power supply 5V Ambient light immunity &lt; 100k Lux Gesture speed in Normal Mode 60\u00b0/s to 600\u00b0/s Gesture speed in Gaming Mode 60\u00b0/s to 1200\u00b0/s Interface type IIC interface up to 400 kbit/s Operating Temperature -40\u00b0C to +85\u00b0C"},{"location":"Products/Crowtail/crowtail--gesture.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--gesture.html#hardware-installation","title":"Hardware Installation","text":"<p>1.Connect this Crowtail- Gesture module to the I2C port of Base Shield.</p> <p>2.The red led connect to D5 port,yellow led connect to D4 port,green led connect to D3 port.</p> <p></p> <p>3.Download the library code as a zip file Gesture_PAJ7620.</p> <p>3.Unzip the downloaded file into your \u2026/arduino/libraries.</p> <p>4.The following simple demo will show you a very easy application:</p> <ul> <li> <p>When you move left to right, the red led will be turned on, the opposite gesture ,the red led will be turned off.</p> </li> <li> <p>When you move front to back, the green led will be turned on, the opposite gesture , the green led will be turned off.</p> </li> <li> <p>When you move top to bottom, the yellow led will be turned on, the opposite gesture , the green led will be turned off.</p> </li> </ul> <pre><code>#include &lt;Wire.h&gt;\n#include \"paj7620.h\"\nint led1 = 5; \nint led2 = 4;\nint led3 = 3;\nvoid setup()\n{\n  paj7620Init();\n  pinMode(led1, OUTPUT);    \n   pinMode(led2, OUTPUT); \n    pinMode(led3, OUTPUT);  \n}\n\nvoid loop()\n{\n    uint8_t data = 0;  // Read Bank_0_Reg_0x43/0x44 for gesture result.\n\n    paj7620ReadReg(0x43, 1, &amp;data); \n    if (data == GES_UP_FLAG)                            \n    {digitalWrite(led1, HIGH); \n    }                   \n    if (data == GES_DOWN_FLAG) \n{   digitalWrite(led1, LOW);                    \n       }  \n        if(data == GES_FORWARD_FLAG) \n       {\n       digitalWrite(led2, HIGH);\n       }\n       if(data == GES_BACKWARD_FLAG)\n       {digitalWrite(led2, LOW); \n       }\n       if(data == GES_RIGHT_FLAG)\n       {digitalWrite(led3, HIGH);\n       }\n       if(data ==GES_LEFT_FLAG)\n       {\n         digitalWrite(led3, LOW); \n       }\n\n}\n</code></pre>"},{"location":"Products/Crowtail/crowtail--gesture.html#resource","title":"Resource","text":"<ul> <li>Gesture_PAJ7620</li> <li>Crowtail- Gesture eagle file</li> </ul>"},{"location":"Products/Crowtail/crowtail--gps.html","title":"Crowtail- GPS","text":""},{"location":"Products/Crowtail/crowtail--gps.html#description","title":"Description","text":"<p>This Crowtail - GPS module is a cost-efficient and field-programmable gadget armed with a SIM28 (U-blox 6 is old version) and serial communication configuration. It features 22 tracking / 66 acquisition channel GPS receiver. The sensitivity of tracking and acquisition both reach up to -160dBm, making it a great choice for personal navigation projects and location services, as well as an outstanding one among products of the same price class.</p> <p>Model: CT0055GPS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--gps.html#specification","title":"Specification","text":"<ul> <li>Input Voltage: 3.3V, 5V</li> <li>BaudRate: 4800 - 57600( u-blox version)</li> <li>BaudRate: 9600 - 115200</li> <li>Default BaudRate: 9600</li> <li>Supports NMEA and U-Blox 6 protocols</li> <li>Low power consumption</li> <li>Baud rates configurable</li> <li>Crowtail compatible interface</li> <li>Dimensions(mm):40.0(L)x20.0(W)x6.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--gps.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--gps.html#application-1-print-the-gps-data-with-serial-port","title":"Application 1: Print the GPS data with serial port","text":"<p>This example simply prints the output of the frames received by the GPS module to the serial port of an arduino. first, connect the UART_RX to PD3, UART_TX to PD2. second, upload the following demo code to Arduino or Crowduino.  </p> <pre><code>//at 9600 bps 8-N-1\n//Computer is connected to Arduino/Crowduino\n//SoftSerial Shield is connected to the Software UART:D2&amp;D3 \n\n#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial SoftSerial(6, 7);\nunsigned char buffer[256]; // buffer array for data recieve over serial port\nint count=0;     // counter for buffer array \nvoid setup()\n{\n  SoftSerial.begin(9600);               // the SoftSerial baud rate   \n  Serial.begin(9600);             // the Serial port of Arduino baud rate.\n\n}\n\nvoid loop()\n{\n  if (SoftSerial.available())              // if date is comming from softwareserial port ==&gt; data is comming from SoftSerial shield\n  {\n    while(SoftSerial.available())          // reading data into char array \n    {\n      buffer[count++]=SoftSerial.read();     // writing data into array\n      if(count == 256)break;\n  }\n    Serial.write(buffer,count);            // if no data transmission ends, write buffer to hardware serial port\n    clearBufferArray();              // call clearBufferArray function to clear the storaged data from the array\n    count = 0;                       // set counter of while loop to zero\n\n\n  }\n  if (Serial.available())            // if data is available on hardwareserial port ==&gt; data is comming from PC or notebook\n    SoftSerial.write(Serial.read());       // write it to the SoftSerial shield\n}\nvoid clearBufferArray()              // function to clear buffer array\n{\n  for (int i=0; i&lt;count;i++)\n    { buffer[i]=NULL;}                  // clear all index of array with command NULL\n}\n</code></pre> <p>Third, Open the serial monitor, select the serial rate as 9600. you will get the data return from the GPS module. </p>"},{"location":"Products/Crowtail/crowtail--gps.html#application-2-use-the-u-center-software-to-locate-your-place","title":"Application 2: Use the u-center software to Locate your place","text":"<p>1. Down load the U-center software. you can also go to the U-blox office website to download this software. And install it. 2. Upload the demo code in Application 1 to Arduino. 3. Open U-center, choose the serial port and set the serial rate as 9600. After a while, you will get the location of the GPS shield. </p>"},{"location":"Products/Crowtail/crowtail--gps.html#resource","title":"Resource","text":"<ul> <li>u-centersetup_v8.18</li> <li>u-center_UserGuide_(UBX-13005250)</li> <li>UART-GPS-NEO-6M</li> <li>Crowtail GPS Program</li> <li>Crowtail- GPS v1.0 eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--hall-sensor.html","title":"Crowtail- Hall Sensor","text":""},{"location":"Products/Crowtail/crowtail--hall-sensor.html#description","title":"Description","text":"<p>The Crowtail- Hall Sensor uses the Allegro\u2122 A1101 Hall-effect switches are next generation replacements for the popular Allegro312x and 314x lines of unipolar switches.It measures the Hall Effect, which is a production of a voltage difference across an electrical conductor, transverse to an electric current in the conductor as well as a magnetic field perpendicular to the current. The output of the continuous-time switch Hall sensor switches low(turns on) when a magnetic field (south polarity) perpendicular to the Hall sensor exceeds the BOP threshold, and it switches high( turn off) when the magnetic field disappears.</p> <p>Model: CT0024HS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--hall-sensor.html#features","title":"Features","text":"<ul> <li>Crowtail Compatible Interface</li> <li>400ns transition period for rise and fall.</li> <li>Continuous-time hall effect sensor</li> <li>Reverse battery protection</li> </ul>"},{"location":"Products/Crowtail/crowtail--hall-sensor.html#specification","title":"Specification","text":"<p>Dimensions(mm):20.0(L)x20.0(W)x6.8(H)</p> Item Min Typical Max Unit Voltage 3.8 5.0 24 V Current 4.1 - 24 mA Operating Temperature -40 - 85 \u00baC"},{"location":"Products/Crowtail/crowtail--hall-sensor.html#usage","title":"Usage","text":"<p>1.Hardware Connection</p> <p>Connect the Hall Sensor to Digital port 4 of the Crowtail - Basic Shield using a 3 pin cable and connect Crowtail-LED to Digital Port 5.Then connect Arduino to PC by using a USB cable.</p> <p></p> <p>2.Upload the following sample sketch:</p> <pre><code>const int hall= 4;//PIN 4\nconst int led= 5;//PIN 5\nvoid setup()\n{\n pinMode(hall,INPUT); \n pinMode(led,OUTPUT);\n}\nvoid loop()\n{\n  if(digitalRead(hall)==LOW){\n  digitalWrite(led,HIGH);\n }\n else{\n digitalWrite(led,LOW);\n }\n delay(500);\n}\n</code></pre> <p>3.When the magnet near the hall sensor, the LED will light up.  </p>"},{"location":"Products/Crowtail/crowtail--hall-sensor.html#resource","title":"Resource","text":"<ul> <li>Hall sensor Program</li> <li>Crowtail_Hall_Sensor_eagle_files</li> </ul>"},{"location":"Products/Crowtail/crowtail--haptic-motor.html","title":"Crowtail- Rotation Angle Sensor","text":""},{"location":"Products/Crowtail/crowtail--haptic-motor.html#introduction","title":"Introduction","text":"<p>The Crowtail-haptail Motor is using little DRV2605 motor driver form TI. Its designed specifically for controlling haptic motors - buzzers and vibration motors. Normally one would just turn those kinds of motors on and off, but this driver has the ability to have various effects when driving a vibe motor. For example, ramping the vibration level up and down, 'click' effects, different buzzer levels, or even having the vibration follow a musical/audio input.</p> <p>Mode: CRT00349H</p> <p></p>"},{"location":"Products/Crowtail/crowtail--haptic-motor.html#features","title":"Features","text":"<ul> <li> <p>Specifically for controlling haptic motors- buzzers and vibration motors</p> </li> <li> <p>Follow a musical/audio input</p> </li> <li> <p>Support LRA (Linear Resonance Actuator) and ERM (Eccentric Rotating Mass)</p> </li> <li> <p>Works with both 3V and 5V power/logic</p> </li> </ul>"},{"location":"Products/Crowtail/crowtail--haptic-motor.html#specification","title":"Specification","text":"<ul> <li> <p>Dimensions(mm):20.0(L)x20.0(W)x6.8(H)</p> </li> <li> <p>Crowtail IIC interface</p> </li> <li> <p>motor : round or flatte 10*2.7MM</p> </li> <li> <p>using little vibration pancake ERM</p> </li> </ul>"},{"location":"Products/Crowtail/crowtail--haptic-motor.html#uager","title":"Uager","text":"<p>We have set the pin to IIC interface and have a library for you to use, so it's usage pretty simple.</p> <p>1.Hardware Connection</p> <p>Connect the Crowtail- Haptic Motor to IIC port of the Crowtail - Basic Shield using a 4 pin cable .Then connect Arduino to PC by using a USB cable.</p> <p></p> <p>2.Softwart Connection</p> <p>Download DRV2605 library for Arduino boards; Unzip and put it in the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries;</p> <p>Upload it into your Arduino board and observe the vibration of the motor.</p> <pre><code>#include &lt;Wire.h&gt;\n#include \"DRV2605.h\"\n\nDRV2605 drv;\n\nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"DRV test\");\n  drv.begin();\n\n  drv.selectLibrary(1);\n\n  // I2C trigger by sending 'go' command \n  // default, internal trigger when sending GO command\n  drv.setMode(DRV2605_MODE_INTTRIG); \n}\n\nuint8_t effect = 1;\n\nvoid loop() {\n  Serial.print(\"Effect #\"); Serial.println(effect);\n\n  // set the effect to play\n  drv.setWaveform(0, effect);  // play effect \n  drv.setWaveform(1, 0);       // end waveform\n\n  // play the effect!\n  drv.go();\n\n  // wait a bit\n  delay(500);\n\n  effect++;\n  if (effect &gt; 117) effect = 1;\n}\n</code></pre>"},{"location":"Products/Crowtail/crowtail--htu21d-humidity26-temperature-sensor.html","title":"Crowtail- HTU21D Humidity& Temperature Sensor","text":""},{"location":"Products/Crowtail/crowtail--htu21d-humidity26-temperature-sensor.html#description","title":"Description","text":"<p>Crowtail- HTU21D Humidity &amp;Temperature sensor is a low-cost, easy to use, highly accurate, digital humidity and temperature sensor. And the work voltage range about this sensor is 1.5V-3.6V, so we need to use the AMS1117 to achieve step-down when we want it work with our crowduino which has a 5V voltage output. The sensor outputs the calibrated digital signal in standard I2C format. Diversified output mode, wide operating voltage range, while high temperature accuracy and humidity accuracy. HTU21 series module designed for low-power/small-volume application design, with good quality, fast response speed, anti-interference ability, cost-effective advantages, very low power consumption. It\u2019s ideal for environmental sensing and data logging and perfect for a weather stations or humidor control systems. All you need is connect the specific crowtail port into the arduino/crowduino by using a crowtail cable.</p> <p>Model: CRT02120H </p> <p></p>"},{"location":"Products/Crowtail/crowtail--htu21d-humidity26-temperature-sensor.html#specifications","title":"Specifications","text":"Item Value Input voltage 5V Humidity measurement range 0-100% RH Temperature measurement range -40 \u2103 -105 \u2103 Maximum power consumption 2.7uW Communication I2C Humidity accuracy range (10% RH to 95% RH) HTU21D \u00b1 2% RH Load Weight 1KG Humidity hysteresis \u00b1 1% RH Measurement time 50ms Annual drift -0.5% RH / year Response time 5s Dimensions(mm) 20.0(L)x20.0(W)x9.8(H)"},{"location":"Products/Crowtail/crowtail--htu21d-humidity26-temperature-sensor.html#interface","title":"Interface","text":""},{"location":"Products/Crowtail/crowtail--htu21d-humidity26-temperature-sensor.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Crowtail/crowtail--htu21d-humidity26-temperature-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--htu21d-humidity26-temperature-sensor.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs: </p> Crowduino Uno Base Shield Crowtail- HTU21D Humidity &amp;Temperature sensor Get one now Get one now Get one now <p>STEP2 Plug Crowtail-Base Shield into Crowduino Uno; STEP3 Plug HTU21D Humidity&amp;Temperature Sensor into I2C port on the Crowtail-Base Shield I Port with Crowtail cable; STEP4 Connect Crowduino Uno to PC via a Mini USB cable. </p> NOTE If we don't have Crowtail Base Shield, We also can directly connect this module to Crowduino Uno as below. Crowduino Uno Weight Sensor A4(J7) SDA A5(J7) SCL 5V VCC GND GND"},{"location":"Products/Crowtail/crowtail--htu21d-humidity26-temperature-sensor.html#software","title":"Software","text":"<p>STEP 1.Download filesSparkFun_HTU21D_Breakout_Arduino_Library-master.zip STEP2 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201d from the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure.  STEP 3 Install Library: Unzip the SparkFun_HTU21D_Breakout_Arduino_Library-master.zip file and copy it to the Libraries directory under the Arduino installation directory  STEP4 Open Arduino IDE and load SparkFun_HTU21D_RegisterReading\uff1aclick \u201cFile\u2192Examples\u2192SparkFun HTU21D Humidity and Temperature Sensor Breakout\u2192SparkFun_HTU21D_RegisterReading\u201d  STEP5 Click the  to upload the code to the Crowduino board STEP6 After the program is downloaded, open the Serial Monitor of Arduino IDE, set baud rate to 9600, and the value of humidity and temperature will be printed,such as shown in the figure </p>"},{"location":"Products/Crowtail/crowtail--htu21d-humidity26-temperature-sensor.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Crowtail/crowtail--htu21d-humidity26-temperature-sensor.html#resources","title":"Resources","text":"<p>Crowtail-_HTU21D_Humidity%26Temperature_Sensor_eagle_file.zip SparkFun_HTU21D_Breakout_Arduino_Library-master.zip HTU21D_datasheet.pdf </p>"},{"location":"Products/Crowtail/crowtail--i2c-color-sensor.html","title":"Crowtail- I2C Color Sensor","text":""},{"location":"Products/Crowtail/crowtail--i2c-color-sensor.html#description","title":"Description","text":"<p>This module is based on the color sensor TCS3414CS with digital output I2C. Based on the 8*2 array of filtered photodiodes and 16-bits analog-to-digital converters, you can gain the color chromaticity of ambient light or the color of objects. Of the 16 photodiodes, 4 have red filters, 4 have green filters, 4 have blue filters and 4 have no filter(clear). With the synchronization input pin, external pulsed light source can provides precise synchronous conversion control.</p> <p>Model: CT0067ICS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--i2c-color-sensor.html#specification","title":"Specification","text":"<ul> <li>Crowtail compatible interface</li> <li>16-Bit digital output with I 2C at 400 kHz</li> <li>SYNC Input Synchronizes Integration Cycle to Modulated Light Sources</li> <li>Operating temperature range -40\u00b0C to 85\u00b0C</li> <li>Programmable interrupt function with User-Defined Upper and lower threshold settings</li> <li>Dimensions(mm):20.0(L)x20.0(W)x13.6(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--i2c-color-sensor.html#usage","title":"Usage","text":"<p>1.Download Crowtail- I2C Color Sensor library; Unzip and put it in the libraries file : ..\\arduino-1.0\\libraries;</p> <p>2.Open \"colorview\" example via the path: File --&gt; Examples --&gt; Adafruit TCS34725 --&gt;colorview.</p> <pre><code>#include &lt;Wire.h&gt;\n//#include &lt;math.h&gt;\n#include &lt;IICColorSensor.h&gt;\n\nvoid setup()\n{\n    Serial.begin(9600);\n    Wire.begin();\n}\n\nvoid loop()\n{\n    int red, green, blue;\n    IICColorSensor colorSensor;\n    colorSensor.ledStatus = 1;                          // When turn on the color sensor LED, ledStatus = 1; When turn off the color sensor LED, ledStatus = 0.\n    while(1)\n    {\n        colorSensor.readRGB(&amp;red, &amp;green, &amp;blue);       //Read RGB values to variables.\n        delay(300);\n        Serial.print(\"The RGB value are: RGB( \");\n        Serial.print(red,DEC);\n        Serial.print(\", \");\n        Serial.print(green,DEC);\n        Serial.print(\", \");\n        Serial.print(blue,DEC);\n        Serial.println(\" )\");\n        colorSensor.clearInterrupt();\n    }\n}\n</code></pre> <p>3.Upload it into your Arduino board and have a test.</p>"},{"location":"Products/Crowtail/crowtail--i2c-color-sensor.html#resource","title":"Resource","text":"<ul> <li>Crowtail- I2C Color Sensor Program</li> <li>Crowtail- I2C Color Sensor eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--i2c-eeprom.html","title":"Crowtail- I2C EEPROM","text":""},{"location":"Products/Crowtail/crowtail--i2c-eeprom.html#description","title":"Description","text":"<p>If you need to do some data storage in Arduino but found that the EEPROM in ATmega chip too limited, then this Crowtail- I2C EEPROM is your best choice. This module is based on the EEPROM chip AT24C256, which has 256k bit capacity. It communicate with Arduino with I2C bus, helps you do much more data storage easily.</p> <p>Model: CT010021E </p>"},{"location":"Products/Crowtail/crowtail--i2c-eeprom.html#specification","title":"Specification","text":"<ul> <li>Onboard chip AT24C256 chip</li> <li>Onboard the I2C communications required pull-up resistor</li> <li>All pins are leads and marked</li> <li>Dimensions(mm):20.0(L)x20.0(W)x9.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--i2c-eeprom.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p>You can connect to I port for the Crowtail- Base Shield.</p> <p></p> <p>2.Upload the following sample sketch to store data and read data.</p> <pre><code>#include &lt;Wire.h&gt;\n#define EEPROM_ADDR 0x50           // I2C Buss address of 24LC256 256K EEPROM\n\nvoid setup()\n{\n  Wire.begin();                        // join I2C bus (address optional for master)\n  Serial.begin(9600);\n\n  // TESTS FOR EACH FUNCTION BEGIN HERE\n  Serial.println(\"Writing Test:\");\n  for (int i=0; i&lt;20; i++){            // loop for first 20 slots\n    i2c_eeprom_write_byte(EEPROM_ADDR,i,i+65);   // write address + 65 A or 97 a\n    Serial.print(\". \");\n    delay(10);                         // NEED THIS DELAY!\n  }\n  Serial.println(\"\");\n  delay(500);\n\n  Serial.println(\"Reading Test:\");\n  for (int i=0; i&lt;20; i++){            // loop for first 20 slots\n    Serial.write(i2c_eeprom_read_byte(EEPROM_ADDR, i));\n    Serial.print(\" \");\n  }\n\n  // setup for page tests . . .\n  byte PageData[30];                   // array that will hold test data for a page\n  byte PageRead[30];                   // array that will hold result of data for a page\n  for (int i=0; i&lt;30; i++){            // zero both arrays for next test\n    PageData[i] = 0;\n    PageRead[i] = 0;\n  }\n  Serial.println(\"\");\n  for (int i=0; i&lt;30; i++) PageData[i] = i+33;  // fill up array for next test char 33 =\u00a0!\n\n  Serial.println(\"Writing Page Test:\");\n  i2c_eeprom_write_page(EEPROM_ADDR, 100, PageData, 28 ); // 28 bytes/page is max\n\n  Serial.println(\"Reading Page Test:\");\n  i2c_eeprom_read_buffer( EEPROM_ADDR, 100, PageRead, 28);\n  for (int i=0; i&lt;28; i++){\n    Serial.write(PageRead[i]);    // display the array read\n    Serial.print(\" \");\n  }\n}\n\nvoid loop()\n{\n}\n\nvoid i2c_eeprom_write_byte( int deviceaddress, unsigned int eeaddress, byte data )\n{\n  int rdata = data;\n  Wire.beginTransmission(deviceaddress);\n  Wire.write((int)(eeaddress &gt;&gt; 8));    // Address High Byte\n  Wire.write((int)(eeaddress &amp; 0xFF));  // Address Low Byte\n  Wire.write(rdata);\n  Wire.endTransmission();\n}\n\n// Address is a page address, 6-bit (63). More and end will wrap around\n// But data can be maximum of 28 bytes, because the Wire library has a buffer of 32 bytes\nvoid i2c_eeprom_write_page\n( int deviceaddress, unsigned int eeaddresspage, byte* data, byte length )\n{\n  Wire.beginTransmission(deviceaddress);\n  Wire.write((int)(eeaddresspage &gt;&gt; 8)); // Address High Byte\n  Wire.write((int)(eeaddresspage &amp; 0xFF)); // Address Low Byte\n  byte c;\n  for ( c = 0; c &lt; length; c++)\n    Wire.write(data[c]);\n  Wire.endTransmission();\n  delay(10);                           // need some delay\n}\n\nbyte i2c_eeprom_read_byte( int deviceaddress, unsigned int eeaddress )\n{\n  byte rdata = 0xFF;\n  Wire.beginTransmission(deviceaddress);\n  Wire.write((int)(eeaddress &gt;&gt; 8));    // Address High Byte\n  Wire.write((int)(eeaddress &amp; 0xFF));  // Address Low Byte\n  Wire.endTransmission();\n  Wire.requestFrom(deviceaddress,1);\n  if (Wire.available()) rdata = Wire.read();\n  return rdata;\n}\n\n// should not read more than 28 bytes at a time!\nvoid i2c_eeprom_read_buffer( int deviceaddress, unsigned int eeaddress, byte *buffer, int length )\n{\n  Wire.beginTransmission(deviceaddress);\n  Wire.write((int)(eeaddress &gt;&gt; 8));    // Address High Byte\n  Wire.write((int)(eeaddress &amp; 0xFF));  // Address Low Byte\n  Wire.endTransmission();\n  Wire.requestFrom(deviceaddress,length);\n  //int c = 0;\n  for ( int c = 0; c &lt; length; c++ )\n    if (Wire.available()) buffer[c] = Wire.read();\n}\n</code></pre> <p>3. When you upload the code complete,you can see the result via the serial port debug window which means the EEPROM could to be used Save and read data.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--i2c-eeprom.html#resource","title":"Resource","text":"<ul> <li>AT24C256 Datasheet</li> <li>Crowtail- I2C EEPROM eagle file</li> <li>AT24C02SC_Arduino_Demo</li> <li>I2C EEPROM Introduction on Arduino</li> </ul>"},{"location":"Products/Crowtail/crowtail--i2c-hub.html","title":"Crowtail- I2C Hub","text":""},{"location":"Products/Crowtail/crowtail--i2c-hub.html#description","title":"Description","text":"<p>This is an I2C interface expansion board with four 4-Pin I2C interfaces. When the I2C interfaces on the Base shield is not enough, it can provide more extensive IIC pins for your project.This corwtail module is small and simple, if the I2C port of you project is not enough, it's a good choice.</p> <p>Model: CRT00529H</p> <p></p>"},{"location":"Products/Crowtail/crowtail--i2c-hub.html#features","title":"Features","text":"<p>Multiple connections</p> <p>Dimensions(mm):40.0(L)x20.0(W)x9.8(H)</p>"},{"location":"Products/Crowtail/crowtail--i2c-hub.html#usage","title":"Usage","text":"<p>Connect multiple I2C modules Access multiple external I2C modules, because each I2C address is not the same, you can work at the same time, as follows:</p> <p></p>"},{"location":"Products/Crowtail/crowtail--i2c-hub.html#resource","title":"Resource","text":"<ul> <li>Crowtail-I2C_Hub schematic diagram Program</li> </ul>"},{"location":"Products/Crowtail/crowtail--i2c-lcd.html","title":"Crowtail- I2C LCD","text":""},{"location":"Products/Crowtail/crowtail--i2c-lcd.html#description","title":"Description","text":"<p>A new crowtail for LCD1602, it contains LCD1602 and MCP23008 module. Unique interface for crowtail. Provide convenience to work with a LCD.</p> <p>Model: CT0046LCD</p> <p></p>"},{"location":"Products/Crowtail/crowtail--i2c-lcd.html#features","title":"Features","text":"<ul> <li>Easy to use</li> <li>Voltage:3v-5v</li> <li>Crowtail compatible interface</li> <li>Dimensions(mm):80.0(L)x36.0(W)x17.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--i2c-lcd.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p>Connect the Crowtail- I2C LCD to I port.</p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Download the library;Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;Liquid Crystal-&gt;HelloWorld.</p> <pre><code> #include &lt;Wire.h&gt;\n #include \"LiquidCrystal.h\"\n\n// Connect via i2c, default address #0 (A0-A2 not jumpered)\nLiquidCrystal lcd(0);\n\nvoid setup() {\n  // set up the LCD's number of rows and columns: \n  lcd.begin(16, 2);\n  // Print a message to the LCD.\n  lcd.print(\"hello, world!\");\n}\n\nvoid loop() {\n  // set the cursor to column 0, line 1\n  // (note: line 1 is the second row, since counting begins with 0):\n  lcd.setCursor(0, 1);\n  // print the number of seconds since reset:\n  lcd.print(millis()/1000);\n\n  lcd.setBacklight(HIGH);\n  delay(1000);\n  lcd.setBacklight(LOW);\n  delay(1000);\n}\n</code></pre> <p>5.Upload the Code,you shoule see the display of LCD1602.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--i2c-lcd.html#resource","title":"Resource","text":"<ul> <li>LiquidCrystal</li> <li>Crowtail- I2C LCD v1.0</li> </ul>"},{"location":"Products/Crowtail/crowtail--i2c-motor-driver.html","title":"Crowtail- I2C Motor Driver","text":""},{"location":"Products/Crowtail/crowtail--i2c-motor-driver.html#description","title":"Description","text":"<p>This Crowtail- I2C motor driver included two DRV8830, The DRV8830 provides an integrated motor driver solution for battery-powered toys, printers, and other low-voltage or battery-powered motion control applications. The module has two H-bridge drivers, and can drive two DC motors or two winding of stepper motors, as well as other loads like solenoids.It requires an onboard 5V voltage regulator which can power the I2C bus. All driver lines are diode protected from back EMF.It features two LEDs for fault indicator and four LEDs to indicate which direction each motor is running. CROWTAIL system plug and I2C interface enables you to daisy-chain the driver with many other devices.</p> <p>Model: CT009280D</p> <p></p>"},{"location":"Products/Crowtail/crowtail--i2c-motor-driver.html#features","title":"Features","text":"<ul> <li>Without external power supply</li> <li>Two leds for fault indicator</li> <li>Default maximum drive current 200 mA</li> <li>Crowtail compatible</li> <li>I2C interface</li> <li>Motor's speed and direction can control</li> <li>Number of channels: 2</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowtail/crowtail--i2c-motor-driver.html#application-ideas","title":"Application Ideas","text":"<p>This motor driver can be used to drive any brushed electronic motor as long as it doesn't consume more than 1A at 5v. Two motors can be driven simultaneously while set to a different speed and direction. The speed can be set fully proportional and is controlled by I2C command.</p> <ul> <li>Battery-Powered:</li> </ul> <pre><code>  *Printers\n  *Toys\n  *Robotics\n  *Cameras\n  *Phone\n</code></pre> <ul> <li>Small Actuators, Pumps, etc.</li> </ul>"},{"location":"Products/Crowtail/crowtail--i2c-motor-driver.html#specifications","title":"Specifications","text":"<p>Dimensions(mm):50.0(L)x35.1(W)x11.8(H)</p> Item Min Typical Max Unit Working Voltage 2.75 5 6.8 VDC Max Output Current per channel 0.2(default) - 1 A Input/output voltage on I2C bus 3.\u2157 3.\u2157 3.\u2157 V Communication protocol I2C I2C I2C / Default I2C Address 0xC0, 0xC4 0xC0, 0xC4 0xC0, 0xC4 /"},{"location":"Products/Crowtail/crowtail--i2c-motor-driver.html#interface-function","title":"Interface Function","text":"<ul> <li> <p>Crowtail Interface -Crowtail products have a eco system and all have a same connector which can plug onto the Base Shield. Connect this module to the I2C port of Base Shield, and then it can work well with Arduino. However, you can also connect Crowtail- I2C Motor Driver to Arduino without Base Shield by jumper wires.</p> </li> <li> <p>CH1 fault indicator - Channel 1 fault indicator.</p> </li> <li>CH2 fault indicator - Channel 2 fault indicator.</li> <li>Direction indicator - Motor direction indicator</li> <li>CH1 Output Connector - Motor 1 connector.</li> <li>CH2 Output Connector - Motor 2 connector.</li> </ul>"},{"location":"Products/Crowtail/crowtail--i2c-motor-driver.html#hardware-function","title":"Hardware function","text":""},{"location":"Products/Crowtail/crowtail--i2c-motor-driver.html#change-default-maximum-drive-current","title":"Change Default maximum drive current","text":"<p>The default maximum drive current of each channel is 200mA, see the front picture of the board  Each channel (CH1,CH2) has been added a resistor, and each value of resistor (R5,R12) is 1 \u03a9, so the maximum drive current is 200mA according to the following equation   Meantime, each channel provides a reserved solderable pad (R6 for CH1, R13 for CH2), so you can solder a resistor onto the board to change the resistor value of each channel. Following is the new equation if adding resistor to the board </p> <p>Caution:</p> <ul> <li>Maximum working current of each channel must be less than 1A. So the minimum value of resistor soldered to the reserved pad should not less than 0.2 \u03a9.</li> </ul>"},{"location":"Products/Crowtail/crowtail--i2c-motor-driver.html#change-default-i2c-address","title":"Change Default I2C Address","text":"<p>The I2C address of each channel is changeable.You can find there's 4 jumper pin, A0_CH1 and A1_CH1 are for channel 1, A0_CH2 and A1_CH2 are for channel 2. As shown below:  You can Connect each jumper with jump hats to change the I2C address:   Note1: The library of Crowtail- I2C Motor driver is depended on the default address.  </p>"},{"location":"Products/Crowtail/crowtail--i2c-motor-driver.html#usage","title":"Usage","text":"<p>Now, Let's begin to use the Crowtail- I2C Motor Driver.</p> <p>1.Preparations Now we are making a demo for Crowtail- I2C Motor Driver v1.0 which require following modules.</p> <ul> <li>2 * DC Motor 2V-6V</li> <li>Crowduino Board</li> </ul> <p>2.Hardware Installation Crowtail- I2C Motor Driver got one Crowtail socket for connecting two modules above.</p> <p>They are:</p> <ul> <li>2* DC Motor 2V-6V - connnect to CH1 &amp; CH2 Output connecter.</li> <li>Crowduino Board - connect Crowduino's Crowtail I2C Interface to Mini Motor Driver's Crowtail Interface.</li> </ul> <p>As shown below: </p> <p>3.Software Work</p> <p>The Crowtail- I2C Motor Driver can control motor which is based on the chip DRV8830. The DRV8830 is not just a dual motor driver, it is a dual H-bridge. An h-bridge is basically a specific setup of transistors that allow you to switch direction of current. You can use your Arduino to make them spin at any speed. Because the module has 2 H-bridges, you can not only make a robot go forwards and backwards, but also turn around by having each wheel spin in a different direction. Connect Seeeduino to computer use a micro USB cable.  Now, let's use the Crowtail- I2C Motor Driver to control two DC motors rotating in the positive or opposite direction. The below is an example program to be used with an Arduino. The code for this is very basic, but you can also change it up and do it your own way.</p> <pre><code>#include &lt;SparkFunMiniMoto.h&gt;  // Include the MiniMoto library\n\n// Create two MiniMoto instances, with different address settings.\nMiniMoto motor0(0xC4); // A1 = 1, A0 = clear\nMiniMoto motor1(0xC0); // A1 = 1, A0 = 1 (default)\n\n#define FAULTn  16     // Pin used for fault detection.\n\n// Nothing terribly special in the setup() function- prep the\n//  serial port, print a little greeting, and set up our fault\n//  pin as an input.\nvoid setup()\n{\n  Serial.begin(9600);\n  Serial.println(\"Hello, world!\");\n  pinMode(FAULTn, INPUT);\n}\n\n// The loop() function just spins the motors one way, then the\n//  other, while constantly monitoring for any fault conditions\n//  to occur. If a fault does occur, it will be reported over\n//  the serial port, and then operation continues.\nvoid loop()\n{\n  Serial.println(\"Forward!\");\n  motor0.drive(100);\n  motor1.drive(100);\n  delayUntil(1000);\n  Serial.println(\"Stop!\");\n  motor0.stop();\n  motor1.stop();\n  delay(1000);\n  Serial.println(\"Reverse!\");\n  motor0.drive(-100);\n  motor1.drive(-100);\n  delayUntil(1000);\n  Serial.println(\"Brake!\");\n  motor0.brake();\n  motor1.brake();\n  delay(1000);\n}\n\n// delayUntil() is a little function to run the motor either for\n//  a designated time OR until a fault occurs. Note that this is\n//  a very simple demonstration; ideally, an interrupt would be\n//  used to service faults rather than blocking the application\n//  during motion and polling for faults.\nvoid delayUntil(unsigned long elapsedTime)\n{\n  // See the \"BlinkWithoutDelay\" example for more details on how\n  //  and why this loop works the way it does.\n  unsigned long startTime = millis();\n  while (startTime + elapsedTime &gt; millis())\n  {\n    // If FAULTn goes low, a fault condition *may* exist. To be\n    //  sure, we'll need to check the FAULT bit.\n    if (digitalRead(FAULTn) == LOW)\n    {\n      // We're going to check both motors; the logic is the same\n      //  for each...\n      byte result = motor0.getFault();\n      // If result masked by FAULT is non-zero, we've got a fault\n      //  condition, and we should report it.\n      if (result &amp; FAULT)\n      {\n        Serial.print(\"Motor 0 fault: \");\n        if (result &amp; OCP) Serial.println(\"Chip overcurrent!\");\n        if (result &amp; ILIMIT) Serial.println(\"Load current limit!\");\n        if (result &amp; UVLO) Serial.println(\"Undervoltage!\");\n        if (result &amp; OTS) Serial.println(\"Over temp!\");\n        break; // We want to break out of the motion immediately,\n               //  so we can stop motion in response to our fault.\n      }\n      result = motor1.getFault();\n      if (result &amp; FAULT)\n      {\n        Serial.print(\"Motor 1 fault: \");\n        if (result &amp; OCP) Serial.println(\"Chip overcurrent!\");\n        if (result &amp; ILIMIT) Serial.println(\"Load current limit!\");\n        if (result &amp; UVLO) Serial.println(\"Undervoltage!\");\n        if (result &amp; OTS) Serial.println(\"Over temp!\");\n        break;\n      }\n    }\n  }\n}\n</code></pre> <p>After upload completed, the motors will rotating in the positive or opposite direction in cycle.</p>"},{"location":"Products/Crowtail/crowtail--i2c-motor-driver.html#resources","title":"Resources","text":"<ul> <li>DRV8830 Datasheet</li> <li>Crowtail- I2C Motor Driver eagle file</li> <li>Crowtail- I2C Motor Driver Source Library</li> </ul>"},{"location":"Products/Crowtail/crowtail--imu-10dof.html","title":"Crowtail-IMU 10DOF","text":""},{"location":"Products/Crowtail/crowtail--imu-10dof.html#description","title":"Description","text":"<p>This is a 10 DOF IMU sensor which is built on MPU-9250 and BMP280, MPU-9250 is a 9-aixs motion tracking device that combines a 3-axis gyroscope, 3-axis accelerometer, 3-axis magnetometer and a Digital Motion Processor (DMP) in a 3*3*1mm package, finally add a barometer- BMP280, so it becomes a 10DOF IMU, it\u2019s smaller in sizes with less power consumption, so use it with mobile phone or aircraft, smart wear devices will be more suitable. User-programmable full-scale range (digital output) and high accuracy of temp/pressure measurement make it meet the ideal for motion tracking and environment monitoring. Its crowtail interface take easy and simple use experience for your Arduino projects.</p> <p>Model: CRT35038I </p> <p></p>"},{"location":"Products/Crowtail/crowtail--imu-10dof.html#features","title":"Features","text":"<ul> <li>Crowtail interface</li> <li>10 Degrees of Freedom</li> <li>3-Axis angular rate sensor (gyro) with a sensitivity up to 131 LSB and a full-scale range of \u00b1250, \u00b1500, \u00b11000, and \u00b12000\u00b0/sec</li> <li>3-Axis accelerometer with a programmable full scale range of \u00b12g, \u00b14g, \u00b18g and \u00b116g</li> <li>3-axis compass with a full scale range of \u00b14800 uT</li> <li>Wide pressure detecting range of 300~1100hPa(+9000m ~ -500m relating to sea level)</li> <li>Temperaure measurement with \u00b11.0\u00b0C accuracy</li> <li>User-programmable full-scale range (digital output)</li> <li>Barometric pressure measurement range 300 - 1100 hPa with \u00b11.0 hPa accuracy</li> <li>Programmable interrupt</li> </ul>"},{"location":"Products/Crowtail/crowtail--imu-10dof.html#specifications","title":"Specifications","text":"Item Value Input Voltage 5V/3.3V Working Current 6mA Working Temperature -40 \u2013 85\u2103 Size 20*40mm Weight 3g"},{"location":"Products/Crowtail/crowtail--imu-10dof.html#interface","title":"Interface","text":""},{"location":"Products/Crowtail/crowtail--imu-10dof.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Crowtail/crowtail--imu-10dof.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--imu-10dof.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs:  </p> Crowduino Uno Base Shield Crowtail- IMU 10DOF Get one now Get one now Get one now <p>STEP2 Plug Crowtail-Base Shield into Crowduino Uno; STEP3 Plug Crowtail- IMU 10DOF into I2C port on the Crowtail-Base Shield I Port with Crowtail cable;STEP4 Connect Crowduino Uno to PC via a Mini USB cable.  </p> NOTE If we don't have Crowtail Base Shield, We also can directly connect this module to Crowduino Uno as below."},{"location":"Products/Crowtail/crowtail--imu-10dof.html#software","title":"Software","text":"<p>STEP1 Download IMU10lib_Arduino_Library.zip STEP2 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201d from the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure.  STEP3 Install Library: Unzip the IMU10lib_Arduino_Library.zip file and copy it to the Libraries directory under the Arduino installation directory  STEP4 Open Arduino IDE and load IMU_10DOF_Test\uff1aclick \u201cFile\u2192Examples\u2192IMU10lib_Arduino_Library\u2192IMU_10DOF_Test\u201d  STEP5 Click the  to upload the code to the Crowduino board STEP6 After the program is downloaded, open the Serial Monitor of Arduino IDE, set baud rate to 56700\uff0cinformation will be printed show as follow: </p>"},{"location":"Products/Crowtail/crowtail--imu-10dof.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Crowtail/crowtail--imu-10dof.html#resources","title":"Resources","text":"<p>IMU10lib_Arduino_Library.zip Crowtail-_IMU_10DOF_V2.0_Eagle_files.zip</p>"},{"location":"Products/Crowtail/crowtail--infrared-temperature-sensor.html","title":"Crowtail- Infrared Temperature Sensor","text":""},{"location":"Products/Crowtail/crowtail--infrared-temperature-sensor.html#description","title":"Description","text":"<p>This Infrared temperature sensor is a non-contact temperature measure model by using the MLX90614,which one is in small size and low cost with measurement resolution of 0.02\u2103.Thanks to its low noise amplifier,17-bit ADC and powerful DSP unit,a high accuracy and resolution of the thermometer is achieved.</p> <p>Model: CT0050ITS </p> <p></p>"},{"location":"Products/Crowtail/crowtail--infrared-temperature-sensor.html#specification","title":"Specification","text":"<ul> <li>Work Voltage: 3.3V ~ 5V</li> <li>Temperature measure range: -40~125\u00b0C</li> <li>Measure accuracy: \u00b10.5\u00b0C</li> <li>Compatible digital interface</li> <li>Dimensions(mm):20.0(L)x20.0(W)x6.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--infrared-temperature-sensor.html#application-ideas","title":"Application ideas","text":"<ul> <li>Motion sensor</li> <li>Thief-guarding System</li> <li>Switch</li> <li>Body distance check</li> <li>Industrial automation</li> <li>movement detection</li> </ul>"},{"location":"Products/Crowtail/crowtail--infrared-temperature-sensor.html#usage","title":"Usage","text":"<p>This demo is going to show you how to read temperature information from this Crowtail- Infrared Temperature Sensor.</p> <p>1.Hardware Connection The Infrared Temperature Sensor is connecting to IIC interface of Crowtail - Base Shield.</p> <p></p> <p>2.Download I2Cmaster library for Arduino boards with 16MHz XTAL; Unzip and put it in the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries;</p> <p>3.Open \u201cMLX90614\u201d example via the path: File --&gt;Examples --&gt;I2Cmaster --&gt; MLX90614.</p> <pre><code> #include &lt;i2cmaster.h&gt;\n\n\nvoid setup(){\n    Serial.begin(9600);\n    Serial.println(\"Setup...\");\n\n    i2c_init(); //Initialise the i2c bus\n    PORTC = (1 &lt;&lt; PORTC4) | (1 &lt;&lt; PORTC5);//enable pullups\n}\n\nvoid loop(){\n    int dev = 0x5A&lt;&lt;1;\n    int data_low = 0;\n    int data_high = 0;\n    int pec = 0;\n\n    i2c_start_wait(dev+I2C_WRITE);\n    i2c_write(0x07);\n\n    // read\n    i2c_rep_start(dev+I2C_READ);\n    data_low = i2c_readAck(); //Read 1 byte and then send ack\n    data_high = i2c_readAck(); //Read 1 byte and then send ack\n    pec = i2c_readNak();\n    i2c_stop();\n\n    //This converts high and low bytes together and processes temperature, MSB is a error bit and is ignored for temps\n    double tempFactor = 0.02; // 0.02 degrees per LSB (measurement resolution of the MLX90614)\n    double tempData = 0x0000; // zero out the data\n    int frac; // data past the decimal point\n\n    // This masks off the error bit of the high byte, then moves it left 8 bits and adds the low byte.\n    tempData = (double)(((data_high &amp; 0x007F) &lt;&lt; 8) + data_low);\n    tempData = (tempData * tempFactor)-0.01;\n\n    float celcius = tempData - 273.15;\n    float fahrenheit = (celcius*1.8) + 32;\n\n    Serial.print(\"Celcius: \");\n    Serial.println(celcius);\n\n    Serial.print(\"Fahrenheit: \");\n    Serial.println(fahrenheit);\n\n    delay(1000); // wait a second before printing again\n}\n</code></pre> <p>4.Upload it into your Arduino board and open the serial monitor to observe the temperature information of the environment.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--infrared-temperature-sensor.html#resource","title":"Resource","text":"<ul> <li>I2Cmaster Program</li> <li>Crowtail-Infrared Temperature Sensor eagle files v1.0</li> </ul>"},{"location":"Products/Crowtail/crowtail--ir-emitter.html","title":"Crowtail- IR Emitter","text":""},{"location":"Products/Crowtail/crowtail--ir-emitter.html#description","title":"Description","text":"<p>The Infrared Emitter is an LED make from gallium arsenide ,with its color centered around 940nm. It's used to transmit infrared signals through an infrared LED, while there is an Infrared receiver to get the signals on the other side. We can not only use the emitter to transmit data or commands, but also to emulate remotes to control your home appliance using an Arduino.</p> <p>Model: CT0030IRE</p> <p></p>"},{"location":"Products/Crowtail/crowtail--ir-emitter.html#features","title":"Features","text":"<ul> <li>Voltage: 3.3-5V</li> <li>Distance:10m</li> <li>Dimensions(mm):20.0(L)x20.0(W)x11.0(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--ir-emitter.html#usage","title":"Usage","text":"<p>The Crowtail - Infrared Emitter can send data while Crowtail - Infrared Receiver will receive them.</p> <p>1.Hardware connection</p> <p>Connect the Crowtail- IR Receiver to D2.</p> <p>Connect the Crowtail- IR Emitter to D3.</p> <p></p> <p>2.Download the libraryIRSendRev library;Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>3.Open the code directly by the path:File -&gt; Example -&gt;IRSendRev-&gt;sendTest.</p> <pre><code>//**************\n//IR sent demo v1.0\n//Connect the IR sent pins to D3 for this demo\n//******************************\n#include &lt;IRSendRev.h&gt;\n\nvoid setup()\n{\n   //enableIROut(38);\n}\n//unsigned char d[] = {9, 90, 91, 11, 31, 4, 1, 2, 3, 4};\nunsigned char d[] = {15, 70, 70, 20, 60, 10, 1, 2, 3, 4,5,6,7,8,9,10};\n//Very Important:\n//the first parameter(15): the data that needs to be sent;\n//the next 2 parameter(70,70): the logic high and low duration of \"Start\";\n//the next 2 parameter(20,60): the logic \"short\" and \"long\"duration in the communication\n//                             that to say:  if \"0\", the high duration is 20ms and  low is 20 ms; while logic \"1\",\n//                              the high duration is 20 ms and low is 60 ms;\n//the next 2 parameter(10): number of data you will sent;\n//the next parameter(1, 2, 3, 4,5,6,7,8,9,10): data you will sent\u00a0;\nvoid loop()\n{\n   IR.Send(d, 38);//sent the data via 38Kz IR\n   delay(1000);\n}\n</code></pre> <p>4.Open the code directly by the path:File -&gt; Example -&gt;IRSendRev-&gt;revTest.</p> <pre><code>//**************\n//IR receive demo v1.0\n//Connect the IR sent pins to D2 for this demo\n//******************************\n#include &lt;IRSendRev.h&gt;\n//#include &lt;IRSendRevInt.h&gt;\n\nvoid setup()\n{\n   Serial.begin(9600);\n   IR.Init(2);\n   Serial.println(\"init over\");\n}\n\nunsigned char dta[20];\n\nvoid loop()\n{\n   if(IR.IsDta())\n   {\n      // IR.Recv(dta);\n       int length= IR.Recv(dta);\n       for (int i =0;i&lt;length;i++)\n       {\n         Serial.print(dta[i]);\n         Serial.print(\"\\t\");\n       }\n       Serial.println();\n// Very Important:\n// the received data is comprised of the trsmission parameters , please refer to \n// the sendTest.ino in the library\u00a0;\n   }  \n}\n</code></pre> <p>5.Upload the Code to the receiver Arduino.</p> <p>6.When the IR Emitter tube faces the IR receiver tube(the distance of emitter to receiver should be less than 10m), then open the Crowtail-IR-Receiver serial port for see information:</p> <p></p>"},{"location":"Products/Crowtail/crowtail--ir-emitter.html#resource","title":"Resource","text":"<ul> <li>IRSendRev Program</li> <li>Crowtail- IR Emitter eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--ir-receiver.html","title":"Crowtail- IR Receiver","text":""},{"location":"Products/Crowtail/crowtail--ir-receiver.html#description","title":"Description","text":"<p>The Crowtail- IR Receiver module uses the HS0038B which is miniaturized receivers for infrared remote control systems and it is the standard IR remote control receiver series, supporting all major transmission codes. The IR detector have a demodulator inside that looks for modulated IR at 38 KHz. The Infrared Receiver can receive signals well within 10 meters. If more than 10 meters , the receiver may not get the signals. We often use the two Crowtail-the Infrared Receiver and the Crowtail- Infrared Emitter to work together.</p> <p>Model: CT0031IRR</p> <p></p>"},{"location":"Products/Crowtail/crowtail--ir-receiver.html#features","title":"Features","text":"<ul> <li>Connection Mode: D(digtal)</li> <li>Voltage: 3.3-5V</li> <li>Distance:10m</li> <li>Dimensions(mm):20.0(L)x20.0(W)x11.0(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--ir-receiver.html#usage","title":"Usage","text":"<p>The Crowtail - IR Receiver will receive the data that the Crowtail - Infrared Emitter send.</p> <p>1.Hardware connection</p> <p>Connect the Crowtail- IR Receiver to D2.</p> <p>Connect the Crowtail- IR Emitter to D3.</p> <p></p> <p>2.Download the libraryIRSendRev library;Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>3.Open the code directly by the path:File -&gt; Example -&gt;IRSendRev-&gt;sendTest.</p> <pre><code>//**************\n//IR sent demo v1.0\n//Connect the IR sent pins to D3 for this demo\n//******************************\n#include &lt;IRSendRev.h&gt;\n\nvoid setup()\n{\n   //enableIROut(38);\n}\n//unsigned char d[] = {9, 90, 91, 11, 31, 4, 1, 2, 3, 4};\nunsigned char d[] = {15, 70, 70, 20, 60, 10, 1, 2, 3, 4,5,6,7,8,9,10};\n//Very Important:\n//the first parameter(15): the data that needs to be sent;\n//the next 2 parameter(70,70): the logic high and low duration of \"Start\";\n//the next 2 parameter(20,60): the logic \"short\" and \"long\"duration in the communication\n//                             that to say:  if \"0\", the high duration is 20ms and  low is 20 ms; while logic \"1\",\n//                              the high duration is 20 ms and low is 60 ms;\n//the next 2 parameter(10): number of data you will sent;\n//the next parameter(1, 2, 3, 4,5,6,7,8,9,10): data you will sent\u00a0;\nvoid loop()\n{\n   IR.Send(d, 38);//sent the data via 38Kz IR\n   delay(1000);\n}\n</code></pre> <p>4.Open the code directly by the path:File -&gt; Example -&gt;IRSendRev-&gt;revTest.</p> <pre><code>//**************\n//IR receive demo v1.0\n//Connect the IR sent pins to D2 for this demo\n//******************************\n#include &lt;IRSendRev.h&gt;\n//#include &lt;IRSendRevInt.h&gt;\n\nvoid setup()\n{\n   Serial.begin(9600);\n   IR.Init(2);\n   Serial.println(\"init over\");\n}\n\nunsigned char dta[20];\n\nvoid loop()\n{\n   if(IR.IsDta())\n   {\n      // IR.Recv(dta);\n       int length= IR.Recv(dta);\n       for (int i =0;i&lt;length;i++)\n       {\n         Serial.print(dta[i]);\n         Serial.print(\"\\t\");\n       }\n       Serial.println();\n// Very Important:\n// the received data is comprised of the trsmission parameters , please refer to \n// the sendTest.ino in the library\u00a0;\n   }  \n}\n</code></pre> <p>5.Upload the Code to the receiver Arduino.</p> <p>6.When the IR Emitter tube faces the IR receiver tube(the distance of emitter to receiver should be less than 10m), then open the Crowtail-IR-Receiver serial port for see information:</p> <p></p>"},{"location":"Products/Crowtail/crowtail--ir-receiver.html#resource","title":"Resource","text":"<ul> <li>IRSendRev Program</li> <li>Crowtail- IR Emitter eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--ir-reflective-sensor.html","title":"Crowtail- IR Reflective Sensor","text":""},{"location":"Products/Crowtail/crowtail--ir-reflective-sensor.html#description","title":"Description","text":"<p>This module emits the infrared and estimates if there is a echo or not,then it generates logic HIGH or logic LOW to Arduino according to the result.it Can be used for detecting distance ,for example you can make a project to detect if the tank is full or not.</p> <p>This IR reflective sensor utilizes a RPR-220 to detect distance. The RPR-220 is a reflective photosensor.The emitter is GaAs infrared light emitting diode and the detector is a high-sensitivity,silicon planar phototransistor. There is also an on-board potentiometer to adjust the sensitivity.</p> <p>Model: CT0005IR</p> <p></p>"},{"location":"Products/Crowtail/crowtail--ir-reflective-sensor.html#specification","title":"Specification","text":"<ul> <li>Voltage:5V</li> <li>Current\uff1a14.69 - 15.35 mA</li> <li>Effective Distance \uff1a4-15 mm</li> <li>Dimensions(mm):20.0(L)x20.0(W)x16.6(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--ir-reflective-sensor.html#usage","title":"Usage","text":"<p>This sensor can be used to help a robot car follow a black line on white background or vice versa.</p> <p>1.Hardware Connetion</p> <p>The Crowtail- IR Reflective Sensor connected the D5 of Arduino.</p> <p></p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Upload the following sample sketch:</p> <pre><code>void setup()  \n{\n Serial.begin(9600);\n pinMode(5,INPUT);\n}\nvoid loop() \n{\n   delay(500);\n   if(digitalRead(5)==LOW)  {\n     Serial.println(\"Somebody is here.\");\n   }\n   else  {\n     Serial.println(\"nobody.\");\n   }\n}\n</code></pre> <p>4.Open the serial monitor. Hold the sensor 12mm or other height you need above the background. After that,keep the distance and move the sensor horizontally above the black line.You can see the test result. When it on the black line,the serial print \"nobody\".</p> <p></p>"},{"location":"Products/Crowtail/crowtail--ir-reflective-sensor.html#resource","title":"Resource","text":"<ul> <li>IR_reflective_sensor Program</li> <li>Crowtail- IR Reflective Sensor eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--laser-pointer.html","title":"Crowtail- Laser Pointer","text":""},{"location":"Products/Crowtail/crowtail--laser-pointer.html#description","title":"Description","text":"<p>A change of Laser Pointer is that we make it compatible with Crowtail base board, you can use it more easier than before. This laser pointer or laser pen is a small handheld device with a laser diode emitting a very narrow coherent low-powered laser beam of visible light, it is frequently used in lecture halls and demonstrations to point at topics of interest on a presentation board. In a school setting, they have become ubiquitous, and they are very useful teaching aids. Please note that DO NOT Point this module to eyes directly, It may cause some blindness, glare and afterimages.</p> <p>Model: CT0048CLP </p>"},{"location":"Products/Crowtail/crowtail--laser-pointer.html#features","title":"Features","text":"<ul> <li>Supply voltage:5V</li> <li>Power:5mW</li> <li>Wavelength :650nm</li> <li>Dimensions(mm):26.4(L)x20.0(W)x7.9(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--laser-pointer.html#usage","title":"Usage","text":"<p>1.Hardware Connection Plug the Crowtail- Laser Pointer onto the D5 port on Crowtail - Base Shield, and then plug the base shield onto Crowduino;</p> <p></p> <p>2.Download the library from here Crowtail- Laser Pointer [Crowtail- Laser Pointer Program]</p> <p>3.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>4.Create an Arduino sketch and paste the following codes to it or open the code directly by the path:File -&gt; Example -&gt; Crowtail- Laser Pointer.</p> <pre><code>int Laser_Pointer = 5;\n\n\nvoid setup() {                \n\n  pinMode(Laser_Pointer, OUTPUT);     \n}\n\n\nvoid loop() {\n  digitalWrite(Laser_Pointer, HIGH);   \n  delay(2000);            \n  digitalWrite(Laser_Pointer, LOW);  \n  delay(1000); \n}\n</code></pre> <p>4.Upload it into your Crowduino board and observe the change of the Laser Pointer's light.</p>"},{"location":"Products/Crowtail/crowtail--laser-pointer.html#resource","title":"Resource","text":"<ul> <li>Crowtail- Laser Pointer Program</li> <li>Crowtail- Laser Pointer eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--led-bar.html","title":"Crowtail- LED Bar","text":""},{"location":"Products/Crowtail/crowtail--led-bar.html#description","title":"Description","text":"<p>The Crowtail\u2013 LED Bar is comprised of a 10 segment LED gauge bar and an MY9221 LED controlling chip. It can be used as an indicator for remaining battery life, voltage, water level, music volume or other values that require a gradient display. There are 10 LED bars in the LED bar graph: two red, three yellow,and five green bars. Demo code is available to get you up and running quickly. It lights up the LEDs sequentially from red to green, so the entire bar graph is lit up in the end. Want to go further? Go ahead and code your own effect.</p> <p>Model: CT008463L</p> <p></p>"},{"location":"Products/Crowtail/crowtail--led-bar.html#features","title":"Features","text":"<ul> <li>Input Voltage: 3.3V/5V</li> <li>Each LED segment can be controlled individually via code</li> <li>Intuitive display</li> <li>Flexible power option, supports 3-5.5DC</li> <li>Available demo code</li> <li>Suli-compatible Library</li> <li>Dimensions(mm):40.0(L)x20.0(W)x11.3(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--led-bar.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p>Connect the Crowtail- LED Bar to U1 port on Crowtail- Base shield,and then plug the base shield onto Arduino.</p> <p></p> <p>2.Download Code and Upload You can download the library LED Bar librarythen extract it to libraries folder of Arduino. Then open Arduino IDE, File -&gt; examples -&gt; LED_Bar -&gt; Level, you can open the demo code.  note: you should change the Clock pin to \"1\" and change the Data pin to \"0\" before you use this demo.</p> <p>3.Download it to the Crowduino, you will see the led bar according to the order of the 2 red 3 yellow 4 green 1 bule cycle blinking.</p>"},{"location":"Products/Crowtail/crowtail--led-bar.html#resource","title":"Resource","text":"<ul> <li>MY9221_DS_1.0</li> <li>Crowtail- LED Bar eagle files</li> <li>LED Bar library</li> </ul>"},{"location":"Products/Crowtail/crowtail--led.html","title":"Crowtail- LED","text":""},{"location":"Products/Crowtail/crowtail--led.html#description","title":"Description","text":"<p>The Crowtail-LED is designed for the beginners of Arduino. It is the best way to step into the Aduino from it\u2019s I/O pins. The LED is the best choice to help you learn I/O pins.</p> <p>Model: CT0006LD</p> <p></p>"},{"location":"Products/Crowtail/crowtail--led.html#features","title":"Features","text":"<ul> <li>Crowtail compatible interface</li> <li>3.3V/5V Compatible</li> <li>8mm LED</li> </ul>"},{"location":"Products/Crowtail/crowtail--led.html#specification","title":"Specification","text":"<ul> <li>Dimensions(mm):20.0(L)x20.0(W)x13.0(H)</li> </ul> Item Description LED Control Mode Digital Pin of Arduino Working Voltage 5V Supply Mode Crowtail Interface"},{"location":"Products/Crowtail/crowtail--led.html#usage","title":"Usage","text":"<p>1. Connect the LED to Base Shield's digital port 5 with 3pin Crowtail Cable.</p> <p>2. Plug it onto the Arduino/Crowduino. Connect the board to PC using USB cable.</p> <p></p> <p>3.Copy the demo code to your sketch, then upload to Arduino or Crowduino board.You will see the LED blink every second.</p> <pre><code>#define LED 5 //connect LED to digital pin5\nvoid setup() {                \n // initialize the digital pin5 as an output.\n pinMode(LED, OUTPUT);     \n}\n\nvoid loop() {\n digitalWrite(LED, HIGH);   // set the LED on\n delay(500);               // for 500ms\n digitalWrite(LED, LOW);   // set the LED off\n delay(500);\n}\n</code></pre> <p>4.Test result: </p>"},{"location":"Products/Crowtail/crowtail--led.html#resource","title":"Resource","text":"<ul> <li>LED Program</li> <li>Crowtail_LED_eagle_files</li> </ul>"},{"location":"Products/Crowtail/crowtail--light-sensor.html","title":"Crowtail- Light Sensor","text":""},{"location":"Products/Crowtail/crowtail--light-sensor.html#description","title":"Description","text":"<p>The Crowtail- Light Sensor module incorporates a light dependent resistor (LDR), is a commonly used sensor in a wide variety of applications from DIY projects to industrial automation. Typically, the resistance of the LDR or Photoresistor will decrease when the ambient light intensity increases. This means that the output signal from this module will be HIGH in bright light, and LOW in the dark.</p> <p>Model: CT0013LS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--light-sensor.html#features","title":"Features","text":"<ul> <li>Easy to use light sensor module</li> <li>Resistance decreases as luminance increases</li> </ul>"},{"location":"Products/Crowtail/crowtail--light-sensor.html#specifications","title":"Specifications","text":"<ul> <li>Voltage:5V</li> <li>Supply Current: 0.5-3mA</li> <li>Light resistance: 20K\u03a9</li> <li>Dark resistance: 1M\u03a9</li> <li>Response time: 20-30 secs</li> <li>Peak Wavelength: 540 nm</li> <li>Ambient temperature: -30~70\u2103</li> <li>Dimensions(mm):20.0(L)x20.0(W)x6.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--light-sensor.html#usage","title":"Usage","text":"<p>Follow these simple steps to build a Crowtail circuit using the light sensor:</p> <p>1.Hardware Connection</p> <p></p> <p>2.Upload the following sample sketch to make the LED turn ON and OFF based on input from the light sensor:</p> <pre><code>const int light=A0;\nconst int ledPin=5;\nint sensorValue = 0;\nconst int thresholdvalue=100; //The threshold for which the LED should turn on. \nvoid setup()\n{\n pinMode(ledPin,OUTPUT);  //Set the LED on Digital 5 as an OUTPUT\n Serial.begin(9600);     //Start the Serial connection\n}\nvoid loop()\n{\n  sensorValue = analogRead(light);\n  if(sensorValue&lt;thresholdvalue)\n {\n   digitalWrite(ledPin,HIGH);\n }\n else\n {\n digitalWrite(ledPin,LOW);\n }\n  Serial.print(\"light sensor = \" );\n Serial.println(sensorValue); \n delay(500);\n}\n</code></pre> <p>3.When the light value lower than 100,the LED will lights up: </p>"},{"location":"Products/Crowtail/crowtail--light-sensor.html#resource","title":"Resource","text":"<ul> <li>Light Sensor Program</li> <li>Crowtail- Light Sensor eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--linear-potentiometer.html","title":"Crowtail- Linear Potentiometer","text":""},{"location":"Products/Crowtail/crowtail--linear-potentiometer.html#description","title":"Description","text":"<p>The Crowtail- Linear Potentiometer module uses a linear variable resistor with a maximum resistance of 10K\u03a9. When you move the slider from one side to the other, its output voltage will range from 0 V to the Vcc you applied. The panel mount design makes this module easy to be installed in projects.</p> <p>Model: CT0022LP</p> <p></p>"},{"location":"Products/Crowtail/crowtail--linear-potentiometer.html#feature","title":"Feature","text":"<ul> <li>30 mm long slide length</li> <li>Linear resistance taper</li> <li>Connection Mode:A(Analog)</li> </ul>"},{"location":"Products/Crowtail/crowtail--linear-potentiometer.html#specification","title":"Specification","text":"<p>Dimensions(mm):60.0(L)x20.0(W)x18.0(H)</p>  Item  Min  Typical  Max  Unit Voltage 3.5 5.0 30 V Current - - 30 mA  Dimension 20 x 60 mm  Net Weight 8.3 g  Rotational life  &gt;15000 cycles  Total resistance  10 K\u03a9  Stroke length  30 mm  Total resistance tolerance  +/- 20% /"},{"location":"Products/Crowtail/crowtail--linear-potentiometer.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--linear-potentiometer.html#with-arduino","title":"With Arduino","text":"<p>Follow these simple steps to make the Linear potentiometer module function as a voltage divider:</p> <p>1.When using the module in conjunction with an Arduino or a Crowduino, use the Crowtail - Base Shield and connect the Crowtail - Linear Potentiometer module to the shield using a designated Crowtail Interface (e.g., Analog Port 0 as shown below):</p> <p></p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Upload the following sample sketch:</p> <pre><code>int sensorpin=A0;\nint sensorValue=0;\nvoid setup() \n{\n   Serial.begin(9600);\n}\nvoid loop()\n{\n  sensorValue = analogRead(sensorpin);\n  Serial.print(\"sensorValue \");\n  Serial.println(sensorValue);\n}\n</code></pre> <p>4.Open the serial monitor. You should see some data from ADC.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--linear-potentiometer.html#resource","title":"Resource","text":"<ul> <li>Linear_Potentiometer Program</li> <li>Crowtail-Linear_Potentiometer eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--lipo-fuel-gauge.html","title":"Crowtail- LiPo Fuel Gauge","text":""},{"location":"Products/Crowtail/crowtail--lipo-fuel-gauge.html#introduction","title":"Introduction","text":"<p>Don\u2019t worry about next time your board suddenly powers-down! The Crowtail- LiPo Fuel Gauge connects your battery to your project and uses a sophisticated algorithm to detect relative state of charge and direct A/D measurement of battery voltage. In other words, it tells your microcontroller how much \u2018fuel\u2019 is left in the tank. The LiPo Fuel Gauge communicates with your project over I2C and an alert pin also tells you when the charge has dropped below a certain percentage.</p> <p>Model: CRT00413L</p> <p></p>"},{"location":"Products/Crowtail/crowtail--lipo-fuel-gauge.html#features","title":"Features","text":"<p>Fuel gauge system for single cell lithium ion batteries</p> <p>Can be connected in circuit to monitor battery.</p> <p>Hardware and Software Reset.</p> <p>Corwtail I2C Interface</p> <p>Dimensions(mm):40.0(L)x20.0(W)x7.2(H)</p>"},{"location":"Products/Crowtail/crowtail--lipo-fuel-gauge.html#interface","title":"Interface","text":""},{"location":"Products/Crowtail/crowtail--lipo-fuel-gauge.html#usage","title":"Usage","text":"<p>The Crowtail- LiPo Fuel Gauge is connecting to IIC port of Crowtail - Base Shield.</p> <p></p> <p>Download \"MAX17043.lib\" for arduino boards, unzip and put it in the libraries of Arduino IDE by the path : ..\\arduino-1.x.x\\libraries;</p> <p>open \"ReadTag\" example via the path: File--&gt;Examples--&gt;MAX17043--&gt;VoltageSoC.ino.</p> <pre><code>#include \"MAX17043.h\"\n#include \"Wire.h\"\n\nMAX17043 batteryMonitor;\n\nvoid setup() {\n\n  Wire.begin(); \n  Serial.begin(9600);\n  Serial.println(\"MAX17043 Example: reading voltage and SoC\");\n  Serial.println();\n\n  batteryMonitor.reset();\n  batteryMonitor.quickStart();\n  Serial.print(\"verison is\u00a0:\");\n  Serial.println(batteryMonitor.getVersion(),4);\n  delay(1000);\n\n\n}\n\nvoid loop() {    \n  get_infor();\n  delay(1000);\n}\nvoid get_infor()\n{\n\n  float cellVoltage = batteryMonitor.getVCell();\n  Serial.print(\"Voltage:\\t\\t\");\n  Serial.print(cellVoltage, 4);\n  Serial.println(\"V\");\n\n  float stateOfCharge = batteryMonitor.getSoC();\n  Serial.print(\"State of charge:\\t\");\n  Serial.print(stateOfCharge);\n  Serial.println(\"%\");\n  }\n</code></pre> <p>Upload it into your arduino board and open the serial monitor to monitor the battery \"fuel\".</p> <p></p>"},{"location":"Products/Crowtail/crowtail--logic-block.html","title":"Crowtail- Logic Block","text":""},{"location":"Products/Crowtail/crowtail--logic-block.html#introduction","title":"Introduction","text":"<p>The Crowtail- Logic Block allows you to play with logic gates by literally plugging one into another and watching the progression of an input to an output! Each LogicBlock represents a different logic function: the NOT block is a simple inverter, where the output is the opposite of the input. The AND block will only output a 1 if both of the inputs are 1. The OR block will output a 1 if either of the inputs are 1. There are also input blocks and splitter blocks.</p> <p>Model: CRT01235B</p> <p></p>"},{"location":"Products/Crowtail/crowtail--logic-block.html#features","title":"Features","text":"<p>Logic block:\"AND\" \"OR\" \"NOT\".</p> <p>Output indicator.</p> <p>Dual output port.</p> <p>Dimensions(mm):40.0(L)x20.0(W)x9.8(H)</p>"},{"location":"Products/Crowtail/crowtail--logic-block.html#theory","title":"Theory","text":"<p>A digital logic circuit uses digital inputs to make logical decisions and produce digital outputs. Every logic circuit requires at least one input, before it can produce any kind of output. Digital logic inputs and outputs are usually binary. In other words they can only be one of two possible values.</p> <p>There are a number of ways to represent binary values: 1/0 is the least verbose and most common way. However, you may also see them in a boolean representation like TRUE/FALSE or HIGH/LOW. When the values are represented at a hardware level, they might be given actual voltage levels: 0V [Volts] is a 0, while a higher voltage - usually 3V or 5V - is used to represent a 1.</p> <p></p> <ul> <li> <p>AND \u2013 The AND function produces a TRUE output if and only if all of its inputs are also TRUE.</p> </li> <li> <p>OR \u2013 An OR will prove TRUE if any (one or more) of its inputs are also TRUE.</p> </li> <li> <p>NOT \u2013 The NOT operator has only one input. The NOT operator negates its input, which means the output will be the opposite of the input.</p> </li> </ul> <p>AND Logic Block</p> <p></p> <p>The AND LogicBlock is a two-input, single-output AND gate. The block is in a \u201cD shape\u201d, much like the AND gate circuit symbol. Each AND Gate Block has a single blue LED, which represents the output of the gate. If the LED is on, then that means the AND Gate is producing a 1 (TRUE, ON) at the output. If the LED is off, then the AND Gate\u2019s output is 0.</p> <p>Here\u2019s a truth table for the AND Block:</p> <p></p> <p>The boolean equation symbol for AND is the centered dot (\u00b7). For example, the gate above could be represented by the equation: A \u00b7 B = Y.</p> <p>OR Logic Block</p> <p></p> <p>The OR LogicBlock is a two-input, single-output OR gate. The block is shaped like and OR gate circuit symbol \u2013 a convex arc on the output side, and a concave arc on the input side. Each OR Gate Block has a single yellow LED, which represents the output of the gate. If the LED is on, that means the OR Gate is producing a 1 (TRUE, ON) at the output. If the LED is off, then the OR Gate\u2019s output is 0.</p> <p>Here\u2019s a truth table for the 2-input/1-output OR gate:</p> <p> </p> <p>We can represent digital logic using boolean equations. The boolean equation symbol for OR is the plus sign (+). Here\u2019s the boolean equation for the OR circuit above: A + B = Y.</p> <p>NOT Logic Block</p> <p></p> <p>The NOT LogicBlock is a single-input, single-output NOT Gate. The Block comes in a trapezoid shape (it\u2019s as close as we could get to the triangle-shaped NOT gate circuit symbol). Each NOT Block has a single red LED, which represents the output of the gate. If the LED is on, then that means the NOT Gate is producing a 1 (TRUE, ON) at the output. IF the LED is off, then the NOT gate\u2019s output is 0.</p> <p>An inverter\u2019s truth table looks something like this:</p> <p> </p> <p>When writing boolean equations, the NOT operation is usually indicated by a bar over any variables it inverts. For example the boolean equation for the circuit above would simply be: </p>"},{"location":"Products/Crowtail/crowtail--logic-block.html#usage","title":"Usage","text":"<p>This simple demo is going to show you how to use the Crowtail Logic Block - NOT.</p> <p>Hardware connection</p> <p></p> <p>2.Cope the code and upload it into your arduino board.</p> <pre><code>const int a=12;  \nvoid setup()\n{\n  pinMode(a,OUTPUT); \n\n}\nvoid loop()\n{\n logic_not_test();\n//  logic_or_test();\n\n}\n\n void logic_not_test()\n {\n digitalWrite(a,LOW); \n\n }\n</code></pre> <p>In this example, we give a low level intput to it, you will see the LED be on(output high level).</p>"},{"location":"Products/Crowtail/crowtail--lora-ra-08h.html","title":"Crowtail- LoRa RA-08H","text":""},{"location":"Products/Crowtail/crowtail--lora-ra-08h.html#description","title":"Description","text":"<p>Crowtail - LoRa RA-08H uses the Ra-08H (ASR6601) module, which has ultra long distance spread spectrum communication. Its chip ASR6601 is a general-purpose LPWAN wireless communication SoC integrated with RF transceiver, modem and a 32-bit RISC MCU. The Ra-08H module supports LoRa modulation and traditional (G) FSK modulation under the LPWAN use case; The transmitter also supports BPSK modulation and (G) MSK modulation. The Ra-08H module provides ultra long range and ultra-low power consumption communication for LPWAN applications, and can be widely used in intelligent instruments, supply chain and logistics, home building automation, security systems, remote irrigation systems and other scenarios.</p> <p>Model: CRT01158H </p> <p></p>"},{"location":"Products/Crowtail/crowtail--lora-ra-08h.html#specifications","title":"Specifications","text":"<ul> <li>Voltage: 3.3~5V</li> <li>Theoretical maximum transmission power+22dBm</li> <li>Supported frequency band: 803~930MHZ</li> <li>High sensitivity: -138dBm@125KzSF12</li> <li>Support spread spectrum factor: SF5/SF6/SF7/SF8/SF9/SF10/SF11/SF12</li> <li>Embedded memory: 128KB FLASH, 16KB SRAM</li> <li>Support LoRa/(G) FSK/BPSK/(G) MSK modulation</li> <li>Maximum transmission distance 1KM (ideal value for open space)</li> <li>With download and communication switching functions, users can customize programming</li> <li>Equiped with the first generation IPEX seat</li> <li>Dimension (mm): 40 (L) * 20 (W) * 7.5 (H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--lora-ra-08h.html#schematic","title":"Schematic","text":""},{"location":"Products/Crowtail/crowtail--lora-ra-08h.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--lora-ra-08h.html#hardware-connection","title":"Hardware Connection","text":"<p>STEP1 Prepare the below stuffs:  </p> Crowduino Uno Base Shield Crowtail- LoRa RA-08H Get one now Get one now Get one now <p>STEP2 Plug Crowtail-Base Shield into Crowduino Uno; STEP3 Plug Crowtail-LoRa RA-08H to D2 D3 slot of Crowtail-Base Shield via 4 pin Crowtail Cable; STEP4 Connect Crowduino Uno to PC via a Mini USB cable. </p> NOTE If we don't have Crowtail Base Shield, We also can directly connect this module to Crowduino Uno as below. Crowduino Uno Crowtail- LoRa RA-08H D2 TX D3 RX 3.3V VCC GND GND"},{"location":"Products/Crowtail/crowtail--lora-ra-08h.html#software","title":"Software","text":"<p>STEP1 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201d from the available options  STEP2 Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure.  STEP3 Open the program in the Arduino IDE <pre><code>#include &lt;SoftwareSerial.h&gt; \n// Pin2\u63a5LORA\u7684TXD\n// Pin3\u63a5LORA\u7684RXD\nSoftwareSerial LORA(2, 3); \nchar val;\n\nvoid setup() {\n  Serial.begin(9600); \n  Serial.println(\"LORA is ready!\");\n  LORA.begin(9600);\n}\n\nvoid loop() {\n  if (Serial.available()) {\n    val = Serial.read();\n    LORA.print(val);\n    delay(10);\n  }\n\n  if (LORA.available()) {\n    val = LORA.read();\n    Serial.print(val);\n    delay(10);\n  }\n}\n</code></pre></p> <p>STEP4 Click the  to upload the code to the Crowduino board STEP5 Open the AT command description of Ra-08H, find the relevant command, open the serial port monitor, and input the command into the serial port monitor, for example, enter [AT+CGSN?] Command, click Send, and the reply code will be received:+CGSN=1E612A8482213201 OK </p> <p>Update firmware</p> <p>Hardware preparation  1. Prepare the serial port board and connect it to the computer through USB   2. Switch RA-08H module to BOOT end:   3. Press and hold the BOOT button, insert the HY2.0-4P male connector, and power on to enter the burning mode </p> <p>Firmware upgrade  1. Open \"TremoProgrammer_v0.8\" in \"firmware_update_tool\" folder.   2. Select the corresponding serial port number, and use the default 921600 baud rate.   3. Select the firmware file to be upgraded.    4. After selecting the firmware, click the start button to start the upgrade   5. Upgrade completed </p>"},{"location":"Products/Crowtail/crowtail--lora-ra-08h.html#faqs","title":"FAQS","text":"<p>You can post your questions on our forum or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Crowtail/crowtail--lora-ra-08h.html#resources","title":"Resources","text":"<p>Crowtail-_LoRa_RA-08H-V1.2-eagle_file.zip  Lora_code.zip Ra-08h_v1.1.0_specification.pdf RA-08_AT_Instruction.pdf firmware </p>"},{"location":"Products/Crowtail/crowtail--luminance-sensor.html","title":"Crowtail- Luminance sensor","text":""},{"location":"Products/Crowtail/crowtail--luminance-sensor.html#description","title":"Description","text":"<p>The Crowtail- Luminance sensor using APDS-9002 as luminous flux sensor. The APDS-9002 is a analog-output ambient light, It consists of a spectrally suited phototransistor, which peaks in human luminosity curve. Hence, it provides an excellent responsivity that is close to the response of human eyes. The Crowtail- Luminance sensor can reflects the luminous intensity of the environment by the linear output level, and then directly reflect the change of luminous flux.</p> <p>Model: CRT00549L</p> <p></p>"},{"location":"Products/Crowtail/crowtail--luminance-sensor.html#features","title":"Features","text":"<ul> <li>VCC: 2.4-5.5V</li> <li>Good output linearity across wide</li> <li>Low sensitivity variation across various light sources</li> <li>Guaranteed temperature performance: -40\u00b0C to 85\u00b0C</li> <li>Linear output range: 0.0 - 2.3V</li> <li>Dimensions(mm):20.0(L)x20.0(W)x9.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--luminance-sensor.html#applications","title":"Applications","text":"<ul> <li>Automatic residential and commercial lighting management</li> <li>Electronic signs and signals</li> <li>Daylight and artificial light exposed devices</li> </ul>"},{"location":"Products/Crowtail/crowtail--luminance-sensor.html#usage","title":"Usage","text":"<p>1.Connect the Crowtail luminance sensor to the A0 port of base shield and connect micro USB cable to micro USB port.</p> <p></p> <p>2.Copy the demo code to your sketch, then upload to Arduino/Crowduino board.</p> <pre><code> float VoutArray[] =  { 0.0011498,  0.0033908,   0.011498, 0.041803,0.15199,     0.53367, 1.3689,   1.9068,  2.3};\nfloat  LuxArray[] =  { 1.0108,     3.1201,  9.8051,   27.43,   69.545,   232.67,  645.11,   73.52,  1000};\n\nvoid setup() {\n    // put your setup code here, to run once:\n    Serial.begin(9600);\n\n}\n\nvoid loop() {\n    // put your main code here, to run repeatedly:\n\n    Serial.print(\"Vout =\");\n    Serial.print(readAPDS9002Vout(A0));\n    Serial.print(\" V,Luminance =\");\n    Serial.print(readLuminance(A0));\n    Serial.println(\"Lux\");\n    delay(500);\n}\n\nfloat readAPDS9002Vout(uint8_t analogpin)\n{\n    // MeasuredVout = ADC Value * (Vcc / 1023) * (3 / Vcc)\n    // Vout samples are with reference to 3V Vcc\n    // The above expression is simplified by cancelling out Vcc\n    float MeasuredVout = analogRead(A0) * (3.0 / 1023.0);\n    //Above 2.3V , the sensor value is saturated\n\n    return MeasuredVout;\n\n}\n\nfloat readLuminance(uint8_t analogpin)\n{\n\n    // MeasuredVout = ADC Value * (Vcc / 1023) * (3 / Vcc)\n    // Vout samples are with reference to 3V Vcc\n    // The above expression is simplified by cancelling out Vcc\n    float MeasuredVout = analogRead(A0) * (3.0 / 1023.0);\n    float Luminance = FmultiMap(MeasuredVout, VoutArray, LuxArray, 9);\n\n    /**************************************************************************\n\n    The Luminance in Lux is calculated based on APDS9002 datasheet -- &gt; Graph 1\n    ( Output voltage vs. luminance at different load resistor)\n    The load resistor is 1k in this board. Vout is referenced to 3V Vcc.\n\n    The data from the graph is extracted using WebPlotDigitizer\n    http://arohatgi.info/WebPlotDigitizer/app/\n\n    VoutArray[] and LuxArray[] are these extracted data. Using MultiMap, the data\n    is interpolated to get the Luminance in Lux.\n\n    This implementation uses floating point arithmetic and hence will consume\n    more flash, RAM and time.\n\n    The Luminance in Lux is an approximation and depends on the accuracy of\n    Graph 1 used.\n\n    ***************************************************************************/\n\n    return Luminance;\n}\n\n\n//This code uses MultiMap implementation from http://playground.arduino.cc/Main/MultiMap\n\nfloat FmultiMap(float val, float * _in, float * _out, uint8_t size)\n{\n    // take care the value is within range\n    // val = constrain(val, _in[0], _in[size-1]);\n    if (val &lt;= _in[0]) return _out[0];\n    if (val &gt;= _in[size-1]) return _out[size-1];\n\n    // search right interval\n    uint8_t pos = 1;  // _in[0] allready tested\n    while(val &gt; _in[pos]) pos++;\n\n    // this will handle all exact \"points\" in the _in array\n    if (val == _in[pos]) return _out[pos];\n\n    // interpolate in the right segment for the rest\n    return (val - _in[pos-1]) * (_out[pos] - _out[pos-1]) / (_in[pos] - _in[pos-1]) + _out[pos-1];\n}\n</code></pre> <p></p> <p>3. Open the serial monitor.</p> <p>4.observed the data on the serial monitor, as follows</p> <p></p> <p>5.Change the brightness around the module.</p> <p>6.observed the data on the serial monitor, as follows</p> <p></p>"},{"location":"Products/Crowtail/crowtail--luminance-sensor.html#resource","title":"Resource","text":"<ul> <li>Luminance code</li> <li>Luminance schematic diagram</li> </ul>"},{"location":"Products/Crowtail/crowtail--magnetic-switch.html","title":"Crowtail- Magnetic Switch","text":""},{"location":"Products/Crowtail/crowtail--magnetic-switch.html#description","title":"Description","text":"<p>This is a Crowtail interface compatible Magnetic switch module. It is based on encapsulated dry reed switch MKA14103. MKA14103 is single-pole, single throw (SPST) type, having normally open ruthenium contacts. The sensor is a double-ended type and may be actuated with an electromagnet, a permanent magnet or a combination of both. The magnetic switch is a wonderful tool for designers who would like to turn a circuit on and off based on proximity.</p> <p>Model: CT009320S </p>"},{"location":"Products/Crowtail/crowtail--magnetic-switch.html#features","title":"Features","text":"<ul> <li>Crowtail compatible interface</li> <li>Minimum external parts</li> <li>10W rating</li> <li>Rugged encapsulation</li> </ul>"},{"location":"Products/Crowtail/crowtail--magnetic-switch.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Proximity Sensor</li> <li>Security Alarm Sensor</li> <li>Level Sensor</li> <li>Flow Sensor</li> <li>Pulse Counter</li> </ul>"},{"location":"Products/Crowtail/crowtail--magnetic-switch.html#specification","title":"Specification","text":"<p>Dimensions(mm):27.8(L)x20.0(W)x6.8(H)</p> Item Min Norm Max Unit Working Voltage 4.75 5.0 5.25 V Switched Power 10 10 10 W Switched Voltage AC,RMS value(max) &lt; 140 &lt; 140 &lt; 140 V Switched Current DC &lt; 500 &lt; 500 &lt; 500 mA Carry Current DC &lt; 0.5 &lt; 0.5 &lt; 0.5 A Contact Resistance &lt;200 &lt;200 &lt;200 m\u03a9 Insulation Resistance &gt;106 &gt;106 &gt;106 M\u03a9 Operating Temperature -40 - 125 \u2103 Operate Range 10 - 40 AT"},{"location":"Products/Crowtail/crowtail--magnetic-switch.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--magnetic-switch.html#with-arduino","title":"With Arduino","text":"<p>1.The SIG pin of the module output LOW normally. When a magnet approaches the switch, the magnetic switch close and the SIG pin output HIGH. The following sketch demonstrates a simple application of using the Magnetic switch to control the led. When you put a magnet that has enough magnetic power close to the module, the switch is closed .Then the SIG pin out put a high voltage. You can use this to control the led. As the picture on the below indicates, the Magnetic switch is connected to digital port 2 of the Crowtail - Basic Shield and the LED is connected to digital port 5. When there is Magnetic approaches the switch, the SIG pin output a High voltage. Then the LED light. The hardware installation is as follows:</p> <p></p> <p>2.Copy and paste code below to a new Arduino sketch.</p> <pre><code>#define MAGNECTIC_SWITCH 2\n#define LED 5//the on board LED of the Arduino or Seeeduino\n\nvoid setup()\n{\n    pinsInit();\n}\n\nvoid loop() \n{\n    if(isNearMagnet())//if the magnetic switch is near the magnet?\n    {\n        turnOnLED();\n    }\n    else\n    {\n        turnOffLED();\n    }\n}\nvoid pinsInit()\n{\n    pinMode(MAGNECTIC_SWITCH, INPUT);\n    pinMode(LED,OUTPUT);\n}\n\n/*If the magnetic switch is near the magnet, it will return ture, */\n/*otherwise it will return false                                */\nboolean isNearMagnet()\n{\n    int sensorValue = digitalRead(MAGNECTIC_SWITCH);\n    if(sensorValue == HIGH)//if the sensor value is HIGH?\n    {\n        return true;//yes,return ture\n    }\n    else\n    {\n        return false;//no,return false\n    }\n}\nvoid turnOnLED()\n{\n    digitalWrite(LED,HIGH);\n}\nvoid turnOffLED()\n{\n    digitalWrite(LED,LOW);\n}\n</code></pre> <p>Then the LED light when there is Magnetic approaches the switch. Have a try!</p>"},{"location":"Products/Crowtail/crowtail--magnetic-switch.html#resources","title":"Resources","text":"<ul> <li>Crowtail- Magnetic Switch eagle file </li> </ul>"},{"location":"Products/Crowtail/crowtail--max30105-particle-sensor.html","title":"Crowtail- MAX30105 Particle Sensor","text":""},{"location":"Products/Crowtail/crowtail--max30105-particle-sensor.html#description","title":"Description","text":"<p>The MAX30105 is an integrated particle-sensing module. It includes internal LEDs, photodetectors, optical elements, and low-noise electronics with ambient light rejection. The MAX30105 provides a complete system solution to ease the design-in process of smoke detection applications including fire alarms. The MAX30105 is designed to operate at 5V and can communicate with both 3.3V and 5V microcontrollers.</p> <p>Model: CRT00226P</p> <p></p>"},{"location":"Products/Crowtail/crowtail--max30105-particle-sensor.html#features","title":"Features","text":"<p>Built-in Red, IR, and Green LEDs</p> <p>5V operation</p> <p>Onboard 1.8V regulation and I2C interface circuitry</p> <p>Sensitivity configurable down to 7.81pA</p> <p>3200Hz maximum sample rate</p> <p>Built-in 32 sample FIFO (First In, First Out</p> <p>Dimensions(mm):20.0(L)x20.0(W)x11.8(H)</p>"},{"location":"Products/Crowtail/crowtail--max30105-particle-sensor.html#application","title":"Application","text":"<p>Presence detection, distance sensing (18\" max), pulse oximetry, blood oxygen saturation level (SpO2), smoke and particle detection</p>"},{"location":"Products/Crowtail/crowtail--max30105-particle-sensor.html#usage","title":"Usage","text":"<p>This demo will show you when When the sensor detects the object, the serial monitor will print \"Something is there!\".</p> <p>Hardwire connection</p> <p>The Crowtail- MAX30105 Particle Sensor is connecting to IIC port of Crowtail - Base Shield.</p> <p></p> <p>Download \"MAX3010x_Sensor_Library\" for arduino boards, unzip and put it in the libraries of Arduino IDE by the path : ..\\arduino-1.x.x\\libraries;</p> <pre><code>#include &lt;Wire.h&gt;\n#include \"MAX30105.h\"\n\nMAX30105 particleSensor;\n\nlong samplesTaken = 0; //Counter for calculating the Hz or read rate\nlong unblockedValue; //Average IR at power up\nlong startTime; //Used to calculate measurement rate\n\nvoid setup()\n{\n  Serial.begin(115200);\n  Serial.println(\"Initializing...\");\n\n  // Initialize sensor\n  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed\n  {\n    Serial.println(\"MAX30105 was not found. Please check wiring/power. \");\n    while (1);\n  }\n\n  //Setup to sense up to 18 inches, max LED brightness\n  byte ledBrightness = 0xFF; //Options: 0=Off to 255=50mA\n  byte sampleAverage = 4; //Options: 1, 2, 4, 8, 16, 32\n  byte ledMode = 2; //Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green\n  byte sampleRate = 400; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200\n  int pulseWidth = 411; //Options: 69, 118, 215, 411\n  int adcRange = 2048; //Options: 2048, 4096, 8192, 16384\n\n  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings\n\n  particleSensor.setPulseAmplitudeRed(0); //Turn off Red LED\n  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED\n\n  //Take an average of IR readings at power up\n  unblockedValue = 0;\n  for (byte x = 0\u00a0; x &lt; 32\u00a0; x++)\n  {\n    unblockedValue += particleSensor.getIR(); //Read the IR value\n  }\n  unblockedValue /= 32;\n\n  startTime = millis();\n}\n\nvoid loop()\n{\n  samplesTaken++;\n\n  Serial.print(\"IR[\");\n  Serial.print(particleSensor.getIR());\n  Serial.print(\"] Hz[\");\n  Serial.print((float)samplesTaken / ((millis() - startTime) / 1000.0), 2);\n  Serial.print(\"]\");\n\n  long currentDelta = particleSensor.getIR() - unblockedValue;\n\n  Serial.print(\" delta[\");\n  Serial.print(currentDelta);\n  Serial.print(\"]\");\n\n  if (currentDelta &gt; (long)100)\n  {\n    Serial.print(\" Something is there!\");\n  }\n\n  Serial.println();\n}\n</code></pre> <p>Cope the code and upload it into your arduino board, open the Serial Monitor, if the sensor detects a significant change from the average, it will print \"Something is there!\".</p> <p></p>"},{"location":"Products/Crowtail/crowtail--mems-microphone.html","title":"Crowtail- MEMS Microphone","text":""},{"location":"Products/Crowtail/crowtail--mems-microphone.html#description","title":"Description","text":"<p>The Crowtail- MEMS Microphone is a simple and easy-to-use microphone for a variety of sound-sensing projects. The on-board mic is an ADMP401, which is a low-power, omnidirectional microphone with an analog output. It works for both near and long-range uses and is particularly good for portable applications due to its low power consumption. The amplifier\u2019s AUD output will float at one half Vcc when no sound is being picked up. The amplifier produces a peak-to-peak output of about 200mV when the microphone is held at arms length and is being talked into at normal conversational volume levels. So the AUD output can easily be connected to the ADC of a micro.</p> <p>Model: CRT00238M</p> <p></p>"},{"location":"Products/Crowtail/crowtail--mems-microphone.html#features","title":"Features","text":"<p>Low-power, omnidirectional microphone</p> <p>Both near and long-range uses</p> <p>Mic: ADMP401</p> <p>volatog:5v</p> <p>current: 250 \u03bcA.</p>"},{"location":"Products/Crowtail/crowtail--mems-microphone.html#specificationadmp401","title":"Specification(ADMP401)","text":"<p>High Signal-to-Noise Ratio (\u201cSNR\u201d) of 62 dBA</p> <p>Sensitivity of about -42 dBV</p> <p>Flat frequency response from 100 Hz to 15 kHz</p> <p>Low current consumption of &lt;250 \u03bcA</p> <p>Maximum acoustic input of 120 dB</p> <p>Dimensions(mm):20.0(L)x20.0(W)x9.8(H)</p>"},{"location":"Products/Crowtail/crowtail--mems-microphone.html#application","title":"Application","text":"<p>smartphones, digital video cameras etc.</p>"},{"location":"Products/Crowtail/crowtail--mems-microphone.html#usage","title":"Usage","text":"<p>The microcontroller analog (ADC) input converts our audio signal into an integer. The range of possible ADC values depends on which microcontroller you are using. For an Arduino microcontroller, this range is between 0 and 1023, so the resolution of our ADC measurement is 1024. Connect Crowtail- Solid-State Relay to port D2(one button to D5) of Crowtail - Base Shield and plug it into Arduino/Crowduino.</p> <pre><code>// Connect the MEMS AUD output to the Arduino A0 pin\nint mic = A0;\n\n// Variables to find the peak-to-peak amplitude of AUD output\nconst int sampleTime = 50; \nint micOut;\n\n\nvoid setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n   int micOutput = findPTPAmp();\n   VUMeter(micOutput);   \n}   \n\n\n// Find the Peak-to-Peak Amplitude Function\nint findPTPAmp(){\n// Time variables to find the peak-to-peak amplitude\n   unsigned long startTime= millis();  // Start of sample window\n   unsigned int PTPAmp = 0; \n\n// Signal variables to find the peak-to-peak amplitude\n   unsigned int maxAmp = 0;\n   unsigned int minAmp = 1023;\n\n// Find the max and min of the mic output within the 50 ms timeframe\n   while(millis() - startTime &lt; sampleTime) \n   {\n      micOut = analogRead(mic);\n      if( micOut &lt; 1023) //prevent erroneous readings\n      {\n        if (micOut &gt; maxAmp)\n        {\n          maxAmp = micOut; //save only the max reading\n        }\n        else if (micOut &lt; minAmp)\n        {\n          minAmp = micOut; //save only the min reading\n        }\n      }\n   }\n\n  PTPAmp = maxAmp - minAmp; // (max amp) - (min amp) = peak-to-peak amplitude\n  double micOut_Volts = (PTPAmp * 3.3) / 1023; // Convert ADC into voltage\n\n  //Uncomment this line for help debugging (be sure to also comment out the VUMeter function)\n  //Serial.println(PTPAmp); \n\n  //Return the PTP amplitude to use in the soundLevel function. \n  // You can also return the micOut_Volts if you prefer to use the voltage level.\n  return PTPAmp;   \n}\n\n// Volume Unit Meter function: map the PTP amplitude to a volume unit between 0 and 10.\nint VUMeter(int micAmp){\n  int preValue = 0;\n\n  // Map the mic peak-to-peak amplitude to a volume unit between 0 and 10.\n   // Amplitude is used instead of voltage to give a larger (and more accurate) range for the map function.\n   // This is just one way to do this -- test out different approaches!\n  int fill = map(micAmp, 23, 750, 0, 10); \n\n  // Only print the volume unit value if it changes from previous value\n  while(fill\u00a0!= preValue)\n  {\n    Serial.println(fill);\n    preValue = fill;\n  }\n}\n</code></pre> <p>Upload the code and open the serial monitor. You an observe the data is changing when you making the sound on the Microphone.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--mems-microphone.html#resource","title":"Resource","text":"<p>ADMP401.pdf</p>"},{"location":"Products/Crowtail/crowtail--microwave-sensor.html","title":"Crowtail- Microwave sensor","text":""},{"location":"Products/Crowtail/crowtail--microwave-sensor.html#description","title":"Description","text":"<p>A new product of crowtail family, it\u2019s a microwave sensor module which is applies the Doppler effect to detect moving objects using microwaves.This differs from the method used by a regular infrared (IR) sensor as microwave is sensitive to a variety of objects that are microwave-reflective, and its sensor readings are not affected by the ambient temperature.This type of sensor is widely used in industrial, transportation and civil applications such as measuring vehicle speed, liquid levels, automatic door motion detection, automatic washing, production line material detection and car reversing sensors etc.</p> <p>Model: CMS38743C </p> <p>The microwave detection method has the following advantages compared to other methods:</p> <pre><code>  Non-contact detection\n  Readings not affected by temperature, humidity, noise, air, dust or light - suitable for harsh environments\n  Strong resistance to radio frequency interference\n  Low output, urharmful to human\n  Wide detection range and high velocity\n  Supports non-living object detection\n</code></pre>"},{"location":"Products/Crowtail/crowtail--microwave-sensor.html#features","title":"Features","text":"<ul> <li>Working Voltage: 5V + 0.25V</li> <li>Working Current (CW): 60mA max., 37mA typical</li> <li>Interface: Crowtail 4-Pin interface\uff08Digital\uff09</li> <li>Dimensions(mm):63.0(L)x48.5(W)x8.0(H)</li> <li>Emission parameters:</li> </ul> <pre><code>    Detection Distance: 2-16M continuously adjustable\n    Emission Frequency: 10.525 GHz\n    Precision Frequency Setting: 3MHz\n    Output Power (minimum): 13dBm EIRP\n    Harmonic Emission: &lt; -10dBm\n    Average Current (5%DC): 2mA typ.\n    Pulse Width (Min.): 5uSec\n    Load Cycle (Min.): 1%\n</code></pre> <ul> <li>Reception Parameters:</li> </ul> <pre><code>    Sensitivity:(10dB S/N ratio) 3Hz to 80Hz\n    Bandwidth: -86dBm\n    3Hz to 80Hz Bandwidth Clutter: 10uV\n    Antenna Gain: 8dBi\n    Vertical 3dB Beam Width: 36 degrees\n    Level 3dB Beam Width: 72 degrees\n</code></pre>"},{"location":"Products/Crowtail/crowtail--microwave-sensor.html#sensor-module-description","title":"Sensor Module Description","text":""},{"location":"Products/Crowtail/crowtail--microwave-sensor.html#antenna-description","title":"Antenna Description","text":""},{"location":"Products/Crowtail/crowtail--microwave-sensor.html#signal-processing","title":"Signal Processing","text":"<p>The following diagram demonstrates the working principle of the sensor module. It works by amplifying a tiny signal which is received by the microwave sensor, and then through the comparison circuit it converts the signal into a square signal with a digital output of 0 or 1 which an Arduino or other micro controller can easily handle.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--microwave-sensor.html#signal-detection-range","title":"Signal Detection Range","text":"<p>Detection Angle: The angle of detection is 72 degrees with the antenna in a parallel direction (azimuth) The vertical (pitch) direction of the antenna is 36 degrees. </p>"},{"location":"Products/Crowtail/crowtail--microwave-sensor.html#install","title":"Install","text":"<p>Microwaves can penetrate through walls.So sometimes it is inaccuracies when microwaves penetrate to outside walls and detect moving objects in non-target areas. Be sure to choose an installation location to avoid this!  </p>"},{"location":"Products/Crowtail/crowtail--microwave-sensor.html#indicators-and-output-status","title":"Indicators and Output Status","text":"<p>When the microwave sensor does not detect moving objects, the indicator LED remains off. When the sensor detects moving objects, the LED will turn on and the output level will be change from HIGH to LOW. The LED will automatically turn off about after 0.5s and the output level will change from LOW to HIGH. If the microwave sensor detects continuously moving objects the LED will keep flashing on and off. The output level will fluctuate between HIGH and LOW until the object stops moving.</p>"},{"location":"Products/Crowtail/crowtail--microwave-sensor.html#usage","title":"Usage","text":"<p>The library of Microwave sensor we use that is MsTimer2. You can download here:MsTimer2 Check that the MsTimer2 contains MsTimer2.cpp and MsTimer2.h Place the MsTimer2 library folder your arduino sketchfolder/libraries/ folder. You may need to create the libraries subfolder if its your first library. Restart the IDE.</p> <p>1.Keep the Microwave sensor in a smooth. connect it onto the digital 2 port .</p> <p></p> <p>2.Upload the below program.</p> <pre><code>#include &lt;MsTimer2.h&gt;           //Timer interrupt function library\nint pbIn = 0;                    // Define interrupt 0 that is digital pin 2\nint ledOut = 12;                 // Define the indicator LED pin digital pin 13\nint number=0;                    //Interrupt times\nvolatile int state = LOW;         // Defines the indicator LED state, the default is not bright\n\nvoid setup()\n{      \n     Serial.begin(9600);          \n     pinMode(ledOut, OUTPUT);// \n     attachInterrupt(pbIn, stateChange, FALLING); // Set the interrupt function, interrupt pin is digital pin D2, interrupt service function is stateChange (), when the D2 power change from high to low , the trigger interrupt.\n     MsTimer2::set(1000, Handle); // Set the timer interrupt function, running once Handle() function per 1000ms \n     MsTimer2::start();//Start timer interrupt function\n\n}\n\nvoid loop()                     \n{\nSerial.println(number); // Printing the number of times of interruption, which is convenient for debugging.\n    delay(1);        \n    if(state == HIGH)  //When a moving object is detected, the ledout is automatically closed after the light 2S, the next trigger can be carried out, and No need to reset. Convenient debugging.\n    {\n        delay(2000);\n        state = LOW;\n        digitalWrite(ledOut, state);    //turn off led\n    }\n\n }\n\n\nvoid stateChange()  //Interrupt service function\n{  \n  number++;  //Interrupted once, the number +1\n\n}\n\nvoid Handle()   //Timer service function\n{\n    if(number&gt;1)  //If in the set of the interrupt time the number more than 1 times, then means have detect moving objects,This value can be adjusted according to the actual situation, which is equivalent to adjust the threshold of detection speed of moving objects.\n         {\n                   state = HIGH;            \n                   digitalWrite(ledOut, state);    //light led\n                   number=0;   //Cleare the number, so that it does not affect the next trigger\n         }\n        else\n              number=0;   //If in the setting of the interrupt time, the number of the interrupt is not reached the threshold value, it is not detected the moving objects, Cleare the number.\n}\n</code></pre> <p>3.The microwave sensor has a distance range of 2-16m. The detection distance can be adjusted using the potentiometer. If it is turned in the direction on MIN, the detection distance decreases. If it is turned in the opposite direction, the range increases.</p>"},{"location":"Products/Crowtail/crowtail--microwave-sensor.html#resources","title":"Resources","text":"<ul> <li>MsTimer2 </li> <li>Microwave sensor - EAGLE (Schematic and Board) files</li> <li>Doppler_effect </li> </ul>"},{"location":"Products/Crowtail/crowtail--mini-pir-motion-sensor.html","title":"Crowtail- Mini PIR Motion Sensor","text":""},{"location":"Products/Crowtail/crowtail--mini-pir-motion-sensor.html#description","title":"Description","text":"<p>The Crowtail- Mini PIR Motion Sensor is a compact, low power consumption and cost effective PIR sensor. It interfaces directly with up to two conventional PIR sensors via a high impedance different input. The PIR Signal is converted to a 15 bit digital value on chip. Is's used for making motion detecting applications such as alarm burglar systems, visitor presence monitoring, light switches and robots.</p> <p>Model: CRT00255P</p> <p></p>"},{"location":"Products/Crowtail/crowtail--mini-pir-motion-sensor.html#features","title":"Features","text":"<p>Low power consumption</p> <p>Digital signal processing\uff08DSP\uff09</p> <p>Built-in filter, high immunity to RFI</p> <p>Best detect distance:&gt;2m</p> <p>Crowtail interface</p>"},{"location":"Products/Crowtail/crowtail--mini-pir-motion-sensor.html#specification","title":"Specification","text":"<p>Dimensions(mm):20.0(L)x20.0(W)x18.0(H)</p> <p>Sensor chip:S16-L221D</p> <p>Sensitivity:120 \u2013 530 \u03bcV</p> <p>Max detecting range:2m(25\u2103)</p>"},{"location":"Products/Crowtail/crowtail--mini-pir-motion-sensor.html#application","title":"Application","text":"<p>PIR motion detection, Intruder detection, Occupancy detection, Motion sensor lights, Computer monitor, Security system, Automatic control,etc.</p>"},{"location":"Products/Crowtail/crowtail--mini-pir-motion-sensor.html#usage","title":"Usage","text":"<p>This example show you how to make a simple alarm device.</p> <p>The Crowtail- Mini PIR Motion Sensor is connecting to D2 port of Crowtail - Base Shield and connect the Corwtail LED to the D5 port.</p> <p></p> <p>Cope the code and upload it to your arduino board.</p> <pre><code>void setup() {\n  // put your setup code here, to run once:\n  pinMode(2 , INPUT);\n    pinMode(5 , OUTPUT);\n  Serial.begin(9600);\n\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\nint A = digitalRead ( 2);\nSerial.println(A);\nif(A==HIGH){\ndigitalWrite(5, HIGH);\n}\nelse\ndigitalWrite(5,LOW);\ndelay(500);\n}\n</code></pre> <p>Then it Alarm \"lights\" will be on if it detects the body is moving.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--moisture-sensor.html","title":"Crowtail- Moisture Sensor","text":""},{"location":"Products/Crowtail/crowtail--moisture-sensor.html#description","title":"Description","text":"<p>This Moisture Sensor can be used to detect the moisture of soil or your pet plant's water level, let the plants in your garden reach out for human help. It is connected to Analog I/O port.</p> <p>Model: CT0007MS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--moisture-sensor.html#features","title":"Features","text":"<ul> <li>Soil moisture sensor based on soil resistivity measurement</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowtail/crowtail--moisture-sensor.html#specification","title":"Specification","text":"<p>Dimensions(mm):80.0(L)x20.0(W)x6.8(H)</p> Item Min Typical Max Unit Voltage 3.3 / 5 V Current 0 ~ 35 mA Sensor in dry soil 0 ~ 300 / Sensor in humid soil 300 ~ 500 / Sensor in water 500 ~ 750 /"},{"location":"Products/Crowtail/crowtail--moisture-sensor.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Botanical gardening</li> <li>Moisture sensoring</li> </ul>"},{"location":"Products/Crowtail/crowtail--moisture-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of sensing the moisture of the soil.</p> <p>1.Connect this module to one of analog port A0 of Crowtail - Base Shield with the 3 pin Crowtail cable, and then insert the Sensor into the soil or place it anywhere you want.</p> <p>2.Plug Crowtail - Base Shield into the Arduino/Crowduino and connnect Arduino to PC via a USB cable.</p> <p>3.The hardware installation as shown below:</p> <p> </p> <p>4.Copy and paste code below to a new Arduino sketch.</p> <pre><code>int sensorPin = A0;    // select the input pin for the moisture Sensor\nint sensorValue = 0;  // variable to store the value coming from the sensor\n\nvoid setup() {\n // declare the ledPin as an OUTPUT:\n  Serial.begin(9600);  \n}\n\nvoid loop() {\n // read the value from the sensor:\n sensorValue = analogRead(sensorPin);    \n delay(1000);          \n Serial.print(\"sensor = \" );                       \n Serial.println(sensorValue);                   \n}\n</code></pre> <p>5.The Result in different condition after open the serial monitor:</p> <p> </p>"},{"location":"Products/Crowtail/crowtail--moisture-sensor.html#resource","title":"Resource","text":"<ul> <li>Moisture Sensor Program</li> <li>Crowtail-Moisture Sensor eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--mosfet.html","title":"Crowtail- MOSFET","text":""},{"location":"Products/Crowtail/crowtail--mosfet.html#description","title":"Description","text":"<p>Crowtail- MOSFET enables you to control higher voltage project, say 50VDC, with low voltage, say 5V, on microcontroller. MOSFET is also a kind of switch. There are two screw terminals on the board. One for input power source and the other for device you want to control. Crowtail- MOSFET will pass the power from one end to another when closed. But if outer power source is absent, your device can still draw power from microcontroller via the Crowtail interface.</p> <p>Model: CT0016MS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--mosfet.html#feature","title":"Feature","text":"<ul> <li>Working voltage: 5V</li> <li>Vin: 5 ~ 15V</li> <li>MOSFET Model:IRF9540N</li> <li>Dimensions(mm):40.0(L)x20.0(W)x20.0(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--mosfet.html#usage","title":"Usage","text":"<p>Here we demonstrates how to use Crowtail- MOSFET to control a DC motor. We provide power for it with external power source.</p> <p>1.Connect this module to one of digital port D5 of Crowtail - Base Shield with the Crowtail cable</p> <p>2.Plug Crowtail - Base Shield into the Arduino/Crowduino and connnect Arduino to PC via a USB cable.</p> <p>3.The hardware installation as shown below:</p> <p></p> <p>4.Copy and paste code below to a new Arduino sketch.</p> <pre><code>int motorPin = 5;\n\nvoid setup()\n{\n   Serial.begin(9600);\n   pinMode(motorPin, OUTPUT);\n   Serial.println(\"Crowtail- MOSFET Test Demo!\");\n}\n\nvoid loop()\n{\n   motorOnThenOffWithSpeed();\n   motorAcceleration();\n}\n\nvoid motorOnThenOffWithSpeed()\n{\n   int onSpeed  = 200;                         // a number between 0 (stopped) and 255 (full speed)\n   int onTime   = 2500;\n   int offSpeed = 50;                          // a number between 0 (stopped) and 255 (full speed)\n   int offTime  = 1000;\n   analogWrite(motorPin, onSpeed);\n   delay(onTime);\n   analogWrite(motorPin, offSpeed);\n   delay(offTime);\n}\n\nvoid motorAcceleration()\n{\n   int delayTime = 50;\n   for(int i=0; i&lt;256; i++)\n   {\n       analogWrite(motorPin, i);\n       delay(delayTime);\n   }\n\n   for(int i=255; i&gt;=0; i--)\n   {\n       analogWrite(motorPin, i);\n       delay(delayTime);\n   }\n}\n</code></pre> <p>5.Upload the code, you can see the motor will accelerate slowly and then decelerate, rotates in circulating.</p>"},{"location":"Products/Crowtail/crowtail--mosfet.html#resource","title":"Resource","text":"<ul> <li>MOSFET Program</li> <li>Crowtail-MOSFET eagle files</li> <li>IRF9540N.pdf</li> </ul>"},{"location":"Products/Crowtail/crowtail--motor-base-shield.html","title":"Crowtail- Motor Base Shield","text":""},{"location":"Products/Crowtail/crowtail--motor-base-shield.html#description","title":"Description","text":"<p>It would always a problem to drive motors for Arduino beginners. If you DIY your mobile platform, you will 2 DC motors at least, and control their speed&amp; direction of rotaton, because you will want your platform forward, turn back, turn left or right. Besides, motors always needs large current, so, you will need some modules to help you control the large current, with microtrller sucha Arduino. So, what you need in such application is a motor driver board. Elecrow has prepard such a Shield board for you. It is Arduino compatible, you can just plug it onto your Arduino or Crowduino to start your mobile application. Actually, We had release the Motor Shield one years ago, but today, i will introduce you the Motor$ Stepper Shield, which is the upgrade version of the previous Motor Shield. Model: CT0069MBS </p>"},{"location":"Products/Crowtail/crowtail--motor-base-shield.html#features","title":"Features","text":"<ul> <li>The logic control voltage: 4.5~5.5V</li> <li>Motor Supply Voltage: 6~ 15V</li> <li>Measurement for driver current</li> <li>Drive part of the operating current Io: 2A</li> <li>Maximum power dissipation: 25W (T = 75 degree Celsius)</li> <li>Operating temperature: -25 degree Celsius ~ +130 degree Celsius</li> <li>Drive Type: Dual high-power H-bridge driver</li> </ul>"},{"location":"Products/Crowtail/crowtail--motor-base-shield.html#specification","title":"Specification","text":"Item Min Typical Max Unit Operating Voltage 4.5 5.0 5.5 VDC Drive Voltage 6 12 15 V Output Current / / 2 A Dimensions 68.6(L)x54.6(W)x23.5(H) cm Weight g"},{"location":"Products/Crowtail/crowtail--motor-base-shield.html#interface-function","title":"Interface Function","text":"<p> Motor Supply Voltage: ------&gt; External Power supply for the Motor Shield, Could be 6~22V depending on the motor you used Power Indicator: ------&gt; LED indicator for the external power supply.  H-Bridge Driver: ------&gt; 8 High-power MOSFET to build H-Bridge. Motor_1&amp;2 Connector: ------&gt; Connect your motors here, the H-Bridge motor shield can drive 2 motors simultaneously, of course it can also drive a 4-wire stepper. Motor Control Pins: ------&gt; Arduino pins used to control the motor direction&amp;speed as belows:  </p>"},{"location":"Products/Crowtail/crowtail--motor-base-shield.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--motor-base-shield.html#pin-routing","title":"Pin Routing","text":"<p>Plug the motor shield onto Arduino or Crowduino, the motor shield pins connects Arduino pins as below:</p> Motor Pin Name Arduino pin Description Motor_1 IN1 D8 D8=0,D11=1 -&gt; clockwise; D8=1,D11=0 -&gt; anticlockwise; IN2 D11 ENA D9 Motor_1 speed control, duty can be 0%~100% Motor_2 IN3 D12 D12=0,D13=1 -&gt; clockwise; D12=1,D13=0 -&gt; anticlockwise; IN4 D13 ENB D10 Motor_2 speed control, duty can be 0%~100%"},{"location":"Products/Crowtail/crowtail--motor-base-shield.html#heatsink","title":"Heatsink","text":"<p>There is a heatsink in the pack, if your drive current larger than 1A, you can adhere the heatsink on to the dirver IC L298P easily with the 3M glue at the bottom.</p>"},{"location":"Products/Crowtail/crowtail--motor-base-shield.html#control-2dc-motors","title":"Control 2DC motors","text":"<p>With this Motor Base Shield, you can control 2 DC motors simultaneously. 6 Arduino pins are needed to control the 2 DC motors. D8/D9/D11 are for motor_1 controlling, and D10/D12/D13 are for the motor_2 controlling.  In this mode, 3 pins will be need to control each motor. 2 for rotate derection, and 1 for speed controlling.</p> <pre><code>const int pinI1=8;//I1\nconst int pinI2=11;//I2\nconst int speedpinA=9;//EA(PWM)to control the motor_1 speed\nconst int pinI3=12;//I3\nconst int pinI4=13;//I4\nconst int speedpinB=10;//EB(PWM]) to control the motor_2 speed\nvoid setup()\n{\n    for(int i=0;i&lt;20;i++)\n    pinMode(i,OUTPUT); //set to output\n}\nvoid loop()\n{\n    Test_Load_Left();\n    delay(3000);\n    clean_Output();\n    delay(1000);\n    Test_Load_Right();\n    delay(3000);\n}\n/*Set the motor1 clockwise and motor2 anticlockwise, with speed 150*/\nvoid Test_Load_Left()\n{\n  analogWrite(speedpinA,150);\n  analogWrite(speedpinB,150);\n  digitalWrite(pinI4,HIGH);\n  digitalWrite(pinI3,LOW);\n  digitalWrite(pinI2,HIGH);\n  digitalWrite(pinI1,LOW);\n}\n/*Set the motor1 clockwise and motor2 anticlockwise, with speed 100 */\nvoid Test_Load_Right()\n{\n  analogWrite(speedpinA,100);\n  analogWrite(speedpinB,100);\n  digitalWrite(pinI1,HIGH);\n  digitalWrite(pinI2,LOW);\n  digitalWrite(pinI3,HIGH);\n  digitalWrite(pinI4,LOW);\n  }\n\n/*Stop the motors */\nvoid clean_Output()\n{\n  digitalWrite(speedpinA,LOW);// full PWM 255\n  digitalWrite(speedpinB,LOW);\n}\n</code></pre>"},{"location":"Products/Crowtail/crowtail--motor-base-shield.html#stepper-control","title":"Stepper Control","text":"<p>Connect a 4-wire stepper motor to motor shield refer to [ULN2003] There is a lib\uff1a Stepper.h in Arduino IDE, users can use this library to control 4-wire stepper as below program:</p> <pre><code>#include &lt;Stepper.h&gt;\nconst int stepsPerRevolution = 200;  // change this to fit the number of steps per revolution\n                                    // for your motor\n// initialize the stepper library on pins 8 through 13:\nStepper myStepper(stepsPerRevolution, 8,11,12,13);            \nvoid setup() {\n // set the speed at 60 rpm:\n myStepper.setSpeed(60);\n // initialize the serial port:\n Serial.begin(9600);\n pinMode(9,OUTPUT);\n pinMode(10,OUTPUT);\n digitalWrite(9,HIGH);\n digitalWrite(10,HIGH);\n}\nvoid loop() {\n // step one revolution  in one direction:\n  Serial.println(\"clockwise\");\n myStepper.step(stepsPerRevolution);\n delay(500);\n  // step one revolution in the other direction:\n Serial.println(\"counterclockwise\");\n myStepper.step(-stepsPerRevolution);\n delay(500); \n}\n</code></pre> <p>The connected stepper would rotate with a changing direction for this progam.</p>"},{"location":"Products/Crowtail/crowtail--motor-base-shield.html#resources","title":"Resources","text":"<ul> <li>Eagle files </li> </ul>"},{"location":"Products/Crowtail/crowtail--mp3.html","title":"Crowtail- MP3","text":""},{"location":"Products/Crowtail/crowtail--mp3.html#description","title":"Description","text":"<p>Crowtail- MP3 is a tiny-size and compact audio module. It supports operations including shuffle and play in an order of various audio files such as WAV and WMV ones. With serial communication, you can use all predefined commands or even the combinations of them to play the music. This module also supports general file systems like FAT16 and FAT32. It gets a Crowtail UART interface, a 3.5mm audio jack and a micro-SD slot. With this module, you can get some \u201cvoices\u201d for silent applications.</p>"},{"location":"Products/Crowtail/crowtail--mp3.html#features","title":"Features","text":"<ul> <li>General operations on audio files</li> <li>On-board micro-SD slot and 3.5 mm audio jack</li> <li>Support sample rate of 8/11.025/12/16/22.05/24/32/44.1/48(KHz)</li> <li>24-bit DAC output, 90 dB (at Max.) dynamic output range, signal-noise ratio at 85 dB</li> <li>MP3, WMV and WAV audio format and FAT16, FAT32 files system supported</li> <li>Embed 10 levels of equalization in total</li> </ul>"},{"location":"Products/Crowtail/crowtail--mp3.html#specification","title":"Specification","text":"Input 5 V (DC) Operating current (no signal output state) less than 15 mA Operating current less than 40 mA Chip KT403A(datasheet) Chip LDO output voltage 3.3 V Chip output current 100mA(at Max.) File formats supported MP3, WAV, WMA Maximum memory supported for SD card 32 GB Sampled rate 8/11.025/12/16/22.05/24/32/44.1/48 (KHz)"},{"location":"Products/Crowtail/crowtail--mp3.html#interface-function","title":"Interface function","text":""},{"location":"Products/Crowtail/crowtail--mp3.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--mp3.html#material-required","title":"Material required","text":"<ul> <li>Crowduino \u00d7 1</li> <li>Grove CrowtailGrove - MP3 v2.0 \u00d7 1</li> <li>SD card with music inside \u00d7 1</li> <li>USB cable (type A to micro type-B) \u00d7 1</li> <li>Headset, earphone or stereo with 3.5 mm audio jack \u00d7 1</li> </ul>"},{"location":"Products/Crowtail/crowtail--mp3.html#hardware-connections","title":"Hardware connections","text":"<p>1. Connect the MP3 Player from U port, SD card slot card entities. insert a Card with MP3 songs into the SD card slot, the indicator lamp lights on the MP3 Player will be observed at this time (unplug the SD card, lights off).</p> <p>2.Download the MP3_test demo code,unzip it ,copy it to libraries folder of Arduino.</p> <p>3.Open Arduino IDE, File -&gt; examples -&gt; MP3Player_KT403A -&gt;MP3_Play_Test, you can open the demo code,and upload to the main controller board.</p> <p></p> <p>4.Open Serial Monitor,you can send different command (1~8) to control the MP3 Player.</p> 1 Specify the music index to play 2 Pause the MP3 player 3 Resume the MP3 player 4 Play the next song 5 Play the previous song 6 Play loop for all the songs 7 Increase volume 8 Decrease volume <p>5.Now enjoy the music.</p>"},{"location":"Products/Crowtail/crowtail--mp3.html#resource","title":"Resource","text":"<ul> <li>MP3_test demo code</li> <li>KT403A(datasheet)</li> <li>Crowtail- MP3 eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--mpu6050-accelerometer-26-gyro.html","title":"Crowtail- MPU6050 Accelerometer & Gyro","text":""},{"location":"Products/Crowtail/crowtail--mpu6050-accelerometer-26-gyro.html#description","title":"Description","text":"<p>A Crowtail- MPU6050 Accelerometer &amp;Gyro which has 3-Axis digital accelerometer and 3-Axis gyroscope,and a Digital Motion Processor hardware accelerator engine with an auxiliary I2C port that interfaces to 3 party digital sensors such as magnetometers. It\u2019s the first motion processing solution projects and it can apply on game controllers, motion controls, Four - axis aircraft and other consumer devices. The MPU-60X0 is a 2<sup>nd</sup> generation motion processor and is compatible with the MPU-30X0.</p> <p>Model: CRT02122G </p> <p></p>"},{"location":"Products/Crowtail/crowtail--mpu6050-accelerometer-26-gyro.html#features","title":"Features","text":"<ul> <li>RoHS/WEEE lead-free compliant</li> <li>Crowtail compatible interface</li> </ul>"},{"location":"Products/Crowtail/crowtail--mpu6050-accelerometer-26-gyro.html#specifications","title":"Specifications","text":"Item Value Operating Voltage 5.0 to 6.0V Measure dimension Acceleration: 3D, angular velocity: 3D, attitude angle: 3D Current consumption not more than 10mA Measuring range Acceleration:\u00b116g, angular velocity: \u00b12000 degree per second Measurement error Acceleration:\u00b16.1e-5g, angular velocity: \u00b17.6e-3 degree per second Stability Acceleration:0.001g, angular velocity: 0.02 degree per second Data output frequency 100Hz(115200bps)/ 20Hz(9600bps) Data interface I2C Dimensions(mm) 20.0(L)x20.0(W)x9.8(H)"},{"location":"Products/Crowtail/crowtail--mpu6050-accelerometer-26-gyro.html#interface","title":"Interface","text":""},{"location":"Products/Crowtail/crowtail--mpu6050-accelerometer-26-gyro.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Crowtail/crowtail--mpu6050-accelerometer-26-gyro.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--mpu6050-accelerometer-26-gyro.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs:  </p> Crowduino Uno Base Shield MPU6050 Accelerometer Gyro Get one now Get one now Get one now <p>STEP2 Plug Crowtail-Base Shield into Crowduino Uno and set Crowtail-MPU6050 Accelerometer&amp;Gyro to I\u00b2C port of Crowtail-Base Shield; STEP3 Connect Crowduino Uno to PC via a Mini USB cable. </p> NOTE If we don't have Crowtail Base Shield, We also can directly connect this module to Crowduino Uno as below. Crowduino Uno MPU6050 Accelerometer Gyro A4(J7) SDA A5(J7) SCL 5V VCC GND GND"},{"location":"Products/Crowtail/crowtail--mpu6050-accelerometer-26-gyro.html#software","title":"Software","text":"<p>STEP 1.Download program filesMPU6050.zip STEP 2 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201d from the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure.  STEP 3 Install Library: Unzip the mpu6050.zip file and copy it to the Libraries directory under the Arduino installation directory  STEP4 Open Arduino IDE and load MPU6050_raw.ino\uff1aclick \"File\u2192Examples\u2192MPU6050\u2192Examples\u2192MPU6050_raw.ino\" </p> <pre><code>// Arduino Wire library is required if I2Cdev I2CDEV_ARDUINO_WIRE implementation\n// is used in I2Cdev.h\n#include \"Wire.h\"\n\n// I2Cdev and MPU6050 must be installed as libraries, or else the .cpp/.h files\n// for both classes must be in the include path of your project\n#include \"I2Cdev.h\"\n#include \"MPU6050.h\"\n\n// class default I2C address is 0x68\n// specific I2C addresses may be passed as a parameter here\n// AD0 low = 0x68 (default for InvenSense evaluation board)\n// AD0 high = 0x69\nMPU6050 accelgyro;\n\nint16_t ax, ay, az;\nint16_t gx, gy, gz;\n\n#define LED_PIN 13\nbool blinkState = false;\n\nvoid setup() {\n    // join I2C bus (I2Cdev library doesn't do this automatically)\n    Wire.begin();\n\n    // initialize serial communication\n    // (38400 chosen because it works as well at 8MHz as it does at 16MHz, but\n    // it's really up to you depending on your project)\n    Serial.begin(38400);\n\n    // initialize device\n    Serial.println(\"Initializing I2C devices...\");\n    accelgyro.initialize();\n\n    // verify connection\n    Serial.println(\"Testing device connections...\");\n    Serial.println(accelgyro.testConnection()\u00a0? \"MPU6050 connection successful\"\u00a0: \"MPU6050 connection failed\");\n\n    // configure Arduino LED for\n    pinMode(LED_PIN, OUTPUT);\n}\n\nvoid loop() {\n    // read raw accel/gyro measurements from device\n    accelgyro.getMotion6(&amp;ax, &amp;ay, &amp;az, &amp;gx, &amp;gy, &amp;gz);\n\n    // these methods (and a few others) are also available\n    //accelgyro.getAcceleration(&amp;ax, &amp;ay, &amp;az);\n    //accelgyro.getRotation(&amp;gx, &amp;gy, &amp;gz);\n\n    // display tab-separated accel/gyro x/y/z values\n    Serial.print(\"a/g:\\t\");\n    Serial.print(ax); Serial.print(\"\\t\");\n    Serial.print(ay); Serial.print(\"\\t\");\n    Serial.print(az); Serial.print(\"\\t\");\n    Serial.print(gx); Serial.print(\"\\t\");\n    Serial.print(gy); Serial.print(\"\\t\");\n    Serial.println(gz);\n\n    // blink LED to indicate activity\n    blinkState = !blinkState;\n    digitalWrite(LED_PIN, blinkState);\n}\n</code></pre> <p>STEP5 Click the  to upload the code to the Crowduino board STEP6 After the program is downloaded, open the Serial port monitor of Arduino IDE, set baud rate to 38400, turn the sensor, and the printed value will change, as shown in the figure </p>"},{"location":"Products/Crowtail/crowtail--mpu6050-accelerometer-26-gyro.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Crowtail/crowtail--mpu6050-accelerometer-26-gyro.html#resources","title":"Resources","text":"<p>MPU6050.zip Crowtail-MPU6050_Accelerometer&amp;Gyro-V2.0-Eagle.zip</p>"},{"location":"Products/Crowtail/crowtail--nfc.html","title":"Crowtail- NFC","text":""},{"location":"Products/Crowtail/crowtail--nfc.html#introduction","title":"Introduction","text":"<p>The Crowtail-NFC module (Near Field Communications) uses a highly integrated transceiver module PN532 which handles contactless communication at 13.56MHz. You can read and write a 13.56MHz tag with this module or implement point to point data exchange with two NFC Shields. It is designed to use IIC (default) communication protocols. In addition, you can also use UART communication protocols via change the connection between the welded plates.</p> <p>Model: CRT01015N</p> <p></p>"},{"location":"Products/Crowtail/crowtail--nfc.html#features","title":"Features","text":"<ul> <li> <p>Use as a RFID reader with Mifare One tags and cards (13.56MHZ).</p> </li> <li> <p>Support host interface : UART ,IIC(default).</p> </li> <li> <p>Independent PCB antenna(13.56MHZ).</p> </li> <li> <p>Max operating distance for detecting NFC tags is 28mm depending on current antenna size.</p> </li> <li> <p>Support P2P communication.</p> </li> </ul>"},{"location":"Products/Crowtail/crowtail--nfc.html#specification","title":"Specification","text":"<ul> <li> <p>Working Voltage:3.3V.</p> </li> <li> <p>Support ISO14443 type A and Type B protocols.</p> </li> <li> <p>Antenna size : 18 x 28 x0.8 mm, IPX port.</p> </li> <li> <p>Antenna wire impedance : 50omh.</p> </li> <li> <p>Dimensions(mm):40.0(L)x20.0(W)x9.8(H)</p> </li> </ul>"},{"location":"Products/Crowtail/crowtail--nfc.html#application","title":"Application","text":"<ul> <li> <p>Build visiting card sharing system.</p> </li> <li> <p>Build attendance systems.</p> </li> <li> <p>Design authentication systems.</p> </li> <li> <p>Read Smart Posters.</p> </li> <li> <p>Securely exchange small data with other NFC devices</p> </li> <li> <p>And other endless possibility</p> </li> </ul>"},{"location":"Products/Crowtail/crowtail--nfc.html#interface","title":"Interface","text":""},{"location":"Products/Crowtail/crowtail--nfc.html#usage","title":"Usage","text":"<p>This demo is going to show you how to read NFC information via use this Crowtail-NFC module.</p>"},{"location":"Products/Crowtail/crowtail--nfc.html#iic-mode","title":"IIC mode\uff1a","text":"<p>1.Hardware Installation</p> <p>The Crowtail-NFC is connecting to IIC port of Crowtail - Base Shield and then plug in the antenna.</p> <p></p> <p>2.Download \"NFC Lib\" for arduino boards, unzip and put it in the libraries of Arduino IDE by the path : ..\\arduino-1.x.x\\libraries;</p> <p>3.Open \"ReadTag\" example via the path: File--&gt;Examples--&gt;ND EF--&gt;ReadTag.</p> <p></p> <p>4.Upload it into your arduino board and open the serial monitor, move NFC card close to the NFC atntenna and then observe the NFC information.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--nfc.html#uart-mode","title":"UART mode:","text":"<p>1.First, if you want to use UART communication protocols,you need to disconnect the left welding disks and connect the right welding disks of the P1 via a soldering iron.</p> <p></p> <p>The connect Crowtail NFC J2 port to the arduino MEGE2560 via the jumper ,as follow:</p> <p></p> <p>VCC ------ VCC</p> <p>GND ------- GND</p> <p>RX ------- TX1</p> <p>TX ------- RX1</p> <p>2.Download \u201cLD_NFClib\u201d for arduino boards, unzip and put it in the libraries of Arduino IDE by the path : ..\\arduino-1.x.x\\libraries;</p> <p>3. open \u201d ReadTag\u201d example via the path: File--&gt;Examples--&gt; LD_NFClib --&gt;example --&gt;testNFC.</p> <p>4. Upload it into your arduino board and open the serial monitor, move NFC card close to the NFC atntenna and then observe the NFC information.</p>"},{"location":"Products/Crowtail/crowtail--nfc.html#resource","title":"Resource","text":"<ul> <li>LD_NFClib Library</li> <li>NFC</li> </ul>"},{"location":"Products/Crowtail/crowtail--non-contact-liquid-level-sensor.html","title":"Crowtail- Non-contact liquid level sensor","text":""},{"location":"Products/Crowtail/crowtail--non-contact-liquid-level-sensor.html#description","title":"Description","text":"<p>Intelligent non-contact liquid level sensor (here in after referred to as the liquid level sensor) adopted the advanced signal processing technology and high-speed signal processing chip, broke through the vessel wall thickness, the influence of realized in an airtight container level of real non-contact detection.Liquid level sensor (probe) installed on the outer wall of the container to be tested on the lower part (level of high and low), non-metallic containers without the hole, easy to install, do not affect production.Can realize various toxic substances of high pressure airtight container, strong acid, strong alkali and all kinds of liquid level detection.The material of liquid level sensor for liquid medium and container no special requirements, can be widely used.</p> <p>Model: CT008998L </p>"},{"location":"Products/Crowtail/crowtail--non-contact-liquid-level-sensor.html#feature","title":"Feature","text":"<ul> <li>No direct contact with liquid</li> <li>NPN output</li> <li>Working Voltage: 5V\uff5e24V</li> <li>Induction distance can reach more than 12 mm</li> <li>Crowtail Interface</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowtail/crowtail--non-contact-liquid-level-sensor.html#specification","title":"Specification","text":"<p>Power flow 5 mA</p> <p>Output voltage (high level) InVCC</p> <p>Output voltage (low level) 0 v</p> <p>The output current 1 \uff5e 50 mA</p> <p>The response time 500 ms</p> <p>Working environment temperature 0 \uff5e100 \u2103</p> <p>The thickness of the induction (sensitivity) 0 \uff5e 20 mm</p> <p>humidity 5% \uff5e 100%</p> <p>The material ABS.</p> <p>Waterproof properties IP67</p> <p>Sensor dimensions(mm):28.3(L)x28.3(W)x17.0(H)</p> <p>Cable length:58.5cm</p>"},{"location":"Products/Crowtail/crowtail--non-contact-liquid-level-sensor.html#usage","title":"Usage","text":"<p>Here is an example showing how to turn on the Crowtail- PP Plastic Float Switch.</p> <p>1.Plug it onto the Digital port 2 of Crowtail - Base Shield using a Crowtail cable ,and plug a buzzer onto Digital port 5 .</p> <p>2.Plug the Crowtail - Base Shield onto Arduino.</p> <p>3. Connect Arduino to PC by using a USB cable.</p> <p></p> <p>4.Stick the Non-contact liquid level sensor on the outside of the container on the surface of a certain height.</p> <p>5. Copy and paste code below to a new Arduino sketch, and upload it to your Arduino.</p> <pre><code> int liquid_level=2;\nint buzzer=5;\nint liquid_state=0;\n\nvoid setup()\n{\n   pinMode( liquid_level,INPUT);\n   pinMode(buzzer,OUTPUT);\n}\n\nvoid loop()\n{\n liquid_state=digitalRead(liquid_level);\n if(liquid_state==HIGH)\n {\n digitalWrite(buzzer,HIGH);\n }\n else\n {\n  digitalWrite(buzzer,LOW);\n }\n}\n</code></pre> <p>6.When you upload the code complete,you can Pour water into the container, when the water level and the Non-contact liquid level sensor keep the same height, the indicator light on and the buzzer alarm.</p>"},{"location":"Products/Crowtail/crowtail--oled.html","title":"Crowtail- OLED","text":""},{"location":"Products/Crowtail/crowtail--oled.html#description","title":"Description","text":"<p>Crowtail- OLED is constructed from 128 x 64 dot matrix OLED module. The display offers high brightness, self-emission, high contrast ratio, slim/thin outline, wide viewing angle, wide temperature range and low power consumption.</p> <p>Model: CT0025OD</p> <p></p>"},{"location":"Products/Crowtail/crowtail--oled.html#features","title":"Features","text":"<ul> <li>Connection Mode:I(IIC)</li> <li>Voltage: 5V</li> <li>Display Color:Bule/Black</li> <li>Resolution:128x64</li> <li>Interface:I2C</li> <li>Wide range of operating temperature: : -20\u00b0C~70\u00b0C</li> <li>Dimensions(mm):40.0(L)x20.0(W)x11.5(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--oled.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p>Connect the Crowtail- RGB-LED to I port.</p> <p></p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Download the library OLED library;Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;U8glib-&gt;Ele_0_96_12864.</p> <pre><code>#include \"U8glib.h\"\nU8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);    \nvoid drawColorBox(void)\n{\n u8g_uint_t w,h;\n u8g_uint_t r, g, b;\n w = u8g.getWidth()/32;\n h = u8g.getHeight()/8;\n for( b = 0; b &lt; 4; b++ )\n   for( g = 0; g &lt; 8; g++ )\n     for( r = 0; r &lt; 8; r++ )\n     {\n       u8g.setColorIndex((r&lt;&lt;5) |  (g&lt;&lt;2) | b );\n       u8g.drawBox(g*w + b*w*8, r*h, w, h);\n     }\n}\nvoid drawLogo(uint8_t d)\n{\n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(8+d, 30+d, \"E\");\n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(30+d,30+d,\"l\");\n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(40+d,30+d,\"e\"); \n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(55+d,30+d,\"c\");\n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(70+d,30+d,\"r\");\n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(85+d,30+d,\"o\");\n u8g.setFont(u8g_font_gdr25r);\n u8g.drawStr(100+d,30+d,\"w\");\n}\n\nvoid drawURL(void)\n{\n u8g.setFont(u8g_font_4x6);\n u8g.drawStr(35,54,\"www.elecrow.com\");\n\n}\nvoid draw(void) {\n if ( u8g.getMode() == U8G_MODE_R3G3B2 ) {\n   drawColorBox();\n }\n u8g.setColorIndex(1);\n if ( U8G_MODE_GET_BITS_PER_PIXEL(u8g.getMode()) &gt; 1 ) {\n   drawLogo(2);\n   u8g.setColorIndex(2);\n   drawLogo(1);\n   u8g.setColorIndex(3);\n }\n drawLogo(0);\n drawURL();\n\n}\n\nvoid setup(void) {\n}\n\nvoid loop(void) {\n // picture loop\n u8g.firstPage();  \n do {\n   draw();\n u8g.setColorIndex(1);\n } while( u8g.nextPage() );  \n // rebuild the picture after some delay\n delay(200);  \n}\n</code></pre> <p>5.Upload the Code,you shoule see the display of OLED.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--oled.html#resource","title":"Resource","text":"<ul> <li>OLED demo code</li> <li>Crowtail- OLED eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--one-wire-waterproof-temperature-sensor.html","title":"Crowtail- One Wire Waterproof Temperature Sensor","text":""},{"location":"Products/Crowtail/crowtail--one-wire-waterproof-temperature-sensor.html#introduction","title":"Introduction","text":"<p>A NEW member of our \u201cCrowtail family\u201d, maybe we can use it more easier. This is a waterproofed version of the DS18B20 Temperature sensor. Handy for when you need to measure something far away, or in wet conditions. While the sensor is good up to 125 degree, the cable is jacketed in PVC so we suggest keeping it under 100 degree. Because they are digital, you don't get any signal degradation even over long distances! The DS18B20 provides 9 to 12-bit (configurable) temperature readings over a 1-Wire interface, so that only one wire (and ground) needs to be connected from a central microprocessor.Usable with 3.0-5.5V systems. Because each DS18B20 contains a unique silicon serial number, multiple DS18B20s can exist on the same 1-Wire bus. This allows for placing temperature sensors in many different places. Applications where this feature is useful include HVAC environmental controls, sensing temperatures inside buildings,equipment or machinery, and process monitoring and control..</p> <p>Because each DS18B20 contains a unique silicon serial number, multiple DS18B20s can exist on the same 1-Wire bus. This allows for placing temperature sensors in many different places. Applications where this feature is useful include HVAC environmental controls, sensing temperatures inside buildings,equipment or machinery, and process monitoring and control.</p> <p>Model: CT0049OTS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--one-wire-waterproof-temperature-sensor.html#features","title":"Features","text":"<ul> <li>9 to 12 bit selectable resolution.</li> <li>one digital pin for communication.</li> <li>Multiple sensors can share one pin.</li> <li>Query time is less than 750ms.</li> <li>Crowtail compatible interface.</li> </ul>"},{"location":"Products/Crowtail/crowtail--one-wire-waterproof-temperature-sensor.html#specification","title":"Specification","text":"<ul> <li>3.0V to 5.5V input.</li> <li>Temperature range: -55 to 125\u00b0C (-67\u00b0F to +257\u00b0F).</li> <li>\u00b10.5\u00b0C Accuracy from -10\u00b0C to +85\u00b0C.</li> <li>Stainless steel tube 6mm diameter by 30mm long.</li> <li>Cable length: 90cm.</li> </ul>"},{"location":"Products/Crowtail/crowtail--one-wire-waterproof-temperature-sensor.html#usage","title":"Usage","text":"<p>Here, we will show how to use the waterproof temperature sensor (DS18B20) with your Arduino. This sensor uses the one wire protocol to talk with the microcontroller. So, it requires only one digital port to communicate.</p>"},{"location":"Products/Crowtail/crowtail--one-wire-waterproof-temperature-sensor.html#hardware","title":"Hardware","text":"<p>Connect the Crowtail- One Wire Waterproof Temperature Sensor to D10 port. </p>"},{"location":"Products/Crowtail/crowtail--one-wire-waterproof-temperature-sensor.html#programming","title":"Programming","text":"<p>First download the DS18B20 Library for Arduino to your computer. please refer to here to learn how to install the library and upload the programs.</p> <p>The demo code is:</p> <pre><code>#include &lt;OneWire.h&gt;\nOneWire  ds(10);  // on pin 10\n\nvoid setup(void) {\n  Serial.begin(9600);\n}\n\nvoid loop(void) {\n  byte i;\n  byte present = 0;\n  byte type_s;\n  byte data[12];\n  byte addr[8];\n  float celsius, fahrenheit;\n\n  if ( !ds.search(addr)) {\n    Serial.println(\"No more addresses.\");\n    Serial.println();\n    ds.reset_search();\n    delay(250);\n    return;\n  }\n\n  Serial.print(\"ROM =\");\n  for( i = 0; i &lt; 8; i++) {\n    Serial.write(' ');\n    Serial.print(addr[i], HEX);\n  }\n\n  if (OneWire::crc8(addr, 7)\u00a0!= addr[7]) {\n      Serial.println(\"CRC is not valid!\");\n      return;\n  }\n  Serial.println();\n\n  // the first ROM byte indicates which chip\n  switch (addr[0]) {\n    case 0x10:\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\n      type_s = 1;\n      break;\n    case 0x28:\n      Serial.println(\"  Chip = DS18B20\");\n      type_s = 0;\n      break;\n    case 0x22:\n      Serial.println(\"  Chip = DS1822\");\n      type_s = 0;\n      break;\n    default:\n      Serial.println(\"Device is not a DS18x20 family device.\");\n      return;\n  } \n\n  ds.reset();\n  ds.select(addr);\n  ds.write(0x44,1);         // start conversion, with parasite power on at the end\n\n  delay(1000);     // maybe 750ms is enough, maybe not\n  // we might do a ds.depower() here, but the reset will take care of it.\n\n  present = ds.reset();\n  ds.select(addr);    \n  ds.write(0xBE);         // Read Scratchpad\n\n  Serial.print(\"  Data = \");\n  Serial.print(present,HEX);\n  Serial.print(\" \");\n  for ( i = 0; i &lt; 9; i++) {           // we need 9 bytes\n    data[i] = ds.read();\n    Serial.print(data[i], HEX);\n    Serial.print(\" \");\n  }\n  Serial.print(\" CRC=\");\n  Serial.print(OneWire::crc8(data, 8), HEX);\n  Serial.println();\n\n  // convert the data to actual temperature\n\n  unsigned int raw = (data[1] &lt;&lt; 8) | data[0];\n  if (type_s) {\n    raw = raw &lt;&lt; 3; // 9 bit resolution default\n    if (data[7] == 0x10) {\n      // count remain gives full 12 bit resolution\n      raw = (raw &amp; 0xFFF0) + 12 - data[6];\n    }\n  } else {\n    byte cfg = (data[4] &amp; 0x60);\n    if (cfg == 0x00) raw = raw &lt;&lt; 3;  // 9 bit resolution, 93.75 ms\n    else if (cfg == 0x20) raw = raw &lt;&lt; 2; // 10 bit res, 187.5 ms\n    else if (cfg == 0x40) raw = raw &lt;&lt; 1; // 11 bit res, 375 ms\n    // default is 12 bit resolution, 750 ms conversion time\n  }\n  celsius = (float)raw / 16.0;\n  fahrenheit = celsius * 1.8 + 32.0;\n  Serial.print(\"  Temperature = \");\n  Serial.print(celsius);\n  Serial.print(\" Celsius, \");\n  Serial.print(fahrenheit);\n  Serial.println(\" Fahrenheit\");\n}\n</code></pre> <p>Open the Sscom32 terminal or the Serial moniter , and set the baudrate to 9600, you will see calculated temperature on the moniter.  </p>"},{"location":"Products/Crowtail/crowtail--one-wire-waterproof-temperature-sensor.html#resource","title":"Resource","text":"<p>DS18B20 DataSheet DS18B20 Lib Get Start 1-Wire Protocol Explanation  </p>"},{"location":"Products/Crowtail/crowtail--ph-sensor.html","title":"Crowtail- PH Sensor","text":""},{"location":"Products/Crowtail/crowtail--ph-sensor.html#description","title":"Description","text":"<p>The Crowtail-PH sensor is a module that can measure aqueous solution PH(with combination PH electrode). It can output signal which corresponding to the hydrogen ion concentration that measured by PH electrode. Because it can be directly connected to controller,and then you can observe the PH value at any time.</p> <p>Model: CRT14016P</p> <p></p> <p></p>"},{"location":"Products/Crowtail/crowtail--ph-sensor.html#features","title":"Features","text":"<ul> <li>Range of measurement: (0-14) pH</li> <li>Measuring temperature: (0-60) C</li> <li>Response time: less than 2min</li> <li>The plastic barrier protection of the fragile part of the electrode can not be broken and can be used as a stirring rod when measuring</li> <li>Strong anti-interference performance: the electrode is full screen type to prevent interference of external electric field when measuring</li> </ul>"},{"location":"Products/Crowtail/crowtail--ph-sensor.html#specification","title":"Specification","text":"<p>Board demensions(mm):58.8(L)x20.0(W)x27.0(H)</p> Item Description LED Control Mode Analog Pin of Arduino Working Voltage 5V Supply Mode Crowtail Interface Range of measurement 0-14 pH Measuring temperature 0-60 C"},{"location":"Products/Crowtail/crowtail--ph-sensor.html#usage","title":"Usage","text":"<p>1. Connect PH sensor to Crowtail sensor and connect the Crowtail sensor to Base Shield's analog port A0 with Crowtail Cable.</p> <p></p> <p>2. Plug it onto the Arduino/Crowduino.</p> <p>3.Copy the demo code to your sketch, then upload to Arduino or Crowduino board.</p> <pre><code>#define Vref 4.95\nunsigned long int avgValue;     //Store the average value of the sensor feedback\nint i=0;\nvoid setup()\n{\n    Serial.begin(9600);\n    pinMode(A0, INPUT);\n    pinMode(A1, OUTPUT);\n}\nvoid loop()\n{\n    float sensorValue;\n    int m;\n    long sensorSum;\n    int buf[10];                //buffer for read analog\n  for(int i=0;i&lt;10;i++)       //Get 10 sample value from the sensor for smooth the value\n  { \n    buf[i]=analogRead(A0);//Connect the PH Sensor to A0 port\n    delay(10);\n  }\n  for(int i=0;i&lt;9;i++)        //sort the analog from small to large\n  {\n    for(int j=i+1;j&lt;10;j++)\n    {\n      if(buf[i]&gt;buf[j])\n      {\n        int temp=buf[i];\n        buf[i]=buf[j];\n        buf[j]=temp;\n      }\n    }\n  }\n       avgValue=0;\n\n      for(int i=2;i&lt;8;i++)                      //take the average value of 6 center sample\n      avgValue+=buf[i];\n\n     sensorValue =   avgValue/6;\n     Serial.print(sensorValue);\n     Serial.println(\" \");\n\n    Serial.print(\" the PH value is\");\n    Serial.print(7-1000*(sensorValue-365)*Vref/59.16/1023,2);\n    Serial.println(\" \");\n    delay(1000);\n\n}\n</code></pre> <p>4.First, put the electrode assembly pH in the neutral solution.</p> <p>5.You can open the monitor and see the data from Arduino,as below:</p> <p></p> <p>6.Sencond,put the PH sensor into the acidic solution.</p> <p>7.You can open the monitor and observe the data,as below:</p> <p></p>"},{"location":"Products/Crowtail/crowtail--ph-sensor.html#resource","title":"Resource","text":"<ul> <li>ph sensor code</li> <li>ph sensor schematic</li> </ul>"},{"location":"Products/Crowtail/crowtail--photo-electric-counter.html","title":"Crowtail- Photo Electric Counter","text":""},{"location":"Products/Crowtail/crowtail--photo-electric-counter.html#description","title":"Description","text":"<p>This photo electric counter uses a groove IR Optocoupler to detect if there is anything between the IR emiter and IR receiver. With this method, this module can detect the number of obstruction in a given time thus to detect the speed of the rotation. When the photo electric sensor didn't covered , the D0 output logic LOW, the signal indicate LED light, when the opto sensor covered, the D0 output logic HIGH and the LED off, adjust the potentiometer can adjust the sensitivity of the sensor. And we add a Crowtail interface to it, so we can use with a Crowduino to make our work more easier and convenient.</p> <p>Model: CT0062PEC</p> <p></p>"},{"location":"Products/Crowtail/crowtail--photo-electric-counter.html#features","title":"Features","text":"<ul> <li>Wide power supply range DC3.3V to 5V</li> <li>High sensitive</li> <li>LM393 Comparator to make the output signal easy to read</li> <li>Nothing detected: Output low, LED on; Obstruction between the emitter and receiver: Output high, LED off.</li> <li>Dimensions(mm):20.0(L)x20.0(W)x20.0(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--photo-electric-counter.html#usage","title":"Usage","text":"<p>1. Connect the Photo Electric Counter to the Digital port 2 of Crowtail -Nano Basic Shield using a Crowtail cable and connect an LED to Pin 4.</p> <p></p> <p>2.Download Crowtail- Photo Electric Counter library the library; Unzip and put it in the libraries file : ..\\arduino-1.0\\libraries;</p> <p>3.Open \u201cCrowtail- Photo Electric Counter\u201d example via the path: File --&gt; Examples --&gt;Crowtail- Photo Electric Counter</p> <pre><code>const int sensorPin = 2;   \nconst int ledPin =  4;      // the number of the LED pin\n\n// variables will change:\nint sensorState = 0;      \n\nvoid setup() {\n  // initialize the LED pin as an output:\n  pinMode(ledPin, OUTPUT);      \n  pinMode(sensorPin, INPUT);     \n}\n\nvoid loop(){\n  // read the state of the pushbutton value:\n  sensorState = digitalRead(sensorPin);\n  if (sensorState == HIGH) {     \n    // turn LED on:    \n    digitalWrite(ledPin,LOW);  \n  } \n  else {\n    // turn LED off:\n    digitalWrite(ledPin, HIGH); \n  }\n}\n</code></pre> <p>4.Upload it into your Crowduino-Nano board and keep out the groove ,observe the led.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--photo-electric-counter.html#resource","title":"Resource","text":"<ul> <li>Crowtail-_Photo_Electric Counter Program</li> <li>Crowtail- Photo Electric Counter eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--pir-motion-sensor.html","title":"Crowtail- PIR Motion Sensor","text":""},{"location":"Products/Crowtail/crowtail--pir-motion-sensor.html#description","title":"Description","text":"<p>This is a simple to use PIR motion\uff08Passive Infrared Detection\uff09 sensor with Crowtail compatible interface. Simply connect it to Crowtail base shield and program it, when anyone moves in its detecting range, the sensor outputs HIGH on its SIG pin. The detecting range can be adjusted by a potentiometer soldered on its circuit board, The max detecting range of it up to 6 meters. This version has a large lens which can support long range and wide angle. 2.54mm standard connector is easy to fix it anywhere.</p> <p>Model: CT0057PIR</p> <p></p>"},{"location":"Products/Crowtail/crowtail--pir-motion-sensor.html#specification","title":"Specification","text":"<ul> <li>Input Voltage: DC3.0-5.5V</li> <li>Current: 100uA(max)</li> <li>Detecting distance: 6m(max)</li> <li>Output signal: 0,VCC (Output high when motion detected)</li> <li>Sentry Angle: 120\u00b0</li> <li>Connector:3Pin 2.54mm pitch</li> <li>Dimensions(mm):40.0(L)x20.0(W)x13.0(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--pir-motion-sensor.html#features","title":"Features","text":"<ul> <li>Long range</li> <li>Wide angle</li> <li>Low consumption</li> <li>DC 3.0-5.5V power supplier</li> </ul>"},{"location":"Products/Crowtail/crowtail--pir-motion-sensor.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of sensing montion. When someone moves in its detecting range, it will output High through its SIG pin and the LED will light. Otherwise, it will output LOW. Then you can use it to detect the motion of people.  </p> <p>2.Download Crowtail- PIR_Motion_Sensor library the library; Unzip and put it in the libraries file : ..\\arduino-1.0\\libraries;</p> <p>3.Open \u201cPIR_Sensor \u201d example via the path: File --&gt; Examples --&gt; PIR_Sensor.</p> <pre><code> #define PIR_MOTION_SENSOR 2//Use pin 2 to receive the signal from the module \n #define LED    5//the Crowtail - LED is connected to D5 of Arduino\n\n\nvoid setup()\n{\n    pinsInit();\n}\n\nvoid loop() \n{\n    if(isPeopleDetected())//if it detects the moving people?\n        turnOnLED();\n    else\n        turnOffLED();\n}\n\n\nvoid pinsInit()\n{\n    pinMode(PIR_MOTION_SENSOR, INPUT);\n    pinMode(LED,OUTPUT);\n}\nvoid turnOnLED()\n{\n    digitalWrite(LED,HIGH);\n}\nvoid turnOffLED()\n{\n    digitalWrite(LED,LOW);\n}\n/***************************************************************/\n/*Function: Detect whether anyone moves in it's detecting range*/\n/*Return:-boolean, true is someone detected.*/\nboolean isPeopleDetected()\n{\n    int sensorValue = digitalRead(PIR_MOTION_SENSOR);\n    if(sensorValue == HIGH)//if the sensor value is HIGH?\n    {\n        return true;//yes,return true\n    }\n    else\n    {\n        return false;//no,return false\n    }\n}\n</code></pre> <p>4.Upload it into your Arduino board and open the serial monitor to observe the led.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--pir-motion-sensor.html#resource","title":"Resource","text":"<ul> <li>Crowtail- PIR Motion Sensor Program</li> <li>Crowtail- PIR Motion Sensor eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--protoboard.html","title":"Crowtail- Protoboard","text":""},{"location":"Products/Crowtail/crowtail--protoboard.html#description","title":"Description","text":"<p>This Crowtail allows you to add your own circuitry or components to your Crowtail system prototypes. It gives you access to all four lines from the crowtail connector cable \u2013 S0, S1, VCC and GND. There is also a reserved space for a normally-open button. Standard 2.54mm spacing makes it easy to install normal DIP-format ICs and other components onto the board.</p> <p>Model: CT008726P</p> <p></p>"},{"location":"Products/Crowtail/crowtail--protoboard.html#features","title":"Features","text":"<ul> <li>Standardised Grove Interface</li> <li>Breadboard style</li> <li>Standard spacings</li> <li>Silk screen labels</li> <li>Reserved space for normally-open button</li> <li>Dimensions(mm):40.0(L)x20.0(W)x9.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--protoboard.html#usage","title":"Usage","text":"<p>VCC and GND of the Grove interface are routed out as two buses as shown above. You can find soldering pads of Sig0 and Sig1 between two power buses. They are marked out by white lines. The square area on the right is for a ubiquitous temporary button, you can easily snap one into it as shown below.</p> <p></p> <p>Also the protoshield is shipped with two 20-pin male headers. You can break them into smaller pieces and solder them onto protoshield when you need extension on other breadboard or protoboard. They work well with normal breadboard jumpers.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--protoboard.html#demo-light-led","title":"Demo: Light LED","text":"<p>1. Insert the longer pin of LED into the VCC interface and the shorter pin into Sig0 interface.</p> <p>2. Solder LED on the Protoshield and let it connect to sig0.</p> <p></p> <p>3. Connect the module to the U3 port of Crowtail- Basic Shield using the 4-pin Crowtail cable.</p> <p>4. Plug the Crowtail- Basic Shield into Arduino and connect Arduino to PC by using a USB cable.</p> <p>5. Copy and paste code below to a new Arduino sketch.</p> <pre><code>int led = 7;// Sig0 connect the digital pin 7.\n\n// the setup routine runs once when you press reset:\nvoid setup() {                \n  // initialize the digital pin as an output.\n  pinMode(led, OUTPUT);     \n}\n\n// the loop routine runs over and over again forever:\nvoid loop() {\n  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)\n  delay(1000);               // wait for a second\n  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW\n  delay(1000);               // wait for a second\n}\n</code></pre>"},{"location":"Products/Crowtail/crowtail--protoboard.html#resource","title":"Resource","text":"<ul> <li>Crowtail- Protoboard eagle files v1.0</li> </ul>"},{"location":"Products/Crowtail/crowtail--pulse-sensor.html","title":"Crowtail- Dry-Reed Relay","text":""},{"location":"Products/Crowtail/crowtail--pulse-sensor.html#description","title":"Description","text":"<p>The Pulse Sensor is used to measure the heart rate of the human.Heart rate data can be really useful whether you\u2019re designing an exercise routine, studying your activity or anxiety levels or just want your shirt to blink with your heart beat. The problem is that heart rate can be difficult to measure. Luckily, the Pulse Sensor Amped can solve that problem! The Pulse Sensor Amped is a plug-and-play heart-rate sensor for Arduino. It can be used by students, artists, athletes, makers, and game &amp; mobile developers who want to easily incorporate live heart-rate data into their projects.It essentially combines a simple optical heart rate sensor with amplification and noise cancellation circuitry making it fast and easy to get reliable pulse readings. Also, it sips power with just 4mA current draw at 5V so it\u2019s great for mobile applications. Simply clip the Pulse Sensor to your earlobe or finger tip and plug it into your 3or5 Volt Arduino and you\u2019re ready to read heart rate! The 24\" cable on the Pulse Sensor is terminated with standard male headers so there\u2019s no soldering required. Of course Arduino example code is available as well as a Processing sketch for visualizing heart rate data.</p> <p>Model: CT010712P</p> <p></p>"},{"location":"Products/Crowtail/crowtail--pulse-sensor.html#description_1","title":"Description","text":"<ul> <li>Voltage: 3-5V</li> <li>Diameter: 16mm</li> <li>Magnification: 330</li> <li>Led wavelength: 609nm</li> <li>Dimensions(mm):20.0(L)x20.0(W)x9.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--pulse-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--pulse-sensor.html#with-arduino","title":"With Arduino","text":"<p>1.Hardware Connection The Crowtail- Pulse Sensor is connecting to analog port A0 of Crowtail - Base Shield. </p> <p>2.Copy the demo code to your sketch, then upload to Arduino or Crowduino board.Or download:Pulse Sensor demo code . Unzip it and open the file:PulseSensorAmped_Arduino_1_2.ino.</p> <pre><code>//  VARIABLES\nint pulsePin = 0;                 // Pulse Sensor purple wire connected to analog pin 0\nint blinkPin = 13;                // pin to blink led at each beat\nint fadePin = 5;                  // pin to do fancy classy fading blink at each beat\nint fadeRate = 0;                 // used to fade LED on with PWM on fadePin\n\n\n// these variables are volatile because they are used during the interrupt service routine!\nvolatile int BPM;                   // used to hold the pulse rate\nvolatile int Signal;                // holds the incoming raw data\nvolatile int IBI = 600;             // holds the time between beats, must be seeded! \nvolatile boolean Pulse = false;     // true when pulse wave is high, false when it's low\nvolatile boolean QS = false;        // becomes true when Arduoino finds a beat.\n\n\nvoid setup(){\n  pinMode(blinkPin,OUTPUT);         // pin that will blink to your heartbeat!\n  pinMode(fadePin,OUTPUT);          // pin that will fade to your heartbeat!\n  Serial.begin(115200);             // we agree to talk fast!\n  interruptSetup();                 // sets up to read Pulse Sensor signal every 2mS \n   // UN-COMMENT THE NEXT LINE IF YOU ARE POWERING The Pulse Sensor AT LOW VOLTAGE, \n   // AND APPLY THAT VOLTAGE TO THE A-REF PIN\n   //analogReference(EXTERNAL);   \n}\n\n\n\nvoid loop(){\n  sendDataToProcessing('S', Signal);     // send Processing the raw Pulse Sensor data\n  if (QS == true){                       // Quantified Self flag is true when arduino finds a heartbeat\n        fadeRate = 255;                  // Set 'fadeRate' Variable to 255 to fade LED with pulse\n        sendDataToProcessing('B',BPM);   // send heart rate with a 'B' prefix\n        sendDataToProcessing('Q',IBI);   // send time between beats with a 'Q' prefix\n        QS = false;                      // reset the Quantified Self flag for next time    \n     }\n\n  ledFadeToBeat();\n\n  delay(20);                             //  take a break\n}\n\n\nvoid ledFadeToBeat(){\n    fadeRate -= 15;                         //  set LED fade value\n    fadeRate = constrain(fadeRate,0,255);   //  keep LED fade value from going into negative numbers!\n    analogWrite(fadePin,fadeRate);          //  fade LED\n  }\n\n\nvoid sendDataToProcessing(char symbol, int data ){\n    Serial.print(symbol);                // symbol prefix tells Processing what type of data is coming\n    Serial.println(data);                // the data to send culminating in a carriage return\n  }\n</code></pre> <p>3.Download the upper computer software processing.Unzip it,and open the processing.exe,then file\u2014open,you should download the file:processing_code.Unzip it and open the file:PulseSensorAmpd_Processing_1dot1.pde</p> <p></p> <p>4.Open the device manager of the computer and check whether there's a port named COM1. If there is a COM1 port, please disable it;</p> <p></p> <p>5.Run the Processing software. Put you finger on the pulse sensor area of the heart shape.You will see that your heart rate and heart rate waveform(electrocardiogram)</p> <p></p>"},{"location":"Products/Crowtail/crowtail--pulse-sensor.html#resource","title":"Resource","text":"<ul> <li>Pulse Sensor Arduino demo code</li> <li>processing</li> <li>processing_code</li> <li>Crowtail- Pulse Sensor eagle file</li> <li>APDS-9008-020-Avago</li> </ul>"},{"location":"Products/Crowtail/crowtail--recorder.html","title":"Crowtail- Recorder","text":""},{"location":"Products/Crowtail/crowtail--recorder.html#description","title":"Description","text":"<p>Crowtail - Recorder is based on the ISD1820P chip, and can record 8-20 secs of audio. It offers true single-chip voice recording and provides non-volatile storage. The recording time can be varied by changing the sampling resistor (R3) on the module's PCB. By default, the resistor on-board has a value of 100K\u03a9 and thus the module offers a default recording time of 10 secs. The audio recording can be directly controlled by the on-board push button or by a micro-controller such as a Crowduino.</p> <p>Model: CT010892R</p> <p></p>"},{"location":"Products/Crowtail/crowtail--recorder.html#features","title":"Features","text":"<ul> <li>Low power consumption</li> <li>Non-volatile storage</li> <li>User-friendly operation</li> <li>Replace a single resistor to change recording duration and sampling frequency</li> <li>Add a resistor to set play cycle mode</li> <li>Ships with and connects to an 8\u03a9/1W mini-speaker</li> <li>Uses Standard 4-pin Crowtail Cables to connect to other Crowtail modules or a micro-controller such as the Seeeduino.</li> <li>Dimensions(mm):40.0(L)x20.0(W)x9.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--recorder.html#interface-function","title":"Interface Function","text":"<p>\u2460 LED Indicator</p> <p>Modes:</p> <p>Record: Red LED light stays ON from the beginning of the recording duration until the end. Playback: Red LED flashes to signal end of audio playback.</p> <p>\u2461 Sampling resistor</p> <p>You can set the recording duration and sampling rate by change sampling resistor (R6) based on the following table:</p> ROSC Duration Sampling Frequency Input Bandwidth 80 K\u03a9 8 secs 8.0 KHz 3.4 KHz 100 K\u03a9 (default) 10 secs 6.4 KHz 2.6 KHz 120 K\u03a9 12 secs 5.3 KHz 2.3 KHz 160 K\u03a9 16 secs 4.0 KHz 1.7 KHz 200 K\u03a9 20 secs 3.2 KHz 1.3 KHz <p>\u2462 Play Key</p> <p>\u2463 REC Key</p> <p>\u2464 Crowtail Interface</p> <p>\u2465 Loudspeaker Interface</p> <p>\u2466 REC IC\uff1aISD1820P</p>"},{"location":"Products/Crowtail/crowtail--recorder.html#usage","title":"Usage","text":"<p>Follow these steps to build a sample circuit using the Crowtail- Recorder module:</p> <p>1.Connect the recorder module to the output side of the Crowtail base shield (U2 port ).</p> <p>2.Power up the Crowduino and stacked the base shield on it.</p> <p></p> <p>3.Press and hold down the REC button on the recorder module and start recording the audio. The on-board red LED will turn ON. Continue to record the audio until the red LED gets turned OFF. The LED getting turned OFF is indicative of the fact that the recording time is now over.</p> <p>4.To play back the audio segment that has been recorded.You should now hear the audio segment you recorded being played back. Continue to press and hold down PLAY Button until you see the red LED on-board the recorder module flash. The flash indicates that playback of audio is now complete.</p> <p>5.To override the recorded audio, simply repeat step 3 above. The new message will override the old one.</p>"},{"location":"Products/Crowtail/crowtail--recorder.html#resources","title":"Resources","text":"<ul> <li>Crowtail-_Recorder_eagle_file</li> </ul>"},{"location":"Products/Crowtail/crowtail--relay.html","title":"Crowtail- Relay","text":""},{"location":"Products/Crowtail/crowtail--relay.html#description","title":"Description","text":"<p>The Crowtail- Relay module is a digital normally-open switch. Through it, you can control circuit of high voltage with low voltage, say 5V on the controller.</p> <p>Model: CT0008RE</p> <p></p>"},{"location":"Products/Crowtail/crowtail--relay.html#features","title":"Features","text":"<ul> <li>High Switching Current</li> </ul>"},{"location":"Products/Crowtail/crowtail--relay.html#specification","title":"Specification","text":"<p>Dimensions(mm):40.0(L)x20.0(W)x17.2(H)</p> Parameter Description Operating Voltage 5V Operating Current 90mA Relay Life 100,000 Cycle Max Switching Voltage 120VAC/24VDC Max Switching Current 3A"},{"location":"Products/Crowtail/crowtail--relay.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--relay.html#intelligent-temperature-control-fan","title":"Intelligent Temperature Control Fan","text":"<p>1.Hardware Connection</p> <p></p> <p>2.Copy the demo code to your sketch, then upload to Arduino or Crowduino board.You can set a threshold temperature value to control the realy ON or OFF, then control the fan work or not.</p> <pre><code>/*\nTemperature sensor connect to AO\nRelay connetct to D5\n*/\n\n#include &lt;math.h&gt;\nint a;\nfloat temperature;\nint B=3975;                  //B value of the thermistor\nfloat resistance;\n// Connect the Relay to digital pin D5.\n// give it a name:\nint Relay = 5;\n\nvoid setup()\n{\n // initialize the digital pin as an output.\n pinMode(Relay, OUTPUT);  \n Serial.begin(9600);  \n}\n\nvoid loop()\n{\n   a=analogRead(0);\n   resistance=(float)(1023-a)*10000/a; //get the resistance of the sensor;\n   temperature=1/(log(resistance/10000)/B+1/298.15)-273.15;//convert to temperature via datasheet\u00a0;\n   delay(1000);\n   Serial.print(\"Current temperature is \");\n   Serial.println(temperature);\n   if(temperature&gt;20)\n   {\n         digitalWrite(Relay, HIGH);  //if temperature &gt;20 degree,turn the Relay on,fan working\n   }\n   else\n   {\n        digitalWrite(Relay, LOW);//if temperature &lt;=20 degree,turn the Relay off,fan not working\n   }\n}\n</code></pre> <p>3.When the temperature above 20 degrees,the fan will working.</p> <p> </p>"},{"location":"Products/Crowtail/crowtail--relay.html#resource","title":"Resource","text":"<ul> <li>Relay Program</li> <li>DSM501 Dust Sensor Datasheet</li> </ul>"},{"location":"Products/Crowtail/crowtail--rgb-led.html","title":"Crowtail- RGB-LED","text":""},{"location":"Products/Crowtail/crowtail--rgb-led.html#description","title":"Description","text":"<p>The Crowtail- RGB-LED module with 4 pcs of WS2812B which is a Chainable &amp; Addressable LED. Users can control all the LED with only one microcontroller pin! Besides, the LED bar can be also chainable, that is, you can connect more than one LED bar together to make your project more dreamful. In this module , you can control every LED whit different color at the same time.</p> <p>Model: CT0028RL</p> <p></p>"},{"location":"Products/Crowtail/crowtail--rgb-led.html#features","title":"Features","text":"<ul> <li>Connection Mode:D(digital)</li> <li>Voltage: 5V</li> <li>One high speed serial port</li> <li>Dimensions(mm):60.0(L)x20.0(W)x11.5(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--rgb-led.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p>Connect the Crowtail- RGB-LED to D5.</p> <p></p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Download the library RGB-LED library;Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;Adafruit_NeoPixel-&gt;strandtest.</p> <pre><code>#include &lt;Adafruit_NeoPixel.h&gt;\n#define PIN 5\n\n// Parameter 1 = number of pixels in strip\n// Parameter 2 = pin number (most are valid)\n// Parameter 3 = pixel type flags, add together as needed:\n//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)\n//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)\n//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)\n//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)\nAdafruit_NeoPixel strip = Adafruit_NeoPixel(60, PIN, NEO_GRB + NEO_KHZ800);\n\nvoid setup() {\n strip.begin();\n strip.show(); // Initialize all pixels to 'off'\n}\n\nvoid loop() {\n // Some example procedures showing how to display to the pixels:\n colorWipe(strip.Color(255, 0, 0), 50); // Red\n colorWipe(strip.Color(0, 255, 0), 50); // Green\n colorWipe(strip.Color(0, 0, 255), 50); // Blue\n // Send a theater pixel chase in...\n theaterChase(strip.Color(127, 127, 127), 50); // White\n theaterChase(strip.Color(127,   0,   0), 50); // Red\n theaterChase(strip.Color(  0,   0, 127), 50); // Blue\n\n rainbow(20);\n rainbowCycle(20);\n theaterChaseRainbow(50);\n}\n\n// Fill the dots one after the other with a color\nvoid colorWipe(uint32_t c, uint8_t wait) {\n for(uint16_t i=0; i&lt;strip.numPixels(); i++) {\n     strip.setPixelColor(i, c);\n     strip.show();\n     delay(wait);\n }\n}\n\nvoid rainbow(uint8_t wait) {\n uint16_t i, j;\n\n for(j=0; j&lt;256; j++) {\n   for(i=0; i&lt;strip.numPixels(); i++) {\n     strip.setPixelColor(i, Wheel((i+j) &amp; 255));\n   }\n   strip.show();\n   delay(wait);\n }\n}\n\n// Slightly different, this makes the rainbow equally distributed throughout\n void rainbowCycle(uint8_t wait) {\n uint16_t i, j;\n\n for(j=0; j&lt;256*5; j++) { // 5 cycles of all colors on wheel\n   for(i=0; i&lt; strip.numPixels(); i++) {\n     strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) &amp; 255));\n   }\n   strip.show();\n   delay(wait);\n }\n}\n\n//Theatre-style crawling lights.\nvoid theaterChase(uint32_t c, uint8_t wait) {\n for (int j=0; j&lt;10; j++) {  //do 10 cycles of chasing\n   for (int q=0; q &lt; 3; q++) {\n     for (int i=0; i &lt; strip.numPixels(); i=i+3) {\n       strip.setPixelColor(i+q, c);    //turn every third pixel on\n     }\n     strip.show();\n\n     delay(wait);\n\n     for (int i=0; i &lt; strip.numPixels(); i=i+3) {\n       strip.setPixelColor(i+q, 0);        //turn every third pixel off\n     }\n   }\n }\n}\n\n//Theatre-style crawling lights with rainbow effect\nvoid theaterChaseRainbow(uint8_t wait) {\n for (int j=0; j &lt; 256; j++) {     // cycle all 256 colors in the wheel\n   for (int q=0; q &lt; 3; q++) {\n       for (int i=0; i &lt; strip.numPixels(); i=i+3) {\n         strip.setPixelColor(i+q, Wheel( (i+j)\u00a0% 255));    //turn every third pixel on\n       }\n       strip.show();\n\n       delay(wait);\n\n       for (int i=0; i &lt; strip.numPixels(); i=i+3) {\n         strip.setPixelColor(i+q, 0);        //turn every third pixel off\n       }\n   }\n }\n}\n\n// Input a value 0 to 255 to get a color value.\n// The colours are a transition r - g - b - back to r.\nuint32_t Wheel(byte WheelPos) {\n if(WheelPos &lt; 85) {\n  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);\n } else if(WheelPos &lt; 170) {\n  WheelPos -= 85;\n  return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);\n } else {\n  WheelPos -= 170;\n  return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);\n }\n}\n</code></pre> <p>5.Upload the Code,then you shoule see the colourful RGB-LED display.</p> <p> </p>"},{"location":"Products/Crowtail/crowtail--rgb-led.html#resource","title":"Resource","text":"<ul> <li>RGB-LED Program</li> <li>Crowtail- RGB-LED eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--rotary-angle-sensor.html","title":"Crowtail- Rotary Angle Sensor","text":""},{"location":"Products/Crowtail/crowtail--rotary-angle-sensor.html#description","title":"Description","text":"<p>Rotary angle sensor for crowduino.The angular range is 300 degrees with a linear change in value. The resistance value is 10k ohms, perfect for crowduino use. This may also be known as a \u201cpotentiometer \u201d.</p> <p>Model: CT0053RAS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--rotary-angle-sensor.html#specification","title":"Specification","text":"<ul> <li>Measurement angle range:0-300 degrees</li> <li>Easy to use</li> <li>Crowtail base module</li> <li>Work voltage:4.75v-5.25v</li> <li>Dimensions(mm):21.3(L)x20.0(W)x21.6(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--rotary-angle-sensor.html#usage","title":"Usage","text":"<p>1.Hardware Connection The Rotary angle sensor is connecting to analog port A0 of Crowtail - Base Shield. A LED connecting to D5.</p> <p></p> <p>2.Download Crowtail__Rotary_Angle_Sensor library for Arduino boards with 16MHz XTAL; Unzip and put it in the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries;</p> <p>3. Open the code and upload it into your Arduino board</p> <pre><code>#define ROTARY_ANGLE_SENSOR A0\n#define LED 5//the Crowtial- LED is connected to D5 of Arduino\n#define ADC_REF 5//reference voltage of ADC is 5v.If the Vcc switch on the Crowduino\n#define Crowtail_VCC 5//VCC of the grove interface is normally 5v\n#define FULL_ANGLE 300//full value of the rotary angle is 300 degrees\nvoid setup() \n{\n    Serial.begin(9600);\n        pinMode(ROTARY_ANGLE_SENSOR, INPUT);\n    pinMode(LED,OUTPUT);\n}\n\nvoid loop() \n{\n    int degrees=0;\n    degrees = getDegree();\n    Serial.println(\"The angle between the mark and the starting position:\");\n    Serial.println(degrees);    \n    int brightness;\n    /*The degrees is 0~300, should be converted to be 0~255 to control the*/\n    /*brightness of LED                                                   */\n    brightness = map(degrees, 0, FULL_ANGLE, 0, 255); \n    analogWrite(LED,brightness); /*The range of brightness is 0~255 */  \n    delay(500);\n}\n\n/************************************************************************/\n/*Function: Get the angle between the mark and the starting position    */  \n/*Return:   -int,the range of degrees is 0~300 */\nint getDegree()\n{\n    int sensor_value = analogRead(ROTARY_ANGLE_SENSOR);\n    float voltage;\n    voltage = (float)sensor_value*ADC_REF/1023;\n    float degrees = (voltage*FULL_ANGLE)/Crowtail_VCC;\n    return degrees;\n}\n</code></pre> <p>4. open the serial monitor to observe the change of angle data. And pay attention to the LED's brightness.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--rotary-angle-sensor.html#resource","title":"Resource","text":"<ul> <li>Rotary Angle Sensor Program</li> <li>Crowtail- Rotary Angle Sensor</li> </ul>"},{"location":"Products/Crowtail/crowtail--rtc.html","title":"Crowtail- RTC","text":""},{"location":"Products/Crowtail/crowtail--rtc.html#description","title":"Description","text":"<p>If you want to make your own electronic watch,a RTC module is needed to generatet you the right timer, with low power consumption.That is what this tiny RTC can do for you. This tiny RTC module is based on the clock chip DS1307 which communicate with microcontrollers with I2C protocol. The clock/calendar provides seconds, minutes, hours, day, date,month, and year information. The end of the month date is automatically adjusted for months with fewer than 31 days, including corrections for leap year. besies, it is really low power consumption, it can serves you more than a month with a CR1220 battery.</p> <p>Model: CT0009RT</p> <p></p>"},{"location":"Products/Crowtail/crowtail--rtc.html#features","title":"Features","text":"<ul> <li>VCC\uff1a5V</li> <li>IO Structure: SCL,SDA,VCC,GND</li> <li>Battery Voltage\uff1a2.0~3.5 V</li> <li>Dimensions(mm):20.0(L)x20.0(W)x10.0(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--rtc.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of setting the time and reading it out.</p> <p>1.Connect the module to the I2C Interface of Crowtail- Base Shield.</p> <p>2.Plug Crowtail- Base Shield into Arduino.</p> <p>3.Connect Arduino to PC via a USB cable.</p> <p></p> <p>4.Download the library File:RTC Library</p> <p>5.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries.</p> <p>6.Open the code directly by the path:File -&gt; Example -&gt;RTC.</p> <pre><code>#include &lt;Wire.h&gt;\n#include \"RTClib.h\"\nRTC_DS1307 RTC;\n\nvoid setup () {\n    Serial.begin(9600);\n    Wire.begin();\n    RTC.begin();\n  if (! RTC.isrunning()) {\n    Serial.println(\"RTC is NOT running!\");\n    // following line sets the RTC to the date &amp; time this sketch was compiled\n    RTC.adjust(DateTime(__DATE__, __TIME__));\n  }\n}\nvoid loop () {\n    DateTime now = RTC.now(); \n    Serial.print(now.year(), DEC);\n    Serial.print('/');\n    Serial.print(now.month(), DEC);\n    Serial.print('/');\n    Serial.print(now.day(), DEC);\n    Serial.print(' ');\n    Serial.print(now.hour(), DEC);\n    Serial.print(':');\n    Serial.print(now.minute(), DEC);\n    Serial.print(':');\n    Serial.print(now.second(), DEC);\n    Serial.println(); \n    delay(1000);\n}\n</code></pre> <p>7.Upload the code,then open the serial monitor to see the result.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--rtc.html#resource","title":"Resource","text":"<ul> <li>RTC Program</li> <li>Crowtail- RTC eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--screw-terminal.html","title":"Crowtail- Screw Terminal","text":""},{"location":"Products/Crowtail/crowtail--screw-terminal.html#description","title":"Description","text":"<p>Crowtail-Screw Terminal has four 3.5mm pitch pins rate up to 125V @ 10A, it can accept 16 to 26AWG wire and be used to connect to external devices.This Crowtail has four ports including GND, VCC and two other ports. It usually be used to interface Crowtail wires(signals) with other external non-Crowtail modules.</p> <p>Model: CRT00532T</p> <p></p>"},{"location":"Products/Crowtail/crowtail--screw-terminal.html#features","title":"Features","text":"<ul> <li>3.5mm standard pitch pin</li> <li>3.3V/5V Compatible</li> <li>High current/voltage adaptable</li> </ul>"},{"location":"Products/Crowtail/crowtail--screw-terminal.html#specification","title":"Specification","text":"<p>Dimensions(mm):20.0(L)x20.0(W)x12.5(H)</p> Item Description Working Voltage 5 V/3.3V Supply Mode Crowtail Interface"},{"location":"Products/Crowtail/crowtail--screw-terminal.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--screw-terminal.html#resource","title":"Resource","text":"<ul> <li>Screw Terminal 3.5mm</li> <li>Screw Terminal schematic diagram</li> </ul>"},{"location":"Products/Crowtail/crowtail--serial-camera.html","title":"Crowtail- Serial Camera","text":""},{"location":"Products/Crowtail/crowtail--serial-camera.html#description","title":"Description","text":"<p>The Crowtail Serial Camera is a JPEG color camera module easy for PC&amp; MCU use.It has integrated image processing DSP to generate 320*240 or 640*480 JPEG image without thumbnail information, captured picture will be stored in internal buffer and transferred via UART port. The UART Can be configued to TTL or CMOS by hardware.</p> <p>Model: CT009040C </p>"},{"location":"Products/Crowtail/crowtail--serial-camera.html#feature","title":"Feature","text":"<ul> <li>Default baud rate of serial port is 38400</li> <li>640x480/320x240(default) resolution</li> <li>JPEG compressed image without Thumbnail Information</li> <li>5v power supply</li> <li>Crowtail interface</li> <li>Easy to use</li> <li>Dimensions(mm):32.0(L)x32.0(W)x26.5(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--serial-camera.html#application","title":"Application","text":"<ul> <li>Digital Camara with Wireless SD Card Shield</li> <li>Vidio Monitoring</li> </ul>"},{"location":"Products/Crowtail/crowtail--serial-camera.html#usage","title":"Usage","text":"<p>Here is an example showing how to turn on the Crowtail- Serial camera.</p> <p>1.Plug it onto the U2 port of Crowtail- Base Shield using a Crowtail cable and plug one button onto digital 12 port.</p> <p>2.Plug the Crowtail- Base Shield onto Crowduino_SD (or one Wireless SD Card Shield onto Crowduino)</p> <p>3. Connect Arduino to PC by using a USB cable.</p> <p></p> <p>4.Download the Crowtail- Serial Camera Demo Code,unzip it and place it to your your arduino sketchfolder/libraries/ folder</p> <p>5.Open Arduino IDE, File -&gt; examples -&gt;VC0706_Serial_Camera -&gt;MotionDetect, you can open the demo code.</p> <p></p> <p>6.Download it to the Crowduino,and open the serial port debug window,you will see the result as bellow:</p> <p></p> <p>5. when the check is over, you can move the camera and begin to take photos. the Camera will take a picture and store the picture into the SD card. you can adjust the camera lens to change the focal distance, to make the picture more clear.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--serial-camera.html#resource","title":"Resource","text":"<ul> <li>Crowtail- Serial Camera Demo Code</li> </ul>"},{"location":"Products/Crowtail/crowtail--serial-wifi.html","title":"Crowtail- Serial Wifi","text":""},{"location":"Products/Crowtail/crowtail--serial-wifi.html#description","title":"Description","text":"<p>The serial wifi module based on ESP-12.which is an ultra-low power UART-WiFi module. It has excellent dimensions and ULP technology compared to other similar modules. The module is special design for mobile devices and Internet of Things . Once firmware is upgraded to the appropriate version, a compatible Android device can run the IOT.APK to do the following:control the PWM, I/O pin, or Serial communication. For example,you can use this module transmit date with it serial port.It is easy to communication with other device.</p> <p>Model: CT0019SW</p> <p></p>"},{"location":"Products/Crowtail/crowtail--serial-wifi.html#features","title":"Features","text":"<ul> <li>Connection Mode:U(UART)</li> <li>One high speed serial port</li> <li>Working voltage:5v</li> <li>802.11 b/g/n protocol</li> <li>Wi-Fi Direct (P2P), soft-AP</li> <li>Integrated TCP/IP protocol stack</li> <li>Integrated TR switch, balun, LNA, power amplifier and matching network</li> <li>Integrated PLL, regulators, and power management units</li> <li>+19.5dBm output power in 802.11b mode</li> <li>Dimensions(mm):45.0(L)x20.0(W)x6.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--serial-wifi.html#electronic-characteristics","title":"Electronic Characteristics","text":"<p>1.Current Consumption</p> <p>The following current consumption is based on 3.3V supply, and 25\u2103 ambient, using internal regulators. Measurements are done at antenna port without SAW filter. All the transmitter\u2019s measurements are based on 90% duty cycle, continuous transmit mode.</p> Mode Min Typ Max Unit Transmit 802.11b, CCK 1Mbps, POUT=+19.5dBm 215 mA Transmit 802.11b, CCK 11Mbps, POUT=+18.5dBm 197 mA Transmit 802.11g, OFDM 54Mbps, POUT =+16dBm 145 mA Transmit 802.11n, MCS7, POUT=+14dBm 135 mA Receive 802.11b, packet length=1024 byte, -80dBm 100 mA Receive 802.11g, packet length=1024 byte, -70dBm 100 mA Receive 802.11n, packet length=1024 byte, -65dBm 102 mA Total shutdown 0.5 uA <p>2.RF Performance</p> <p>The following are measured under room temperature conditions with 3.3V and 1.1V power supplies.</p> Description Min Typical Max Unit Input frequency 2412 2484 MHz Input impedance 50 \u03a9 Input reflection -10 dB Output power of PA for 72.2Mbps 14 15 16 dBm Output power of PA for 11b mode 17.5 18.5 19.5 dBm Sensitivity CCK, 1Mbps -98 dBm CCK, 11Mbps -91 dBm 6Mbps (\u00bd BPSK) -93 dBm 54Mbps (\u00be 64-QAM) -75 dBm HT20, MCS7 (65Mbps, 72.2Mbps) -71 dBm"},{"location":"Products/Crowtail/crowtail--serial-wifi.html#hardware","title":"Hardware","text":""},{"location":"Products/Crowtail/crowtail--serial-wifi.html#schematic","title":"Schematic","text":""},{"location":"Products/Crowtail/crowtail--serial-wifi.html#application-notes","title":"Application Notes","text":"<ul> <li>Smart power plugs</li> <li>Home automation</li> <li>Mesh network</li> <li>Industrial wireless control</li> <li>Baby monitors</li> <li>IP Cameras</li> <li>Sensor networks</li> <li>Wearable electronics</li> <li>Wi-Fi location-aware devices</li> <li>Security ID tags</li> <li>Wi-Fi position system beacons</li> </ul>"},{"location":"Products/Crowtail/crowtail--serial-wifi.html#at-commands","title":"AT Commands","text":"<p>Format</p> <ul> <li>Baud rate at 115200</li> <li>x is the commands</li> </ul> <p></p> <p>(Click the picture to zoom in)</p> Set Inquiry Test Execute AT+&lt;x&gt;=&lt;\u2026&gt; AT+&lt;x&gt;? AT+&lt;x&gt;=? AT+&lt;x&gt; AT+CWMODE=&lt;mode&gt; AT+CWMODE? AT+CWMODE=? - Set the network mode Check current mode Return which modes supported - <p>Commands</p> <ul> <li>carefully there are must be no any spaces between the \" and IP address or port</li> </ul> Commands Description Type Set/Execute Inquiry test Parameters and Examples AT general test basic - - - - AT+RST restart the module basic - - - - AT+GMR check firmware version basic - - - - AT+CWMODE wifi mode wifi AT+CWMODE=&lt;mode&gt; AT+CWMODE? AT+CWMODE=? 1= Sta, 2= AP, 3=both, Sta is the default mode of router, AP is a normal mode for devices AT+CWJAP join the AP wifi AT+ CWJAP =&lt;ssid&gt;,&lt; pwd &gt; AT+ CWJAP? - ssid = ssid, pwd = wifi password AT+CWLAP list the AP wifi AT+CWLAP AT+CWQAP quit the AP wifi AT+CWQAP - AT+CWQAP=? AT+ CWSAP set the parameters of AP wifi AT+ CWSAP= &lt;ssid&gt;,&lt;pwd&gt;,&lt;chl&gt;, &lt;ecn&gt; AT+ CWSAP? ssid, pwd, chl = channel, ecn = encryption; eg. Connect to your router: AT+CWJAP=\"www.electrodragon.com\",\"helloworld\"; and check if connected: AT+CWJAP? AT+CWLIF check join devices' IP wifi AT+CWLIF - - AT+ CIPSTATUS get the connection status TCP/IP AT+ CIPSTATUS &lt;id&gt;,&lt;type&gt;,&lt;addr&gt;,&lt;port&gt;,&lt;tetype&gt;= client or server mode AT+CIPSTART set up TCP or UDP connection TCP/IP 1)single connection (+CIPMUX=0) AT+CIPSTART= &lt;type&gt;,&lt;addr&gt;,&lt;port&gt;; 2) multiple connection (+CIPMUX=1) AT+CIPSTART= &lt;id&gt;&lt;type&gt;,&lt;addr&gt;, &lt;port&gt; - AT+CIPSTART=? id = 0-4, type = TCP/UDP, addr = IP address, port= port; eg. Connect to another TCP server, set multiple connection first: AT+CIPMUX=1; connect: AT+CIPSTART=4,\"TCP\",\"X1.X2.X3.X4\",9999 AT+CIPMODE set data transmission mode TCP/IP AT+CIPMODE=&lt;mode&gt; AT+CIPSEND? 0 not data mode, 1 data mode; return \"Link is builded\" AT+CIPSEND send data TCP/IP 1)single connection(+CIPMUX=0) AT+CIPSEND=&lt;length&gt;; 2) multiple connection (+CIPMUX=1) AT+CIPSEND= &lt;id&gt;,&lt;length&gt; AT+CIPSEND=? eg. send data: AT+CIPSEND=4,15 and then enter the data. AT+CIPCLOSE close TCP or UDP connection TCP/IP AT+CIPCLOSE=&lt;id&gt; or AT+CIPCLOSE AT+CIPCLOSE=? AT+CIFSR Get IP address TCP/IP AT+CIFSR AT+ CIFSR=? AT+ CIPMUX set mutiple connection TCP/IP AT+ CIPMUX=&lt;mode&gt; AT+ CIPMUX? 0 for single connection 1 for multiple connection AT+ CIPSERVER set as server TCP/IP AT+ CIPSERVER= &lt;mode&gt;[,&lt;port&gt; ] mode 0 to close server mode, mode 1 to open; port = port; eg. turn on as a TCP server: AT+CIPSERVER=1,8888, check the self server IP address: AT+CIFSR=? AT+ CIPSTO Set the server timeout AT+CIPSTO=&lt;time&gt; AT+CIPSTO? &lt;time&gt;0~28800 in second +IPD received data For Single Connection mode(CIPMUX=0): + IPD, &lt;len&gt;: For Multi Connection mode(CIPMUX=1): + IPD, &lt;id&gt;, &lt;len&gt;: &lt;data&gt;"},{"location":"Products/Crowtail/crowtail--serial-wifi.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--serial-wifi.html#use-the-esp8266-12-and-arduino-as-a-webserver","title":"Use the ESP8266-12 and Arduino as a Webserver","text":"<p>1.Hardware Connection. Connected the Serial Wifi to U2 of the Crowtail- base shiled( D2 and D3) are used as software UART. Baud Rate:9600. </p> <p>2.Connect the board to PC using USB cable.</p> <p>3:Download the code: WWebserver for ESPduino or copy it to you new skecth.</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n\n#define DEBUG true\n\nSoftwareSerial esp8266(2,3); // make RX Arduino line is pin 2, make TX Arduino line is pin 3.\n                             // This means that you need to connect the TX line from the esp to the Arduino's pin 2\n                             // and the RX line from the esp to the Arduino's pin 3\nvoid setup()\n{\n  Serial.begin(9600);\n  esp8266.begin(9600); // your esp's baud rate might be different\n  sendData(\"AT+RST\\r\\n\",2000,DEBUG); // reset module\n  sendData(\"AT+CWMODE=2\\r\\n\",1000,DEBUG); // configure as access point\n  sendData(\"AT+CIFSR\\r\\n\",1000,DEBUG); // get ip address\n  sendData(\"AT+CIPMUX=1\\r\\n\",1000,DEBUG); // configure for multiple connections\n  sendData(\"AT+CIPSERVER=1,80\\r\\n\",1000,DEBUG); // turn on server on port 80\n}\n\nvoid loop()\n{\n  if(esp8266.available()) // check if the esp is sending a message \n  {\n    /*\n    while(esp8266.available())\n    {\n      // The esp has data so display its output to the serial window \n      char c = esp8266.read(); // read the next character.\n      Serial.write(c);\n    } */\n\n    if(esp8266.find(\"+IPD,\"))\n    {\n     delay(1000);\n\n     int connectionId = esp8266.read()-48; // subtract 48 because the read() function returns \n                                           // the ASCII decimal value and 0 (the first decimal number) starts at 48\n\n     String webpage = \"&lt;h1&gt;Hello World!&lt;/h1&gt;\";\n     String cipSend = \"AT+CIPSEND=\";\n     cipSend += connectionId;\n     cipSend += \",\";\n     cipSend +=webpage.length();\n     cipSend +=\"\\r\\n\";\n\n     sendData(cipSend,1000,DEBUG);\n     sendData(webpage,1000,DEBUG);\n\n     String closeCommand = \"AT+CIPCLOSE=\"; \n     closeCommand+=5; // append connection id\n     closeCommand+=\"\\r\\n\";    \n     sendData(closeCommand,3000,DEBUG);\n    }\n  }\n}\n\n\nString sendData(String command, const int timeout, boolean debug)\n{\n    String response = \"\";\n\n    esp8266.print(command); // send the read character to the esp8266\n\n    long int time = millis();\n\n    while( (time+timeout) &gt; millis())\n    {\n      while(esp8266.available())\n      {      \n        // The esp has data so display its output to the serial window \n        char c = esp8266.read(); // read the next character.\n        response+=c;\n      }  \n    }\n\n    if(debug)\n    {\n      Serial.print(response);\n    }    \n    return response;\n}\n</code></pre> <p>4.Upload the code and Open the serial monitor.You can see some configuration information.</p> <p></p> <p>5.PC connect to the wifi of ESP8266.</p> <p></p> <p>6.Then you can visit the Webserver of the ESP8266.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--serial-wifi.html#upgrading-esp8266-firmware","title":"Upgrading ESP8266 Firmware","text":"<p>How to upgrade ESP8266 firmware?</p> <p>We use NodeMCU flasher here, the download links:</p> <ul> <li>English version: https://github.com/nodemcu/nodemcu-flasher</li> </ul> <p>Note: use nodemcu flasher to flash Firmware to ESP8266, its default firmware is Lau language. If you want to flash AT Commands firmware, go to ESP8266 forum to get one.</p> <ul> <li>Chinese version: File:ESP8266Flasher-x86-v0.9.2.3.zip</li> </ul> <p>1. Connect your ESP8266 module as follows:</p> <ul> <li>Vcc = 3.3V (needs around 300-400mA peak)</li> <li>Gnd = -ve ground</li> <li>CH_PD = Chip enable so always +ve</li> <li>RST = Leave floating or ground to reset</li> <li>GPIO0 = Normally floating but this needs to be grounded when you start the update.</li> <li>GPIO2 = high level</li> <li>UTXD = Tx data connect to RX on FTDI/Serial interface</li> <li>URXD = Rx data connect to TX of FTDI/Serial interface</li> </ul> <p>English Version: Please refer to the NodeMCU flasher user guide.</p> <p>Chinese Version: Please see the next step below</p> <p>2. Open the software, choose the right COM and click the button that is circled in the following picture. When a tick appears in the bottom-left corner, it suggests that the firmware upgrade successfully.</p> <p></p> <p>3. This software contains an existing firmware, but if you want to upgrade other ESP8266 firmware, please click the button that is circled in the following picture, and only two file paths are available to choose.</p> <p></p> <p>Other ways of ESP8266 firmware upgrading</p> <ul> <li>https://www.ukhas.net/wiki/esp8266_firmware_update</li> <li>http://taylorcoffelt.com/article/1</li> </ul>"},{"location":"Products/Crowtail/crowtail--serial-wifi.html#useful-link","title":"Useful Link","text":"<p>Reference:</p> <ul> <li>https://nurdspace.nl/ESP8266</li> <li>http://www.electrodragon.com/w/Wi07c</li> </ul> <p>Example</p> <ul> <li>Arduino Smart Home for Environment Tree</li> <li>The ESP8266 Becomes a Terrible Browser - http://hackaday.io/project/3072/instructions</li> <li>http://blog.iteadstudio.com/esp8266-use-android-phone-to-control-itead-rboard/</li> <li>SDK for ESP8266 - http://hackaday.com/2014/10/25/an-sdk-for-the-esp8266-wifi-chip/</li> <li>An ESP8266 Based Smartmeter - http://hackaday.com/2014/10/25/an-sdk-for-the-esp8266-wifi-chip/</li> </ul>"},{"location":"Products/Crowtail/crowtail--serial-wifi.html#resource","title":"Resource","text":"<ul> <li>Serial Wifi Program</li> <li>Crowtail- Serial Wifi_eagle_files</li> </ul>"},{"location":"Products/Crowtail/crowtail--sim808.html","title":"Crowtail- SIM808","text":""},{"location":"Products/Crowtail/crowtail--sim808.html#description","title":"Description","text":"<p>A new product of crowtail family, it\u2019s a GSM and GPS two-in-one function module which is called Crowtail- SIM808. We add a Crowtail interface to it so that you can use easily. It is very small and based on the latest GSM/GPS module SIM808 from SIMCOM, supports GSM/GPRS Quad-Band network and combines GPS technology for satellite navigation. It has high GPS receive sensitivity with 22 tracking and 66 acquisition receiver channels that will lets you add location-tracking, voice, text, SMS and data to your project in an adorable little package. We can power it with a 3.7V lithium battery due to its specially charge interface. So it can use as a portable module, even you can attach it on your bicycle, it can obtain the speed/location information. A nice module that can achieve lots of functions. You need it now!</p> <p>Model: CT0078SIM</p> <p></p>"},{"location":"Products/Crowtail/crowtail--sim808.html#features","title":"Features","text":"<ul> <li>Quad-band 850/900/1800/1900MHz</li> <li>GPRS mobile station class B</li> <li>Controlled by AT Command (3GPP TS 27.007, 27.005 and SIMCOM enhanced AT Commands)</li> <li>Integrated GPS/CNSS and supports A-GPS</li> <li>Supports 3.0V to 5.0V logic level</li> <li>Low power consumption, 1mA in sleep mode</li> <li>Supports GPS NMEA protocol</li> <li>Standard Micro SIM Card</li> <li>GPRS multi-slot class12 connectivity: max. 85.6kbps(down-load/up-load)</li> <li>Dimensions(mm):50.4(L)x35.0(W)x8.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--sim808.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Crowtail/crowtail--sim808.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--sim808.html#at-command-control","title":"AT command control","text":"<p>Connect the battery with crowtail SIM808, and then insert the SIM card into the card slot.</p> <p>you need a usb to ttl cable for connect the module to computer as follow pictures show\uff1a</p> <p></p> <p>then connect it with your Crowtail- SIM808, you also need a 4 pin Crowtail to TTL cable.</p> <p></p> <p>OK, when you done those steps, it time to connect it with computer and then press the \"key\" button More than 3s, LED on the board will light up.</p> <p></p> <p>Now you can send the AT command to your board. you can try by using a com debug tool as you like, i have do a example for you:</p> <p></p>"},{"location":"Products/Crowtail/crowtail--sim808.html#hardware","title":"Hardware","text":"<p>First of all, you need a Arduino UNO and a Crowtail base shield, and you have to connect the SIM808 with them, don't forget to power it with a 3.7V lipo battery. and hold on the key that i circled in the picture more than 3s, it will start to work. </p>"},{"location":"Products/Crowtail/crowtail--sim808.html#arduino-test","title":"Arduino Test","text":""},{"location":"Products/Crowtail/crowtail--sim808.html#making-a-call-using-software-uart","title":"Making a call: using Software UART","text":"<p>1.Copy the demo code as bellow and paste it in the IDE. </p> <p>2.Upload to your Arduino wired up to the moduleOnce uploaded to your Arduino, open up the serial console at 115200 baud speed to begin the tester sketch.</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\nSoftwareSerial mySerial(7, 8);\nvoid setup()\n{\nmySerial.begin(19200);               // the GPRS baud rate   \nSerial.begin(19200);               // the GPRS baud rate   \ndelay(2000);\nmySerial.println(\"ATDxxxxxxxxx;\"); // xxxxxxxxx is the number you want to dial.  \n\nif(mySerial.available())\n\nSerial.print((unsigned char)mySerial.read());\n\n\ndelay(10000); \ndelay(10000); \n\nmySerial.println(\"ATH\"); //End the call.\nif(mySerial.available())\n\nSerial.print((unsigned char)mySerial.read());\n}\n\n\nvoid loop()\n{\n//Do nothing\n}\n</code></pre>"},{"location":"Products/Crowtail/crowtail--sim808.html#sending-sms-using-software-uart","title":"Sending SMS: using Software UART","text":"<pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\nvoid setup()\n{\nmySerial.begin(19200);  //Default serial port setting for the GPRS modem is 19200bps 8-N-1\nmySerial.print(\"\\r\");\ndelay(1000);                    //Wait for a second while the modem sends an \"OK\"\nmySerial.print(\"AT+CMGF=1\\r\");    //Because we want to send the SMS in text mode\ndelay(1000);\n\n//mySerial.print(\"AT+CSCA=\\\"+919032055002\\\"\\r\");  //Setting for the SMS Message center number,  \n//delay(1000);                                  //uncomment only if required and replace with\n//the message center number obtained from\n//your GSM service provider.\n//Note that when specifying a tring of characters\n// \" is entered as \\\"\n\nmySerial.print(\"AT+CMGS=\\\"+9184460xxxx\\\"\\r\");    //Start accepting the text for the message\n//to be sent to the number specified.\n//Replace this number with the target mobile number.\ndelay(1000);\nmySerial.print(\"Hello,Elecrow!\\r\");   //The text for the message\ndelay(1000);\nmySerial.write(0x1A);  //Equivalent to sending Ctrl+Z \n}\n\nvoid loop()\n{\n//We just want to send the SMS only once, so there is nothing in this loop.\n//If we put the code for SMS here, it will be sent again and again and cost us a lot.\n}\n</code></pre>"},{"location":"Products/Crowtail/crowtail--sim808.html#using-sms-to-control-an-led-status","title":"Using Sms to Control an LED Status","text":"<p>This example is controbuted by MChobby, for more information please visit: https://wiki.mchobby.be/index.php?title=SmsCommand</p> <p>Send a SMS message \"on\" or \"off\" from your cellphone to the GPRS Shield to control the Digital Pin 13(LED) Status.</p> <ul> <li>The default Buffer of Rx in SoftwareSerial.h is 32/64, you may experience some data lose while the returns of SIM808 are many(Receiving SMS/TCPIP), you can try to change the Buffer of Rx in SoftwareSerial.h into</li> </ul> <p>#define _SS_MAX_RX_BUFF 128 // RX buffer size</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\n// EN: String buffer for the GPRS shield message\n\nString msg = String(\"\");\n// EN: Set to 1 when the next GPRS shield message will contains the SMS message\n\nint SmsContentFlag = 0;\n\n// EN: Pin of the LED to turn ON and OFF depending on the received message\n\nint ledPin = 13;\n\n// EN: Code PIN of the SIM card (if applied)\n\n//String SIM_PIN_CODE = String( \"XXXX\" );\n\nvoid setup()\n{\n  mySerial.begin(19200);               // the GPRS baud rate   \n  Serial.begin(19200);                 // the GPRS baud rate\n\n  // Initialize la PIN\n  pinMode( ledPin, OUTPUT ); \n  digitalWrite( ledPin, LOW ); \n}\n\nvoid loop()\n{\n    char SerialInByte;\n\n    if(Serial.available())\n    {\n       mySerial.print((unsigned char)Serial.read());\n     }  \n    else  if(mySerial.available())\n    {\n        char SerialInByte;\n        SerialInByte = (unsigned char)mySerial.read();\n\n        // EN: Relay to Arduino IDE Monitor\n\n        Serial.print( SerialInByte );\n\n        // -------------------------------------------------------------------\n        // EN: Program also listen to the GPRS shield message.\n\n        // -------------------------------------------------------------------\n\n        // EN: If the message ends with &lt;CR&gt; then process the message\n\n        if( SerialInByte == 13 ){\n          // EN: Store the char into the message buffer\n\n          ProcessGprsMsg();\n         }\n         if( SerialInByte == 10 ){\n            // EN: Skip Line feed\n\n         }\n         else {\n           // EN: store the current character in the message string buffer\n\n           msg += String(SerialInByte);\n         }\n     }   \n}\n\n// EN: Make action based on the content of the SMS. \n//     Notice than SMS content is the result of the processing of several GPRS shield messages.\n\nvoid ProcessSms( String sms ){\n  Serial.print( \"ProcessSms for [\" );\n  Serial.print( sms );\n  Serial.println( \"]\" );\n\n  if( sms.indexOf(\"on\") &gt;= 0 ){\n    digitalWrite( ledPin, HIGH );\n    Serial.println( \"LED IS ON\" );\n    return;\n  }\n  if( sms.indexOf(\"off\") &gt;= 0 ){\n    digitalWrite( ledPin, LOW );\n    Serial.println( \"LED IS OFF\" );\n    return;\n  }\n}\n\n// EN: Send the SIM PIN Code to the GPRS shield\n\n//void GprsSendPinCode(){\n//  if( SIM_PIN_CODE.indexOf(\"XXXX\")&gt;=0 ){\n//    Serial.println( \"*** OUPS! you did not have provided a PIN CODE for your SIM CARD. ***\" );\n//    Serial.println( \"*** Please, define the SIM_PIN_CODE variable . ***\" );\n//    return;\n// }\n//  mySerial.print(\"AT+CPIN=\");\n// mySerial.println( SIM_PIN_CODE );\n}\n\n// EN: Request Text Mode for SMS messaging\n\nvoid GprsTextModeSMS(){\n  mySerial.println( \"AT+CMGF=1\" );\n}\n\nvoid GprsReadSmsStore( String SmsStorePos ){\n  // Serial.print( \"GprsReadSmsStore for storePos \" );\n  // Serial.println( SmsStorePos ); \n  mySerial.print( \"AT+CMGR=\" );\n  mySerial.println( SmsStorePos );\n}\n\n// EN: Clear the GPRS shield message buffer\n\nvoid ClearGprsMsg(){\n  msg = \"\";\n}\n\n// EN: interpret the GPRS shield message and act appropiately\n\nvoid ProcessGprsMsg() {\n  Serial.println(\"\");\n  Serial.print( \"GPRS Message: [\" );\n  Serial.print( msg );\n  Serial.println( \"]\" );\n\n//  if( msg.indexOf( \"+CPIN: SIM PIN\" ) &gt;= 0 ){\n//     Serial.println( \"*** NEED FOR SIM PIN CODE ***\" );\n //    Serial.println( \"PIN CODE *** WILL BE SEND NOW\" );\n //    GprsSendPinCode();\n//  }\n\n  if( msg.indexOf( \"Call Ready\" ) &gt;= 0 ){\n     Serial.println( \"*** GPRS Shield registered on Mobile Network ***\" );\n     GprsTextModeSMS();\n  }\n\n  // EN: unsolicited message received when getting a SMS message\n  // FR: Message non sollicit\u00e9 quand un SMS arrive\n  if( msg.indexOf( \"+CMTI\" ) &gt;= 0 ){\n     Serial.println( \"*** SMS Received ***\" );\n     // EN: Look for the coma in the full message (+CMTI: \"SM\",6)\n     //     In the sample, the SMS is stored at position 6\n     int iPos = msg.indexOf( \",\" );\n     String SmsStorePos = msg.substring( iPos+1 );\n     Serial.print( \"SMS stored at \" );\n     Serial.println( SmsStorePos );\n\n     // EN: Ask to read the SMS store\n     GprsReadSmsStore( SmsStorePos );\n  }\n\n  // EN: SMS store readed through UART (result of GprsReadSmsStore request)  \n  if( msg.indexOf( \"+CMGR:\" ) &gt;= 0 ){\n    // EN: Next message will contains the BODY of SMS\n    SmsContentFlag = 1;\n    // EN: Following lines are essentiel to not clear the flag!\n    ClearGprsMsg();\n    return;\n  }\n\n  // EN: +CMGR message just before indicate that the following GRPS Shield message \n  //     (this message) will contains the SMS body\n\n  if( SmsContentFlag == 1 ){\n    Serial.println( \"*** SMS MESSAGE CONTENT ***\" );\n    Serial.println( msg );\n    Serial.println( \"*** END OF SMS MESSAGE ***\" );\n    ProcessSms( msg );\n  }\n\n  ClearGprsMsg();\n  // EN: Always clear the flag\n\n  SmsContentFlag = 0; \n}\n</code></pre>"},{"location":"Products/Crowtail/crowtail--sim808.html#the-usage-of-gps-function","title":"The usage of GPS Function","text":""},{"location":"Products/Crowtail/crowtail--sim808.html#print-the-gpsgnss-data-with-serial-port","title":"Print the GPS(GNSS) data with serial port","text":""},{"location":"Products/Crowtail/crowtail--sim808.html#at-commands-examples","title":"AT Commands Examples","text":"<p>Demo code of get the GPS information:</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n#define DEBUG true\n\n\nSoftwareSerial mySerial(7,8); \n\nvoid setup()\n{\n  Serial.begin(9600);\n mySerial.begin(9600); \n}\n\nvoid loop()\n{\n   getgps();\n   while(1)\n   {\n        sendData( \"AT+CGNSINF\",1000,DEBUG);   \n        delay(1000);\n\n   }\n\n}\nvoid getgps(void)\n{\n   sendData( \"AT+CGNSPWR=1\",1000,DEBUG); \n   sendData( \"AT+CGNSSEQ=RMC\",1000,DEBUG); \n}\n\n\nString sendData(String command, const int timeout, boolean debug)\n{\n    String response = \"\";    \n    mySerial.println(command); \n    long int time = millis();   \n    while( (time+timeout) &gt; millis())\n    {\n      while(mySerial.available())\n      {       \n        char c = mySerial.read(); \n        response+=c;\n      }  \n    }    \n    if(debug)\n    {\n      Serial.print(response);\n    }    \n    return response;\n}\n</code></pre> <p>The result of get the GPS information.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--sim808.html#resources","title":"Resources","text":"<ul> <li>Eagle files</li> <li>AT Command Manual_V1.09</li> <li>GSM Location_Application Note</li> <li>SIM808 Specifications</li> <li>SIM808_Hardware Design</li> <li>SIM808 v2 GPS AT commands</li> </ul>"},{"location":"Products/Crowtail/crowtail--solid-state-relay.html","title":"Crowtail- Solid-State Relay","text":""},{"location":"Products/Crowtail/crowtail--solid-state-relay.html#description","title":"Description","text":"<p>Crowtail- Solid-State Relay is a non-contact electronic switch module that has relay features.It has a maximum output of 240VAC/4A, with a switching speed less than 10ms. The featured LED indicates that the relay is on. It can be widely used in various areas such as computer peripheral interfaces, temperature/speed light adjustment, servo control, petrochemical, medical instrumentations, financial devices, coal, meters, traffic signals, etc.  Model: CT009739R</p> <p></p>"},{"location":"Products/Crowtail/crowtail--solid-state-relay.html#features","title":"Features","text":"<ul> <li>Compatible with both 3.3V and 5V control level</li> <li>Low switching latency\uff08\u226410ms\uff09</li> <li>LED on-state indicator</li> <li>Level trigger</li> <li>Crowtail compatible</li> <li>Dimensions(mm):40.0(L)x20.0(W)x22.9(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--solid-state-relay.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Operations that require low-latency switching, e.g. stage light control</li> <li>Devices that require high stability, e.g. medical devices, traffic signals</li> <li>Situations that require explosion-proof, anticorrosion, moisture-proof, e.g. coal, chemical industries.</li> <li>For all Grove users (especially beginners), we provide you guidance PDF documents. Please download and read through Preface - Getting Started and Introduction to Grove before your using of the product.</li> </ul>"},{"location":"Products/Crowtail/crowtail--solid-state-relay.html#usage","title":"Usage","text":"<p>1.Trigger signal voltage:</p> <ul> <li>Low level: 0-1.5 V the relay ON</li> <li>High level: 2.5-5 V the relay OFF</li> </ul> <p>2.Connect Crowtail- Solid-State Relay to port D2(one button to D5) of Crowtail - Base Shield and plug it into Arduino/Crowduino.</p> <p></p> <p>3.Copy and paste code below to a new Arduino sketch, and upload it to your Arduino.</p> <pre><code> int relay=2;\n int buttonPin=5;\n int buttonState = 0;\n void setup ()\n { \n   pinMode(relay,OUTPUT);\n   pinMode(buttonPin, INPUT); \n }\n void loop()\n {\n        buttonState = digitalRead(buttonPin);\n         if (buttonState == HIGH) {     \n\n    digitalWrite(relay, LOW);  \n  } \n  else {\n\n    digitalWrite(relay, HIGH); \n  }\n }\n</code></pre> <p>4.When upload the code complete. Press the button, the yellow indicator light turns on , Relay on. Loosen the button, indicator light off and relay is off yet.</p>"},{"location":"Products/Crowtail/crowtail--solid-state-relay.html#resource","title":"Resource","text":"<ul> <li>Crowtail- Solid-State Relay eagle file</li> </ul>"},{"location":"Products/Crowtail/crowtail--sound-sensor.html","title":"Crowtail- Sound Sensor","text":""},{"location":"Products/Crowtail/crowtail--sound-sensor.html#description","title":"Description","text":"<p>Crowtail- Sound Sensor can detect the sound loudness of the environment. The main component of the module is a simple microphone to receive the sound signal, with band pass filter and a LMV358 amplifier to make the output signal easy to be received by microprocessor. This module outputs analog signal that shows the relative loudness. Besides, an on-board potentiometer can be used to adjust output voltage.</p> <p>Model: CT0021SS</p> <p>](#file)</p>"},{"location":"Products/Crowtail/crowtail--sound-sensor.html#features","title":"Features","text":"<ul> <li>Easy to use sound sensor module</li> <li>Provides analog output signal</li> </ul>"},{"location":"Products/Crowtail/crowtail--sound-sensor.html#specifications","title":"Specifications","text":"<ul> <li>Operating voltage : 5V</li> <li>Operating current (Vcc=5V): 4-8mA</li> <li>Dimensions(mm):20.0(L)x20.0(W)x9.4(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--sound-sensor.html#usage","title":"Usage","text":"<p>Turning on a LED by Sound (Sound Sensor)</p> <p>This example program shows how to use the sound sensor (microphone. When the incoming sound amplitude exceeds a threshold, we will turn an LED on for 1 second.</p> <p>1.When using the module in conjunction with an Arduino or a Crowduino, use the Crowtail - Base Shield and connect the Crowtail - Sound Sensor module to the shield using a designated Crowdtail Interface. Also attach an output module such as a Crowtail - LED which will get triggered based on input received from the sound sensor (shown below).</p> <p></p> <p>2.Upload the following sample sketch to make the LED turn ON and OFF based on input from the sound sensor:</p> <pre><code>/*\n   Sound Sensor\n   A simple program demonstrate sound sensor senses a sound that is up to the threshold you set \n   in the code, the LED is on for 1s.\n*/ \nconst int SOUND_SENSOR=A0\u00a0;         /* sound sensor pin */          \nconst int  LED=5;          /* LED pin D5*/\n#define THRESHOLD_VALUE    300        \n#define ON                 HIGH                    /* led on */\n#define OFF                LOW                     /* led off */\n#define handle_led(x)     digitalWrite(LED, x)    /* handle led */\n/* Global Variables */\nint sound_value = 0;\nvoid setup() { \n  /* Initialize led pin */\n  pinMode(LED, OUTPUT);  \n  digitalWrite(LED, LOW);\n} \nvoid loop() {  \n /* read the sound value */\n  sound_value = analogRead(SOUND_SENSOR);         \n  /* if the value is larger than threshold, turn on led */\n  if(sound_value &gt; THRESHOLD_VALUE) {\n      handle_led(ON); \n      delay(1000);\n  }\n  handle_led(OFF);\n}\n</code></pre> <p>3.Make a noice and you will see the LED lights up. </p>"},{"location":"Products/Crowtail/crowtail--sound-sensor.html#resource","title":"Resource","text":"<ul> <li>Sound Sensor Program</li> <li>Crowtail- Sound Sensor eagle files</li> <li>Crowtail-_Sound_Sensor_v2.0.zip</li> </ul>"},{"location":"Products/Crowtail/crowtail--spdt-relay.html","title":"Crowtail- SPDT Relay","text":""},{"location":"Products/Crowtail/crowtail--spdt-relay.html#description","title":"Description","text":"<p>The SPDT relay module is a high performance single pole double throw relay and can operate with 30A current. When the relay does not work, COM and NC have continuity, when the relay work, COM and NO have continuity. Can be it usually be used as power switches, electric heaters, fans, air conditioners, and a variety of common household switch appliances. If you want to control the high current, it will give you a lot of convenience.</p> <p>model: CRT03349R</p> <p></p>"},{"location":"Products/Crowtail/crowtail--spdt-relay.html#features","title":"Features","text":"<ul> <li>SPDT Switch</li> <li>30A, 250VAC, 30VDC</li> <li>High current</li> </ul>"},{"location":"Products/Crowtail/crowtail--spdt-relay.html#specification","title":"Specification","text":"<p>Dimensions(mm):50.0(L)x35.0(W)x22.6(H)</p> Parameter Description Operating Voltage 5V Operating Current 185mA Pull-in Votage(Max) 3.75VDC"},{"location":"Products/Crowtail/crowtail--spdt-relay.html#usage","title":"Usage","text":"<p>1.Connect the Crowtail LED(red) to D3 port of base shield,connect Crowtail SPDT Relay to D2 port.and then connect COM of the SPDT Relay to PIN4 of base shield,connect NO to GND,connect NC to VCC,flowing the picture:</p> <p></p> <p>2.Copy the demo code to your sketch, then upload to Arduino or Crowduino board.</p> <pre><code>int led=3;\nint relay=2;\nint relayin=4;\nvoid setup() \n{\n  pinMode(relay,OUTPUT);\n  pinMode(led,OUTPUT);\n  pinMode(relayin,INPUT);\n  // put your setup code here, to run once:\n\n}\n\nvoid loop() \n{\n  digitalWrite(relay,HIGH);\n  delay(250);\n  if(digitalRead(relayin)==HIGH)\n  {\n     digitalWrite(led,HIGH); \n   }\n   else\n   {\n      digitalWrite(led,LOW);   \n   }\n  delay(2000);\n  digitalWrite(relay,LOW);\n  delay(250);\n  if(digitalRead(relayin)==HIGH)\n  {\n     digitalWrite(led,HIGH); \n   }\n   else\n   {\n      digitalWrite(led,LOW);   \n   }\n  delay(2000);\n  // put your main code here, to run repeatedly:\n\n}\n</code></pre> <p>3.If the D2 light on the relay board is bright and the LED of connected to the D3 lights out, it indicates that the relay COM is connected to the NO.Test passed. Following picture:</p> <p></p> <p>4.If the D2 on the relay board is turned off, the LED light of connected with the D3 is switched on and the relay COM is connected to the NC.Test passed. Following picture:</p> <p></p>"},{"location":"Products/Crowtail/crowtail--spdt-relay.html#resource","title":"Resource","text":"<ul> <li>SPDT code</li> <li>SPDT schematic diagram</li> </ul>"},{"location":"Products/Crowtail/crowtail--speaker.html","title":"Crowtail- Speaker","text":""},{"location":"Products/Crowtail/crowtail--speaker.html#description","title":"Description","text":"<p>The Crowtail- Speaker is a module which consists of power amplification and voice outputs. The loudness can be adjusted by the on-board potentiometer. With different input frequency, the loud-speaker generated different tones. Coding the music into arduino, DIY your own music box!</p> <p>Model: CT009440S</p> <p></p>"},{"location":"Products/Crowtail/crowtail--speaker.html#feature","title":"Feature","text":"<ul> <li>Volume Adjustable</li> <li>Crowtail Interface</li> </ul>"},{"location":"Products/Crowtail/crowtail--speaker.html#specification","title":"Specification","text":"<p>Dimensions(mm):40.0(L)x20.0(W)x9.8(H)</p> Item Min Typical Max Unit Working Voltage 4.0 5 5.5 VDC Voltage Gain - - 46 db Band Width - - 20 KHz"},{"location":"Products/Crowtail/crowtail--speaker.html#usage","title":"Usage","text":"<p>The speaker can emit a variety of sounds like a car horn, doorbell and ignition . The different sounds are based on the frequency of the input signal.</p> <p>You can supply different frequency signal to this module with Arduino. Arduino generates these signal via PWM or even digital write and delay.Here we are going to show you how to generate these signals using delay(), the speaker sound bass 1~7.</p> Notes The corresponding frequency(Hz) semioscillation(us) 1 261.6255653 1911.128216 1.5 277.182631 1803.864832 2 293.6647679 1702.621678 2.5 311.1269837 1607.060866 3 329.6275569 1516.863471 4 349.2282314 1431.728466 4.5 369.9944227 1351.371722 5 391.995436 1275.525055 5.5 415.3046976 1203.935334 6 440 1136.363636 6.5 466.1637615 1072.584446 7 493.8833013 1012.384907 <p>1. Plug it onto the Digital port 2 of Crowtail - Base Shield using a Crowtail cable.</p> <p></p> <p>2.Copy and paste the code as bellow to your arduino:</p> <pre><code>/*macro definition of Speaker pin*/\n#define SPEAKER 2\n\nint BassTab[]={1911,1702,1516,1431,1275,1136,1012};//bass 1~7\n\nvoid setup() \n{\n    pinInit();\n}\nvoid loop()\n{\n    /*sound bass 1~7*/\n    for(int note_index=0;note_index&lt;7;note_index++)\n    {\n        sound(note_index);\n        delay(500);\n    }\n}\nvoid pinInit()\n{\n    pinMode(SPEAKER,OUTPUT);\n    digitalWrite(SPEAKER,LOW);\n}\nvoid sound(uint8_t note_index)\n{\n    for(int i=0;i&lt;100;i++)   \n    {\n        digitalWrite(SPEAKER,HIGH);\n        delayMicroseconds(BassTab[note_index]);\n        digitalWrite(SPEAKER,LOW);\n        delayMicroseconds(BassTab[note_index]);\n    }\n}\n</code></pre> <p>4.When you upload the code complete,you can heard of seven different tones looping.</p> <p>Note: Due to the influence of the capacitance, the module can only output the bass signal, and the treble is unable to emit.</p>"},{"location":"Products/Crowtail/crowtail--speaker.html#resource","title":"Resource","text":"<ul> <li>How to generate different tone with MCU</li> <li>LM386 Low Voltage Audio Power Amplifier Datasheet</li> <li>Crowtail- Speaker eagle file</li> </ul>"},{"location":"Products/Crowtail/crowtail--stackable-shield-for-raspberry-pi-20.html","title":"Crowtail- Stackable Shield for Raspberry Pi 2.0","text":""},{"location":"Products/Crowtail/crowtail--stackable-shield-for-raspberry-pi-20.html#introduction","title":"Introduction","text":"<p>This is a Stackable board for Raspberry Pi, which has 10 GPIOs, 1 IIC Interface,1 UART Interface.</p> <p>Model: PSMC18002C</p> <p></p>"},{"location":"Products/Crowtail/crowtail--stackable-shield-for-raspberry-pi-20.html#features","title":"Features","text":"<p>Features</p> <ul> <li>Crowtail compatible interface</li> <li>Size: 27*65*18mm</li> </ul>"},{"location":"Products/Crowtail/crowtail--stackable-shield-for-raspberry-pi-20.html#interface-function","title":"Interface Function","text":"<p>The purpose of the board is to allow easy connection of any microprocessor input and output pins to the Crowtail units. For a more detailed examination of the Base Board, please refer to the following diagram: </p>"},{"location":"Products/Crowtail/crowtail--strain-gauge-sensor.html","title":"Crowtail- Strain Gauge sensor","text":""},{"location":"Products/Crowtail/crowtail--strain-gauge-sensor.html#description","title":"Description","text":"<p>A strain gauge is a device used to measure strain on an object. This strain gauge module uses the strain gauge BF350-3AA to detect the strain, with the amplifier and potentiometer on the board to adjust the measured results, users can easily get the result with any microcontroller such as Arduino. This module can be positively used in measuring deformation (for example, across a bridge by loading positions and effects) in engineering and in physical distortions proportional to loading or thermal environments. In everyday, this module can be used to applications such as gating a traffic light into a new sequence when a car on a lightly traveled side-street enters a Tee-intersection. For better using on our crowduino, we add a crowtail port so that you can plug and use directly.</p> <p>Model: CT0070SGS </p> <p></p>"},{"location":"Products/Crowtail/crowtail--strain-gauge-sensor.html#features","title":"Features","text":"<ul> <li>Working Voltage: 5VDC</li> <li>Analog Output: 0~3.5VDC</li> <li>Potentiometer to adjust the zero point</li> <li>Dimension: 32mm X 17mm</li> </ul>"},{"location":"Products/Crowtail/crowtail--strain-gauge-sensor.html#interface","title":"Interface","text":""},{"location":"Products/Crowtail/crowtail--strain-gauge-sensor.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Crowtail/crowtail--strain-gauge-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--strain-gauge-sensor.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs:  </p> Crowduino Uno Base Shield Crowtail- Strain Gauge Sensor Get one now Get one now Get one now <p>STEP2 Plug Crowtail-Base Shield into Crowduino Uno;STEP3 Plug Crowtail-Strain Gauge Sensor to A0 slot of Crowtail-Base Shield via 4 pin Crowtail Cable;STEP4 Connect Crowduino Uno to PC via a Mini USB cable.  </p> NOTE If we don't have Crowtail Base Shield, We also can directly connect this module to Crowduino Uno as below. Crowduino Uno Crowtail- Strain Gauge Sensor ANALOG 0 SIG 5V VCC GND GND"},{"location":"Products/Crowtail/crowtail--strain-gauge-sensor.html#software","title":"Software","text":"<p>STEP1 Download program files Strain_gauge_sensor.zip STEP2 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201d from the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure.  STEP3 Open the program in the Arduino IDE <pre><code>const int sensor=A5;\nint sensorValue = 0;   \nvoid setup()\n{\n  Serial.begin(9600); \n}\nvoid loop()\n{\n  sensorValue = analogRead(sensor);\n   Serial.print(\"sensor value= \" );\n  Serial.println(sensorValue); \n  delay(500);\n}\n</code></pre></p> <p>STEP4 Click the  to upload the code to the Crowduino board STEP5 After the program is burned, open the serial monitor of Arduino IDE. Adjust the sliding rheostat until the serial monitor prints about 300. Then gently bend the strain gauge and you will see the serial monitor output changes from 0 to 700.</p>"},{"location":"Products/Crowtail/crowtail--strain-gauge-sensor.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Crowtail/crowtail--strain-gauge-sensor.html#resources","title":"Resources","text":"<p>Strain_gauge_sensor.zip Crowtail-_Strain_Gauge_sensor_v2.0-Eagle.zip datasheet </p>"},{"location":"Products/Crowtail/crowtail--super-bright.html","title":"Crowtail- Super Bright","text":""},{"location":"Products/Crowtail/crowtail--super-bright.html#description","title":"Description","text":"<p>Crowtail- Super Bright is a high brightness and large angle LED. Then it low thermal resistancea it can be applied to indoor lighting, commercial lighting, you can provide a strong light source for your project, lighting, lighting or so on.</p> <p>Model:CRT00536L</p> <p></p>"},{"location":"Products/Crowtail/crowtail--super-bright.html#features","title":"Features","text":"<ul> <li>Operating Voltage: 5VDC</li> <li>Opearting Current: 20mA (Max)</li> </ul>"},{"location":"Products/Crowtail/crowtail--super-bright.html#specification","title":"Specification","text":"<p>Dimensions(mm):20.0(L)x20.0(W)x9.8(H)</p> Item Description LED Control Mode Digital Pin of Arduino Working Voltage 5V Supply Mode Crowtail Interface"},{"location":"Products/Crowtail/crowtail--super-bright.html#usage","title":"Usage","text":"<p>1. Connect the LED to Base Shield's digital D12 with 4pin Crowtail Cable and micro USB cable to micro USB port.</p> <p></p> <p>2.Copy the demo code to your sketch, then upload to Arduino or Crowduino board.</p> <pre><code>const int ledpin=12;   \nvoid setup()\n{\n  pinMode(ledpin,OUTPUT); \n}\nvoid loop()\n{\n  digitalWrite(ledpin,HIGH); \n  delay(1000);\n  digitalWrite(ledpin,LOW); \n  delay(1000);\n}\n</code></pre> <p>3.You will see the LED blink every second.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--super-bright.html#resource","title":"Resource","text":"<ul> <li>LED schematic</li> <li>LED Code</li> </ul>"},{"location":"Products/Crowtail/crowtail--switch.html","title":"Crowtail- Switch","text":""},{"location":"Products/Crowtail/crowtail--switch.html#description","title":"Description","text":"<p>The Crowtail- Switch is a Latching switch. When the first press the switch, the switch and keep the current adjustment and the button outputs a HIGH signal,namely the self-locking. When the second press the switch, the switch off and switch button to pop up at the same time, outputs a LOW signal.</p> <p>Model: CT008833S</p> <p></p>"},{"location":"Products/Crowtail/crowtail--switch.html#features","title":"Features","text":"<ul> <li>Easy to use momentary ON/OFF Switch</li> <li>Uses Standard 4-pin Crowtail Cables to connect to the Crowtail - Base Shield</li> <li>Dimensions(mm):20.0(L)x20.0(W)x15.2(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--switch.html#usage","title":"Usage","text":"<p>Switch control LED</p> <p>1.Hardware connection</p> <p></p> <p>2.Upload the following sample sketch to make the LED turn ON and OFF based on input from Crowtail- Switch:</p> <pre><code>int ledpin=5;\n int button = 2;\nvoid setup()\n{\n  pinMode(ledpin,OUTPUT);\n  pinMode(button,INPUT); \n}\nvoid loop()\n{\n  if(digitalRead(button)){\n  digitalWrite(ledpin,HIGH);\n }\n else{\n digitalWrite(ledpin,LOW);\n }\n}\n</code></pre> <p>3.Press the Switch first time, you will see the LED lights up, press the Switch again,you will see the LED lights off.</p>"},{"location":"Products/Crowtail/crowtail--switch.html#resource","title":"Resource","text":"<ul> <li>Crowtail_Switch_eagle_files</li> </ul>"},{"location":"Products/Crowtail/crowtail--temperature-sensor-tmp102.html","title":"Crowtail- Temperature Sensor TMP102","text":""},{"location":"Products/Crowtail/crowtail--temperature-sensor-tmp102.html#description","title":"Description","text":"<p>The TMP102 is a two-wire, serial output temperature sensor. It is also a digital temperature sensor, which has higher stability than analog sensors. While some temperature sensors use an analog voltage to represent the temperature, the TMP102 uses the I2C bus of the Arduino to communicate the temperature. This module is capable of reading temperatures to a resolution of 0.0625\u2103, and is accurate up to 0.5\u2103. The breakout has built-in 4.7k\u03a9 pull-up resistors for I2C communications and runs from 1.4V to 3.6V. I2C communication uses an open drain signaling, so there is no need to use level shifting.</p> <p>Model:CRT00545T</p> <p></p>"},{"location":"Products/Crowtail/crowtail--temperature-sensor-tmp102.html#features","title":"Features","text":"<ul> <li>TINY SOT563 PACKAG</li> <li>ACCURACY: 0.5\u2103(\u201325\u2103 to +85\u2103)</li> <li>OW QUIESCENT CURRENT\uff1a</li> <li>10\u03bcA Active (max)</li> <li>1\u03bcA Shutdown (max)</li> <li>SUPPLY RANGE: 1.4V to 3.6V</li> <li>DIGITAL OUTPUT: Two-Wire Serial Interface</li> <li>Temperature scale ratio: 0.0625 \u2103</li> <li>Accuracy to 0.5 \u2103</li> </ul>"},{"location":"Products/Crowtail/crowtail--temperature-sensor-tmp102.html#specification","title":"Specification","text":"<p>Dimensions(mm):20.0(L)x20.0(W)x9.8(H)</p> Item Description LED Control Mode Digital Pin of Arduino Working Voltage 5V Supply Mode Crowtail Interface"},{"location":"Products/Crowtail/crowtail--temperature-sensor-tmp102.html#usage","title":"Usage","text":"<p>1. Connect the Crowtail-TMP102 to Base Shield's I2C with 4pin Crowtail Cable.</p> <p></p> <p>2. Plug it onto the Arduino/Crowduino. Connect the board to PC using USB cable.</p> <p></p> <p>3.Download *TMP102for Arduino boards with Temperature Sensor TMP102,Unzip and put it in the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries;</p> <p>4.Copy the demo code to your sketch, then upload to Arduino or Crowduino board.</p> <pre><code>/******************************************************************************\nTMP102_example.ino\nExample for the TMP102 I2C Temperature Sensor\n******************************************************************************/\n\n#include &lt;Wire.h&gt; // Used to establied serial communication on the I2C bus\n#include \"TMP102.h\" // Used to send and recieve specific information from our sensor\n\n// Connections\n// VCC = 3.3V\n// GND = GND\n// SDA = A4\n// SCL = A5\nconst int ALERT_PIN = A3;\n\nTMP102 sensor0(0x48); // Initialize sensor at I2C address 0x48\n// Sensor address can be changed with an external jumper to:\n// ADD0 - Address\n//  VCC - 0x49\n//  SDA - 0x4A\n//  SCL - 0x4B\n\nvoid setup() {\n  Serial.begin(9600); // Start serial communication at 9600 baud\n  pinMode(ALERT_PIN,INPUT);  // Declare alertPin as an input\n  sensor0.begin();  // Join I2C bus\n\n  // Initialize sensor0 settings\n  // These settings are saved in the sensor, even if it loses power\n\n  // set the number of consecutive faults before triggering alarm.\n  // 0-3: 0:1 fault, 1:2 faults, 2:4 faults, 3:6 faults.\n  sensor0.setFault(0);  // Trigger alarm immediately\n\n  // set the polarity of the Alarm. (0:Active LOW, 1:Active HIGH).\n  sensor0.setAlertPolarity(1); // Active HIGH\n\n  // set the sensor in Comparator Mode (0) or Interrupt Mode (1).\n  sensor0.setAlertMode(0); // Comparator Mode.\n\n  // set the Conversion Rate (how quickly the sensor gets a new reading)\n  //0-3: 0:0.25Hz, 1:1Hz, 2:4Hz, 3:8Hz\n  sensor0.setConversionRate(2);\n\n  //set Extended Mode.\n  //0:12-bit Temperature(-55C to +128C) 1:13-bit Temperature(-55C to +150C)\n  sensor0.setExtendedMode(0);\n\n  //set T_HIGH, the upper limit to trigger the alert on\n//  sensor0.setHighTempF(85.0);  // set T_HIGH in F\n  sensor0.setHighTempC(29.4); // set T_HIGH in C\n\n  //set T_LOW, the lower limit to shut turn off the alert\n // sensor0.setLowTempF(84.0);  // set T_LOW in F\n  sensor0.setLowTempC(26.67); // set T_LOW in C\n}\n\nvoid loop()\n{\n  float temperature;\n  boolean alertPinState, alertRegisterState;\n\n  // Turn sensor on to start temperature measurement.\n  // Current consumtion typically ~10uA.\n  sensor0.wakeup();\n\n  // read temperature data\n // temperature = sensor0.readTempF();\n  temperature = sensor0.readTempC();\n\n  // Check for Alert\n  alertPinState = digitalRead(ALERT_PIN); // read the Alert from pin\n  alertRegisterState = sensor0.alert();   // read the Alert from register\n\n  // Place sensor in sleep mode to save power.\n  // Current consumtion typically &lt;0.5uA.\n  sensor0.sleep();\n\n  // Print temperature and alarm state\n  Serial.print(\"Temperature: \");\n  Serial.println(temperature);\n\n // Serial.print(\"\\tAlert Pin: \");\n // Serial.print(alertPinState);\n\n//  Serial.print(\"\\tAlert Register: \");\n//  Serial.println(alertRegisterState);\n\n  delay(1000);  // Wait 1000ms\n}\n</code></pre> <p>5.After successfull upload the code,you can open the monitor and see the data from Arduino,as below:</p> <p></p>"},{"location":"Products/Crowtail/crowtail--temperature-sensor-tmp102.html#resource","title":"Resource","text":"<ul> <li>TMP102 sensor code</li> <li>TMP102</li> <li>TMP102 sensor schematic</li> </ul>"},{"location":"Products/Crowtail/crowtail--temperature26-humidity-sensor.html","title":"Crowtail- IR Reflective Sensor","text":""},{"location":"Products/Crowtail/crowtail--temperature26-humidity-sensor.html#description","title":"Description","text":"<p>This module can help you detect the temperature and humidity of the environment of your house. The module contains a DHT11 temperature &amp; humidity senorthat is a complex sensor with a calibrated digital signal out.It use digital module acquisition technology and the temperature&amp;humidity sensor technology.Sensor consists of a resistance type moisture element and a NTC temperature measuring element. Because of single wire serial interface, it is easy to use the module.</p> <p>Model: CT0010TH</p> <p></p>"},{"location":"Products/Crowtail/crowtail--temperature26-humidity-sensor.html#specification","title":"Specification","text":"<ul> <li>Work Voltage: 3.3V ~ 5V</li> <li>Measuring Range:</li> </ul> <pre><code>  Humidity: 20% - 90% RH\n  Temperature: 0 ~ 50 \u00b0C\n</code></pre> <ul> <li>Accuracy:</li> </ul> <pre><code>  Humidity: \u00b15% RH\n  Temperature: \u00b12\u00b0C\n</code></pre> <ul> <li>Sensitivity:</li> </ul> <pre><code>  Humidity: \u00b11% RH\n  Temperature: 1\u00b0C\n</code></pre> <ul> <li>Signal Collecting Period: 2S</li> <li>Dimensions(mm):40.0(L)x20.0(W)x7.6(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--temperature26-humidity-sensor.html#usage","title":"Usage","text":"<p>This demo is going to show you how to read temperature and humidity information from this Crowtail - Temperature and Humidity Sensor.</p> <p>1.Hardware Connection The Temperature and Humidity sensor is connecting to digital port D5 of Crowtail - Base Shield.</p> <p></p> <p>2.Download Temperature_humidity_sensor library for Arduino boards with 16MHz XTAL; Unzip and put it in the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries;</p> <p>3.Open \u201cDHTtester\u201d example via the path: File --&gt; Examples --&gt; Humidity_Temperature_Sensor --&gt; DHTtester.</p> <pre><code>// Example testing sketch for various DHT humidity/temperature sensors\n\n#include \"DHT.h\"\n\n#define DHTPIN 5     // what pin we're connected to\n\n// Uncomment whatever type you're using!\n#define DHTTYPE DHT11   // DHT 11 \n//#define DHTTYPE DHT22   // DHT 22  (AM2302)\n//#define DHTTYPE DHT21   // DHT 21 (AM2301)\n\n// Connect pin 1 (on the left) of the sensor to +5V\n// Connect pin 2 of the sensor to whatever your DHTPIN is\n// Connect pin 4 (on the right) of the sensor to GROUND\n// Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor\n\nDHT dht(DHTPIN, DHTTYPE);\n\nvoid setup() {\n  Serial.begin(9600); \n  Serial.println(\"DHTxx test!\");\n\n  dht.begin();\n}\n\nvoid loop() {\n // Reading temperature or humidity takes about 250 milliseconds!\n // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)\n float h = dht.readHumidity();\n float t = dht.readTemperature();\n\n // check if returns are valid, if they are NaN (not a number) then something went wrong!\n if (isnan(t) || isnan(h)) {\n   Serial.println(\"Failed to read from DHT\");\n } else {\n   Serial.print(\"Humidity: \"); \n   Serial.print(h);\n   Serial.print(\"\u00a0%\\t\");\n   Serial.print(\"Temperature: \"); \n   Serial.print(t);\n   Serial.println(\" *C\");\n  }\n}\n</code></pre> <p>4.Upload it into your Arduino board and open the serial monitor to observe the temperature and relative humidity information of the environment.</p>"},{"location":"Products/Crowtail/crowtail--temperature26-humidity-sensor.html#resource","title":"Resource","text":"<ul> <li>Temperature&amp; Humidity Sensor Program </li> <li>Crowtail- Temperature&amp; Humidity Sensor eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--thermistor-temperaturen-sensor.html","title":"Crowtail- Thermistor Temperaturen Sensor","text":""},{"location":"Products/Crowtail/crowtail--thermistor-temperaturen-sensor.html#description","title":"Description","text":"<p>The Crowtail- Thermistor Temperature Sensor uses a Thermistor to detect the ambient temperature. The resistance of a thermistor will increase when the ambient temperature decreases. It's this characteristic that we use to calculate the ambient temperature.The detection range of this sensor is between -40 to 125 degrees Celsius with an accuracy of \u00b11.5\u2103. However it doesn\u2019t output the temperature value directly. To get the specific temperature value, we will use the formula in the code below.The Crowtail- Thermistor Temperaturen Sensor uses a Thermistor to detect the ambient temperature. The resistance of a thermistor will increase when the ambient temperature decreases. It's this characteristic that we use to calculate the ambient temperature.The detection range of this sensor is between -40 to 125 degrees Celsius with an accuracy of \u00b11.5\u2103. However it doesn\u2019t output the temperature value directly. To get the specific temperature value, we will use the formula in the code below.</p> <p>Model: Crowtail- Thermistor Temperature Sensor</p> <p></p>"},{"location":"Products/Crowtail/crowtail--thermistor-temperaturen-sensor.html#features","title":"Features","text":"<ul> <li>Voltage: 3.3 ~ 5V</li> <li>Max power rating at 25\u2103: 300mW</li> <li>Zero power resistance: 10 K\u03a9</li> <li>Operating temperature range: -40 ~ +125 \u2103</li> <li>Dimensions(mm):22.0(L)x20.0(W)x9.7(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--thermistor-temperaturen-sensor.html#usage","title":"Usage","text":"<p>Here is an example to show you how to read temperature information from the sensor.</p> <p>1.Connect the module to the Analog port 0 of Crowtail - Basic Shield using the 3-pin grove cable.</p> <p>2. Plug the Crowtail - Basic Shield into Arduino.</p> <p>3. Connect Arduino to PC by using a USB cable.</p> <p></p> <p>4.Upload the following sample sketch:</p> <pre><code>#include &lt;math.h&gt;\nint a;\nfloat temperature;\nint B=3975;                  //B value of the thermistor\nfloat resistance;\n\nvoid setup()\n{\n   Serial.begin(9600);  \n}\n\nvoid loop()\n{\n   a=analogRead(0);\n   resistance=(float)(1023-a)*10000/a; //get the resistance of the sensor;\n   temperature=1/(log(resistance/10000)/B+1/298.15)-273.15;//convert to temperature via datasheet\u00a0;\n   delay(1000);\n   Serial.print(\"Current temperature is \");\n   Serial.println(temperature);\n}\n</code></pre> <p>5.Open the serial monitor. You should see current temperature.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--thermistor-temperaturen-sensor.html#resource","title":"Resource","text":"<ul> <li>Crowtail- Thermistor Temperature Sensor Program</li> <li>Crowtail- Thermistor Temperature Sensor _eagle_files</li> </ul>"},{"location":"Products/Crowtail/crowtail--thermocouple-sensor.html","title":"Crowtail- thermocouple Sensor","text":""},{"location":"Products/Crowtail/crowtail--thermocouple-sensor.html#description","title":"Description","text":"<p>Thermocouples are very sensitive, requiring a good amplifier with a cold - compensation reference. The Crowtail- thermocouple Sensor USES a K type thermocouple Temperature detection, with a Thermistor to detect The ambient Temperature as Temperature compensation. The detectable range of this Sensor is -50-600\u2103 , and The accuracy is \u00b1(2.0% + 2\u2103)</p> <p>Model: CT009559T</p> <p></p>"},{"location":"Products/Crowtail/crowtail--thermocouple-sensor.html#specifications","title":"Specifications","text":"<ul> <li>Voltage\uff1a3.3 ~ 5V</li> <li>Max power rating at 25\u2103 \uff1a300mW</li> <li>Operating temperature range\uff1a-40 ~ +125 \u2103</li> <li>he temperature measurement range is (-50 ~ +600\u2103)</li> <li>Amplifier output voltage range (0 ~ 3.3 V) mv</li> <li>Cold junction compensation (environment temperature measurement)</li> <li>Thermocouple temperature measurement accuracy of + / - 2.0% (+ 2 \u2103)</li> <li>Dimensions(mm):40.0(L)x20.0(W)x10.3(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--thermocouple-sensor.html#usage","title":"Usage","text":"<p>Here is an example to show you how to read temperature information from the sensor.</p> <p>We need a Crowduino UNO and a Crowtail- thermocouple Sensor.</p>"},{"location":"Products/Crowtail/crowtail--thermocouple-sensor.html#hardware-installation","title":"Hardware Installation","text":"<p>There's a I2C Port on Crowduino, actually it's connect to A4 and A5 else. So we can use this port to read data from the sensor.</p> <p>Let's plug this sensor to I2C port of Crowduino.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--thermocouple-sensor.html#download-code-and-upload","title":"Download Code and Upload","text":"<p>You can download the library High_Temp</p> <p>Then extract the library the Library folder of Arduino, open the demo in examples folder.</p> <p>Then upload it to your Crowduino.</p> <p>Then, open your Serial Monitor, you can find the temperature in Celsius here.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--thermocouple-sensor.html#k-type-thermocouple-indexing-table","title":"K type thermocouple indexing table","text":"<p>As a reference, the following is K type thermocouple indexing table.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--thermocouple-sensor.html#resource","title":"Resource","text":"<ul> <li>Crowtail- thermocouple Sensor eagle file</li> <li>Crowtail- thermocouple Sensor demo code</li> </ul>"},{"location":"Products/Crowtail/crowtail--thumb-joystick.html","title":"Crowtail- Thumb Joystick","text":""},{"location":"Products/Crowtail/crowtail--thumb-joystick.html#description","title":"Description","text":"<p>Crowtail- Thumb Joystick is a Crowtail compatible module which is very similar to the 'analog' joystick on PS2 (PlayStation 2) controllers. Two direction movements will output different analog signals as they are actually two potentiometers. The resistor is ~10k for each. The joystick also has a push button that is could be used for special applications. When the module is in working mode it will output two analog values representing two directions. The value is restricted in a little smaller range (e.g 200~700)compared to the normal joystick, while it is around 1023 when the button is pushed, so that the MCU can detect the action of pressing.</p> <p>Model: CT0020TJ</p> <p></p>"},{"location":"Products/Crowtail/crowtail--thumb-joystick.html#features","title":"Features","text":"<ul> <li>5V/3.3V Compatible</li> <li>Analog Output</li> </ul>"},{"location":"Products/Crowtail/crowtail--thumb-joystick.html#application","title":"Application","text":"<ul> <li>Robot remot</li> <li>Game Controller</li> </ul>"},{"location":"Products/Crowtail/crowtail--thumb-joystick.html#specifications","title":"Specifications","text":"<p>Dimensions(mm):40.0(L)x27.0(W)x40.0(H)</p> Item Min Typical Max Unit Working Voltage 4.75 5.0 5.25 V Output Analog Value \uff08X coordinate\uff09 200 516 800 / Output Analog Value \uff08Y coordinate\uff09 200 516 800 /"},{"location":"Products/Crowtail/crowtail--thumb-joystick.html#usage","title":"Usage","text":"<p>The Crowtial - Thumb Joystick is an analog device that outputs analog signal ranging from 0 to 1023. That requires us to use the analog port of Arduino to take the readings.</p> <p>1. Connect the module to the A5/A4 of Crowtail - Basic Shield using the 4-pin Crowtail cable.</p> <p>2. Plug the Crowtail - Basic Shield into Arduino or Crowduino.</p> <p>3.Connect Arduino or Crowduino to PC by using a USB cable.</p> <p></p> <p>4.Copy and paste code below to a new Arduino sketch, upload.</p> <pre><code>/*\n Thumb Joystick demo v1.0\n connect the module to A4&amp;A5 for using;\n*/\n\n void setup() {\n Serial.begin(9600);\n}\n\nvoid loop() {\n int sensorValue1 = analogRead(A5);\n int sensorValue2 = analogRead(A4);\n Serial.print(\"The X and Y coordinate is:\");\n Serial.print(sensorValue1, DEC);\n Serial.print(\",\");\n Serial.println(sensorValue2, DEC);\n Serial.println(\" \");\n delay(200);\n}\n</code></pre> <p>5. You can check the values of the output analog signals by opening the Serial Monitor.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--thumb-joystick.html#resource","title":"Resource","text":"<ul> <li>Thumb Joystick Program</li> <li>Crowtail- Thumb Joystick eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--tilt-switch.html","title":"Crowtail- Tilt Switch","text":""},{"location":"Products/Crowtail/crowtail--tilt-switch.html#description","title":"Description","text":"<p>The Crowtail- Tilt Switch is the equivalent of a button, and is used as a digital input. Inside the tilt switch is a pair of balls that make contact with the pins when the case is upright. Tilt the case over and the balls don't touch, thus not making a connection.</p> <p>Model: CT0023TS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--tilt-switch.html#festure","title":"Festure","text":"<ul> <li>Crowtail Interface</li> <li>Easy to use</li> </ul>"},{"location":"Products/Crowtail/crowtail--tilt-switch.html#specification","title":"Specification","text":"<p>Dimensions(mm):20.0(L)x20.0(W)x6.8(H)</p>  Item  Min  Typical  Max  Unit Voltage 4.75 5.0 5.25 V  Connect angle 10\u00b0 ~170\u00b0 -  Disconnect angle 190\u00b0 ~350\u00b0 -  Electrical life  100000 cycles"},{"location":"Products/Crowtail/crowtail--tilt-switch.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p></p> <p>2.Copy and paste code below to a new Arduino sketch.</p> <pre><code>void setup()\n{\n   pinMode(4, INPUT); //connect to Crowtail- Tilt Switch  \n   pinMode(5, OUTPUT);//connect to Crowtail- LED\n}\n\nvoid loop()\n{ \n if (digitalRead(4)==HIGH)\n {\n   digitalWrite(1, HIGH);\n   delay(100);\n   digitalWrite(5, HIGH);\n }\n else\n{\n   digitalWrite(5, LOW);\n } \n}\n</code></pre> <p>3.Test result: </p>"},{"location":"Products/Crowtail/crowtail--tilt-switch.html#resource","title":"Resource","text":"<ul> <li>Tilt Switch Program</li> <li>Crowtail-Tilt_Switch _eagle_files</li> </ul>"},{"location":"Products/Crowtail/crowtail--touch-sensor.html","title":"Crowtail- Touch Sensor","text":""},{"location":"Products/Crowtail/crowtail--touch-sensor.html#description","title":"Description","text":"<p>The Crowtail- Touch Sensor can help us use our body current to control the electronic device. It is connected to digital I/O port, it can generate a high voltage when we touch the touch pad.</p> <p>Model: CT0012TS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--touch-sensor.html#specifications","title":"Specifications","text":"<ul> <li>Operating Voltage: 2.0 - 5.5V</li> <li>Output Response Time: 60 - 220mS</li> <li>Used Chipset:TTB223-BA6</li> <li>Dimensions(mm):20.0(L)x20.0(W)x6.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--touch-sensor.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p></p> <p>2.Copy the demo code to your sketch, then upload to Arduino or Crowduino board.</p> <pre><code>const int TouchPin=4;\nconst int ledPin=5;\nvoid setup() {\npinMode(TouchPin, INPUT);\npinMode(ledPin,OUTPUT);\n} \n\nvoid loop() {\nint sensorValue = digitalRead(TouchPin);\nif(sensorValue==1)\n{\n    digitalWrite(ledPin,HIGH);\n}\nelse\n{\n  digitalWrite(ledPin,LOW);\n }\n}\n</code></pre> <p>3.Touch the touch sensor,you will see the LED lights up.  </p>"},{"location":"Products/Crowtail/crowtail--touch-sensor.html#resource","title":"Resource","text":"<ul> <li>Touch_Sensor_Program</li> <li>Touch_Sensor_eagle_files</li> </ul>"},{"location":"Products/Crowtail/crowtail--tpl5111-reset-enable-timer.html","title":"Crowtail- Rotation Angle Sensor","text":""},{"location":"Products/Crowtail/crowtail--tpl5111-reset-enable-timer.html#description","title":"Description","text":"<p>The Crowtail- TPL5111 Reset Enable Timer is a stand-alone breakout that will turn any electronics into low-power electronics! It can be used to activate or deactivate your electronic device via internal timer(The timing time can be up to 2 hours).TPL5111's current consumption is only 35nA\uff0cit is very suited for power gating with duty cycle or battery-powered applications. TPL5111 provides optional timing interval, the range of 100ms to 7200s, we provide 6 kinds of timing modes to help you use set the timing time accurately.</p> <p>Model: CRT00599T</p> <p></p>"},{"location":"Products/Crowtail/crowtail--tpl5111-reset-enable-timer.html#features","title":"Features","text":"<ul> <li> <p>6 kinds of timing time</p> </li> <li> <p>Timer accuracy: 1% (typical)</p> </li> <li> <p>Current consumption 2.5V: 35nA (TPL5111)</p> </li> <li> <p>Timing mode: manual/automatic(default automatic)</p> </li> <li> <p>Voltage range: 1.8V~5.5V</p> </li> </ul>"},{"location":"Products/Crowtail/crowtail--tpl5111-reset-enable-timer.html#specification","title":"Specification","text":"<p>Dimensions(mm):40.0(L)x20.0(W)x6.8(H)</p> <pre><code>                                 MIN    MAX          UNIT\n Supply Voltage (VDD-GND)       -0.3    6.0           V\n\n Input Voltage at any pin(3)    -0.3    VDD + 0.3     V\n\n Input Current on any pin       -5      5             mA\n\n Storage Temperature, Tstg      -65     150           \u00b0C\n\n Junction Temperature, TJ(2)            150           \u00b0C\n</code></pre>"},{"location":"Products/Crowtail/crowtail--tpl5111-reset-enable-timer.html#usger","title":"Usger","text":"<p>Make sure the DIP switch is OFF. Because it does not continuously sample the resistor, it only does it once when power is applied. So set the delay you want, then power up the breakout.</p> <p>Hardware Connection.</p> <p></p> <p>Select the timing time you want, open the Corresponding switch. Now the ENOUT pin will periodically produce a low pulse, you'll see the red led lights flashing along.</p> <p>On the other hand, you can also change the module to manual timer mode, using a soldering iron to remove the R11 resistor and take it to R10 location. In manual mode\uff0c module timing will start from the moment you press the button, When the timing timer comes, the ENOUT pin will produce a low pulse all the time.</p>"},{"location":"Products/Crowtail/crowtail--tpl5111-reset-enable-timer.html#resource","title":"resource","text":"<p>TPL5111 datasheet</p>"},{"location":"Products/Crowtail/crowtail--ultrasonic-ranging-sensor.html","title":"Crowtail- Ultrasonic Ranging Sensor","text":""},{"location":"Products/Crowtail/crowtail--ultrasonic-ranging-sensor.html#introduction","title":"Introduction","text":"<p>Description: This HC-SR04 has stable performance and high ranging accuracy. Compared to the Shap IR ranging module , HC-SR04 is more cheaper than it . But it has the same ranging accuracy and longer ranging distance. So we choose it to become \u201ca family number of our Crowtail\u201d, wish more good experience. Model: CT0051URS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--ultrasonic-ranging-sensor.html#features","title":"Features","text":"<ul> <li>Power supply: 5V DC.</li> <li>Effectual angle: &lt;15\u00b0.</li> <li>Ranging distance: 2cm \u2013 500 cm.</li> <li>Resolution: 1 cm.</li> <li>Ultrasonic Frequency: 40k Hz.</li> <li>Dimensions(mm):45.6(L)x34.7(W)x22.0(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--ultrasonic-ranging-sensor.html#usage","title":"Usage","text":"<p>  A short ultrasonic pulse is transmitted at the time 0, reflected by an object. The senor receives this signal and converts it to an electric signal. The next pulse can be transmitted when the echo is faded away. This time period is called cycle period. The recommend cycle period should be no less than 50ms. If a 10\u03bcs width trigger pulse is sent to the signal pin, the Ultrasonic module will output eight 40kHz ultrasonic signal and detect the echo back. The measured distance is proportional to the echo pulse width and can be calculated by the formula above. If no obstacle is detected, the output pin will give a 38ms high level signal.</p>"},{"location":"Products/Crowtail/crowtail--ultrasonic-ranging-sensor.html#hardware","title":"Hardware","text":"<p>Connect the Crowtail- Ultrasonic Ranging Sensor to the Crowtail base board as below: </p>"},{"location":"Products/Crowtail/crowtail--ultrasonic-ranging-sensor.html#programming","title":"Programming","text":"<p>Copy the following program to Arduino IDE and upload to your Arduino/Crowduino, you can also download the example in the Resource.</p> <pre><code>#include \"Ultrasonic.h\"\n\nUltrasonic ultrasonic(12,13);\nvoid setup() {\nSerial.begin(9600);\n}\n\nvoid loop()\n{\nSerial.println(ultrasonic.Ranging(CM));\ndelay(100);\n}\n</code></pre> <p>Open the Sscom32 terminal or the Serial moniter , and set the baudrate to 9600, you will see the output changing with the object distance.  </p>"},{"location":"Products/Crowtail/crowtail--ultrasonic-ranging-sensor.html#resource","title":"Resource","text":"<p>File:Ultrosonic ranger module Library and demo code for arduino 10.zip</p>"},{"location":"Products/Crowtail/crowtail--uv-sensor.html","title":"Crowtail- UV Sensor","text":""},{"location":"Products/Crowtail/crowtail--uv-sensor.html#description","title":"Description","text":"<p>The Crowtail- UV Sensor ML8511 is an easy to use ultraviolet light sensor. The MP8511 UV (ultraviolet) Sensor works by outputing an analog signal in relation to the amount of UV light that\u2019s detected. This breakout can be very handy in creating devices that warn the user of sunburn or detect the UV index as it relates to weather conditions.</p> <p>Model: CT0027UV</p> <p></p>"},{"location":"Products/Crowtail/crowtail--uv-sensor.html#specifications","title":"Specifications","text":"<p>Dimensions(mm):20.0(L)x20.0(W)x6.8(H)</p>"},{"location":"Products/Crowtail/crowtail--uv-sensor.html#usage","title":"Usage","text":"<p>The ML8511 sensor is very easy to use. It outputs a analog voltage that is linearly related to the measured UV intensity (mW/cm2). If your microcontroller can do an analog to voltage conversion, then you can detect the level of UV.</p> <p>1.Hardware connection</p> <p>The Crowtail- UV sensor connectde to the I port(A4 and A5) of Crowtail- based shiled.</p> <p></p> <p>2.Grab the following example:</p> <pre><code>/* \nMP8511 UV Sensor Read Example\nThe MP8511 UV Sensor outputs an analog signal in relation to the amount of UV light it detects.\nThis sensor detects 280-390nm light most effectively. This is categorized as part of the UVB (burning rays)\nspectrum and most of the UVA (tanning rays) spectrum.\nThere's lots of good UV radiation reading out there: \n*/\n//Hardware pin definitions\nint UVOUT = A5; //Output from the sensor\nint REF_3V3 = A4; //3.3V power on the Arduino board\nvoid setup()\n{\n Serial.begin(9600);\n pinMode(UVOUT, INPUT);\n pinMode(REF_3V3, INPUT);\n Serial.println(\"MP8511 example\");\n}\nvoid loop()\n{\n int uvLevel = averageAnalogRead(UVOUT);\n int refLevel = averageAnalogRead(REF_3V3);\n //Use the 3.3V power pin as a reference to get a very accurate output value from sensor\n float outputVoltage = 3.3 / refLevel * uvLevel;  \n float uvIntensity = mapfloat(outputVoltage, 0.99, 2.9, 0.0, 15.0);\n Serial.print(\"MP8511 output: \");\n Serial.print(uvLevel);\n Serial.print(\" MP8511 voltage: \");\n Serial.print(outputVoltage);\n Serial.print(\" UV Intensity (mW/cm^2): \");\n Serial.print(uvIntensity);  \n Serial.println();  \n delay(100);\n}\n//Takes an average of readings on a given pin\n//Returns the average\nint averageAnalogRead(int pinToRead)\n{\n  byte numberOfReadings = 8;\n  unsigned int runningValue = 0; \n  for(int x = 0\u00a0; x &lt; numberOfReadings\u00a0; x++)\n    runningValue += analogRead(pinToRead);\n  runningValue /= numberOfReadings;\n  return(runningValue);  \n}\n//The Arduino Map function but for floats\nfloat mapfloat(float x, float in_min, float in_max, float out_min, float out_max)\n{\n  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n</code></pre> <p>3.Open the Serial Monitor to read the data.</p> <p></p>"},{"location":"Products/Crowtail/crowtail--uv-sensor.html#resource","title":"Resource","text":"<ul> <li>UV Sensor Program</li> <li>Crowtail- UV Sensor eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--uv-sensorguva--s12sd-20.html","title":"Crowtail- UV sensor(GUVA- S12SD) 2.0","text":""},{"location":"Products/Crowtail/crowtail--uv-sensorguva--s12sd-20.html#description","title":"Description","text":"<p>The Crowtail- UV Sensor(GUVA- S12SD) 2.0 is a module that can measures the intensity of ultraviolet light. It very suitable to measure the total amount of ultraviolet ray of sunlight, the response time is fast and have all interchangeability. It can aslo detect the 200-370nm UV wavelength.</p> <p>Model: CRT00542U</p> <p></p>"},{"location":"Products/Crowtail/crowtail--uv-sensorguva--s12sd-20.html#features","title":"Features","text":"<ul> <li>Operating voltage: 3.3v-5v</li> <li>Output voltage: DC0-1V</li> <li>Measuring accuracy: 1UV INDEX</li> <li>Response wavelength: 200nm-370nm</li> <li>Stable work: &lt;0.5s</li> <li>Operating current: typical value 0.03mA, maximum value 0.1mA</li> </ul>"},{"location":"Products/Crowtail/crowtail--uv-sensorguva--s12sd-20.html#specification","title":"Specification","text":"<p>Dimensions(mm):20.0(L)x20.0(W)x9.8(H)</p> Item Description LED Control Mode Analog Pin of Arduino Working Voltage 5V Supply Mode Crowtail Interface"},{"location":"Products/Crowtail/crowtail--uv-sensorguva--s12sd-20.html#application","title":"Application","text":"<p>Occasions where need to high reliability and accuracy measure the uv index(UVI).</p>"},{"location":"Products/Crowtail/crowtail--uv-sensorguva--s12sd-20.html#usage","title":"Usage","text":"<p>1.Connect the LED to Base Shield's analog port A0 with 3pin Crowtail Cable.</p> <p></p> <p>2. Plug it onto the Arduino/Crowduino. Connect the board to PC via USB cable.</p> <p></p> <p>3.Copy the demo code to your sketch, then upload to Arduino or Crowduino board.</p> <pre><code>#define vref 4.9\nvoid setup(){\n\n    Serial.begin(9600);\n\n}\n\nvoid loop()\n{\n    int sensorValue;\n    long  sum=0;\n    for(int i=0;i&lt;10;i++)// accumulate readings for 1024 times\n    {\n        sensorValue=analogRead(A0);\n        sum=sensorValue+sum;\n    //    delay(2);\n    }\n    long meanVal = sum/10;  // get mean value\n    float vout=meanVal*vref;\n    Serial.print(\"vout is\u00a0:\");\n    Serial.print(vout,2);\n    Serial.print(\"\\n\");\n    if(vout&lt;=90)\n    {\n    Serial.print(\"The current UV index is:\");\n    Serial.println(0);// get a detailed calculating expression for UV index in schematic files.\n    //Serial.print(\"\\n\");\n    }\n    else\n    {\n    Serial.print(\"The current UV index is:\");\n    Serial.println(1E-06*vout*vout+0.008*vout-0.715,2);// get a detailed calculating expression for UV index in schematic files.\n  //  Serial.print(\"\\n\");\n    }\n    delay(1000);\n\n}\n</code></pre> <p>4.After successfully upload the code. Open the monitor and observe the data, as below:</p> <p></p> <p>5.And then, take the sensor in the sunshine, observe the data:</p> <p></p>"},{"location":"Products/Crowtail/crowtail--uv-sensorguva--s12sd-20.html#resource","title":"Resource","text":"<ul> <li>uv sensor code</li> <li>uv sensor schematic</li> </ul>"},{"location":"Products/Crowtail/crowtail--vibration-motor.html","title":"Crowtail- Vibration Motor","text":""},{"location":"Products/Crowtail/crowtail--vibration-motor.html#description","title":"Description","text":"<p>This is a mini vibration motor suitable as a non-audible indicator. When the input is HIGH, the motor will vibrate just like your cell phone on silent mode.</p> <p>Model: CT0014VM</p> <p></p>"},{"location":"Products/Crowtail/crowtail--vibration-motor.html#features","title":"Features","text":"<ul> <li>Crowtail compatible</li> <li>Low power consumption</li> <li>High reliability</li> </ul>"},{"location":"Products/Crowtail/crowtail--vibration-motor.html#specification","title":"Specification","text":"<p>Dimensions(mm):40.0(L)x20.0(W)x6.9(H)</p>  Item  Min  Typical  Max  Unit Voltage 3.0 5.0 5.5 V  Control Mode Logic Level <p>(When Logic HIGH, the motor is ON. When LOW, the motor is OFF.)</p> -  Rated speed 9000 rpm"},{"location":"Products/Crowtail/crowtail--vibration-motor.html#usage","title":"Usage","text":"<p>Here is an example showing how to turn on the vibration motor.</p> <p>1. Plug it onto the Digital port 5 of Crowtail - Base Shield using a Crowtail cable.</p> <p>2.Plug the Crowtail - Base Shield onto Arduino.</p> <p>3. Connect Arduino to PC by using a USB cable.</p> <p></p> <p>4. Copy and paste code below to a new Arduino sketch, and upload it to your Arduino.</p> <pre><code>int MoPin = 5;    // vibrator connected to digital pin 5\nvoid setup()  { \n pinMode( MoPin, OUTPUT );\n}  \nvoid loop()  {  \n   digitalWrite(MoPin, HIGH);         \n   delay(1000);                           \n   digitalWrite(MoPin, LOW);         \n   delay(1000); \n}\n</code></pre> <p>5.When you upload the code complete,you can see the vibrating motor vibrate at one second intervals. </p>"},{"location":"Products/Crowtail/crowtail--vibration-motor.html#resource","title":"Resource","text":"<ul> <li>Crowtail_Vibration-Motor Program</li> <li>Crowtail_Vibration_Motor _eagle_files</li> </ul>"},{"location":"Products/Crowtail/crowtail--vibration-sensor.html","title":"Crowtail- Vibration Sensor","text":""},{"location":"Products/Crowtail/crowtail--vibration-sensor.html#description","title":"Description","text":"<p>The Crowtail- Vibration Sensor is Used to trigger the effect of various vibration with Normally closed type vibration sensor SW - 420.It is widely used to reported the theft alarm, intelligent car, earthquake alarm, motorcycle alarm, etc.This module is compared with the normally open type vibration sensor module, vibration trigger for longer periods of time, can drive the relay module.</p> <p>Model: CT010129V</p> <p></p>"},{"location":"Products/Crowtail/crowtail--vibration-sensor.html#features","title":"Features","text":"<ul> <li>Working voltage: 3.3 V to 5 V</li> <li>Digital switch output(0 and 1)</li> <li>Crowtail interface</li> <li>The LM393 wide voltage comparator</li> <li>Dimensions(mm):40.0(L)x20.0(W)x7.5(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--vibration-sensor.html#directions-for-use","title":"Directions for use","text":"<p>1.The product is not vibration, vibration switch is closed on state, output output low level, the green light is lit;</p> <p>2.When product vibration, the vibration switch instantaneous disconnection, output, output level green light is not bright;</p> <p>3.The output can be attached directly to the single chip microcomputer, through single chip microcomputer to detect the high and low level, thus to detect if there is a vibration environment, report to the police</p>"},{"location":"Products/Crowtail/crowtail--vibration-sensor.html#usage","title":"Usage","text":"<p>Here is an example showing how to turn on the vibration Sensor.</p> <p>1. Plug it onto the Digital port 2 of Crowtail - Base Shield using a Crowtail cable and the led to port 5.</p> <p>2.Plug the Crowtail - Base Shield onto Arduino.</p> <p>3. Connect Arduino to PC by using a USB cable.</p> <p>4. Copy and paste code below to a new Arduino sketch, and upload it to your Arduino.</p> <pre><code>int Vibration=2;\nint led = 5;\nint VibrationState=0;           \nvoid setup() {                \n  pinMode(led, OUTPUT); \n  pinMode(Vibration, INPUT);\n}\nvoid loop() {\n   VibrationState = digitalRead(Vibration);\n   if ( VibrationState == HIGH) \n   {     \n       // turn LED on:    \n       digitalWrite(led, LOW);  \n      } \n\n    else {\n       // turn LED1 and LED off:\n       digitalWrite(led, HIGH);\n   }\n}\n</code></pre> <p>5.When you upload the code complete,vibration the Vibration_sensor (on a board green will brighten lights), the LED is flashing at the same time.</p>"},{"location":"Products/Crowtail/crowtail--vibration-sensor.html#resource","title":"Resource","text":"<ul> <li>Crowtail_Vibration_Sensor _eagle_files</li> </ul>"},{"location":"Products/Crowtail/crowtail--vl53l0x-laser-ranging-sensor.html","title":"Crowtail- VL53L0X Laser Ranging Sensor","text":""},{"location":"Products/Crowtail/crowtail--vl53l0x-laser-ranging-sensor.html#description","title":"Description","text":"<p>If you want to measure something more accurate and faster. This Crowtail- VL53L0X fully meet the requirements. And the specific crowtail interface will provide convenience for us to use it with Arduino. The VL53L0X is a new generation Time-of-Flight (ToF) laser-ranging module housed in the smallest package on the market today, providing accurate distance measurement whatever the target reflectances unlike conventional technologies. It can measure absolute distances up to 2m, setting a new benchmark in ranging performance levels, opening the door to various new applications. The VL53L0X integrates a leading-edge SPAD array (Single Photon Avalanche Diodes) and embeds ST\u2019s second generation FlightSenseTM patented technology. The VL53L0X\u2019s 940nm VCSEL emitter (Vertical Cavity Surface-Emitting Laser), is totally invisible to the human eye, coupled with internal physical infrared filters, it enables longer ranging distance, higher immunity to ambient light and better robustness to cover-glass optical cross-talk.</p> <p>Model: CRT32115R </p> <p></p>"},{"location":"Products/Crowtail/crowtail--vl53l0x-laser-ranging-sensor.html#features","title":"Features","text":"<ul> <li>Fully integrated miniature module</li> <li>940nm Laser VCSEL</li> <li>VCSEL driver \u2013 Ranging sensor with advanced embedded micro controller</li> <li>4.4 x 2.4 x 1.0mm</li> <li>Fast, accurate distance ranging</li> <li>Measures absolute range up to 2m</li> <li>Reported range is independent of the target reflectance</li> <li>Operates in high infrared ambient light levels</li> <li>Advanced embedded optical cross-talk compensation to simplify cover glass selection</li> <li>Eye safe</li> <li>Class 1 laser device compliant with latest standard IEC 60825-1:2014 - 3<sup>rd</sup> edition</li> <li>Easy integration</li> <li>Single reflowable component</li> <li>No additional optics</li> <li>Single power supply</li> <li>I2C interface for device control and data transfer</li> <li>Xshutdown (Reset) and interrupt GPIO</li> <li>Programmable I2C address</li> </ul>"},{"location":"Products/Crowtail/crowtail--vl53l0x-laser-ranging-sensor.html#specification","title":"Specification","text":"<ul> <li>User detection for Personal Computers/ Laptops/Tablets and IoT (Energy saving).</li> <li>Robotics (obstacle detection).</li> <li>White goods (hand detection in automatic faucets, soap dispensers etc...)</li> <li>1D gesture recognition.</li> <li>Laser assisted Auto-Focus. Enhances and speeds-up camera AF system performance, especially in difficult scenes (low light levels, low contrast) or fast moving video mode.</li> </ul>"},{"location":"Products/Crowtail/crowtail--vl53l0x-laser-ranging-sensor.html#interface","title":"Interface","text":""},{"location":"Products/Crowtail/crowtail--vl53l0x-laser-ranging-sensor.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Crowtail/crowtail--vl53l0x-laser-ranging-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail--vl53l0x-laser-ranging-sensor.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs:  </p> Crowduino Uno Base Shield Crowtail- VL53L0X Laser Ranging Sensor Get one now Get one now Get one now <p>STEP2 Plug Crowtail-Base Shield into Crowduino Uno; STEP3 Connect Crowtail-VL53L0X Laser Ranging Sensor to I\u00b2C port of Crowtail-Base Shield; STEP4 Connect Crowduino Uno to PC via a Mini USB cable. </p> NOTE If we don't have Crowtail Base Shield, We also can directly connect this module to Crowduino Uno as below. Crowduino Uno Crowtail- VL53L0X Laser Ranging Sensor A4(J7) SDA A5(J7) SCL 5V VCC GND GND"},{"location":"Products/Crowtail/crowtail--vl53l0x-laser-ranging-sensor.html#software","title":"Software","text":"<p>STEP1 Download program files VL53L0X.zip STEP2 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201d from the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure.  STEP 3 Load the program in the Arduino IDE </p> <pre><code>//the original code by Ted Meyers\n//posted here: https://groups.google.com/d/msg/diyrovers/lc7NUZYuJOg/ICPrYNJGBgAJ\n\n#include &lt;Wire.h&gt;\n\n#define VL53L0X_REG_IDENTIFICATION_MODEL_ID         0xc0\n#define VL53L0X_REG_IDENTIFICATION_REVISION_ID      0xc2\n#define VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD   0x50\n#define VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD 0x70\n#define VL53L0X_REG_SYSRANGE_START                  0x00\n#define VL53L0X_REG_RESULT_INTERRUPT_STATUS         0x13\n#define VL53L0X_REG_RESULT_RANGE_STATUS             0x14\n#define address 0x29\n\nbyte gbuf[16];\n\nvoid setup() {\n  // put your setup code here, to run once:\n  Wire.begin();        // join i2c bus (address optional for master)\n  Serial.begin(9600);  // start serial for output\n  Serial.println(\"VLX53LOX test started.\");\n}\n\nvoid loop() {\n  Serial.println(\"----- START TEST ----\");\n  test();\n  Serial.println(\"----- END TEST ----\");\n  Serial.println(\"\");\n  delay(1000);\n}\n\nvoid test() {\n  byte val1 = read_byte_data_at(VL53L0X_REG_IDENTIFICATION_REVISION_ID);\n  Serial.print(\"Revision ID: \"); Serial.println(val1);\n\n  val1 = read_byte_data_at(VL53L0X_REG_IDENTIFICATION_MODEL_ID);\n  Serial.print(\"Device ID: \"); Serial.println(val1);\n\n  val1 = read_byte_data_at(VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD);\n  Serial.print(\"PRE_RANGE_CONFIG_VCSEL_PERIOD=\"); Serial.println(val1); \n  Serial.print(\" decode: \"); Serial.println(VL53L0X_decode_vcsel_period(val1));\n\n  val1 = read_byte_data_at(VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD);\n  Serial.print(\"FINAL_RANGE_CONFIG_VCSEL_PERIOD=\"); Serial.println(val1);\n  Serial.print(\" decode: \"); Serial.println(VL53L0X_decode_vcsel_period(val1));\n\n  write_byte_data_at(VL53L0X_REG_SYSRANGE_START, 0x01);\n\n  byte val = 0;\n  int cnt = 0;\n  while (cnt &lt; 100) { // 1 second waiting time max\n    delay(10);\n    val = read_byte_data_at(VL53L0X_REG_RESULT_RANGE_STATUS);\n    if (val &amp; 0x01) break;\n    cnt++;\n  }\n  if (val &amp; 0x01) Serial.println(\"ready\"); else Serial.println(\"not ready\");\n\n  read_block_data_at(0x14, 12);\n  uint16_t acnt = makeuint16(gbuf[7], gbuf[6]);\n  uint16_t scnt = makeuint16(gbuf[9], gbuf[8]);\n  uint16_t dist = makeuint16(gbuf[11], gbuf[10]);\n  byte DeviceRangeStatusInternal = ((gbuf[0] &amp; 0x78) &gt;&gt; 3);\n\n  Serial.print(\"ambient count: \"); Serial.println(acnt);\n  Serial.print(\"signal count: \");  Serial.println(scnt);\n  Serial.print(\"distance \");       Serial.println(dist);\n  Serial.print(\"status: \");        Serial.println(DeviceRangeStatusInternal);\n}\n\nuint16_t bswap(byte b[]) {\n  // Big Endian unsigned short to little endian unsigned short\n  uint16_t val = ((b[0] &lt;&lt; 8) &amp; b[1]);\n  return val;\n}\n\nuint16_t makeuint16(int lsb, int msb) {\n    return ((msb &amp; 0xFF) &lt;&lt; 8) | (lsb &amp; 0xFF);\n}\n\nvoid write_byte_data(byte data) {\n  Wire.beginTransmission(address);\n  Wire.write(data);\n  Wire.endTransmission();\n}\n\nvoid write_byte_data_at(byte reg, byte data) {\n  // write data word at address and register\n  Wire.beginTransmission(address);\n  Wire.write(reg);\n  Wire.write(data);\n  Wire.endTransmission();\n}\n\nvoid write_word_data_at(byte reg, uint16_t data) {\n  // write data word at address and register\n  byte b0 = (data &amp;0xFF);\n  byte b1 = ((data &gt;&gt; 8) &amp;&amp; 0xFF);\n\n  Wire.beginTransmission(address);\n  Wire.write(reg);\n  Wire.write(b0);\n  Wire.write(b1);\n  Wire.endTransmission();\n}\n\nbyte read_byte_data() {\n  Wire.requestFrom(address, 1);\n  while (Wire.available() &lt; 1) delay(1);\n  byte b = Wire.read();\n  return b;\n}\n\nbyte read_byte_data_at(byte reg) {\n  //write_byte_data((byte)0x00);\n  write_byte_data(reg);\n  Wire.requestFrom(address, 1);\n  while (Wire.available() &lt; 1) delay(1);\n  byte b = Wire.read();\n  return b;\n}\n\nuint16_t read_word_data_at(byte reg) {\n  write_byte_data(reg);\n  Wire.requestFrom(address, 2);\n  while (Wire.available() &lt; 2) delay(1);\n  gbuf[0] = Wire.read();\n  gbuf[1] = Wire.read();\n  return bswap(gbuf); \n}\n\nvoid read_block_data_at(byte reg, int sz) {\n  int i = 0;\n  write_byte_data(reg);\n  Wire.requestFrom(address, sz);\n  for (i=0; i&lt;sz; i++) {\n    while (Wire.available() &lt; 1) delay(1);\n    gbuf[i] = Wire.read();\n  }\n}\n</code></pre> <p>STEP4 Click the  to upload the code to the Crowduino board STEP5 Click the serial port monitor, set baud rate to 9600, place an object in front of the sensor, and the serial port will print out the corresponding distance, in mm. The printed distance is similar to the actual distance </p>"},{"location":"Products/Crowtail/crowtail--vl53l0x-laser-ranging-sensor.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Crowtail/crowtail--vl53l0x-laser-ranging-sensor.html#resources","title":"Resources","text":"<p>Crowtail-VL53L0X_Laser_Ranging_Sensor-V2.0-Eagle.zip VL53L0X.zip Laser_ranging_sensor.pdf </p>"},{"location":"Products/Crowtail/crowtail--voltage-sensor.html","title":"Crowtail- Voltage Sensor","text":""},{"location":"Products/Crowtail/crowtail--voltage-sensor.html#description","title":"Description","text":"<p>The Crowtai- Voltage Sensor module designed on the basis of the input voltage is not greater than 5 V x 5 = 25 V (if use 3.3 V system, the input voltage is not greater than 3.3 Vx5 = 16.5 V).Because the Aduino using AVR chip for 10 AD, so this module simulation resolution of 0.00489 V (5 V / 1023), so the voltage detecting module minimum input voltage of 0.00489 V * 5 = 0.02445 V.</p> <p>Model: CT010219V </p>"},{"location":"Products/Crowtail/crowtail--voltage-sensor.html#features","title":"Features","text":"<ul> <li>Input voltage range: DC0-25 V</li> <li>Voltage detection range: DC0.02445 V - 25 V</li> <li>Voltage simulation resolution: 0.00489 V</li> <li>Crowtail Interface</li> <li>Easy to use</li> <li>Dimensions(mm):20.0(L)x20.0(W)x12.0(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--voltage-sensor.html#sch","title":"SCH","text":""},{"location":"Products/Crowtail/crowtail--voltage-sensor.html#usage","title":"Usage","text":"<p>Here is an example showing how to turn on the Crowtail- Voltage Sensor.</p> <p>1. Plug it onto the Analog port 2 of Crowtail - Base Shield using a Crowtail cable.</p> <p>2.Plug the Crowtail - Base Shield onto Arduino.</p> <p>3. Connect Arduino to PC by using a USB cable.</p> <p></p> <p>4.parallel the Metering ports to the object that you want to measure.</p> <p>5. Copy and paste code below to a new Arduino sketch, and upload it to your Arduino.</p> <pre><code>#include &lt;Wire.h&gt;\nfloat val11; \nvoid setup() \n{    \n Serial.begin(9600);   \n Serial.println(\"Emartee.Com\");   \n Serial.println(\"Voltage: \");   \n Serial.print(\"V  \"); \n} \nvoid loop() \n{       \n float temp;       \n val11=analogRead(2);       \n temp=val11/40.92;              \n Serial.println(temp);          \n delay(1000); \n}\n</code></pre> <p>5.When you upload the code complete,you can measure the voltage(0-25V) of different objects and see the result via the serial port debug window</p> <p></p>"},{"location":"Products/Crowtail/crowtail--voltage-sensor.html#resource","title":"Resource","text":"<ul> <li>Crowtail- Voltage Sensor eagle file</li> </ul>"},{"location":"Products/Crowtail/crowtail--water-sensor.html","title":"Crowtail- Water Sensor","text":""},{"location":"Products/Crowtail/crowtail--water-sensor.html#description","title":"Description","text":"<p>This sensor works by having a series of exposed traces connected to ground and interlaced between the grounded traces are the sens traces. The sensor traces have a weak pull-up resistor of 1 M\u03a9. The resistor will pull the sensor trace value high until a drop of water shorts the sensor trace to the grounded trace. Believe it or not this circuit will work with the digital I/O pins of your Arduino or you can use it with the analog pins to detect the amount of water induced contact between the grounded and sensor traces.</p> <p>Model: CT0042CWS</p> <p></p>"},{"location":"Products/Crowtail/crowtail--water-sensor.html#specification","title":"Specification","text":"<ul> <li>Crowtail compatible interface</li> <li>Low power consumption</li> <li>High sensitivity</li> <li>Working voltage:4.75v - 5.25v</li> <li>Working temperature:10\u2103 - 30\u2103</li> <li>Dimensions(mm):40.0(L)x20.0(W)x6.8(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail--water-sensor.html#applications-ideas","title":"Applications Ideas","text":"<ul> <li>Rainfall detecting</li> <li>Liquid leakage</li> <li>Tank overflow detector</li> </ul>"},{"location":"Products/Crowtail/crowtail--water-sensor.html#usage","title":"Usage","text":"<p>This demo simplely for using the Water sensor to control the LED. 1.Hardware Connection Connect the module to the Basic board using digital pin 2. LED using digital pin 5.</p> <p>2.Download Crowtail- Water_sensor for Arduino boards with 16MHz XTAL; Unzip and put it in the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries;</p> <p>3.Open \u201cCrowtail_Water_Sensor\u201d example via the path: File --&gt; Examples --&gt; Crowtail_Water_Sensor</p> <pre><code>const int ledpin=5;\nconst int sensor = 2;\nvoid setup()\n{\n  pinMode(ledpin,OUTPUT);\n  pinMode(sensor,INPUT); \n}\nvoid loop()\n{\n  if(\uff01digitalRead(sensor)){\n  digitalWrite(ledpin,HIGH);\n }\n else{\n digitalWrite(ledpin,LOW);\n }\n}\n</code></pre> <p>4.Upload it into your Crowduino board and drop water on the surface of sensor. The LED light up when the sensor is damp. Have a try!</p> <p> </p>"},{"location":"Products/Crowtail/crowtail--water-sensor.html#resource","title":"Resource","text":"<ul> <li>Crowtail-Water sensor Program</li> <li>Crowtail-Water Sensor v1.0 eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail--wifi-module.html","title":"Crowtail- WIFI Module","text":""},{"location":"Products/Crowtail/crowtail--wifi-module.html#description","title":"Description","text":"<p>WIFI module can launch a WIFI signal and you can send control command to our crowduino by connecting to it. In a word, it\u2019s a WIFI data transmission module. More bigger flash and storage insure high- definition and smooth images. Also more stabler signal. You should pay attention to that the input voltage is 5v, do not exceed 5.5v. if you want to DIY your SMART WIFI VIDEO CAR, pick up it to get more good experience.</p> <p>Module: APK01139W</p> <p></p> <p></p>"},{"location":"Products/Crowtail/crowtail--wifi-module.html#features","title":"Features","text":"<ul> <li>Input voltage: 5V</li> <li>Shell size:57 x 67 x 23mm</li> <li>8M- flash,64 M-RAM</li> <li>Current power consumption: 1.2W</li> <li>Built- in a onboard antenna</li> </ul>"},{"location":"Products/Crowtail/crowtail--wifi-module.html#uart-interface","title":"UART Interface","text":""},{"location":"Products/Crowtail/crowtail--wifi-module.html#usage","title":"Usage","text":"<p>Used in Smart WIFI Video Car( Arduino Control ), click https://www.instructables.com/Smart-WIFI-Video-Car-Arduino-Control-/to learn more. </p>"},{"location":"Products/Crowtail/crowtail--wifi-module.html#faqs","title":"FAQs","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Crowtail/crowtail-capacitive-moisture-v20.html","title":"Crowtail-Capacitive Moisture V2.0","text":""},{"location":"Products/Crowtail/crowtail-capacitive-moisture-v20.html#description","title":"Description","text":"<p>This is a capacitive soil moisture sensor with corrosion resistance characteristics. The moisture sensor can be used to detect the moisture of soil or your pet plant's water level, let the plants in your garden reach out for human help. It is connected to Analog I/O port.</p> <p>Model: CMS00810C</p> <p></p>"},{"location":"Products/Crowtail/crowtail-capacitive-moisture-v20.html#features","title":"Features","text":"<ul> <li>Corrosion resistant</li> <li>Soil moisture sensor based on soil capacitive measurement</li> <li>Easy to use</li> <li>High sensitivity</li> </ul>"},{"location":"Products/Crowtail/crowtail-capacitive-moisture-v20.html#specification","title":"Specification","text":"<p>Board demensions(mm):102(L)x23(W)x8.2(H)</p> Item Description Operating voltage 3.3V~5V Interface Crowtail compatible interface"},{"location":"Products/Crowtail/crowtail-capacitive-moisture-v20.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of sensing the moisture of the soil.</p> <p>1. Connect this module to one of analog port A0 of Crowtail - Base Shield with the 4 pin Crowtail cable</p> <p>2. Plug Crowtail - Base Shield into the Arduino/Crowduino and connnect Arduino to PC via a USB cable.</p> <p>3.The hardware installation as shown below</p> <p></p> <p>4.A calibration process is required prior to the formal testing of soil moisture; (Calibration instructions: limit a range of measurements by reading the sensor values separately in air and water, Open the serial monitor and set the baud rate to 9600 per program.) \u2460 Burn the calibration code into the Arduino main control board \u2461 Open the serial port to monitor the assistant \u2462 Record values in air and water respectively The calibration code is as follows:</p> <pre><code>void setup() {\nSerial.begin(9600); // open serial port, set the baud rate to 9600 bps\nvoid loop() {\nint val;\nval = analogRead(0); //connect sensor to Analog 0\nSerial.println(val); //print the value to serial\ndelay(100);\n}\n</code></pre> <p>5: The demo code. After the calibration process, you should bring the two sets of data you just recorded into your test code.( The code is highlighted in red )</p> <p>The demo code is as follows:</p> <pre><code>const int AirValue = 600;   //you need to change this value that you had recorded in the air\nconst int WaterValue = 360;  //you need to change this value that you had recorded in the water\nint intervals = (AirValue - WaterValue)/3;   \nint soilMoistureValue = 0;\nvoid setup() {\n  Serial.begin(9600); // open serial port, set the baud rate to 9600 bps\n}\nvoid loop() {\nsoilMoistureValue = analogRead(A0);  //put Sensor insert into soil\nif(soilMoistureValue &gt; WaterValue &amp;&amp; soilMoistureValue &lt; (WaterValue + intervals))\n{\n  Serial.println(\"Very Wet\");\n}\nelse if(soilMoistureValue &gt; (WaterValue + intervals) &amp;&amp; soilMoistureValue &lt; (AirValue - intervals))\n{\n  Serial.println(\"Wet\");\n}\nelse if(soilMoistureValue &lt; AirValue &amp;&amp; soilMoistureValue &gt; (AirValue - intervals))\n{\n  Serial.println(\"Dry\");\n}\ndelay(100);\n}\n</code></pre> <p>6.The result in different condition after open the serial monitor:</p> <p></p> <p></p> <p></p>"},{"location":"Products/Crowtail/crowtail-capacitive-moisture-v20.html#resource","title":"Resource","text":"<ul> <li>Crowtail-Capacitive_Moisture-V2.0-20190408-01.pdf</li> <li>Crowtail-Capacitive_Moisture-V2.0-20190408-01-Eagle.zip</li> <li>Capacitive_Moisture_code</li> </ul>"},{"location":"Products/Crowtail/crowtail-digital-programmable-potentiometer.html","title":"Crowtail-Digital-Programmable-Potentiometer","text":""},{"location":"Products/Crowtail/crowtail-digital-programmable-potentiometer.html#description","title":"Description","text":"<p>In a variety of bridge circuits, due to vibration, shock and temperature and humidity and other environmental factors, the potentiometer position and parameters will always change, so our common potentiometer always need to constantly adjust, these to use Brought a lot of inconvenient place. So we designed this product, a Crowtail- Digital Programmable Potentiometer, which not only eliminates the need for constant adjustment, but also improves the accuracy of the entire system, in addition to our unique crowtail interface and arduino with it when used More convenient, it uses the potentiometer is X9C103S - a 100-order digital potentiometer, the resistance range from 40R to 100K, in its internal contains 99 resistance array, a temperature compensation function, and resistance resolution up to 1%.</p> <p>Model: CRT02106P </p> <p></p>"},{"location":"Products/Crowtail/crowtail-digital-programmable-potentiometer.html#features","title":"Features","text":"<ul> <li>Crowtail interface</li> <li>Temperature compensation</li> <li>Digital and Programmable</li> <li>High resistance resolution</li> <li>No manual adjustment</li> </ul>"},{"location":"Products/Crowtail/crowtail-digital-programmable-potentiometer.html#specifications","title":"Specifications","text":"Item Value Operating voltage 5V Total resistance 100k\u03a9 Terminal voltage -5V ~ 5V Resistance increase mode linear Interface Crowtail Operating current 3mA Temperature -40\u2103 ~ 85\u2103 Resistance resolution 1% Resistance range 40R-100K Dimensions 28.5mm(L)x20.0mm(W)x9.8mm(H)"},{"location":"Products/Crowtail/crowtail-digital-programmable-potentiometer.html#pin-map","title":"Pin Map","text":"Pin Name Description U_D Up/Down Input INC Increment Input VCC Supply Voltage GND GND VH High Terminal VW Wiper Terminal VL VL Low Terminal"},{"location":"Products/Crowtail/crowtail-digital-programmable-potentiometer.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Crowtail/crowtail-digital-programmable-potentiometer.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail-digital-programmable-potentiometer.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs:  </p> Crowduino Uno Base Shield Crowtail-digital programmable potentiometer Get one now Get one now Get one now <p>STEP2 Plug Crowtail-Base Shield into Crowduino Uno; STEP3 Plug Crowtail-Digital Programmable Potentiometer-V2.0 into D2&amp;D3 port on the Crowtail-Base Shield U Port; STEP4 Connect VH on the Crowtail-Digital Programmable Potentiometer V2.0 to the 5V power supply on the Crowduino Uno with the dupont cable; STEP5 Connect VL on the crowtail-digital Programmable Potentiometer-V2.0 to the GND on the Crowduino Uno with the dupont cable; STEP6 Connect Crowduino Uno to PC via a Mini USB cable. </p> NOTE If we don't have Crowtail Base Shield, We also can directly connect this module to Crowduino Uno as below. Crowduino Uno Digital Programmable Potentiometer 2(J5) U_D 3(J5) INC 5V VH GND VL 5V/3.3V VCC GND GND"},{"location":"Products/Crowtail/crowtail-digital-programmable-potentiometer.html#software","title":"Software","text":"<p>STEP 1.Download program filesTest_Demo.zip</p> <p>STEP2 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201d from the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure. [ STEP 3.Load the program in the Arduino IDE</p> <pre><code>int INC = 3;                     // pin D3 of Arduino\nint U_D= 2;                    //  pin D2 of Arduino\n\nvoid setup() {\n    pinMode (INC, OUTPUT);\n    pinMode (U_D, OUTPUT);\n\n    Serial.begin(9600);                                                     // setting the serial speed\n    Serial.println(\"ready!\");\n}\n\nvoid loop() {\n    for (int i = 0; i &lt; 100; i++) {\n      digitalWrite(U_D,LOW);\n     for(int n=1;n&gt;0;n--)\n     {\n     digitalWrite(INC,HIGH);\n     delay(50);\n     digitalWrite(INC,LOW);    \n     }\n\n    }\n    for (int i = 100; i &gt; 0; i--) {\n      digitalWrite(U_D,HIGH);\n     for(int n=1;n&gt;0;n--)\n     {\n     digitalWrite(INC,HIGH);\n     delay(50);\n     digitalWrite(INC,LOW);  \n     }\n    }\n}\n</code></pre> <p>STEP4 Click the  to upload the code to the Crowduino board STEP5 After downloading the program, use a voltmeter to measure the voltage at VW. It can be seen that the voltage slowly changes from 5V to 0V, and then from 0V to 5V</p>"},{"location":"Products/Crowtail/crowtail-digital-programmable-potentiometer.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Crowtail/crowtail-digital-programmable-potentiometer.html#resources","title":"Resources","text":"<p>Crowtail-Digital_Programmable_Potentiometer-V2.0-Eagle.zip Test_Demo.zip X9C103S_Datasheet.pdf </p>"},{"location":"Products/Crowtail/crowtail-gp02.html","title":"Crowtail- GP02","text":""},{"location":"Products/Crowtail/crowtail-gp02.html#description","title":"Description","text":"<p>The Crowtail - GP02 module is a cost-effective and field programmable gadget. The high-performance BDS/GNSS multi-mode satellite navigation receiver SOC module, integrates RF front-end, digital baseband processor, 32-bit RISC CPU, power management and active antenna detection and protection functions. It supports a variety of satellite navigation systems, including China's Beidou satellite navigation system BDS, the United States' GPS, and Russia's GLONASS, and can realize multi system joint positioning. Model: CRT01140G </p> <p></p>"},{"location":"Products/Crowtail/crowtail-gp02.html#features","title":"Features","text":"<ul> <li>Field programmable</li> <li>With 32-bit RISC CPU</li> <li>Supports BDS, GPS, GLONASS</li> <li>Low power consumption</li> <li>High sensitivity and high-precision</li> <li>Can switch between GPS+BDS and GPS+GNSS modes</li> <li>Outdoor positioning</li> <li>Crowtail Indicates the compatible interface</li> </ul>"},{"location":"Products/Crowtail/crowtail-gp02.html#specification","title":"Specification","text":"<ul> <li>Operating voltage: DC 2.7V ~ 3.6V</li> <li>Default baud rate: 9600</li> <li>Interface type: UART</li> <li>Navigation Sensitivity: -160dbm</li> <li>Positioning accuracy: &lt;2m(1\u03c3)</li> <li>BDS/GPS dual mode continuous operation power consumption: 23mA</li> <li>Size(mm):40.0(L)x20.0(W)x9.7(H)</li> <li>Time to first start: Cold start: 32s ;Warm start: &lt;1s; Hot start: &lt;1s</li> </ul>"},{"location":"Products/Crowtail/crowtail-gp02.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail-gp02.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs:</p> Crowduino Uno Base Shield Crowtail- GP02 Get one now Get one now Get one now <p>STEP2 Plug Crowtail-Base Shield into Crowduino Uno; STEP3 Plug Crowtail-GP02 to D2 D3 slot of Crowtail-Base Shield via 4 pin Crowtail Cable; STEP4 Connect Crowduino Uno to PC via a Mini USB cable.  </p> NOTE If we don't have Crowtail Base Shield, We also can directly connect this module to Crowduino Uno as below. Crowduino Uno Crowtail- GP02 D2 TX D3 RX 3.3V VCC GND GND"},{"location":"Products/Crowtail/crowtail-gp02.html#software","title":"Software","text":"<p>STEP1 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201d from the available options  STEP2 Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure.  STEP3 Open the program in the Arduino IDE  </p> <pre><code>//at 9600 bps 8-N-1\n//Computer is connected to Arduino/Crowduino\n//SoftSerial Shield is connected to the Software UART:D2&amp;D3\n\n#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial SoftSerial(2, 3);\nunsigned char buffer[256]; // buffer array for data recieve over serial port\nint count = 0;   // counter for buffer array\nvoid setup()\n{\n  SoftSerial.begin(9600);               // the SoftSerial baud rate\n  Serial.begin(9600);             // the Serial port of Arduino baud rate.\n\n}\n\nvoid loop()\n{\n  if (SoftSerial.available())              // if date is comming from softwareserial port ==&gt; data is comming from SoftSerial shield\n  {\n    while (SoftSerial.available())         // reading data into char array\n    {\n      buffer[count++] = SoftSerial.read();   // writing data into array\n      if (count == 256)break;\n    }\n    Serial.write(buffer, count);           // if no data transmission ends, write buffer to hardware serial port\n    clearBufferArray();              // call clearBufferArray function to clear the storaged data from the array\n    count = 0;                       // set counter of while loop to zero\n  }\n  if (Serial.available())            // if data is available on hardwareserial port ==&gt; data is comming from PC or notebook\n    SoftSerial.write(Serial.read());       // write it to the SoftSerial shield\n}\nvoid clearBufferArray()              // function to clear buffer array\n{\n  for (int i = 0; i &lt; count; i++)\n  {\n    buffer[i] = NULL; // clear all index of array with command NULL\n  }\n}\n</code></pre> <p>STEP4 Click the  to upload the code to the Crowduino board STEP5 After the program is burned, open the serial monitor of Arduino IDE. Select 9600 baud rate, and the monitor will display the data returned by the GPS module. </p> <p>Data analysis</p> <ol> <li> <p>$GNGGA,(1),(2),(3),(4),(5),(6),(7),(8),(9),M,(11),(12)*HH(CR)(LF)</p> <p>(1)UTC time,format: hhmmss.ss;</p> <p>(2)Latitude, format: ddmm.mmmmm;</p> <p>(3)Latitude hemisphere, N or S;</p> <p>(4)Longitude, format: dddmm.mmmmm;</p> <p>(5)Longitude hemisphere, E or W;</p> <p>(6)GPS status, 0=no positioning, 1=non differential positioning, 2=differential positioning;</p> <p>(7)Number of satellites in use for positioning (00~12)</p> <p>(8)HDOP horizontal accuracy factor(0.5~99.9)</p> <p>(9)Altitude(-9999.9~9999.9 meters)</p> <p>(10)Geoid height(-9999.9~9999.9 meters)</p> <p>(11)Differential time (seconds since the last time differential signal was received, non differential positioning, this item is blank)</p> <p>(12) Differential reference base station label (0000 to 1023, the first 0 will also be transmitted, non differential positioning, this item is blank)</p> </li> <li> <p>GPVTG ground speed information $GPVTG,&lt;1&gt;,T,&lt;2&gt;,M,&lt;3&gt;,N,&lt;4&gt;,K,&lt;5&gt;*hh</p> <p>&lt;1&gt; Ground heading with due north as reference datum (000~359 degrees, the previous 0 will also be transmitted)</p> <p>&lt;2&gt; Ground heading with magnetic north as reference (000~359 degrees, the previous 0 will also be transmitted)</p> <p>&lt;3&gt; Ground speed (000.0-999.9 knots, the previous 0 will also be transmitted)</p> <p>&lt;4&gt; Ground speed 0000.0 - 1851.8 km/h, the previous 0 will also be transmitted)</p> <p>&lt;5&gt; Mode indication (only NMEA0183 version 3.00 output, A=autonomous positioning, D=differential, E=estimation, N=invalid data</p> </li> <li> <p>GPGSV visual satellite status Standard format: $GPGSV, (1), (2), (3), (4), (5), (6), (7),...) 5), (6), (7)*hh(CR)(LF)</p> <p>(1) Total number of GSV statement messages; 2;</p> <p>(2) Current GSV full stop: 1;</p> <p>(3) Total number of visible satellites: 08;</p> <p>(4) PRN code (pseudorandom noise code) can also be considered as satellite number</p> <p>(5) Elevation (00~90 degrees): 33 degrees;</p> <p>(6) Azimuth (000~359 degrees): 240 degrees;</p> <p>(7) Signal to noise ratio (00~99dB): 45dB (followed by the information of satellites 10, 16 and 17);</p> </li> <li> <p>Sum check field;</p> </li> </ol> <p>hhChecksum: 78;</p>"},{"location":"Products/Crowtail/crowtail-gp02.html#faqs","title":"FAQS","text":"<p>You can post your questions on our forum or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Crowtail/crowtail-gp02.html#resources","title":"Resources","text":"<p>Crowtail-GP02_v2.0-sch.pdf </p>"},{"location":"Products/Crowtail/crowtail-knock-sensor.html","title":"Crowtail- Knock Sensor","text":""},{"location":"Products/Crowtail/crowtail-knock-sensor.html#description","title":"Description","text":"<p>The Crowtail-knock sensor is a piezoelectric sensor that contains a piezoelectric sensing crystal and a resister. This crystal creates a small amount of voltage when shaken and takes advantage of this unique property. It will output a pulse when vibration is detected. Model: CRT00516K </p> <p></p>"},{"location":"Products/Crowtail/crowtail-knock-sensor.html#features","title":"Features","text":"<ul> <li>Digital Crowtail connector</li> </ul>"},{"location":"Products/Crowtail/crowtail-knock-sensor.html#specifications","title":"Specifications","text":"Item Value Presence sensing vibration Sensor KY-031 Power supply 5V Dimensions(mm) 20.0(L)x20.0(W)x7.1(H)"},{"location":"Products/Crowtail/crowtail-knock-sensor.html#pin-map","title":"Pin Map","text":"Pin Name Description VCC Supply Voltage GND GND SIG Output a pulse when vibration is detected"},{"location":"Products/Crowtail/crowtail-knock-sensor.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Crowtail/crowtail-knock-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail-knock-sensor.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs:</p> Crowduino Uno Base Shield Crowtail-Knock Sensor Crowtail-LED [ Get one now Get one now Get one now Get one now <p>STEP2 Plug Crowtail-Base Shield into Crowduino Uno; STEP3 Plug Crowtail-Knock Sensor into D2 slot on the Crowtail-Base Shield I Port with Crowtail cable; STEP4 Plug Crowtail-LED into D3 slot on the Crowtail-Base Shield I Port with Crowtail cable; STEP5 Connect Crowduino Uno to PC via a Mini USB cable.  </p> NOTE If we don't have Crowtail Base Shield, We also can directly connect this module to Crowduino Uno as below. Crowduino Uno Crowtail-Knock Sensor Crowtail-LED DIGITAL 2 SIG \\ DIGITAL 3 \\ SIG 5V VCC VCC GND GND GND"},{"location":"Products/Crowtail/crowtail-knock-sensor.html#software","title":"Software","text":"<p>STEP 1.Download program filesKnock_Sensor.zip STEP2 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201d from the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure.  STEP 3 Load the program in the Arduino IDE</p> <pre><code>const int SensorPin = 2;     // the number of the pushbutton pin\nconst int ledPin =  12;      // the number of the LED pin\n\n// variables will change:\nint SensorState = 0;         // variable for reading the pushbutton status\n\nvoid setup() {\n  // initialize the LED pin as an output:\n  pinMode(ledPin, OUTPUT);      \n  // initialize the pushbutton pin as an input:\n  pinMode(SensorPin, INPUT);     \n}\n\nvoid loop(){\n  // read the state of the pushbutton value:\n  SensorState = digitalRead(SensorPin);\n\n  // check if the pushbutton is pressed.\n  // if it is, the buttonState is HIGH:\n  if (SensorState == HIGH) {     \n    // turn LED on:    \n    digitalWrite(ledPin, HIGH);  \n  } \n}\n</code></pre> <p>STEP4 Click the  to upload the code to the Crowduino board STEP5 After the program is downloaded, knock the sensor you will see the LED lights up.</p>"},{"location":"Products/Crowtail/crowtail-knock-sensor.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Crowtail/crowtail-knock-sensor.html#resources","title":"Resources","text":"<p>Knock_Sensor.zip Crowtail-_Knock_Sensor_v2.0-Eagle_file.zip</p>"},{"location":"Products/Crowtail/crowtail-led-matrix.html","title":"Crowtail-LED Matrix","text":""},{"location":"Products/Crowtail/crowtail-led-matrix.html#introduction","title":"Introduction","text":"<p>A 8*8 LED matrix has lots of applications when we DIY some electronic kit. So we invite it to join our crowtail, this Crowtail- 8*8 LED Matrix use the HT16K33 which is a neat little chip that has the ability to drive a multiplexed 8x8 matrix (that's 64 individual LEDs).</p> <p>The I2C communication protocol uses only 2 pins, and you can have up to 8 selectable I2C addresses so thats a total of 8 matrices, each one controlling 8x8 LEDs for 64 total LEDs. We offer three LED matrix to you-red ,blue and green. You need to pay attention to that the driver can turn LEDs on and off but does not have the ability to individually PWM dim them. This chip is rock solid, has Arduino &amp; Pi example code written for it and is easy to use.</p> <p>Model: CRT15121M</p> <p></p>"},{"location":"Products/Crowtail/crowtail-led-matrix.html#features","title":"Features","text":"<p>Crowtail interface 8*8 LED matrix DC 5V working voltage Size: 40mm(L)*20mm(W)</p>"},{"location":"Products/Crowtail/crowtail-led-matrix.html#usage","title":"Usage","text":"<p>1. Connect the LED Matrix 2.0 board to Base Shield's I2C pin with 4pin Crowtail Cable.</p> <p>2. Plug it onto the Arduino/Crowduino. Connect the board to PC using USB cable.</p> <p>3. Download the library \u201cledlab\u201d; Unzip it into the libraries file of Arduino IDE by the path: .. \\ Arduino\\libraries.</p> <p>4. Copy the demo code to your sketch, then upload to Arduino or Crowduino board.</p> <pre><code>/*************************************************** \n  This is a library for our I2C LED Backpacks\n\n  Designed specifically to work with the Adafruit LED Matrix backpacks \n  ----&gt; http://www.adafruit.com/products/872\n  ----&gt; http://www.adafruit.com/products/871\n  ----&gt; http://www.adafruit.com/products/870\n\n  These displays use I2C to communicate, 2 pins are required to \n  interface. There are multiple selectable I2C addresses. For backpacks\n  with 2 Address Select pins: 0x70, 0x71, 0x72 or 0x73. For backpacks\n  with 3 Address Select pins: 0x70 thru 0x77\n\n  Adafruit invests time and resources providing this open source code, \n  please support Adafruit and open-source hardware by purchasing \n  products from Adafruit!\n\n  Written by Limor Fried/Ladyada for Adafruit Industries.  \n  BSD license, all text above must be included in any redistribution\n ****************************************************/\n\n#include &lt;Wire.h&gt;\n#include &lt;Adafruit_GFX.h&gt;\n#include \"Adafruit_LEDBackpack.h\"\n\nAdafruit_8x8matrix matrix = Adafruit_8x8matrix();\n\nvoid setup() {\n  Serial.begin(9600);\n  Serial.println(\"8x8 LED Matrix Test\");\n\n  matrix.begin(0x70);  // pass in the address\n}\n\nstatic const uint8_t PROGMEM\n  smile_bmp[] =\n  { B00111100,\n    B01000010,\n    B10100101,\n    B10000001,\n    B10100101,\n    B10011001,\n    B01000010,\n    B00111100 },\n  neutral_bmp[] =\n  { B00111100,\n    B01000010,\n    B10100101,\n    B10000001,\n    B10111101,\n    B10000001,\n    B01000010,\n    B00111100 },\n  frown_bmp[] =\n  { B00111100,\n    B01000010,\n    B10100101,\n    B10000001,\n    B10011001,\n    B10100101,\n    B01000010,\n    B00111100 };\n\nvoid loop() {\n  matrix.clear();\n  matrix.drawBitmap(0, 0, smile_bmp, 8, 8, LED_ON);\n  matrix.writeDisplay();\n  delay(500);\n\n  matrix.clear();\n  matrix.drawBitmap(0, 0, neutral_bmp, 8, 8, LED_ON);\n  matrix.writeDisplay();\n  delay(500);\n\n  matrix.clear();\n  matrix.drawBitmap(0, 0, frown_bmp, 8, 8, LED_ON);\n  matrix.writeDisplay();\n  delay(500);\n\n  matrix.clear();      // clear display\n  matrix.drawPixel(0, 0, LED_ON);  \n  matrix.writeDisplay();  // write the changes we just made to the display\n  delay(500);\n\n  matrix.clear();\n  matrix.drawLine(0,0, 7,7, LED_ON);\n  matrix.writeDisplay();  // write the changes we just made to the display\n  delay(500);\n\n  matrix.clear();\n  matrix.drawRect(0,0, 8,8, LED_ON);\n  matrix.fillRect(2,2, 4,4, LED_ON);\n  matrix.writeDisplay();  // write the changes we just made to the display\n  delay(500);\n\n  matrix.clear();\n  matrix.drawCircle(3,3, 3, LED_ON);\n  matrix.writeDisplay();  // write the changes we just made to the display\n  delay(500);\n\n  matrix.setTextSize(1);\n  matrix.setTextWrap(false);  // we dont want text to wrap so it scrolls nicely\n  matrix.setTextColor(LED_ON);\n  for (int8_t x=0; x&gt;=-36; x--) {\n    matrix.clear();\n    matrix.setCursor(x,0);\n    matrix.print(\"Hello\");\n    matrix.writeDisplay();\n    delay(100);\n  }\n    for (int8_t x=0; x&gt;=-36; x--) {\n    matrix.clear();\n    matrix.setCursor(x,0);\n    matrix.print(\"world\");\n    matrix.writeDisplay();\n    delay(100);\n  }\n  matrix.setRotation(3);\n  //for (int8_t x=7; x&gt;=-36; x--) \n  for (int8_t x=0; x&gt;=-36; x--)\n  {\n    matrix.clear();\n    matrix.setCursor(x,0);\n    matrix.print(\"hello\");\n    matrix.writeDisplay();\n    delay(100);\n  }\n    for (int8_t x=0; x&gt;=-36; x--)\n  {\n    matrix.clear();\n    matrix.setCursor(x,0);\n    matrix.print(\"elecrow\");\n    matrix.writeDisplay();\n    delay(100);\n  }\n  matrix.setRotation(0);\n}\n</code></pre> <p>5. Then you can see the pattern of 8*8 LED matrix, as shown in the figure below:</p> <p></p> <p></p> <p></p>"},{"location":"Products/Crowtail/crowtail-nano-base-board.html","title":"Crowtail- Nano Base Board","text":""},{"location":"Products/Crowtail/crowtail-nano-base-board.html#description","title":"Description","text":"<p>The Crowtail- nano Base Shield plugs into Crowduino Nano module and play the foundation of the Crowtail system. ALL I/O ports of the Crowduino Nano are exposed and adapted into Crowtail connectors which include digital I/O,analog I/O,and specialized ports(I2C\uff0cUART).</p> <p>Model: CT0054NBB</p> <p></p>"},{"location":"Products/Crowtail/crowtail-nano-base-board.html#features","title":"Features","text":"<ul> <li>Compatible with Crowduino Nano Module.</li> <li>3 Digital connectors (D2-D4)</li> <li>3 Analog connectors (A0-A2)</li> <li>1 I2C sockets</li> <li>NO SPI socket</li> <li>UART connector</li> <li>Stacking connectors</li> <li>Two power supply mode</li> <li>Dimensions(mm):61.6(L)x20.0(W)x18.2(H)</li> </ul>"},{"location":"Products/Crowtail/crowtail-nano-base-board.html#interface-function","title":"Interface Function","text":"<p>The purpose of the base shield is to allow easy connection of any microprocessor input and output pins to the Crowtail units. For a more detailed examination of the Base Board, please refer to the following diagram: </p> <p>D port:Digital I/O port.</p> <p>A port:Analog I/O port.</p> <p>U port:UART port.</p> <p>I port:IIC port.</p> <p>This is a pecular interface logo of all the Crowtail products. It may you easy to differentiate which module is connect to the digital port or other port.</p>"},{"location":"Products/Crowtail/crowtail-nano-base-board.html#resources","title":"Resources","text":"<ul> <li>Crowtail-Nano Base Shield eagle files</li> </ul>"},{"location":"Products/Crowtail/crowtail-rotation-angle-sensor.html","title":"Crowtail- Rotation Angle Sensor","text":""},{"location":"Products/Crowtail/crowtail-rotation-angle-sensor.html#description","title":"Description","text":"<p>This rotation Angle sensor using the SV01 series of PSV01A, excellent resistance materials and high reliability wiper achieves 1M cycles\uff0cdust-proof construction protects the interior from dust, which maintains stable characteristics.</p> <p>Model: CRT03345R</p> <p></p>"},{"location":"Products/Crowtail/crowtail-rotation-angle-sensor.html#features","title":"Features","text":"<ul> <li>Dust-proof construction protects the interior from dust, which maintains stable characteristics.</li> <li>Easy-to-use Crowtail compatible interface</li> <li>Supports analog interface</li> <li>D formation thru-hole rotor enables selection of any kind of gear shape.</li> </ul>"},{"location":"Products/Crowtail/crowtail-rotation-angle-sensor.html#specification","title":"Specification","text":"<p>Category: Sensors, Transducers</p> <p>Family: Position Sensors - Angle, Linear Position Measuring</p> <p>Series: SV01</p> <p>For Measuring: Rotary Position</p> <p>Technology: Resistive</p> <p>Resistance (Ohms): 10k</p> <p>Rotation Angle - Electrical, Mechanical: 0\u00b0~333.3\u00b0</p> <p>Actuator Type: Hole for Shaft</p> <p>Linearity: \u00b12%</p> <p>Resistance Tolerance: \u00b130%</p> <p>Mounting Type: Surface Mount</p> <p>Termination Style: SMD (SMT) Tab</p> <p>Operating Temperature: -40\u00b0C ~ 85\u00b0C</p> <p>Dimensions(mm):40.0(L)x20.0(W)x6.8(H)</p>"},{"location":"Products/Crowtail/crowtail-rotation-angle-sensor.html#usage","title":"Usage","text":"<p>1. Plug it onto the Analog port 0 of Crowtail - Base Shield using a Crowtail cable.</p> <p>2.Plug the Crowtail - Base Shield onto Arduino.</p> <p>3. Connect Arduino to PC by using a USB cable.</p> <p></p> <p>4.Copy and paste code below to a new Arduino sketch, and upload it to your Arduino.</p> <pre><code>const int analogInPin = A0;  // Analog input pin that the potentiometer is attached to\n\nint sensorValue = 0; \nvoid setup() {\n  // initialize serial communications at 9600 bps:\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  // read the analog in value:\n  sensorValue = analogRead(analogInPin);\n    Serial.println(sensorValue);\n\n  delay(1500);\n}\n</code></pre> <p>5.When you upload the code complete,you can see the result via the serial port debug window.</p> <p></p>"},{"location":"Products/Crowtail/crowtail-weight-sensor.html","title":"Crowtail-Weight Sensor","text":""},{"location":"Products/Crowtail/crowtail-weight-sensor.html#description","title":"Description","text":"<p>This is a crowtail series of load cell kits, by using it, you can DIY their own electronic scales, and it is compatible with Arduino, it is also very convenient to use, in your Arduino project, and it can serve as a good Own role. It uses the HX711 amplifier, HX711 is a precision 24-bit analog-to-digital converter (ADC) designed for weighING scales and industrial control applications to interface directly with a bridge sensor and the measurement range of weight sensor is 0-3000g</p> <p>Model: CRT94077W </p> <p></p>"},{"location":"Products/Crowtail/crowtail-weight-sensor.html#features","title":"Features","text":"<ul> <li>Crowtail interface</li> <li>Low standby current</li> <li>High accuracy</li> </ul>"},{"location":"Products/Crowtail/crowtail-weight-sensor.html#specifications","title":"Specifications","text":"Item Value Working Voltage DC 5V Working Current 400mA Standby current 200uA Operation temperature range -40\u2103 to +85\u2103 Weight sensor capacity 3kg Dimensions(mm) 40.0(L)x20.0(W)x6.8(H)"},{"location":"Products/Crowtail/crowtail-weight-sensor.html#interface","title":"Interface","text":""},{"location":"Products/Crowtail/crowtail-weight-sensor.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Crowtail/crowtail-weight-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Crowtail/crowtail-weight-sensor.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs:</p> Crowduino Uno Base Shield Crowtail-Weight Sensor Get one now Get one now Get one now <p>STEP2 Plug Crowtail-Base Shield into Crowduino Uno; STEP3 Set Crowtail-Weight Sensor to I\u00b2C port of Crowtail-Base Shield; STEP4 Plug acrylic board to ABCD interface of Crowtail-Weight Sensor; STEP5 Connect Crowduino Uno to PC via a Mini USB cable.  </p> NOTE If we don't have Crowtail Base Shield, We also can directly connect this module to Crowduino Uno as below. Crowduino Uno Weight Sensor A4(J7) SDA A5(J7) SCL 5V VCC GND GND"},{"location":"Products/Crowtail/crowtail-weight-sensor.html#software","title":"Software","text":"<p>STEP 1.Download program filesWeightSensorProgramFiles.zip STEP2 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201d from the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure.  STEP3 Install Library: Unzip the WeightSensorProgramFiles.zip file and copy folder hx711 to the Libraries directory under the Arduino installation directory  STEP4 Load the program file SerialScale.ino to Arduino IDE  </p> <pre><code>// Hx711.DOUT - pin #A1\n// Hx711.SCK - pin #A0\n\n#include \"HX711.h\"\n\n//Hx711 scale(SCL, SDA);\n\nvoid setup() {\n  Init_Hx711();\n    Get_Maopi();   //clear the weight \n        delay(3000);\n\n  Serial.begin(9600);\n\n}\n\nvoid loop() {\n\n  Serial.print(abs(Get_Weight()), 1);\n  Serial.println(\" g\");\n\n  //delay(10);\n}\n</code></pre> <p>STEP5 Click the  to upload the code to the Crowduino board STEP6 After the program is burned, open the serial port monitor of Arduino IDE, set baud rate to 9600, and put no weight on the acrylic board, then the serial port print will be 0G, as shown in the figure:  STEP7 Put the weight on the acrylic plate, and the serial port will print the corresponding weight. For example, if I put a 50g weight, the serial port will print 50g, and the serial port print value is consistent with the actual value, as shown in the figure: </p>"},{"location":"Products/Crowtail/crowtail-weight-sensor.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Crowtail/crowtail-weight-sensor.html#resources","title":"Resources","text":"<p>Crowtail-Weight_Sensor-V2.0-Eagle.zip WeightSensorProgramFiles.zip</p>"},{"location":"Products/Display/09622-oled-128x64--blue.html","title":"0.96\" OLED 128x64- Blue","text":""},{"location":"Products/Display/09622-oled-128x64--blue.html#introduction","title":"Introduction","text":"<p>This OLED display module is small, only 0.96\u201d diagonal, it is made of 128x64 individual blue OLED pixels, each one is turn on or off by the controller chip. It works without backlight, that is, in a dark environment, OLED display is higher compared to that of LCD display, you will like the miniature for its crispness. The Driver chip of this OLED is SSD1306, which is compatible with IIC or SPI communication. So this module can be controlled by SPI or I2C. There are 2 resistors at the back of the module and sick-screen to remind you how to set the communication mode, the default mode is 4-wires SPI mode. That is, except the VCC and GND, 4 wires would be needed when using 4-wires SPI mode. You can also set to the I2C mode, in which mode 2 control wires is needed. There is also a simple switch-cap charge pump that turns 5v into a high voltage drive for the OLEDs, making this module the easiest ways to get an OLED into your project. Model: DOL12864O </p> <p> </p>"},{"location":"Products/Display/09622-oled-128x64--blue.html#specification","title":"Specification","text":"<ul> <li>Diagonal Screen Size\uff1a0.96\"</li> <li>Number of Pixels\uff1a128 \u00d7 64</li> <li>Color Depth\uff1aMonochrome (Blue)</li> <li>Dimension\uff1a27.8 x27.3x 4.3 mm</li> <li>Working Voltage: 3.3~ 5V DC</li> <li>Power: 0.06W Max</li> <li>Viewing Angle: &gt;160 Degree</li> <li>Duty\uff1a1/32</li> <li>Brightness ( cd/m2)\uff1a150 (Typ) @ 5V</li> <li>Interface\uff1a4-wire SPI/3-wire SPI/I2C Selectable</li> </ul>"},{"location":"Products/Display/09622-oled-128x64--blue.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p>Connect the OLED to the Crowduino.</p> <p></p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Download the library OLED library;Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;SSD1306-&gt;OLED.</p> <p></p> <p>5.Upload the Code,you shoule see the display of OLED.</p> <p></p>"},{"location":"Products/Display/09622-oled-128x64--blue.html#resource","title":"Resource","text":"<ul> <li>OLED Demo code</li> </ul>"},{"location":"Products/Display/13-inch-ips-tft-lcd-display-st7789.html","title":"1.3 inch IPS TFT LCD Display ST7789","text":""},{"location":"Products/Display/13-inch-ips-tft-lcd-display-st7789.html#discription","title":"Discription","text":"<p>This is a 1.3 inch display screen with a resolution of 240 (RGB) x240. It is an IPS full view LCD display panel so the color looks great in any direction. The drive IC is ST7789, and the universal 7-pin SPI interface is used.</p> <p>The bottom has an SD card slot, which makes it easy to load full-color bitmaps from the MicroSD card in FAT16/FAT32 format.</p> <p>Support the main control MCU such as ESP32/ESP8266/Arduino/STM32.</p>"},{"location":"Products/Display/13-inch-ips-tft-lcd-display-st7789.html#specification","title":"Specification","text":"<ul> <li>1.3 inch TFT LCD Display</li> <li>Built-in microSD slot</li> <li>Operating Voltage: 3.3V</li> <li>Backlight: 2-Chip white LED, Vf=3.2V(If=20mA)</li> <li>Resolution: 240 (RGB) x240</li> <li>Interface: SPI serial</li> <li>Drive IC: ST7789</li> <li>Operating Temperature: -20\u2103~+70\u2103</li> <li>Storage Temperature: -30\u2103~+80\u2103</li> <li>Dimension: 35.8mm x 35.8mm x 5.3mm</li> <li>Weight: 7.6g</li> </ul>"},{"location":"Products/Display/13-inch-ips-tft-lcd-display-st7789.html#pin-discription","title":"Pin Discription","text":""},{"location":"Products/Display/13-inch-ips-tft-lcd-display-st7789.html#usage","title":"Usage","text":""},{"location":"Products/Display/13-inch-ips-tft-lcd-display-st7789.html#hardware-connection","title":"Hardware Connection","text":"<p>STEP1 Prepare the below stuffs:  </p> Crowduino Uno 1.3 inch IPS TFT LCD Display [[File:|300px] Get one now [Get one now] <p>STEP2 Connect wires according to the following wiring diagram </p>"},{"location":"Products/Display/13-inch-ips-tft-lcd-display-st7789.html#software","title":"Software","text":"<p>STEP1 Download Adafruit-ST7735-Library and Adafruit-GFX-Library STEP2 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201d from the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure.  STEP3 Install Library: Unzip the files and copy them to the Libraries directory under the Arduino installation directory Note: Please change \"-\" in the folder name to \"_\", and delete\"_ master\" </p> <p>STEP4 Open Arduino IDE, click \"File\"--&gt;\"Example\"--&gt;\"Adafruit ST7735 and ST7789 Library\"--&gt;\"graphicstest_st7789\" to load the code  </p> <p>STEP5 Click the  to upload the code to the Crowduino board </p> <p>STEP6 The graphs will show on display </p>"},{"location":"Products/Display/13-inch-ips-tft-lcd-display-st7789.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Display/1442727-128x-128-tft-lcd-with-spi-interface.html","title":"1.44'' 128x 128 TFT LCD with SPI Interface","text":""},{"location":"Products/Display/1442727-128x-128-tft-lcd-with-spi-interface.html#introduction","title":"Introduction","text":"<p>This Color TFT LCD display has 128 x 128 resolution and 262 color, it uses SPI interface to communicate with controller such Arduino, it is the best upgrading of the Nokia5110. Model: DL144128TF </p> <p></p> <p></p>"},{"location":"Products/Display/1442727-128x-128-tft-lcd-with-spi-interface.html#features","title":"Features","text":"<ul> <li>Size: 1.44 inch</li> <li>Interface:SPI</li> <li>Resolution: 128*128</li> <li>Visual area: 1:1 square</li> <li>TFT color screen, the effect is far better than other small CSTN screen</li> <li>Drive IC: ILI9163</li> <li>Fully compatible and alternative 5110 interface</li> <li>Onboard LDO, support 5V/3.3V input voltage, the LED backlight, 3.3V input</li> </ul>"},{"location":"Products/Display/1442727-128x-128-tft-lcd-with-spi-interface.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p> </p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Download the library TFT_ILI9163C library;Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;TFT_ILI9163C-&gt;test.</p> <pre><code>#include &lt;SPI.h&gt;\n#include &lt;Adafruit_GFX.h&gt;\n#include &lt;TFT_ILI9163C.h&gt;\n\n// All wiring required, only 3 defines for hardware SPI on 328P\n#define __DC 9\n#define __CS 10\n// MOSI --&gt; (SDA) --&gt; D11\n#define __RST 12\n// SCLK --&gt; (SCK) --&gt; D13\n\n// Color definitions\n#define BLACK   0x0000\n#define BLUE    0x001F\n#define RED     0xF800\n#define GREEN   0x07E0\n#define CYAN    0x07FF\n#define MAGENTA 0xF81F\n#define YELLOW  0xFFE0  \n#define WHITE   0xFFFF\n\nTFT_ILI9163C tft = TFT_ILI9163C(__CS, __DC, __RST);\n\nvoid setup() {\n  tft.begin();\n}\n\nvoid loop(){\n  testLines(random(0x00ff,0xffff));\n  delay(100);\n  testText();\n  delay(500);\n}\n\n\nunsigned long testText() {\n  tft.fillScreen();\n  unsigned long start = micros();\n  tft.setCursor(0, 0);\n  tft.setTextColor(WHITE);  \n  tft.setTextSize(1);\n  tft.println(\"Hello World!\");\n  tft.setTextColor(YELLOW); \n  tft.setTextSize(2);\n  tft.println(1234.56);\n  tft.setTextColor(RED);    \n  tft.setTextSize(3);\n  tft.println(0xDEAD, HEX);\n  tft.println();\n  tft.setTextColor(GREEN);\n  tft.setTextSize(4);\n  tft.println(\"Hello\");\n  return micros() - start;\n}\n\nunsigned long testLines(uint16_t color) {\n  tft.fillScreen();\n  unsigned long start, t;\n  int           x1, y1, x2, y2,\n  w = tft.width(),\n  h = tft.height();\n  tft.fillScreen();\n  x1 = y1 = 0;\n  y2    = h - 1;\n  start = micros();\n  for(x2=0; x2&lt;w; x2+=6) tft.drawLine(x1, y1, x2, y2, color);\n  x2    = w - 1;\n  for(y2=0; y2&lt;h; y2+=6) tft.drawLine(x1, y1, x2, y2, color);\n  t     = micros() - start; // fillScreen doesn't count against timing\n  tft.fillScreen();\n  x1    = w - 1;\n  y1    = 0;\n  y2    = h - 1;\n  start = micros();\n  for(x2=0; x2&lt;w; x2+=6) tft.drawLine(x1, y1, x2, y2, color);\n  x2    = 0;\n  for(y2=0; y2&lt;h; y2+=6) tft.drawLine(x1, y1, x2, y2, color);\n  t    += micros() - start;\n  tft.fillScreen();\n  x1    = 0;\n  y1    = h - 1;\n  y2    = 0;\n  start = micros();\n  for(x2=0; x2&lt;w; x2+=6) tft.drawLine(x1, y1, x2, y2, color);\n  x2    = w - 1;\n  for(y2=0; y2&lt;h; y2+=6) tft.drawLine(x1, y1, x2, y2, color);\n  t    += micros() - start;\n  tft.fillScreen();\n  x1    = w - 1;\n  y1    = h - 1;\n  y2    = 0;\n  start = micros();\n  for(x2=0; x2&lt;w; x2+=6) tft.drawLine(x1, y1, x2, y2, color);\n  x2    = 0;\n  for(y2=0; y2&lt;h; y2+=6) tft.drawLine(x1, y1, x2, y2, color);\n  return micros() - start;\n}\n</code></pre> <p>5.Upload the Code,you shoule see the display of LCD.</p> <p></p>"},{"location":"Products/Display/1442727-128x-128-tft-lcd-with-spi-interface.html#resource","title":"Resource","text":"<ul> <li>TFT_ILI9163C library</li> </ul>"},{"location":"Products/Display/1602-lcd-display-module.html","title":"1602 LCD Display Module","text":""},{"location":"Products/Display/1602-lcd-display-module.html#description","title":"Description","text":"<p>This is a basic 16 character by 2 line display. Black text on Green/Blue background. Interface code is freely available. You will need 7 or 11 general I/O pins to interface to this LCD screen. Includes LED backlight.</p> <p>Model:CT0001BS Model:DLC01602B </p>"},{"location":"Products/Display/1602-lcd-display-module.html#pin-mapping-of-lcd-module","title":"pin mapping of LCD module","text":"Pin Number Sign Remark Pin Number Sign Remark 1 VSS GND 9 D2 Data I/O 2 VDD VCC 10 D3 Data I/O 3 VL Contrast ratio 11 D4 Data I/O 4 RS Data/Command Choice 12 D5 Data I/O 5 R/W Write/Read Choice 13 D6 Data I/O 6 E Enble 14 D7 Data I/O 7 D0 Data I/O 15 BLA Back light anode 8 D1 Data I/O 16 BLK Back light cathanode"},{"location":"Products/Display/1602-lcd-display-module.html#how-to-control","title":"How to control","text":""},{"location":"Products/Display/1602-lcd-display-module.html#hardware-install","title":"Hardware Install","text":"<p>Connect the LCD module with Arduino following picture.</p> <p></p>"},{"location":"Products/Display/1602-lcd-display-module.html#software-upload","title":"Software upload","text":"<p>Upload the following code to the Arduino or download the Arduino library</p> <pre><code>int LCD1602_RS=12;   \nint LCD1602_RW=11;   \nint LCD1602_EN=10;   \nint DB[] = { 6, 7, 8, 9};\nchar str1[]=\"Welcome to\";\nchar str2[]=\"Elecrow\";\nchar str3[]=\"this is the\";\nchar str4[]=\"4-bit interface\";\n\nvoid LCD_Command_Write(int command)\n{\n int i,temp;\n digitalWrite( LCD1602_RS,LOW);\n digitalWrite( LCD1602_RW,LOW);\n digitalWrite( LCD1602_EN,LOW);\n\n temp=command &amp; 0xf0;\n for (i=DB[0]; i &lt;= 9; i++)\n {\n   digitalWrite(i,temp &amp; 0x80);\n   temp &lt;&lt;= 1;\n }\n\n digitalWrite( LCD1602_EN,HIGH);\n delayMicroseconds(1);\n digitalWrite( LCD1602_EN,LOW);\n\n temp=(command &amp; 0x0f)&lt;&lt;4;\n for (i=DB[0]; i &lt;= 9; i++)\n {\n   digitalWrite(i,temp &amp; 0x80);\n   temp &lt;&lt;= 1;\n }\n\n digitalWrite( LCD1602_EN,HIGH);\n delayMicroseconds(1); \n digitalWrite( LCD1602_EN,LOW);\n}\n\nvoid LCD_Data_Write(int dat)\n{\n int i=0,temp;\n digitalWrite( LCD1602_RS,HIGH);\n digitalWrite( LCD1602_RW,LOW);\n digitalWrite( LCD1602_EN,LOW);\n\n temp=dat &amp; 0xf0;\n for (i=DB[0]; i &lt;= 9; i++)\n {\n   digitalWrite(i,temp &amp; 0x80);\n   temp &lt;&lt;= 1;\n }\n\n digitalWrite( LCD1602_EN,HIGH);\n delayMicroseconds(1);\n digitalWrite( LCD1602_EN,LOW);\n\n temp=(dat &amp; 0x0f)&lt;&lt;4;\n for (i=DB[0]; i &lt;= 9; i++)\n {\n   digitalWrite(i,temp &amp; 0x80);\n   temp &lt;&lt;= 1;\n }\n\n digitalWrite( LCD1602_EN,HIGH);\n delayMicroseconds(1); \n digitalWrite( LCD1602_EN,LOW);\n}\n\nvoid LCD_SET_XY( int x, int y )\n{\n  int address;\n  if (y ==0)    address = 0x80 + x;\n  else          address = 0xC0 + x;\n  LCD_Command_Write(address); \n}\n\nvoid LCD_Write_Char( int x,int y,int dat)\n{\n  LCD_SET_XY( x, y ); \n  LCD_Data_Write(dat);\n}\n\nvoid LCD_Write_String(int X,int Y,char *s)\n{\n    LCD_SET_XY( X, Y );    //\u8bbe\u7f6e\u5730\u5740 \n    while (*s)             //\u5199\u5b57\u7b26\u4e32\n    {\n      LCD_Data_Write(*s);   \n      s ++;\n    }\n}\n\nvoid setup (void) \n{\n  int i = 0;\n  for (i=6; i &lt;= 12; i++) \n   {\n     pinMode(i,OUTPUT);\n   }\n  delay(100);\n  LCD_Command_Write(0x28);//4\u7ebf 2\u884c 5x7\n  delay(50); \n  LCD_Command_Write(0x06);\n  delay(50); \n  LCD_Command_Write(0x0c);\n  delay(50); \n  LCD_Command_Write(0x80);\n  delay(50); \n  LCD_Command_Write(0x01);\n  delay(50); \n\n}\n\nvoid loop (void)\n{\n   LCD_Command_Write(0x01);\n   delay(50);\n   LCD_Write_String(3,0,str1);//\u7b2c1\u884c\uff0c\u7b2c4\u4e2a\u5730\u5740\u8d77\n   delay(50);\n   LCD_Write_String(4,1,str2);//\u7b2c2\u884c\uff0c\u7b2c2\u4e2a\u5730\u5740\u8d77\n   delay(5000);\n   LCD_Command_Write(0x01);\n   delay(50);\n   LCD_Write_String(0,0,str3);\n   delay(50);\n   LCD_Write_String(0,1,str4);\n   delay(5000);\n\n}\n</code></pre>"},{"location":"Products/Display/1602-lcd-display-module.html#resource","title":"Resource","text":"<p>Arduino library</p>"},{"location":"Products/Display/16x16-led-display-module.html","title":"16x16 LED Display Module","text":""},{"location":"Products/Display/16x16-led-display-module.html#description","title":"Description","text":"<p>This 16x16 Display module uses the 74HC138 and 74HC595 to decode and drive 4 8x8 LED modules to create an even bigger 16x16 LED display module. Detailed Demos based on Arduino help you understanding and learning how to use this module and thus to integrate it to your own applications\u3002</p> <p>Model:DLD1616LED</p> <p></p>"},{"location":"Products/Display/16x16-led-display-module.html#features","title":"Features","text":"<ul> <li>16x16 LED Display</li> <li>Color: Red</li> <li>Support the 128x64 LCD Display</li> <li>Cascadable</li> </ul>"},{"location":"Products/Display/16x16-led-display-module.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p> </p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Copy the below code to you new skecth,then upload it.</p> <pre><code>#include &lt;Arduino.h&gt;\n\n//IO    \n#define LEDARRAY_D 2\n#define LEDARRAY_C 3\n#define LEDARRAY_B 4\n#define LEDARRAY_A 5\n#define LEDARRAY_G 6\n#define LEDARRAY_DI 7\n#define LEDARRAY_CLK 8\n#define LEDARRAY_LAT 9\n\n\nunsigned char Display_Buffer[2];\nconst unsigned char  Word1[1][32] = \n{\n\n0xFF,0xFF,0xFF,0xE1,0xC0,0x80,0x80,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF,0xFF,\n0xFF,0xFF,0xFF,0x87,0x03,0x01,0x01,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF,0xFF,//heart-shaped\n\n};\n\nconst unsigned char  Init_Display[1][32] = \n{\n    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n};\n\nvoid setup()\n{\n    pinMode(LEDARRAY_D, OUTPUT); \n    pinMode(LEDARRAY_C, OUTPUT);\n    pinMode(LEDARRAY_B, OUTPUT);\n    pinMode(LEDARRAY_A, OUTPUT);\n    pinMode(LEDARRAY_G, OUTPUT);\n    pinMode(LEDARRAY_DI, OUTPUT);\n    pinMode(LEDARRAY_CLK, OUTPUT);\n    pinMode(LEDARRAY_LAT, OUTPUT);\n\n    Display(Init_Display);\n}\n\nvoid loop()\n{\n    Display(Word1); \n}\n\n\n\n//************************************************************\n//num is number  dat[][32] is the name of the font\n//*************************************************************\nvoid Display(const unsigned char dat[][32])                 \n{\n    unsigned char i;\n\n    for( i = 0\u00a0; i &lt; 16\u00a0; i++ )\n    {\n        digitalWrite(LEDARRAY_G, HIGH);     \n\n        Display_Buffer[0] = dat[0][i];      \n        Display_Buffer[1] = dat[0][i+16];\n\n        Send(Display_Buffer[1]);\n        Send(Display_Buffer[0]);\n\n        digitalWrite(LEDARRAY_LAT, HIGH);                   \n\n        digitalWrite(LEDARRAY_LAT, LOW);\n        delayMicroseconds(1);\n\n        Scan_Line(i);                           \n\n        digitalWrite(LEDARRAY_G, LOW);\n\n        delayMicroseconds(100);;                            \n    }   \n}\n\n\nvoid Scan_Line( unsigned char m)\n{   \n    switch(m)\n    {\n        case 0:         \n            digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, LOW);                    \n            break;\n        case 1:                 \n            digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, HIGH);       \n            break;\n        case 2:                 \n            digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, LOW);       \n            break;\n        case 3:                 \n            digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, HIGH);      \n            break;\n        case 4:\n            digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, LOW);       \n            break;\n        case 5:\n            digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, HIGH);      \n            break;\n        case 6:\n            digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, LOW);      \n            break;\n        case 7:\n            digitalWrite(LEDARRAY_D, LOW);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, HIGH);         \n            break;\n        case 8:\n            digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, LOW);       \n            break;\n        case 9:\n            digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, HIGH);      \n            break;  \n        case 10:\n            digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, LOW);      \n            break;\n        case 11:\n            digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, LOW);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, HIGH);         \n            break;\n        case 12:\n            digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, LOW);      \n            break;\n        case 13:\n            digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, LOW);digitalWrite(LEDARRAY_A, HIGH);         \n            break;\n        case 14:\n            digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, LOW);         \n            break;\n        case 15:\n            digitalWrite(LEDARRAY_D, HIGH);digitalWrite(LEDARRAY_C, HIGH);digitalWrite(LEDARRAY_B, HIGH);digitalWrite(LEDARRAY_A, HIGH);        \n            break;\n        default\u00a0: break;    \n    }\n}\n\n\nvoid Send( unsigned char dat)\n{\n    unsigned char i;\n    digitalWrite(LEDARRAY_CLK, LOW);\n    delayMicroseconds(1);;  \n    digitalWrite(LEDARRAY_LAT, LOW);\n    delayMicroseconds(1);;\n\n    for( i = 0\u00a0; i &lt; 8\u00a0; i++ )\n    {\n        if( dat&amp;0x01 )\n        {\n            digitalWrite(LEDARRAY_DI, HIGH);    \n        }\n        else\n        {\n            digitalWrite(LEDARRAY_DI, LOW);\n        }\n\n        delayMicroseconds(1);\n        digitalWrite(LEDARRAY_CLK, HIGH);               \n            delayMicroseconds(1);\n        digitalWrite(LEDARRAY_CLK, LOW);\n            delayMicroseconds(1);       \n        dat &gt;&gt;= 1;\n\n    }           \n}\n</code></pre> <p>4.Upload the Code,then you shoule see the 16x16 LED display.</p> <p></p>"},{"location":"Products/Display/16x16-led-display-module.html#resource","title":"Resource","text":"<ul> <li>16x_16_LED library</li> </ul>"},{"location":"Products/Display/2-inch-ips-module.html","title":"2 inch IPS Module","text":""},{"location":"Products/Display/2-inch-ips-module.html#description","title":"Description","text":"<p>This product is a 2.0inch IPS display module,it has a resolution of 320x240.it uses a 4-wire SPI communication method and the inner IC is ST7789.The module contains an LCD display and PCB backboard. </p>"},{"location":"Products/Display/2-inch-ips-module.html#features","title":"Features","text":"<ul> <li>2.0-inch color screen,support 65K color display,display rich colors</li> <li>320X240 resolution, clear display</li> <li>IPS full view panel, super wide visual range</li> <li>Using the 4-line-SPI serial bus, it only takes a few IOs to illuminate the display</li> <li>Provide a rich STM32, C51 and MSP430 sample program</li> <li>Military-grade process standards, long-term stable work</li> <li>Provide underlying driver technical support</li> </ul>"},{"location":"Products/Display/2-inch-ips-module.html#specifications","title":"Specifications","text":"Item Value Display Color RGB 65K color Size 291(Length)*190(Width)*46(Height)mm Screen Size 2.0(inch) Type IPS Driver IC ST7789 Power Supply DC 12V 2A Resolution 320*240 (Pixel) Module Interface 4-line SPI interface Active Area (AA area) 30.60x40.80 (mm) Touch Screen Unsupport Module PCB Size 36.48x61.12 (mm) Angle of view all angle Operating Temperature -10\u2103~60\u2103 Storage Temperature -20\u2103~70\u2103 VCC power voltage 3.3V Rough Weight(Package containing) 15g"},{"location":"Products/Display/2-inch-ips-module.html#interface","title":"Interface","text":""},{"location":"Products/Display/2-inch-ips-module.html#pin-map","title":"Pin Map","text":"Number Pin Name Description 1 GND LCD Power ground 2 VCC LCD power supply(3.3V) 3 SCL LCD SPI bus clock signal 4 SDA LCD SPI bus write data signal 5 RES LCD reset control signal(Low level reset) 6 DC LCD register / data selection control signal (Low level: register, high level: data) 7 CS LCD chip select control signal (low level enable) 8 BLK LCD backlight control signal (high level lighting, if you do not need control, please connect 3.3V)"},{"location":"Products/Display/2-inch-ips-module.html#hardware-configuration","title":"Hardware Configuration","text":"<p>The LCD module hardware circuit comprises two parts: an LCD display control circuit and a backlight control circuit. The LCD display control circuit is used to control the pins of the LCD, including control pins and data transfer pins. if the backlight is not required to be be on and off, can be directly connected to the 3.3V if the backlight is not required to be be on and off, can be directly connected to the 3.3V power supply.   </p>"},{"location":"Products/Display/2-inch-ips-module.html#usage","title":"Usage","text":""},{"location":"Products/Display/2-inch-ips-module.html#hardware-connection","title":"Hardware Connection","text":"Crowduino Uno 2 inch IPS Module GND GND 5V VCC 13 SCL 11 SDA A4 RES A3 DC A2 CS A0 BLK"},{"location":"Products/Display/2-inch-ips-module.html#software","title":"Software","text":"<p>STEP1 Download 2.0inch_SPI_Arduino_Demo.zip STEP2 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201d from the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure. </p> <p>STEP3 Install libraries :Unzip Install libraries.zip and copy folder \"LCDWIKI_GUI\" and \"LCDWIKI_SPI\" to the libraries directory under the Arduino installation directory  STEP4 Load the program to Arduino IDE   STEP5 Click the  to upload the code to the Crowduino board</p> <p>STEP6 After the program is downloaded, run it directly and observe the running status. If it can be displayed normally, the program runs successfully. </p>"},{"location":"Products/Display/2-inch-ips-module.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Display/2-inch-ips-module.html#resources","title":"Resources","text":"<p>ST7789VW_datasheet.pdf  2.0inch_SPI_Arduino_Demo.zip </p>"},{"location":"Products/Display/29-inch-e-paper-module-three-color-red-black-white.html","title":"2.9 inch e-Paper Module Three Color-Red Black White","text":""},{"location":"Products/Display/29-inch-e-paper-module-three-color-red-black-white.html#introduction","title":"Introduction","text":"<p>Note: The raw panel require a driver board, If you are the first time use this e-Paper, we recommend you to buy the HAT version or buy more one driver hat for easy use, otherwise you need to make the driver board yourself. And this instruction is based on the version with PCB or driver board.</p> <p>296x128, 2.9inch E-Ink display module, three-color, SPI interface</p> <p>Model: RAP20129H</p>"},{"location":"Products/Display/29-inch-e-paper-module-three-color-red-black-white.html#interface","title":"Interface","text":""},{"location":"Products/Display/29-inch-e-paper-module-three-color-red-black-white.html#working-principle","title":"Working principle","text":"<p>1.Introduction</p> <p>This product is an E-paper device adopting the image display technology of Microencapsulated Electrophoretic Display, MED. The initial approach is to create tiny spheres, in which the charged color pigments are suspending in the transparent oil and would move depending on the electronic charge. The E-paper screen display patterns by reflecting the ambient light, so it has no background light requirement. (Note that the e-Paper cannot support updating directly under sunlight)</p> <p>2.Communication protocol</p> <p></p> <p>Note: Different from the traditional SPI protocol, the data line from the slave to the master is hidden since the device only has display requirement.</p> <ul> <li>CS is slave chip select, when CS is low, the chip is enabled.</li> <li>DC is data/command control pin, when DC = 0, write command, when DC = 1, write data.</li> <li>SCLK is the SPI communication clock.</li> <li>SDIN is the data line from the master to the slave in SPI communication.</li> </ul> <p>SPI communication has data transfer timing, which is combined by CPHA and CPOL.</p> <p>1.CPOL determines the level of the serial synchronous clock at idle state. When CPOL = 0, the level is Low. However, CPOL has little effect to the transmission.</p> <p>2.CPHA determines whether data is collected at the first clock edge or at the second clock edge of serial synchronous clock; when CPHL = 0, data is collected at the first clock edge.</p> <ul> <li>There are 4 SPI communication modes. SPI0 is commonly used, in which CPHL = 0, CPOL = 0.</li> </ul> <p>As you can see from the figure above, data transmission starts at the first falling edge of SCLK, and 8 bits of data are transferred in one clock cycle. In here, SPI0 is in used, and data is transferred by bits, MSB first.</p>"},{"location":"Products/Display/35-inch-480x320-tft-display-with-touch-screen-for-raspberry-pi.html","title":"3.5 Inch 480x320 TFT Display with Touch Screen for Raspberry Pi","text":""},{"location":"Products/Display/35-inch-480x320-tft-display-with-touch-screen-for-raspberry-pi.html#description","title":"Description","text":"<p>It is the cutest, little display for the Raspberry Pi. It features a 3.5\" display with 480x320 16-bit color pixels and a resistive touch overlay. It's designed to fit nicely not only to the Pi Model A or B but also works perfectly fine with the Model B+.</p> <p>Model:RPA03510R</p> <p></p> <p></p>"},{"location":"Products/Display/35-inch-480x320-tft-display-with-touch-screen-for-raspberry-pi.html#features","title":"Features","text":"<ul> <li>480x320 resolution</li> <li>Universal 3.5\u201d Display for the Raspberry Pi</li> <li>Compatible with Raspberry Pi A, B, A+, B+, and Pi2 versions</li> <li>Powered not only from your computer, but also from your portable power</li> <li>Adapt for Raspbian system</li> </ul>"},{"location":"Products/Display/35-inch-480x320-tft-display-with-touch-screen-for-raspberry-pi.html#specifications","title":"Specifications","text":"<ul> <li>LCD Type:TFT</li> <li>LCD Interface:SPI</li> <li>Touch Screen Type:Resistive</li> <li>Touch Screen Controller:XPT2046</li> <li>Colors:65536</li> <li>Backlight:LED</li> <li>Resolution:480*320 (Pixel)</li> </ul>"},{"location":"Products/Display/35-inch-480x320-tft-display-with-touch-screen-for-raspberry-pi.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Display/35-inch-480x320-tft-display-with-touch-screen-for-raspberry-pi.html#usage","title":"Usage","text":"<p>When users connect the Raspberry Pi to use, they need to configure the official system. Or you can also burn the configured system image directly. Tips:Basic for Raspbian Jessie with PIXEL (2017-04-10-raspbian-jessie.img)</p>"},{"location":"Products/Display/35-inch-480x320-tft-display-with-touch-screen-for-raspberry-pi.html#step-1download-the-raspbian-img-httpswwwraspberrypiorgdownloadsraspbian","title":"Step 1\uff1aDownload the Raspbian IMG https://www.raspberrypi.org/downloads/raspbian/","text":""},{"location":"Products/Display/35-inch-480x320-tft-display-with-touch-screen-for-raspberry-pi.html#step-2-burn-the-system-image-if-you-dont-know-how-to-do-thatyou-can-refer-to-the-raspberry-pi-office-tutorial","title":"Step 2: Burn the system image If you don't know how to do that,you can refer to the Raspberry Pi office tutorial","text":""},{"location":"Products/Display/35-inch-480x320-tft-display-with-touch-screen-for-raspberry-pi.html#step-3-open-terminal-and-download-the-driver-on-rpi","title":"Step 3: Open terminal and Download the driver on RPI","text":"<p>Run:</p> <pre><code>sudo git clone https://github.com/goodtft/LCD-show.git\n</code></pre>"},{"location":"Products/Display/35-inch-480x320-tft-display-with-touch-screen-for-raspberry-pi.html#step-4-install-driver","title":"Step 4: Install driver","text":"<p>Run:</p> <pre><code>cd LCD-show/\nsudo chmod +x LCD35-show\nsudo ./LCD35-show\n</code></pre>"},{"location":"Products/Display/35-inch-480x320-tft-display-with-touch-screen-for-raspberry-pi.html#touch-screen-calibration","title":"Touch screen calibration","text":"<ul> <li>This LCD can be calibrated using a program called xinput_calibrator</li> <li>**Install it with the commands: ** <pre><code>cd Elecrow-LCD35&lt;br&gt;&lt;/br&gt;\nsudo dpkg -i -B xinput-calibrator_0.7.5-1_armhf.deb\n</code></pre></li> <li>Click the Men button on the task bar, choose Preference -&gt; Calibrate Touchscreen.</li> <li>Finish the touch calibration following the prompts. Maybe rebooting is required to make calibration active.</li> <li>You can create a 99-calibration.conf file to save the touch parameters (not necessary if file exists). <pre><code>/ect/X11/xorg.conf.d/99-calibration.conf\n</code></pre></li> <li>Save the touch parameters (may differ depending on LCD) to 99-calibration.conf, as shown in the picture: </li> </ul>"},{"location":"Products/Display/35-inch-480x320-tft-display-with-touch-screen-for-raspberry-pi.html#install-soft-keyboard","title":"Install Soft Keyboard","text":"<ul> <li>Install the reference link\uff1ahttps://github.com/Elecrow-keen/Elecrow-LCD5/wiki/How-to-Install-Soft-Keyboard</li> </ul>"},{"location":"Products/Display/35inch-480x320-mcu-spi-serial-tft-lcd-module-display.html","title":"3.5inch 480x320 MCU SPI Serial TFT LCD Module Display","text":""},{"location":"Products/Display/35inch-480x320-mcu-spi-serial-tft-lcd-module-display.html#description","title":"Description","text":"<p>It is the cutest, little display for the Raspberry Pi. It features a 3.5\" display with 480x320, support 65K color display.</p> <p>Model:DIS03501R</p> <p></p>"},{"location":"Products/Display/35inch-480x320-mcu-spi-serial-tft-lcd-module-display.html#features","title":"Features","text":"<ul> <li>3.5-inch color screen,support 65K color display,display rich colors</li> <li>480X320 resolution, optional touch function</li> <li>Using the SPI serial bus, it only takes a few IOs to illuminate the display</li> <li>Easy to expand the experiment with SD card slot</li> <li>Provide a rich sample program</li> <li>Military-grade process standards, long-term stable work</li> <li>Provide underlying driver technical support</li> </ul>"},{"location":"Products/Display/35inch-480x320-mcu-spi-serial-tft-lcd-module-display.html#specifications","title":"Specifications","text":"<ul> <li>Display Color: RGB 65K color</li> <li>Screen Size: 3.5(inch)</li> <li>Type: TFT</li> <li>Driver IC: ILI9488</li> <li>Resolution: 480*320 (Pixel)</li> <li>Module Interface: 4-wire SPI interface</li> <li>Active Area (AA area): 48.96x73.44(mm)</li> <li>Module PCB Size: 56.34x98(mm)</li> <li>Operating Temperature: -20\u2103~60\u2103</li> <li>Storage Temperature: -30\u2103~70\u2103</li> <li>VCC power voltage: 3.3V~5V</li> <li>Logic IO port voltage: 3.3V(TTL)</li> <li>Power Consumption: TBD</li> <li>Rough Weight: 45 (g)</li> </ul>"},{"location":"Products/Display/35inch-480x320-mcu-spi-serial-tft-lcd-module-display.html#interface-definition","title":"Interface Definition","text":"<p> 650px</p>"},{"location":"Products/Display/35inch-480x320-mcu-spi-serial-tft-lcd-module-display.html#how-to-use-with-arduino","title":"How to use with Arduino","text":""},{"location":"Products/Display/35inch-480x320-mcu-spi-serial-tft-lcd-module-display.html#1-run-arduino-demo-in-spi-model","title":"1: Run Arduino Demo in SPI model","text":"<p>When we directly connected the SPI display module without the on-board level conversion module to the Arduino, we found that it could not run at all. This is because the SPI module's pin can only input a 3.3V high level, while the Arduino output has a high level of 5V. To run successfully, there are two Method: short circuit method and external level conversion module method. The short-circuit method has the advantages of simple operation, short wiring, and no need for external devices. The disadvantage is that the module generates a large amount of heat during operation.Will affect the life of the module. The external level conversion module method is a normal operation, and the advantage is that the module generatesless heat and runs stably during operation, and the disadvantage is that the operation is slightly complicated. (An external level shifting module is required) to increase the cost (additional level conversion module is required). In summary, it is recommended to use the external level shifting module method.</p> <p>Step 1: Short-Circuit Method The short-circuit method is to short the J1 component position (shown below) with solder on the back of the module.After shorting, the runtime module VCC The pin must be connected to a 5V power supply (not connected to 3.3V).  </p> <p>Step 2: External Level Conversion Module Method The so-called external level conversion module method is to connect the Arduino and the display module through an external level conversion module, so that The 5V high level of the Arduino output is converted to 3.3V by the level conversion module and then input to the display module. As shown below:  </p>"},{"location":"Products/Display/35inch-480x320-mcu-spi-serial-tft-lcd-module-display.html#2-first-download-the-sample-code-then-copy-the-libraries-that-the-examples-depend-on-to-the-libraries-folder-of-the-arduino-project-file-directory","title":"2: First download the sample code. Then copy the libraries that the examples depend on to the libraries folder of the Arduino project file directory.","text":""},{"location":"Products/Display/35inch-480x320-mcu-spi-serial-tft-lcd-module-display.html#3-select-the-example-you-want-to-test-open-it-and-click-tools-button-to-select-the-board-model-and-port-number-as-shown-below","title":"3: Select the example you want to test, open it and click Tools button to select the board model and port number, as shown below:","text":""},{"location":"Products/Display/35inch-480x320-mcu-spi-serial-tft-lcd-module-display.html#4-connect-the-pins-with-the-arduino-pins-with-dupont-wires-according-to-the-pin-definitions-in-the-program-the-example-is-a-short-circuit-method","title":"4: Connect the pins with the Arduino pins with Dupont wires according to the pin definitions in the program. (The example is a short-circuit method)","text":""},{"location":"Products/Display/35inch-480x320-mcu-spi-serial-tft-lcd-module-display.html#5-click-the-upload-button-to-compile-and-download-when-done-uploading-is-displayed-the-program-had-been-successfully-downloaded-to-the-development-board-as-shown-below","title":"5: Click the Upload button to compile and download. When \u201cDone Uploading\u201d is displayed, the program had been successfully downloaded to the development board, as shown below:","text":""},{"location":"Products/Display/35inch-480x320-mcu-spi-serial-tft-lcd-module-display.html#6-if-the-module-can-display-normally-the-program-runs-successfully","title":"6: If the module can display normally, the program runs successfully:","text":""},{"location":"Products/Display/395-inch-tft-display-for-raspberry-pi.html","title":"3.95 Inch TFT Display for Raspberry Pi","text":""},{"location":"Products/Display/395-inch-tft-display-for-raspberry-pi.html#description","title":"Description","text":"<p>This TFT LCD is designed for RPI B and B+, you can design it for many other things. It is play and plug, very easy and good item for your raspberry pi project and just simple connect to Raspberry Pi, you can start you Raspberry pi experience.</p> <p>Model:RPA29501R</p> <p></p>"},{"location":"Products/Display/395-inch-tft-display-for-raspberry-pi.html#features","title":"Features","text":"<ul> <li>Resolution: 320 x 480</li> <li>Universal 3.95\u201d Display for the Raspberry Pi</li> <li>Compatible with Raspberry Pi B, B+</li> <li>Adapt for Raspbian system </li> </ul>"},{"location":"Products/Display/395-inch-tft-display-for-raspberry-pi.html#specifications","title":"Specifications","text":"<ul> <li>LCD Type:TFT</li> <li>LCD Interface:SPI</li> <li>LCD IC: ILI9488</li> <li>Size: 3.95 inch</li> <li>Weight:175g </li> </ul>"},{"location":"Products/Display/395-inch-tft-display-for-raspberry-pi.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Display/395-inch-tft-display-for-raspberry-pi.html#usage","title":"Usage","text":"<p>When users connect the Raspberry Pi to use, they need to configure the official system. Or you can also burn the configured system image directly.</p> <p>Tips:Basic for Raspbian Jessie with PIXEL (2017-04-10-raspbian-jessie.img)</p>"},{"location":"Products/Display/395-inch-tft-display-for-raspberry-pi.html#step-1download-the-raspbian-img-httpswwwraspberrypiorgdownloadsraspbian","title":"Step 1\uff1aDownload the Raspbian IMG https://www.raspberrypi.org/downloads/raspbian/","text":""},{"location":"Products/Display/395-inch-tft-display-for-raspberry-pi.html#step-2-burn-the-system-image-if-you-dont-know-how-to-do-thatyou-can-refer-to-the-5-inch-800x480-tft-display","title":"Step 2: Burn the system image If you don't know how to do that,you can refer to the :5 Inch 800x480 TFT Display","text":""},{"location":"Products/Display/395-inch-tft-display-for-raspberry-pi.html#step-3-open-terminal-and-download-the-driver-on-rpi","title":"Step 3: Open terminal and Download the driver on RPI","text":"<p>Run:</p> <pre><code>git clone https://github.com/Elecrow-keen/Elecrow-LCD395.git\n</code></pre>"},{"location":"Products/Display/395-inch-tft-display-for-raspberry-pi.html#step-4-install-driver","title":"Step 4: Install driver","text":"<p>Run:</p> <p><pre><code>cd Elecrow-LCD395\nsudo ./Elecrow-LCD395\n</code></pre> Wait A Few Minutes, when the system reboot ok, you can see that. </p>"},{"location":"Products/Display/4-inch-hd-480x320-tft-display-with-touch-screen-for-rapberry-pi.html","title":"4 Inch HD 480x320 TFT Display with Touch Screen for Rapberry Pi","text":""},{"location":"Products/Display/4-inch-hd-480x320-tft-display-with-touch-screen-for-rapberry-pi.html#description","title":"Description","text":"<p>This 4 inch TFT Display with Touch Screen is a mini panel-mountable monitor. So small and simple, and the shape makes it easy to attach to a electronic product. Although the 480*320 common display is made for Raspberry Pi, we can use it for other where not only for Raspberry Pi.</p> <p>Model:RPD48320D </p>"},{"location":"Products/Display/4-inch-hd-480x320-tft-display-with-touch-screen-for-rapberry-pi.html#features","title":"Features","text":"<ul> <li>A good solution for those seeking for a bigger resolution display</li> <li>Good touch response</li> <li>Fast response time</li> <li>For Raspberry Pi B+/2B /3B</li> </ul>"},{"location":"Products/Display/4-inch-hd-480x320-tft-display-with-touch-screen-for-rapberry-pi.html#specifications","title":"Specifications","text":"<ul> <li>Display type: TFT</li> <li>Interface: SPI</li> <li>Touch panel control chip: XPT2046</li> <li>Index Levels\uff1a65536</li> <li>Backlit\uff1a LED</li> <li>Size ratio: 4:3</li> <li>Working Temperature (\u2103): -20 \u00b0 to 70 \u00b0</li> </ul>"},{"location":"Products/Display/4-inch-hd-480x320-tft-display-with-touch-screen-for-rapberry-pi.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Display/4-inch-hd-480x320-tft-display-with-touch-screen-for-rapberry-pi.html#usage","title":"Usage","text":""},{"location":"Products/Display/4-inch-hd-480x320-tft-display-with-touch-screen-for-rapberry-pi.html#a-use-with-raspbian","title":"A. Use with Raspbian","text":"<p>Step 1\uff1aInstall Raspbian official image</p> <p>1)Please download the image of the latest version from Raspberry Pi's website\uff1ahttps://www.raspberrypi.org/downloads/raspbian/</p> <p>2)Download the compressed file to your PC and unpack it to get the .Img file.</p> <p>3)The TF card is connected to the PC and formatted using the \u201cSDFormatter\u201d software.</p> <p>4)Open the \u201cWin32DiskImager\u201d software, select the system image prepared in step 1), and click write to burn the system image.</p> <p>5)Insert the TF card into the Raspberry Pi.</p> <p>6)Connect to Raspberry Pi</p> <p>Step 2: Install the LCD driver</p> <p>Install drivers in the Raspbian system (Raspberry Pi requires Internet connection)</p> <p>1)Log on to the Raspberry Pi terminal (User: pi; Password: raspberry)</p> <p>2)Execute the following command (copy and paste it by right-clicking on the Putty window):</p> <p>sudo rm -rf LCD-show</p> <p>git clone https://github.com/goodtft/LCD-show.git</p> <p>chmod -R 755 LCD-show</p> <p>cd LCD-show/</p> <p>sudo ./MHS40-show</p> <p>3)Wait for a moment after executing, the system will restart automatically. If the LCD can be normally displayed and touched, the installation of the driver is successful.</p>"},{"location":"Products/Display/4-inch-hd-480x320-tft-display-with-touch-screen-for-rapberry-pi.html#binstall-the-lcd-driver","title":"B.Install the LCD driver","text":"<p>Install drivers in the Raspbian system (Raspberry Pi requires Internet connection)</p> <p>1)Log on to the Raspberry Pi terminal (User: pi; Password: raspberry)</p> <p>2)Execute the following command (copy and paste it by right-clicking on the Putty window):</p> <p>sudo rm -rf LCD-show</p> <p>git clone https://github.com/goodtft/LCD-show.git</p> <p>chmod -R 755 LCD-show</p> <p>cd LCD-show/</p> <p>sudo ./MHS40-show</p> <p>3)Wait for a moment after executing, the system will restart automatically. If the LCD can be normally displayed and touched, the installation of the driver is successful.</p>"},{"location":"Products/Display/4-inch-hd-480x320-tft-display-with-touch-screen-for-rapberry-pi.html#touch-screen-calibration","title":"Touch screen calibration","text":"<ul> <li>This LCD can be calibrated using a program called xinput_calibrator</li> <li>Install it with the commands:</li> </ul> <pre><code>cd Elecrow-LCD4&lt;br&gt;&lt;/br&gt;\nsudo dpkg -i -B xinput-calibrator_0.7.5-1_armhf.deb\n</code></pre> <ul> <li>Click the Men button on the task bar, choose Preference -&gt; Calibrate Touchscreen.</li> <li>Finish the touch calibration following the prompts. Maybe rebooting is required to make calibration active.</li> <li>You can create a 99-calibration.conf file to save the touch parameters (not necessary if file exists).</li> </ul> <pre><code>/ect/X11/xorg.conf.d/99-calibration.conf\n</code></pre> <ul> <li>Save the touch parameters (may differ depending on LCD) to 99-calibration.conf, as shown in the picture:</li> </ul>"},{"location":"Products/Display/4-inch-hd-480x320-tft-display-with-touch-screen-for-rapberry-pi.html#install-soft-keyboard","title":"Install Soft Keyboard","text":"<ul> <li>Install the reference link\uff1ahttps://github.com/Elecrow-keen/Elecrow-LCD5/wiki/How-to-Install-Soft-Keyboard</li> </ul>"},{"location":"Products/Display/50-inch-hdmi-compatible-display-for-raspberry-pi-compatible-with-jetson-nano-beaglebone.html","title":"5.0 Inch HDMI-Compatible Display for Raspberry Pi Compatible with Jetson Nano, Beaglebone","text":""},{"location":"Products/Display/50-inch-hdmi-compatible-display-for-raspberry-pi-compatible-with-jetson-nano-beaglebone.html#description","title":"Description","text":"<p>This is a 5-inch monitor with 800*480 resolution and four corner holes that allow you to mount the monitor to other devices. The back of the monitor is also equipped with 4 nut seats for mounting and fixing the Raspberry Pi. Comes with headphone port and speaker jack. Using a capacitive USB touch screen, you only need to power on the USB touch port to realize the touch function without installing a driver. Plug and play. The signal goes through the hdmi port. Compatible with multiple devices.</p> <p>Model: DIS05490T</p> <p></p> <p></p>"},{"location":"Products/Display/50-inch-hdmi-compatible-display-for-raspberry-pi-compatible-with-jetson-nano-beaglebone.html#features","title":"Features","text":"<ul> <li>5.0inch lcd screen with 800*480 resolution</li> <li>Capacitive touch operation</li> <li>Speaker and headphone jacks</li> <li>Compatible with multiple operating systems (Raspbian, Ubuntu, Windows, Android, MAC OS and Chrome OS)</li> <li>Plug and play, no driver installation required</li> <li>Four nut mounts on the back for easy Raspberry Pi installation</li> </ul>"},{"location":"Products/Display/50-inch-hdmi-compatible-display-for-raspberry-pi-compatible-with-jetson-nano-beaglebone.html#specification","title":"Specification","text":"<ul> <li>Touch type: 5-point capacitive touch</li> <li>Resolution: 800*480</li> <li>Brightness: 300cd/m\u00b2</li> <li>Display Type: TN Panel</li> <li>Screen: TFT-LCD screen</li> <li>Display Driver IC: ILI6122 &amp; ILI5960</li> <li>External Power Supply: DC5V-2A</li> <li>Switch: Toggle Up/Down/Switch</li> <li>Interface\uff1aPower Input &amp; USB Touch Port, 4P Port Speaker, 3.5MM Headphone Port</li> <li>Product Size: 137*80*14mm</li> <li>Weight: 140g</li> </ul>"},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html","title":"7 Inch 1024*600 HDMI LCD Display with Touch Screen","text":""},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html#description","title":"Description","text":"<p>This 7 inch HDMI LCD supports various systems like Raspberry Pi,Banana Pi,Banana Pro,BB Black to provide Lubuntu\uff0cRaspbian with and Angstrom images with high resolution of 1024\u00d7600 and capacitive Touch Screen. Besides it upgrades to IPS screen with larger visible angle and more clear display effect. Broadly you can apply it to raspberry pi, HDMI display screen and other mini PC or even computer display.</p> <p>Model:RPD10246D</p> <p></p> <p></p>"},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html#features","title":"Features","text":"<ul> <li>A good solution for those seeking for a bigger resolution display</li> <li>Good touch response</li> <li>Supports Banana Pi / Banana Pro, comes with Lubuntu, Raspbian images</li> <li>Supports BB Black, comes with Angstrom image</li> <li>Supports Raspberry Pi, comes with Raspbian driver (works with your Raspbian directly), and Ubuntu image</li> <li>Not only for mini-PCs, it can work as a computer monitor just like any other general HDMI screen (touch function is unavailable in this case)</li> <li>Back light control to lower power consumption</li> <li>HDMI interface for displaying, USB interface for touch control</li> </ul>"},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html#specifications","title":"Specifications","text":"<ul> <li>LCD Type:TFT</li> <li>7 inch TFT Capacitive touch screen display, 1024x600 Resolution</li> <li>HDMI input</li> <li>Usb touch and power, 5V@1A</li> <li>Lcd Size \uff1a164.7mm*107.1mm</li> <li>Weight:360g</li> </ul>"},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html#usage","title":"Usage","text":"<p>When users connect the Raspberry Pi to use, they need to configure the official system. Or you can also burn the configured system image directly.</p>"},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html#hardware-connection","title":"Hardware Connection","text":"<p>1. Connect the HDMI Connector to both the HDMI interfaces on the LCD and the Pi. 2. LCD and Pi connect power. 3.Turn on the \"backlight\" switch on the back of the LCD. </p>"},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html#bruning-the-image","title":"Bruning the Image","text":""},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html#method-1-using-ready-to-use-image","title":"Method 1. Using Ready-to-use image","text":"<p>The image file with pre-installed driver is located in the IMAGE directory of the DVD. Extract the IMAGE file and you will get an .img file. you can refer to the :5 Inch 800x480 TFT Display</p>"},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html#method-2-driver-installation","title":"Method 2. Driver installation","text":""},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html#step1-download-the-latest-system-and-unzip-the-image","title":"Step1: Download the latest system and unzip the image","text":"<p>For Raspbian: (Not LITE version) https://www.raspberrypi.org/downloads/raspbian/ For Ubuntu Mate: https://ubuntu-mate.org/download/#xenial For Kali: https://www.offensive-security.com/kali-linux-arm-images/ For Retropie: https://retropie.org.uk/download/ And then unzip the image file.(Next step will use it.)</p>"},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html#step2-bruning-the-image-to-sd-card","title":"Step2: Bruning the Image to SD Card","text":"<p>How to bruning an image to a micro SD card for your Pi? you can refer to the :5 Inch 800x480 TFT Display</p>"},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html#step3-find-the-configtxt-in-the-sds-root-and-open-it-then-add-the-following-code-in-the-end-according-to-resolution","title":"Step3: Find the config.txt in the SD`s root and open it. Then add the following code in the end according to resolution.","text":"<pre><code>hdmi_force_hotplug=1\nmax_usb_current=1\nhdmi_group=2\nhdmi_mode=1\nhdmi_mode=87\nhdmi_cvt 1024 600 60 6 0 0 0\nhdmi_drive=1\n</code></pre>"},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html#step2-insert-sd-card-and-power-on","title":"Step2: Insert SD card and Power ON","text":"<p>The screen should be working now. </p>"},{"location":"Products/Display/7-inch-1024600-hdmi-lcd-display-with-touch-screen.html#install-soft-keyboard","title":"Install Soft Keyboard","text":"<ul> <li>Install the reference link\uff1ahttps://github.com/Elecrow-keen/Elecrow-LCD5/wiki/How-to-Install-Soft-Keyboard</li> </ul>"},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html","title":"7 Inch 1024x600 TFT Display for Raspberry Pi B+ Pcduino Banana Pi","text":""},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html#description","title":"Description","text":"<p>This LCD module is 1024x600 dots 7 \" color TFT LCD module display with HDMI, VGA, Video, AV signal driver board, superior display quality, super wide view angle. It can be used in any embedded system, car, industrial device, security and hand-held equipment which requires display in high quality and colorful video. Its HDMI interface is fully compatible with Raspberry Pi, pcduino and Banana Pi platform.</p> <p>Model:RPA07800R</p> <pre><code>==Interface Function ==\n</code></pre> <p></p>"},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html#features","title":"Features","text":"<ul> <li>A good solution for those seeking for a bigger resolution display</li> <li>Good touch response</li> <li>Supports Banana Pi / Banana Pro, comes with Lubuntu, Raspbian images</li> <li>Supports BB Black, comes with Angstrom image</li> <li>Supports Raspberry Pi, comes with Raspbian driver (works with your Raspbian directly), and Ubuntu image</li> <li>Not only for mini-PCs, it can work as a computer monitor just like any other general HDMI screen (touch function is unavailable in this case)</li> <li>Backlight control to lower power consumption</li> <li>HDMI interface for displaying, USB interface for touch control</li> </ul>"},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html#specifications","title":"Specifications","text":"<ul> <li>LCD Type:TFT</li> <li>7 inch TFT Capacitive touch screen display, 1024x600 Resolution</li> <li>HDMI input</li> <li>USB touch and power, 5V@1A</li> <li>Lcd Size\uff1a164.7mm*107.1mm</li> <li>Weight:360g</li> </ul>"},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html#usage","title":"Usage","text":"<p>When users connect the Raspberry Pi to use, they need to configure the official system. Or you can also burn the configured system image directly.</p>"},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html#hardware-connection","title":"Hardware Connection","text":"<p>1. Connect the HDMI Connector to both the HDMI interfaces on the LCD and the Pi. 2. LCD and Pi connect power. 3. Turn on the \"backlight\" switch on the back of the LCD. </p>"},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html#bruning-the-image","title":"Bruning the Image","text":""},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html#method-1-using-ready-to-use-image","title":"Method 1. Using Ready-to-use image","text":"<p>The image file with pre-installed driver is located in the IMAGE directory of the DVD. Extract the IMAGE file and you will get an .img file. you can refer to the :5 Inch 800x480 TFT Display</p>"},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html#method-2-driver-installation","title":"Method 2. Driver installation","text":""},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html#step1-download-the-latest-system-and-unzip-the-image","title":"Step1: Download the latest system and unzip the image","text":"<p>For Raspbian: (Not LITE version) https://www.raspberrypi.org/downloads/raspbian/ For Ubuntu Mate: https://ubuntu-mate.org/download/#xenial For Kali: https://www.offensive-security.com/kali-linux-arm-images/ For Retropie: https://retropie.org.uk/download/ And then unzip the image file.(Next step will use it.)  </p>"},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html#step2-bruning-the-image-to-sd-card","title":"Step2: Bruning the Image to SD Card","text":"<p>How to bruning an image to a micro SD card for your Pi? you can refer to the :5 Inch 800x480 TFT Display</p>"},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html#step3-find-the-configtxt-in-the-sds-root-and-open-it-then-add-the-following-code-in-the-end-according-to-resolution","title":"Step3: Find the config.txt in the SD`s root and open it. Then add the following code in the end according to resolution.","text":"<pre><code>hdmi_force_hotplug=1\nmax_usb_current=1\nhdmi_group=2\nhdmi_mode=1\nhdmi_mode=87\nhdmi_cvt 1024 600 60 6 0 0 0\nhdmi_drive=1\n</code></pre>"},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html#step2-insert-sd-card-and-power-on","title":"Step2: Insert SD card and Power ON","text":"<p>The screen should be working now. </p>"},{"location":"Products/Display/7-inch-1024x600-tft-display-for-raspberry-pi-b2b-pcduino-banana-pi.html#install-soft-keyboard","title":"Install Soft Keyboard","text":"<ul> <li>Install the reference link\uff1ahttps://github.com/Elecrow-keen/Elecrow-LCD5/wiki/How-to-Install-Soft-Keyboard</li> </ul>"},{"location":"Products/Display/7-inch-tft-display-for-raspberry-pi-b2b-banana-pi-bb-black.html","title":"7 Inch TFT Display for Raspberry Pi B+ Banana Pi BB BLACK","text":""},{"location":"Products/Display/7-inch-tft-display-for-raspberry-pi-b2b-banana-pi-bb-black.html#description","title":"Description","text":"<p>This LCD module is 800x480 dots 7 \" color TFT LCD module display with HDMI signal driver board, superior display quality, super wide view angle. It can be used in any embedded system, car, industrial device, security and hand-held equipment which requires display in high quality and colorful video. Its HDMI interface is fully compatible with Raspberry PI, and Banana Pi platform.</p> <p>Model:7inch</p> <p></p>"},{"location":"Products/Display/7-inch-tft-display-for-raspberry-pi-b2b-banana-pi-bb-black.html#features","title":"Features","text":"<ul> <li>Resolution: 800*480</li> <li>Touch Control: Capacitive</li> <li>Raspberry Pi: Support Raspberry Pi 2 B/ B+/A+</li> <li>Banana Pi / Banana Pro: Support, comes with related images like : Lubuntu, Raspbian</li> <li>BB Black: Support, comes with related images like : Angstrom</li> <li>HDMI interface: For Displaying</li> <li>USB Interface: For touch control</li> <li>Back light control to lower power consumption</li> <li>Sizes:165 x 107mm</li> </ul>"},{"location":"Products/Display/7-inch-tft-display-for-raspberry-pi-b2b-banana-pi-bb-black.html#usage","title":"Usage","text":""},{"location":"Products/Display/7-inch-tft-display-for-raspberry-pi-b2b-banana-pi-bb-black.html#1-connect-raspberry-pi-to-use","title":"1: Connect Raspberry Pi to use","text":"<ul> <li>Step 1: 1)Please download the image of the latest version from Raspberry Pi's website.</li> </ul> <p>https://www.raspberrypi.org/downloads/raspbian/</p> <ul> <li>Step 2: Download the compressed file to your PC and unpack it to get the .Img file.</li> <li>Step 3: 3)The TF card is connected to the PC and formatted using the \u201cSDFormatter\u201d software.</li> <li>Step 4: Open the \u201cWin32DiskImager\u201d software, select the system image prepared in step 1), and click write to burn the system image.</li> <li>Step 5: 5)After the programming is completed, open the \u201cconfig.txt\u201d file in the root directory of the TF card, and add the following code at the end of \u201cconfig.txt\u201d to save and safely eject the TF card.</li> </ul> <p>max_usb_current=1 hdmi_group=2 hdmi_mode=1 hdmi_mode=87 hdmi_cvt 800 480 60 6 0 0 0 hdmi_drive=1</p> <ul> <li>Step 6: Save and insert the TF card into the Raspberry Pi.</li> <li>Step 7: Connect the touch interface of the 7-inch screen to the USB interface of the Raspberry Pi with Micro USB cable.</li> <li>Step 8: Connect the HDMI interface of the 7-inch screen to the HDMI interface of the Raspberry Pi, power on the Raspberry Pi, and turn on the \u201cbacklight\u201d switch on the back of the LCD. Wait for a few seconds to display normally.</li> </ul> <p></p>"},{"location":"Products/Display/7-inch-tft-display-for-raspberry-pi-b2b-banana-pi-bb-black.html#2-use-as-pc-monitor","title":"2: Use as PC monitor","text":"<ul> <li>Step 1: Connect the computer HDMI output signal to the LCD HDMI interface by using the HDMI cable.</li> <li>Step 2: Connect the LCD's USB Touch interface to the USB port of the device.</li> <li>Step 3: If there are several monitors, please unplug other monitor connectors first, and use LCD as the only monitor for testing.</li> </ul>"},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html","title":"Elecrow 10.1 inch Display IPS 1280x800 Acrylic Case Touch Screen Compatible with Raspberry Pi Jetson Nano PC","text":""},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html#description","title":"Description","text":"<p>This 10.1-inch HDMI touch screen has a high-definition resolution of 1280*800 and supports a viewing angle of 178\u00b0, providing an excellent visual experience. It supports Raspberry Pi, Windows, Linux, Ubuntu and other systems, and is also compatible with Raspberry Pi 3/3B+/4B/5, Jetson Nano, Beaglebone, Banana Pi and other mainstream development boards. You can easily adjust the desired brightness by adjusting the backlight button.</p> <p>This Raspberry Pi capacitive touch screen supports 5-point touch, has fast response speed, and high-definition communication supports plug-and-play.It comes with a stand for easy desktop placement, and mounting holes on the back allow you to securely mount it on a wall or integrate it with a small form factor SBC (single board computer).</p> <p>To protect the screen and enhance its visual appeal, the monitor comes with a durable and stylish acrylic cover.</p> <p>Whether you need a high-quality monitor for gaming, multimedia entertainment, or industrial applications, our 10-inch monitors offer superior visuals, responsive touch controls, seamless connectivity, and versatile mounting options.</p> <p>Model: DIS85101D </p> <p></p>"},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html#feature","title":"Feature","text":"<ul> <li>10.1inch IPS full Angle display</li> <li>1280X800 resolution</li> <li>New touch panel</li> <li>High sensitivity capacitive touch screen</li> <li>HDMI interface</li> <li>Support multiple device access</li> <li>Support multiple system display</li> <li>Passed CE and ROHS certification</li> </ul>"},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html#specification","title":"Specification","text":"<ul> <li>Screen Type : IPS screen</li> <li>Screen Size : 10.1 inch</li> <li>Resolution : 1280 x 800</li> <li>Backlight adjustment : Key switch adjustment</li> <li>Touch Screen Type : Capacitive Touch Screen</li> <li>Power : MicroUSB\uff085V\uff09</li> <li>Active Area : 216.566*135.36 (mm)</li> <li>Module Size (L x W x H) : 239.4*157.4*12.3 \u00b10.2 (mm)</li> <li>Packaging Size (L x W x H) : 295*195*70 (mm)</li> </ul>"},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html#size","title":"Size","text":""},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html#working-with-raspberry-pi","title":"Working with Raspberry Pi","text":""},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html#step-1-download-the-official-image","title":"Step 1. Download the Official image","text":"<p>1. Download Raspbian Official Image</p> <pre><code>   Download URL: https://www.raspberrypi.org/downloads/raspbian/\n   Username: pi Password: raspberry\n</code></pre> <p>2. Download Ubuntu Mate Official Image</p> <pre><code>   Download URL: https://ubuntu-mate.org/download/\n   The user name and password can be set by yourself after startup\n</code></pre> <p>3. Download Kail Official Image</p> <pre><code>   Download URL: https://www.offensive-security.com/kali-linux-arm-images/\n   Username: kali (The old version is root) Password: kali(The old version is toor)\n</code></pre> <p>4. Download Retropie Official Image</p> <pre><code>   Download URL: https://retropie.org.uk/download/\n   Username: pi Password: raspberry\n</code></pre>"},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html#step-2-brun-official-image","title":"Step 2. Brun Official Image","text":"<p>1. Download and install tool software\uff08If they are already installed,this step can be ignored\uff09</p> <pre><code>   SD card format software SDCard Formatter download URL\u00a0:\n   https://www.sdcard.org/downloads/formatter_4/\n   Image burning software win32diskimager download URL:\n   https://sourceforge.net/projects/win32diskimager/\n</code></pre> <p>2. Format SD card</p> <pre><code>   Insert the SD card into the card reader -&gt; Insert the card reader into the computer -&gt; Open the SDFormatter software -&gt; Select SD card -&gt;\n   Select quick format (generally select quick format, other options can be selected according to your own needs) -&gt; Click the Format button -&gt;\n   Select \"Yes\" -&gt; Click OK after formatting.\n</code></pre> <p>3. Brun Image</p> <pre><code>   Open the win32diskimager software -&gt; Select the image file to be burned (xxx.img ) -&gt; Select SD card -&gt; Click the \"write\" button -&gt;\n   Select \"Yes\" -&gt; Wait for the burning to complete (the whole process lasts about 10 minutes)\n</code></pre>"},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html#step-3-modify-the-configtxt-configuration-file","title":"Step 3. Modify the \u201cconfig.txt\u201d configuration file","text":"<p>Open the \u201cconfig.txt\u201d file in the root directory of SD card on the computer, Add the following at the end of the file, save and exit.  </p>"},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html#step-4-insert-sd-card","title":"Step 4. Insert SD card","text":"<p>After the above steps are completed, pop up the SD card on the computer and insert it into the SD card slot on the back of the raspberry pie.</p>"},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html#step-5-running-system","title":"Step 5. Running system","text":"<p>Connect the HDMI interface and touch interface of the display screen to raspberry pie, connect the power supply of raspberry pie, and start the machine to display and touch normally.</p>"},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html#work-as-hdmi-touch-monitor","title":"Work as HDMI touch monitor","text":"<p>This product can be used as the HDMI touch monitor of Windows computer, only need to connect HDMI interface and TOUCH interface, can normally display and support up to five points touch.</p>"},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html#resource","title":"Resource","text":"<ul> <li>How_to_install_matchbox-keyboard.pdf</li> <li>How_to_install_the_LCD_driver_V1.2.pdf</li> <li>How_to_use_Raspberry_Pi-V1.0.pdf </li> </ul>"},{"location":"Products/Display/elecrow-101-inch-display-ips-1280x800-acrylic-case-touch-screen-compatible-with-raspberry-pi-jetson-nano-pc.html#images-download","title":"Images Download","text":"<p>If you have difficulty installing the driver, or if you still can't use the display properly after installing the driver, Please Try our Configned images for tested. Just need download and write the image into the TF card. DO NOT need any driver installation steps.</p> <ul> <li>Raspberry Pi OS : https://mega.nz/folder/YG1mwByI#xbci7Ll0FIC__nPthWwPkQ</li> <li>Ubuntu MATE : https://mega.nz/folder/UPlnAKgS#4k3dwLBhgKYHfT8pq4rkUA</li> </ul>"},{"location":"Products/Display/elecrow-101-inch-touchscreen-1280x800-ips-tft-lcd-monitor-kit.html","title":"Elecrow 10.1 Inch Touchscreen 1280x800 IPS TFT LCD Monitor Kit","text":""},{"location":"Products/Display/elecrow-101-inch-touchscreen-1280x800-ips-tft-lcd-monitor-kit.html#description","title":"Description","text":"<p>This 10.1 inch portable monitor supports 800x1280 resolution, the image is clear and colorful. IPS provides advanced in-plane switching technology for premium color performance at any viewing angle.  Supporting 6 points touch maximum, no extra driver needed, just connect the USB cable to your signal output device like PC/Raspberry Pi to achieve the touch screen function. It can work with most devices with HDMI port, compatible with Win 7 8 10 PC, Raspberry Pi,car audio and video, industrial equipment, and medical equipment. Separating the PCBA from the screen increases DIY flexibility, allowing you to design the screen to suit your needs. Model: DIS10185P </p> <p></p>"},{"location":"Products/Display/elecrow-101-inch-touchscreen-1280x800-ips-tft-lcd-monitor-kit.html#features","title":"Features","text":"<ul> <li>Free-driver, Plug and Play</li> <li>The display mode is portrait by default and landscape by configuration</li> <li>1280\u00d7800 resolution, HD display</li> <li>IPS full viewing</li> <li>6 points capacitive touchscreen</li> <li>Supports Raspberry OS, Ubuntu, Win7, Win8, Win10 systems</li> <li>Apply to secondary screen display, factory equipment, medical equipment, etc</li> </ul>"},{"location":"Products/Display/elecrow-101-inch-touchscreen-1280x800-ips-tft-lcd-monitor-kit.html#specifications","title":"Specifications","text":"<p>TFT LCD Monitor</p> Panel Size 10.1 inch Resolution 800x1280 Pixel arrangement RGB Vertical Stripe Display Mode TFT/IPS with Normally Black/Transmisstive Touch 6 Points Capacitive Touchscreen Touch IC GT9271 Driver IC JD9365AA Viewing Angle 80/80/80/80 (Typ.)(CR\u226510) Display Color 16.7M Surface Treatment Anti-Glare and Hard-coating 3H Interface MIPI Backlight White LED LCM+CTP Brightness 500(Typ.) Backlight 7S4P Response time 30ms(Tr+Td)(Typ.) Operation Voltage 3.3V Operation Temperature -20~70 \u2103 \u201d Storage Temperature -30~80 \u2103\u201d Weight 240 g(Typ.) <p>Driver Board</p> PCBA Dimension 111.5(W) x 60(H) x 7.5(T) mm Supported Touch Panel Capactive Touch Panel Input Signal Interface Micro HDMI Female Connector USB Port Interface 5 Pin 2mm Pitch Connector Input Voltage 5V Operating Temperature -10 ~60 \u2103 Storage Temperature -20 ~80 \u2103"},{"location":"Products/Display/elecrow-101-inch-touchscreen-1280x800-ips-tft-lcd-monitor-kit.html#interface","title":"Interface","text":""},{"location":"Products/Display/elecrow-101-inch-touchscreen-1280x800-ips-tft-lcd-monitor-kit.html#usage","title":"Usage","text":""},{"location":"Products/Display/elecrow-101-inch-touchscreen-1280x800-ips-tft-lcd-monitor-kit.html#how-to-connect-flat-cable","title":"How to connect flat cable","text":"<p>1. MIPI LCD Panel</p> <p>2. Capactive Touch Panel</p>"},{"location":"Products/Display/elecrow-101-inch-touchscreen-1280x800-ips-tft-lcd-monitor-kit.html#raspberry-pi-os-touchscreen-rotate","title":"Raspberry Pi OS touchscreen rotate","text":"<p>Step 1 LCD Display rotate Head to your Pi desktop and click on the Pin icon on the top left of the display. Hover on the preferences option and click on Screen configuration. Select the display you wish to rotate. Hover over orientation and choose the way you want to modify your Display. Click on the Ok button to confirm and wait for 10 seconds till the timer ends. </p> <p>Step 2 Touchscreen rotate 2.1 Viewing touch screen information  2.1.1. Installing XInput</p> <pre><code>sudo apt-get install xinput  \n</code></pre> <p>2.1.2. List all input device information</p> <pre><code>xinput --list\n</code></pre> <p>Get the following information:</p> <pre><code>pi@raspberrypi:~ $ xinput --list\n\u23a1Virtual corepointer                        id=2 [masterpointer  (3)]\n\u239c   \u21b3Virtual core XTESTpointer                id=4 [slave  pointer (2)]\n\u239c   \u21b3Silicon WorksMulti-touch SW4101C             id=6 [slave  pointer (2)]\n\u23a3Virtual corekeyboard                     id=3 [master keyboard (2)]\n    \u21b3Virtual core XTEST keyboard              id=5 [slave keyboard (3)]\npi@raspberrypi:~ $\n</code></pre> <p>2.1.3. List target device attributes</p> <pre><code> xinput --list-props 6\n</code></pre> <p>Note: The touch function is connected via USB. You should find the device with \"USB\" and its corresponding id number </p> <pre><code>Device 'Silicon Works Multi-touch SW4101C':\n       DeviceEnabled (114):   1\n       CoordinateTransformation Matrix (115):   1.000000,0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000\n       libinputCalibration Matrix (246): -1.000000,0.000000, 1.000000, 0.000000, -1.000000, 1.000000, 0.000000, 0.000000, 1.000000\n       libinputCalibration Matrix Default (247):   1.000000,0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000\n       libinputSend Events Modes Available (248):     1,0\n       libinputSend Events Mode Enabled (249): 0, 0\n       libinputSend Events Mode Enabled Default (250):   0,0\n       DeviceNode (251):       \"/dev/input/event0\"\n       DeviceProduct ID (252):      10685, 16641\n</code></pre> <p>2.2 Modifying configuration files 2.2.1 Install libinput,Check whether there is the file 40-libinput.conf in the directory /usr/share/x11/xorg.conf.d/If not, it needs to be installed</p> <pre><code>sudo apt-get installxserver-xorg-input-libinput\n</code></pre> <p>2.2.2 Copy the file to /etc/x11/xorg.conf.d/ directory</p> <pre><code>sudo mkdir xorg.conf.d\n</code></pre> <pre><code>sudo cp /usr/share/X11/xorg.conf.d/40-libinput.conf /etc/X11/xorg.conf.d/\n</code></pre> <p>2.2.3 Enter /etc/x11/xorg.conf.d/ directory and modify 40 libinput Conf file</p> <pre><code>cd /etc/X11/xorg.conf.d/\n</code></pre> <pre><code>sudo vim 40-libinput.conf\n</code></pre> <p>Find touchscreensection</p> <pre><code>Section\"InputClass\"\n   Identifier \"libinput touchscreencatchall\"\n   MatchIsTouchscreen \"on\"\n   MatchDevicePath \"/dev/input/event*\"\n   Driver \"libinput\"\nEndSection\n</code></pre> <p>Add a line of option \"calibrationmatrix\" \"0 1 0 -1 0 1 0 0 1\" The result is</p> <pre><code>Section\"InputClass\"\n   Identifier \"libinput touchscreencatchall\"\n   Option \"CalibrationMatrix\" \" -1 0 1 0 -1 1 0 0 1\u201c\n   MatchIsTouchscreen \"on\"\n   MatchDevicePath \"/dev/input/event*\"\n   Driver \"libinput\"\nEndSection\n</code></pre> <p>Step 3 Reboot Note:****1.CalibrationMatrix 90 degree rotation:Option \"CalibrationMatrix\" \"0 1 0 -1 0 1 0 0 1\" 180 degree rotation:Option \"CalibrationMatrix\" \"-1 0 1 0 -1 1 0 0 1\" 270 degree rotation:Option \"CalibrationMatrix\" \"0 -1 1 1 0 0 0 0 1\" 2.If you cannot rotate the touch screen through vim, please use nano</p> <pre><code>sudo nano 40-libninput.conf\n</code></pre> <p></p> <p>3.Get file permissions </p> <pre><code>sudo chmod 777 40-libinput.conf\n</code></pre>"},{"location":"Products/Display/elecrow-101-inch-touchscreen-1280x800-ips-tft-lcd-monitor-kit.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Display/elecrow-116-inch-1080p-ips-1920x1080-monitor-with-built-in-speaker-for-raspberry-pi-ps4-xbox-windows-with-touch-function.html","title":"ELECROW 11.6 Inch 1080P IPS 1920x1080 Monitor with Built-in Speaker for Raspberry Pi PS4 XBOX Windows with touch function","text":""},{"location":"Products/Display/elecrow-116-inch-1080p-ips-1920x1080-monitor-with-built-in-speaker-for-raspberry-pi-ps4-xbox-windows-with-touch-function.html#description","title":"Description","text":""},{"location":"Products/Display/elecrow-116-inch-1080p-ips-1920x1080-monitor-with-built-in-speaker-for-raspberry-pi-ps4-xbox-windows-with-touch-function.html#features","title":"Features","text":""},{"location":"Products/Display/elecrow-116-inch-1080p-ips-1920x1080-monitor-with-built-in-speaker-for-raspberry-pi-ps4-xbox-windows-with-touch-function.html#specifications","title":"Specifications","text":"<ul> <li>Model No: DISSF116T</li> <li>Screen Size: 11.6-inch TFT</li> <li>Overall dimensions: 282 x 177 x 30mm</li> <li>Display/touch area: 256.32 x 144.18 mm</li> <li>Touch: 10-point touch</li> <li>Resolution: 1920 x 1080</li> <li>Color: 16.7M (8bit)</li> <li>Viewing angle (Single- sided): 85\u00b0</li> <li>Backlight brightness: 220cd / m\u00b2</li> <li>Backlight life: 30000H</li> <li>Brightness contrast: 1000/1</li> <li>Response time: 35ms</li> <li>Supported operating systems: windows/macos/linux</li> <li>Certification: Rohs</li> <li>Operating environment range: -20~70\u00b0</li> <li>Storage temperature: -30~80\u00b0</li> <li>Supported interfaces: 3.5mm headphone/HDMI/NGA/3.5mm audio input</li> <li>Weight: 790g</li> </ul>"},{"location":"Products/Display/elecrow-116-inch-1080p-ips-1920x1080-monitor-with-built-in-speaker-for-raspberry-pi-ps4-xbox-windows-without-touch-function.html","title":"ELECROW 11.6 Inch 1080P IPS 1920x1080 Monitor with Built-in Speaker for Raspberry Pi PS4 XBOX Windows without touch function","text":""},{"location":"Products/Display/elecrow-116-inch-1080p-ips-1920x1080-monitor-with-built-in-speaker-for-raspberry-pi-ps4-xbox-windows-without-touch-function.html#description","title":"Description","text":""},{"location":"Products/Display/elecrow-116-inch-1080p-ips-1920x1080-monitor-with-built-in-speaker-for-raspberry-pi-ps4-xbox-windows-without-touch-function.html#features","title":"Features","text":""},{"location":"Products/Display/elecrow-116-inch-1080p-ips-1920x1080-monitor-with-built-in-speaker-for-raspberry-pi-ps4-xbox-windows-without-touch-function.html#specifications","title":"Specifications","text":"<ul> <li>Model No: DIS45116L</li> <li>Screen Size: 11.6-inch TFT</li> <li>Overall dimensions: 282 x 177 x 30mm</li> <li>Display/touch area: 256.32 x 144.18 mm</li> <li>Touch: not supported</li> <li>Resolution: 1920 x 1080</li> <li>Color: 16.7M (8bit)</li> <li>Viewing angle (Single- sided): 85\u00b0</li> <li>Backlight brightness: 220cd / m\u00b2</li> <li>Backlight life: 30000H</li> <li>Brightness contrast: 1000/1</li> <li>Response time: 35ms</li> <li>Supported operating systems: windows/macos/linux</li> <li>Certification: Rohs</li> <li>Operating environment range: -20~70\u00b0</li> <li>Storage temperature: -30~80\u00b0</li> <li>Supported interfaces: 3.5mm headphone/HDMI/NGA/3.5mm audio input</li> <li>Weight: 790g</li> </ul>"},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html","title":"Elecrow RR040I 4 inch HD 800x480 Resolution IPS TFT Touch Screen Display for Raspberry Pi","text":""},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#description","title":"Description","text":"<p>4.0-inch IPS full-angle display, support HDMI input, refresh rate up to 60FPS. The physical resolution is 800x480. Compatible with and can be directly inserted into all versions of raspberry PI motherboards. With HDMI interface, used to connect the main board and LCD display for HDMI transmission. Support Raspbian/Ubuntu Mate/Kali/Retropie system. It can be used as Raspberry Pi monitor with touch control (need to install touch driver) and standard HDMI output device for computer display(no touch function). Connect Raspberry Pi with GPIO, support backlight brightness adjustable.</p> <p>Model:RR040I</p> <p></p>"},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#features","title":"Features","text":"<ul> <li>Raspberry Pi monitor with touch control (need to install touch driver)</li> <li>It can be used as a standard HDMI output device for computer display (no touch function)</li> <li>Compatible with and can be directly inserted into all versions of raspberry PI motherboards (raspberry PI 1 generation B and Zero need additional HDMI cable)</li> <li>Support HDMI audio output, backlight brightness adjustable</li> </ul>"},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#specifications","title":"Specifications","text":"<ul> <li>Screen Size: 4inch</li> <li>LCD Type: TFT</li> <li>Module Interface: HDMI</li> <li>Touch Screen Controller: XPT2046</li> <li>LCD Driver IC: NT35510</li> <li>Backlight: LED</li> <li>Working temperature\uff08\u2103\uff09: -20~60</li> <li>Power consumption: 0.16A*5V</li> <li>Module PCB Size: 98.60*58.05 (mm)</li> <li>Package size: 14 *13*4.7(mm)</li> </ul>"},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#interface-function","title":"Interface Function","text":"<ul> <li>\u2460 3.5mm Headphone Jack: Output audio signal</li> <li>\u2461 HDMI\uff1aUsed to connect the mainboard and LCD display for HDMI transmission</li> <li>\u2462 Micro USB\uff1aGet 5V Power from USB, If \u2464-13*2 Pin Socket has been connected, that this USB interface can be No Connect.</li> <li>\u2463 Backlight adjustment button: Short press backlight change 10%, long press a few seconds to close backlight; short press to open backlight</li> <li>\u2464 13*2 Pin Socket\uff1aGet +5V Power from raspberry Pi to LCD, at the same time transfer touch signal back to Raspberry Pi.</li> </ul>"},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#usage","title":"Usage","text":""},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#1-use-with-raspbian","title":"1: Use with Raspbian","text":""},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#ainstall-raspbian-official-image","title":"A.Install Raspbian official image","text":"<ul> <li>Step 1: Please download the image of the latest version from Raspberry Pi's website.</li> </ul> <p>https://www.raspberrypi.org/downloads/raspbian/</p> <ul> <li>Step 2: Download the compressed file to your PC and unpack it to get the. Image file.</li> <li>Step 3: The TF card is connected to the PC and formatted using the \u201cSDFormatter\u201d software.</li> <li>Step 4: Open the \u201cWin32DiskImager\u201d software, select the system image prepared in step 1, and click write to burn the system image.</li> <li>Step 5: Insert the TF card into the Raspberry Pi.</li> <li>Step 6: Connect to Raspberry Pi</li> </ul> <p> </p>"},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#binstall-the-lcd-driver","title":"B.Install the LCD driver","text":"<p>Install drivers in the Raspbian system (Raspberry Pi requires Internet connection).</p> <ul> <li>Step 1: Log on to the Raspberry Pi terminal (User: pi; Password: raspberry)</li> <li>Step 2: Execute the following command (copy and paste it by right-clicking on the Putty window):</li> </ul> <p>sudo rm -rf LCD-show git clone https://github.com/goodtft/LCD-show.git  chmod -R 755 LCD-show cd LCD-show/ sudo ./MPI4008-show  </p> <ul> <li>Step 3: Wait for a moment after executing, the system will restart automatically. If the LCD can be normally displayed and touched, the installation of the driver is successful.</li> </ul> <p></p>"},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#2-use-with-ubuntu-kali-or-retropie-official-image","title":"2: Use with Ubuntu, Kali or RetroPie official image","text":""},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#ainstall-ubuntu-kali-or-retropie-official-image","title":"A.Install Ubuntu, Kali or RetroPie official image","text":"<ul> <li>Step 1: Please download the image of the latest version from blew websites.</li> </ul> <p>Ubuntu: https://ubuntu-mate.org/raspberry-pi/ RetroPie: https://retropie.org.uk/download/ Kali: https://www.offensive-security.com/kali-linux-arm-images/ </p> <ul> <li>Step 2: Download the compressed file to your PC and unpack it to get the. Image file.</li> <li>Step 3: The TF card is connected to the PC and formatted using the \u201cSDFormatter\u201d software.</li> <li>Step 4: Open the \u201cWin32DiskImager\u201d software, select the system image prepared in step 1), and click write to burn the system image.</li> <li>Step 5: Insert the TF card into the Raspberry Pi.</li> <li>Step 6: Connect to Raspberry Pi.</li> </ul>"},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#binstall-the-lcd-driver_1","title":"B.Install the LCD driver","text":"<p>Due to system differences, Ubuntu, Kali, RetroPie are temporarily unable to install drivers online. Only the offline installation method can be used.</p> <ul> <li>Step 1: Download local drivers \"LCD-show.tar.gz\" (Note: if the version does not match, the LCD may not display properly)</li> </ul> <pre><code> Kali-2019.1-Drivers   \uff08see attached file\uff09\n Ubuntu-18.04-Drivers    \uff08see attached file\uff09\n RetroPie-Pi2-Pi3-Drivers  \uff08see attached file\uff09\n RetroPie-Pi1-ZERO-Drivers  \uff08see attached file\uff09\n</code></pre> <ul> <li>Step 2: Copy \"LCD-show.tar.gz\" to the Raspberry Pi system</li> <li>Step 3: Log on to the Raspberry Pi terminal, Execute the following command</li> </ul> <pre><code>tar -xvzf LCD-show.tar.gz  \nchmod -R 755 LCD-show   \ncd LCD-show/  \nsudo ./MPI4008-show \n</code></pre> <ul> <li>Step 3: After the installation of the LCD driver is completed, the system will restart automatically. If the LCD can be normally displayed and touched, the installation of the driver is successful.</li> </ul>"},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#3-use-as-pc-monitor","title":"3: Use as PC Monitor","text":"<ul> <li>Step 1: Connected the computer HDMI output to the LCD HDMI interface by HDMI cable.</li> <li>Step 2: Power to Micro USB interface</li> <li>Step 3: If you have multiple monitors, please pull the other displayer, and make this LCD as the only displayer for testing.</li> <li>Step 4: As computer monitors, the touch function will not be available.</li> </ul>"},{"location":"Products/Display/elecrow-rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#image-download","title":"Image Download","text":"<p>If you have difficulty installing the driver, or if you still can't use the display properly after installing the driver, please try our already configured images for tested. Just need download and write the image into the Micro SD card. DO NOT need any driver installation steps.</p>"},{"location":"Products/Display/gc1016-10122-tft-lcd-monitor-1280800-color-screen-with-av1-vga-hdmi-bnc-usb-input-built-in-speaker.html","title":"GC1016 10.1\" TFT-LCD Monitor 1280*800 Color Screen with AV1 VGA HDMI BNC USB Input Built-in Speaker","text":""},{"location":"Products/Display/gc1016-10122-tft-lcd-monitor-1280800-color-screen-with-av1-vga-hdmi-bnc-usb-input-built-in-speaker.html#description","title":"Description","text":"<p>This 10.1\" screen with multi-video input(VGA, AV, HDMI, BNC) and a multi-language OSD menu. The versatility of this screen enables it to be used in CCTV systems, PC monitors, rearview cameras monitor, and indoor security use. If you are a gamer, connect the screen to your gaming console and enjoy better viewing. Model:DIS12151G </p> <p></p>"},{"location":"Products/Display/gc1016-10122-tft-lcd-monitor-1280800-color-screen-with-av1-vga-hdmi-bnc-usb-input-built-in-speaker.html#specifications","title":"Specifications","text":"Item Value Model GC1016 Screen Size 10.1 inches Signal input VGA/HDMI/BNC/AV Panel brightness 250cd / m\u00b2 Contrast 400: 1 Resolution 1280*800 Aspect ratio 4:3 Refresh Rate 60-75Hz Working temperature 0-45\u2103 Power 12V"},{"location":"Products/Display/gc1016-10122-tft-lcd-monitor-1280800-color-screen-with-av1-vga-hdmi-bnc-usb-input-built-in-speaker.html#interface","title":"Interface","text":""},{"location":"Products/Display/gc1016-10122-tft-lcd-monitor-1280800-color-screen-with-av1-vga-hdmi-bnc-usb-input-built-in-speaker.html#usage","title":"Usage","text":""},{"location":"Products/Display/gc1016-10122-tft-lcd-monitor-1280800-color-screen-with-av1-vga-hdmi-bnc-usb-input-built-in-speaker.html#1-connect-raspberry-pi-to-use","title":"1: Connect Raspberry Pi to use","text":"<p>Step 1: Please download the image of the latest version from Raspberry Pi's website. https://www.raspberrypi.org/downloads/raspbian/ Step 2: Download the compressed file to your PC and unpack it to get the .Img file. Step 3: The TF card is connected to the PC and formatted using the SDFormatter software. Step 4: Open the Win32DiskImager software, select the system image prepared in step 1, and click write to burn the system image. Step 5: After the programming is completed, then insert the TF card into the Raspberry Pi. Step 6: Connect the HDMI interface of the 10.1-inch screen to the HDMI interface of the Raspberry Pi. Step 7: Connect the 12V power adapter to the DC interface on the screen. Then power on the Raspberry Pi, and wait for a few seconds to display normally.</p>"},{"location":"Products/Display/gc1016-10122-tft-lcd-monitor-1280800-color-screen-with-av1-vga-hdmi-bnc-usb-input-built-in-speaker.html#2use-as-pc-monitor","title":"2\uff1aUse as PC Monitor","text":"<p>Step 1: Connect the computer HDMI( or VGA) output signal to the display\u2019s HDMI( or VGA) interface by using the HDMI( or VGA) cable. Step 2: Connect the 12V power adapter to the DC interface on the screen. Step 3: Then it can display normally.</p>"},{"location":"Products/Display/hdmi-interface-5-inch-800x480-tft-display.html","title":"HDMI Interface 5 Inch 800x480 TFT Display","text":""},{"location":"Products/Display/hdmi-interface-5-inch-800x480-tft-display.html#description","title":"Description","text":"<p> Friendly Reminder: In the past deliveries, there is a CD with outdated driver. Please ignore the CD, we won't put the CD in the next deliveries. Download the latest driver from this page. </p> <p>This 5 inch TFT Display with Touch Screen is a mini panel-mountable HDMI monitor. So small and simple, but you can use this display with any computer that has HDMI output, and the shape makes it easy to attach to a electronic product. Although the 800x480 common HDMI display is made for Raspberry Pi, we can use it other where not only for Raspberry Pi.</p> <p>Model:RPA05010R</p> <p></p> <p></p>"},{"location":"Products/Display/hdmi-interface-5-inch-800x480-tft-display.html#features","title":"Features","text":"<ul> <li>A good solution for those seeking for a bigger resolution display</li> <li>Good touch response</li> <li>Large viewing angle</li> <li>Fast response time</li> <li>Support backlight control alone</li> <li>Not only for Raspberry Pi</li> <li>Not only for mini-PCs, it can work as a computer monitor</li> <li>With detail user guide and image</li> </ul>"},{"location":"Products/Display/hdmi-interface-5-inch-800x480-tft-display.html#specifications","title":"Specifications","text":"<ul> <li>5 inch TFT Resistive touch screen display, 800x480 Resolution</li> <li>HDMI input</li> <li>Usb touch and power, 5V@1A</li> <li>Touch: 4-wire resistive touch</li> <li>Lcd driver IC: ILI9486L</li> <li>Refresh rate\uff1a60HZ</li> <li>Lcd Size \uff1a121.11mm*77.93mm</li> <li>Weight:175g</li> </ul>"},{"location":"Products/Display/hdmi-interface-5-inch-800x480-tft-display.html#interface-function","title":"Interface Function","text":"<p> \u2460 USB interface\uff1aGet 5V Power from USB,If \u2463-13*2 Pin Socket has been connected, that this USB interface can be No Connect. \u2461 HDMI interface\uff1aFor HDMI transmission. \u2462 Backlight Power switch\uff1aControls the backlight turned on and off to save power.  \u2463 13*2 Pin Socket\uff1aGet 5V Power from raspberry Pi to LCD, at the same time transfer touch signal back to raspberry Pi.  \u2464 extended interface\uff1aextended The \u2463-13*2 Pin Socket signal Pin-to-Pin.</p>"},{"location":"Products/Display/hdmi-interface-5-inch-800x480-tft-display.html#usage","title":"Usage","text":"<p>Our 5 inch screen supports Raspbian,Ubuntu Mate,Kali Linux and Retropie system for Raspberry Pi.If you use it on PC or others that the touch function is unable to use. And next, we will teach you how to install the driver for your raspberry pi OS. If no system in your SD card, please refer to the Raspberry Pi office tutorial.</p> <p>Step1: Install the 5 inch LCD</p> <p>Install the 5 inch LCD to Raspberry-Pi 3B/2B/B+ board as below: </p> <p></p> <p>Step2: Modify your config.txt file </p> <p>Tips: If you use SSH to control Pi,please skip this step.</p> <p>Insert the SD card to your Windows/Mac PC. Find the config.txt in the SD`s root and open it. Then add the following code in the end.</p> <pre><code># --- added by elecrow-pitft-setup  ---\nhdmi_force_hotplug=1\nmax_usb_current=1\nhdmi_drive=1\nhdmi_group=2\nhdmi_mode=1\nhdmi_mode=87\nhdmi_cvt 800 480 60 6 0 0 0\ndtoverlay=ads7846,cs=1,penirq=25,penirq_pull=2,speed=50000,keep_vref_on=0,swapxy=0,pmax=255,xohms=150,xmin=200,xmax=3900,ymin=200,ymax=3900\ndisplay_rotate=0\n# --- end elecrow-pitft-setup  ---\n</code></pre> <p>Step3: Power ON and open terminal</p> <p>Tips: When the Raspberry startup, it can normal display and next step you need to install the driver.</p> <p></p> <p>Step4: Download the driver Method 1: Online installation (Raspberry Pi needs to be connected to the Internet) Run:</p> <pre><code>sudo rm -rf LCD-show\ngit clone https://github.com/goodtft/LCD-show.git \n</code></pre> <p>Tips:  For Kali Linux, you need to mount boot, run: mount /dev/mmcblk0p1 /boot/ And next: Run:</p> <pre><code>chmod -R 755 LCD-show\ncd LCD-show/\nsudo ./LCD5-show\n</code></pre> <p>Method 2: Offline installation Download LCD-show.zip Unzip 'LCD-show.zip' and copy the folder to the root directory of Raspberry Pi after flashing the image.</p> <p>Run:</p> <pre><code>cd /boot\ncd LCD-show/\nsudo ./LCD5-show\n</code></pre> <p>Step5: Rebot The screen should be working now. </p>"},{"location":"Products/Display/hdmi-interface-5-inch-800x480-tft-display.html#touch-screen-calibration","title":"Touch screen calibration","text":""},{"location":"Products/Display/hdmi-interface-5-inch-800x480-tft-display.html#old-version","title":"Old Version","text":"<p>Install the xinput-calibrator</p> <p>Run:</p> <p>sudo apt-get install -y xinput-calibrator</p> <p>And next:</p> <ul> <li>Click the Men button on the task bar, choose Preference -&gt; Calibrate Touchscreen.</li> <li>Finish the touch calibration following the prompts. Maybe rebooting is required to make calibration active.</li> <li>You can create a 99-calibration.conf file to save the touch parameters (not necessary if file exists).</li> </ul> <pre><code>/etc/X11/xorg.conf.d/99-calibration.conf\n</code></pre> <ul> <li>Save the touch parameters (may differ depending on LCD) to 99-calibration.conf, as shown in the picture:</li> </ul> <p></p>"},{"location":"Products/Display/hdmi-interface-5-inch-800x480-tft-display.html#new-version","title":"New Version","text":"<ul> <li>Resistance touch screen calibration.pdf</li> </ul>"},{"location":"Products/Display/hdmi-interface-5-inch-800x480-tft-display.html#install-soft-keyboard","title":"Install Soft Keyboard","text":"<ul> <li>Install the reference link</li> </ul>"},{"location":"Products/Display/hdmi-interface-5-inch-800x480-tft-display.html#resource","title":"Resource","text":"<ul> <li>5inch_HDMI_Display_User_Manual in PDF </li> <li>Config file</li> <li>5 Inch Display Configured system for B+ 2B </li> <li>5 Inch Display Configured system for 3B </li> <li>LCD-show.zip</li> </ul>"},{"location":"Products/Display/i2c-09622-oled-128x64--blue.html","title":"I2C 0.96\" OLED 128x64- Blue","text":""},{"location":"Products/Display/i2c-09622-oled-128x64--blue.html#introduction","title":"Introduction","text":"<p>This OLED display module is small, only 0.96\u201d diagonal, it is made of 128x64 individual blue OLED pixels, each one is turn on or off by the controller chip. It works without backlight, that is, in a dark environment, OLED display is higher compared to that of LCD display, you will like the miniature for its crispness. This module uses I2C to communicate with microcontroller such as Arduino. Compares to the 0.96\" OLED 128x64- Blue, this module has blue colors, but please very notice that this is a single color OLED indeed, that means that top quarter is yellow, and the rest \u00be is blue. The color can not be changed. Model: DO1286496BY</p> <p> </p>"},{"location":"Products/Display/i2c-09622-oled-128x64--blue.html#features","title":"Features","text":"<ul> <li>Diagonal Screen Size\uff1a0.96\"</li> </ul> <p>Number of Pixels\uff1a128 x 64  Color Depth\uff1aMonochrome (Blue)  Dimension\uff1a27.8 x27.3x 4.3 mm Working Voltage: 3.3~ 5V DC Power: 0.06W Max Viewing Angle: &gt;160 Degree Duty\uff1a1/32 Brightness ( cd/m2)\uff1a150 (Typ) @ 5V Interface\uff1a I2C  </p>"},{"location":"Products/Display/i2c-09622-oled-128x64--blue.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p>Connect the OLED to the Crowduino.</p> <p></p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Download the library OLED library;Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;U8glib-&gt;Ele_0_96_12864.</p> <pre><code>#include \"U8glib.h\"\nU8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);    \n\nvoid drawURL(void)\n{\n   u8g.setFont(u8g_font_9x18);\n   u8g.drawStr(25,10,\"Elecrow\");\n   u8g.setFont(u8g_font_7x14);\n   u8g.drawStr(5,35,\"www.elecrow.com\");\n\n}\nvoid setup(void) {\n}\n\nvoid loop(void) {\n  // picture loop\n  u8g.firstPage();  \n  do {\n    drawURL();\n  u8g.setColorIndex(1);\n  } while( u8g.nextPage() );  \n  // rebuild the picture after some delay\n  delay(200);  \n}\n</code></pre> <p>5.Upload the Code,you shoule see the display of OLED.</p> <p></p>"},{"location":"Products/Display/i2c-09622-oled-128x64--blue.html#resource","title":"Resource","text":"<ul> <li>OLED Demo code</li> </ul>"},{"location":"Products/Display/i2c-lcd1602blue.html","title":"I2C LCD1602(Blue)","text":""},{"location":"Products/Display/i2c-lcd1602blue.html#introduction","title":"Introduction","text":"<p>An LCD display that can display a max of 16x2 charactors. with the help of the I2C bus convertor and related libraries, you can easily use this module with just 2 wires.  Model: DLC11602A</p> <p> </p>"},{"location":"Products/Display/i2c-lcd1602blue.html#specification","title":"Specification","text":"<ul> <li>LCD Display Mode: STN, Positive, Transflective</li> <li>Display Color: ?Blue</li> <li>Driving Method : 1/16 duty, \u2155 bias</li> <li>Control Method: I2C</li> <li>Viewing Angle: 6H</li> </ul>"},{"location":"Products/Display/i2c-lcd1602blue.html#application","title":"Application","text":"<ul> <li>Electronic equipment</li> </ul>"},{"location":"Products/Display/i2c-lcd1602blue.html#interface","title":"Interface","text":"<p>Connect the I2C LCD1602 to the I2C port of Arduino(SDA&lt;-&gt;A4 and SCL&lt;-&gt;A5) and power this module with 5V voltage as belows: </p>"},{"location":"Products/Display/i2c-lcd1602blue.html#usage","title":"Usage","text":""},{"location":"Products/Display/i2c-lcd1602blue.html#hellow-world-with-this-module","title":"\"Hellow world\" with this module","text":"<p>After connecting the hardware, Downloadthe \"Hello World\" demo to your Arduino board. you can refer to Here to learn how to download the sketchs.</p>"},{"location":"Products/Display/i2c-lcd1602blue.html#display-the-customer-chars","title":"Display the customer chars","text":"<p>You can also make the LCD to display your own chars or logos as you like, you need to constrat your own chars in your program, as the method in the \"CustomChars\" demo. also, it would be easy for you to make the LCD display what you input with the serial port, just as the \"SerialDisplay\" demo, you can sent what you want to display with the serial monitor in the Arduino IDE, please note that you should set the baudrate to 9600. for me, i want the I2C LCD 1602 to show \"good day\". </p>"},{"location":"Products/Display/i2c-lcd1602blue.html#backlight-control-and-contrast-control","title":"Backlight control and Contrast control","text":"<p>The Backlight can be controlled by the firmware or the on-board jumper: Firmware:</p> <pre><code> lcd.backlight();// light on the backlight;\n lcd.noBacklight();//light off the backligth;\n</code></pre> <p>Hardware: There is a jumper on the board, if you take away this jumper , the backlight will aways be off:  You can control the LCD contrast by adjust the on-board potentiometer : </p> <p>For the usagage of other functions, pleae refer to the \"LiquidCrystal_I2C.h\" in the sourcecode of I2C LCD library.</p>"},{"location":"Products/Display/i2c-lcd1602blue.html#resource","title":"Resource","text":"<p>File:I2C LCD Library.zip</p>"},{"location":"Products/Display/i2c-lcd2004yellow.html","title":"I2C LCD2004(Yellow)","text":""},{"location":"Products/Display/i2c-lcd2004yellow.html#introduction","title":"Introduction","text":"<p>An LCD display that can display a max of 2004 charactors. with the help of the I2C bus convertor and related libraries, you can easily use this module with just 2 wires.  Model: DLC12004B</p> <p> </p>"},{"location":"Products/Display/i2c-lcd2004yellow.html#specification","title":"Specification","text":"<ul> <li>LCD Display Mode: STN, Positive, Transflective</li> <li>Display Color: ?Blue</li> <li>Driving Method : 1/16 duty, \u2155 bias</li> <li>Control Method: I2C</li> <li>Viewing Angle: 6H</li> </ul>"},{"location":"Products/Display/i2c-lcd2004yellow.html#application","title":"Application","text":"<ul> <li>Electronic equipment</li> </ul>"},{"location":"Products/Display/i2c-lcd2004yellow.html#interfaceinterface","title":"Interface&amp;Interface","text":"<p>The basic usage of this LCD2004 is the same as the LCD1602, except that you should use this Library for LCD2004. please refer to the Wiki of LCD1602 to learn how to use this module.</p>"},{"location":"Products/Display/i2c-lcd2004yellow.html#resource","title":"Resource","text":"<p>File:I2C LCD Library.zip</p>"},{"location":"Products/Display/meteor-screen-10122-ips-touch-screen-with-rgb-animated-light.html","title":"Meteor Screen 10.1\" IPS Touch Screen (with RGB Animated light)","text":""},{"location":"Products/Display/meteor-screen-10122-ips-touch-screen-with-rgb-animated-light.html#description","title":"Description","text":"<p>This 10.1-inch IPS HD touch display provides resolution of 1280 x 800 and supports multiple systems including Raspberry Pi, Windows, Linux, Ubuntu, etc. and it is also compatible with Raspberry Pi 3/3B+/4B, Jetson Nano, Beaglebone, Banana Pi, and other mainstream development board. The biggest difference between it and other screens is the RGB flowing light design on its back, which not only has 19 lighting modes to choose from but also can adjust the brightness. With the exclusive bracket, you can easily create a cool atmosphere together with the lights. HDMI communication supports plug and play and can be used in multiple scenarios such as Raspberry Pi screen, computer expansion screen, party entertainment system, etc.</p> <p>It supports 10-point touch and multi-touch gestures, such as click, press, zoom in/out, etc. fast response. With three buttons, you can adjust the screen backlight, RGB light switch, switch the light mode and adjust the brightness. Just use the included HDMI cable and USB cable to easily connect to the computer without additional operations. Model: CMS01101D</p> <p></p> <p></p>"},{"location":"Products/Display/meteor-screen-10122-ips-touch-screen-with-rgb-animated-light.html#features","title":"Features","text":"<ul> <li>10.1 inch IPS touch screen;</li> <li>1280 * 800 resolution (the maximum supported resolution is 1920*1080);</li> <li>Support backlight adjustment (BACKLIGHT button);</li> <li>Capacitive touch, supporting 10-point touch;</li> <li>RGB animated light on the back creates a cool atmosphere, and 19 kinds of customized LED modes;</li> <li>The mode can be switched freely, and RGB LED brightness three-level adjustment is supported;</li> <li>High-strength acrylic shell design, consider beauty and practicality;</li> <li>Compatible with Raspbian, Linux, Ubuntu, Kodi, Windows, IOT and other systems (touch drive free);</li> <li>Compatible with development boards such as Raspberry Pi, Jetson Nano, Banana Pi, Beaglebone, etc;</li> <li>Compatible with Sony PS4/PS5, Nintendo Nintendo Switch, Microsoft Xbox, Camera, etc (display only, no touch);</li> <li>Customized design of fixed studs, perfectly compatible with raspberry pie 3/3B+/4B, can quickly build Raspberry Pi all-in-one machine;</li> </ul>"},{"location":"Products/Display/meteor-screen-10122-ips-touch-screen-with-rgb-animated-light.html#specifications","title":"Specifications","text":"Item Description Screen Parameters Size 10.1 inch Panel IPS panel (with 178 \u00b0 wide viewing angle) Resolution 1280*800 Touchscreen Capacitive touch (maximum support for 10 touch), 6H hardness tempered panel Display Port HDMI Backlight Brightness 300 cd/m\u00b2 (with button sdjustment) Contrast Ratio 700\uff1a1 Active Area 216.57*135.36mm Dimensions 239*157.5*12.6mm Power Supply DC 5V-2A (below 2A, backlight/RGB LED brightness will affect normal operation due to low current) Consumption 5.29W (100% brightness, no rgb LED lit) Weight(screen only) 540g RGB LED Type 3535 models, RGB full-color light Quantity 27 pcs (the interval is about 22mm) Brightness 3 level (with button sdjustment) Consumption 7.6W (RGB LEDs 100% brightness, backlight 100% brightness) Light Mode There are 19 modes (with paddle switch), The sequence is:Mode 1: Colorful GradientMode 2: Colorful StrobeMode 3: Colorful ClosureMode 4: Forward FantasyMode 5: Reverse Colorful FlowingMode 6: Forward Colorful FlowingMode 7: Forward Colorful TrailingMode 8: Forward Colorful Running on Red BackgroundMode 9: Reverse Colorful Running on Purple BackgroundMode 10: Forward Colorful FlowingMode 11: Reverse Colorful FlowingMode 12: Forward Green Background Blue dot runningMode 13: reverse green background and blue dot runningMode 14: forward seven color light and dark transitionMode 15: green, red and blue horse runningMode 16: red and brightMode 17: green and brightMode 18: blue and brightMode 19: mixed mode"},{"location":"Products/Display/meteor-screen-10122-ips-touch-screen-with-rgb-animated-light.html#port-and-button","title":"Port and Button","text":"NOTE In order to ensure that the screen and RGB LED can be turned on, it is necessary to both connect the POWER and Touch ports. If only the Touch port is connected, when the screen is turned on, because the RGB LED is automatically turned on, the screen may not be able to display images due to insufficient power supply. Turn off the RGB LED to display images."},{"location":"Products/Display/meteor-screen-10122-ips-touch-screen-with-rgb-animated-light.html#faqs","title":"FAQs","text":"<p>1. When the power supply is 5V1A, when will the screen turn dark? When the power supply is 5V1A, the screen will be dark if the screen brightness is 100%; If the screen brightness is 90% and RGB brightness is level 1, it can be displayed normally; If the RGB brightness is level 3, the screen will be black when the screen brightness is 40%.</p>"},{"location":"Products/Display/rc050-5-inch-hdmi-800-x-480-capacitive-touch-lcd-display-for-raspberry-pi-pc-sony-ps4.html","title":"RC050 5 inch HDMI 800 x 480 Capacitive Touch LCD Display for Raspberry Pi/ PC/ SONY PS4","text":""},{"location":"Products/Display/rc050-5-inch-hdmi-800-x-480-capacitive-touch-lcd-display-for-raspberry-pi-pc-sony-ps4.html#description","title":"Description","text":"<p>This product is a universal HDMI display, 800\u00d7480 super clear resolution, support raspberry PI and a variety of mini PC, can also be used as a computer monitor.</p> <p>Model:RC050</p> <p> </p>"},{"location":"Products/Display/rc050-5-inch-hdmi-800-x-480-capacitive-touch-lcd-display-for-raspberry-pi-pc-sony-ps4.html#features","title":"Features","text":"<ul> <li>USB capacitive touch control.</li> <li>Support HDMI audio output.</li> <li>CE, RoHS certification.</li> <li>Free drive.</li> <li>Ultra low power consumption backlight.</li> </ul>"},{"location":"Products/Display/rc050-5-inch-hdmi-800-x-480-capacitive-touch-lcd-display-for-raspberry-pi-pc-sony-ps4.html#specifications","title":"Specifications","text":"<ul> <li>Size: 5.0 (inch)</li> <li>Resolution: 800 \u00d7 480 (dots)</li> <li>Touch: 5 point capacitive touch</li> <li>Audio output: support</li> <li>Dimensions: 121.11*95.24 (mm)</li> <li>Package Size: 153*135*51 (mm)</li> <li>Rough Weight(Package containing): 259 (g)</li> <li>Power Dissipation: 0.30A*5V</li> </ul>"},{"location":"Products/Display/rc050-5-inch-hdmi-800-x-480-capacitive-touch-lcd-display-for-raspberry-pi-pc-sony-ps4.html#usage","title":"Usage","text":""},{"location":"Products/Display/rc050-5-inch-hdmi-800-x-480-capacitive-touch-lcd-display-for-raspberry-pi-pc-sony-ps4.html#1-connect-raspberry-pi-to-use","title":"1: Connect Raspberry Pi to use","text":"<p>Raspbian / Ubuntu / Kali / Retropie and WIN10 IoT systems for Raspberry Pi.When LCD works on raspberry PI systems, the resolution must be set manually, otherwise, it will be recognized as the system default resolution.</p> <ul> <li>Step 1: Please download the image of the latest version from Raspberry Pi's website.</li> </ul> <p>https://www.raspberrypi.org/downloads/raspbian/</p> <ul> <li>Step 2:Download the compressed file to your PC and unpack it to get the .Img file.</li> <li>Step 3:The TF card is connected to the PC and formatted using the SDFormatter software.</li> <li>Step 41:Open the Win32DiskImager software, select the system image prepared in step 1, and click write to burn the system image.</li> <li>Step 5:After the programming is completed, open the config.txt file in the root directory of the TF card, and add the following code at the end of \u201cconfig.txt\u201d to save and safely eject the TF card.</li> </ul> <p>added by elecrow-pitft-setup hdmi_force_hotplug=1 max_usb_current=1 hdmi_drive=1 hdmi_group=2 hdmi_mode=1 hdmi_mode=87 hdmi_cvt 800 480 60 6 0 0 0 dtoverlay=ads7846,cs=1,penirq=25,penirq_pull=2,speed=50000,keep_vref_on=0,swapxy=0, pmax=255,xohms=150,xmin=200,xmax=3900,ymin=200,ymax=3900 display_rotate=0 end elecrow-pitft-setup</p> <ul> <li>Step 6:Save and insert the TF card into the Raspberry Pi.</li> <li>Step 7:Connect the touch interface of the 5-inch screen to the USB interface of the Raspberry Pi.</li> <li>Step 8:Connect the HDMI interface of the 5-inch screen to the HDMI interface of the Raspberry Pi, power on the Raspberry Pi, and wait for a few seconds to display normally.</li> </ul>"},{"location":"Products/Display/rc050-5-inch-hdmi-800-x-480-capacitive-touch-lcd-display-for-raspberry-pi-pc-sony-ps4.html#2-use-as-pc-monitor","title":"2: Use as PC monitor","text":"<ul> <li>Step 1:Connect the computer HDMI output signal to the LCD HDMI interface by using the HDMI cable</li> <li>Step 2:Connect the LCD's USB Touch interface (Either of the two Micro USB) to the USB port of the device</li> <li>Step 3:If there are several monitors, please unplug other monitor connectors first, and use LCD as the only monitor for testing.</li> </ul>"},{"location":"Products/Display/rc070m-7-inch-1024-x-600-touch-screen-display-with-720p-camera-for-raspberry-pi-macbook-pro-windows-10.html","title":"RC070M 7 inch 1024 X 600 Touch Screen Display with 720P Camera for Raspberry Pi/ MacBook Pro./ Windows 10","text":""},{"location":"Products/Display/rc070m-7-inch-1024-x-600-touch-screen-display-with-720p-camera-for-raspberry-pi-macbook-pro-windows-10.html#description","title":"Description","text":"<p>This is a wonderful 7 inch HDMI monitor with capacitive touchscreen and 720p camera module and it's driver free. It's compatible for Raspberry Pi, beagle bone black, windows 10 and Mac book pro. It works well on these platforms, easy to plug and play, all you need to do is to adjust the resolution on Raspberry Pi. What exciting is that it has been extended with two USB HOST ports, that allows you connect more devices to your screen, such as the USB dongle or the USB mouse or keyboard. If you want to use it with your Raspberry Pi, you could edit config.txt to set the HDMI to the native 1024 x 600 in case it doesn't detect the resolution properly. The easiest way to edit config.txt is to insert the Pi TF card using any text editor and save the edit config.txt.</p> <p>Model:RC070M</p> <p></p>"},{"location":"Products/Display/rc070m-7-inch-1024-x-600-touch-screen-display-with-720p-camera-for-raspberry-pi-macbook-pro-windows-10.html#features","title":"Features","text":"<ul> <li>It supports multi-point touch.</li> <li>Low power consumption and compatible with UVC standard.</li> <li>USB capacitive touch control.</li> <li>Free driver, plug and play.</li> <li>Supports Raspbian, Ubuntu Mate, NOOBS with Raspberry Pi.</li> <li>Supports Debian, Angstrom with BeagleBone.</li> <li>Supports Windows / Ubuntu / Mac with PC.</li> <li>Supports Intel-Processor Base MiniPC.</li> <li>ULP (Ultra Low Power) consumption backlight.</li> <li>Extend Two USB HOST Ports.</li> </ul>"},{"location":"Products/Display/rc070m-7-inch-1024-x-600-touch-screen-display-with-720p-camera-for-raspberry-pi-macbook-pro-windows-10.html#specifications","title":"Specifications","text":"<ul> <li>Power: 5V power by USB Micro</li> <li>Current: max 500mA</li> <li>Display type: 7 inch TFT LCD</li> <li>Resolution: 1024 x 600</li> <li>Touch screen: USB capacitive</li> <li>Touch points: 10 points maximum</li> <li>Interface: HDMI, USB 2.0 full speed</li> <li>Dimension: 177.06mm x 113.09mm x 15.2mm</li> </ul>"},{"location":"Products/Display/rc070m-7-inch-1024-x-600-touch-screen-display-with-720p-camera-for-raspberry-pi-macbook-pro-windows-10.html#usage","title":"Usage","text":""},{"location":"Products/Display/rc070m-7-inch-1024-x-600-touch-screen-display-with-720p-camera-for-raspberry-pi-macbook-pro-windows-10.html#1-connect-raspberry-pi-to-use","title":"1: Connect Raspberry Pi to use","text":"<ul> <li>Step 1: Please download the image of the latest version from Raspberry Pi's website.</li> </ul> <p>https://www.raspberrypi.org/downloads/raspbian/</p> <ul> <li>Step 2: Download the compressed file to your PC and unpack it to get the .Img file.</li> <li>Step 3: The TF card is connected to the PC and formatted using the \u201cSDFormatter\u201d software.</li> <li>Step 4: Open the \u201cWin32DiskImager\u201d software, select the system image prepared in step 1), and click write to burn the system image.</li> <li>Step 5: After the programming is completed, open the \u201cconfig.txt\u201d file in the root directory of the TF card, and add the following code at the end of \u201cconfig.txt\u201d to save and safely eject the TF card.</li> </ul> <p>hdmi_group=2 hdmi_mode=87 hdmi_cvt 1024 600 60 3 0 0 0 hdmi_force_hotplug=1  </p> <ul> <li>Step 6: Save and insert the TF card into the Raspberry Pi.</li> <li>Step 7: Connect the touch interface of the 7-inch screen to the USB interface of the Raspberry Pi with Micro USB cable.</li> <li>Step 8: Connect the HDMI interface of the 7-inch screen to the HDMI interface of the Raspberry Pi, power on the Raspberry Pi, and wait for a few seconds to display normally.</li> </ul> <p></p>"},{"location":"Products/Display/rc070m-7-inch-1024-x-600-touch-screen-display-with-720p-camera-for-raspberry-pi-macbook-pro-windows-10.html#2-use-as-pc-monitor","title":"2: Use as PC monitor","text":"<ul> <li>Step 1: Connect the computer HDMI output signal to the LCD HDMI interface by using the HDMI cable.</li> <li>Step 2: Connect the LCD's USB Touch interface to the USB port of the device.</li> <li>Step 3: If there are several monitors, please unplug other monitor connectors first, and use LCD as the only monitor for testing.</li> </ul>"},{"location":"Products/Display/rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html","title":"RR040I 4 inch HD 800x480 Resolution IPS TFT Touch Screen Display for Raspberry Pi","text":""},{"location":"Products/Display/rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#description","title":"Description","text":"<p>4.0-inch IPS full-angle display, support HDMI input, refresh rate up to 60FPS\u3002 The physical resolution is 800x480</p> <p>Model:DIS10204D</p>"},{"location":"Products/Display/rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#features","title":"Features","text":"<ul> <li>Raspberry Pi monitor with touch control (need to install touch driver)</li> <li>It can be used as standard HDMI output device for computer display (no touch function)</li> <li>Compatible with and can be directly inserted into all versions of raspberry PI motherboards (raspberry PI 1 generation B and Zero need additional HDMI cable)</li> <li>Support HDMI audio output, backlight brightness adjustable</li> </ul>"},{"location":"Products/Display/rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#specifications","title":"Specifications","text":"<ul> <li>Screen Size 4.0inch</li> <li>LCD Type TFT</li> <li>Module Interface HDMI</li> <li>Resolution 800*480 (Pixel)</li> <li>Touch Screen Controller XPT2046</li> <li>LCD Driver IC NT35510</li> <li>Backlight LED</li> <li>power consumption 0.16A*5V</li> <li>Working temperature\uff08\u2103\uff09 -20~60</li> <li>Module PCB Size 98.60*58.05 (mm)</li> <li>Package Size 143*134*51 (mm)</li> <li>Rough Weight (Package containing) (g) 126 (g)</li> </ul>"},{"location":"Products/Display/rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#interface-function","title":"Interface Function","text":"<p>\u2460 3.5mm Headphone Jack: Output audio signal</p> <p>\u2461 HDMI\uff1aUsed to connect the main board and LCD display for HDMI transmission</p> <p>\u2462 Micro USB\uff1aGet 5V Power from USB, If \u2464-13*2 Pin Socket has been connected, that this USB interface can be No Connect.</p> <p>\u2463 Backlight adjustment button: Short press backlight change 10%, long press a few seconds to close backlight; short press to open backlight</p> <p>\u2464 13*2 Pin Socket\uff1aGet +5V Power from raspberry Pi to LCD, at the same time transfer touch signal back to Raspberry Pi.</p> <p></p>"},{"location":"Products/Display/rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#usage","title":"Usage","text":""},{"location":"Products/Display/rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#a-use-with-raspbian","title":"A. Use with Raspbian","text":"<p>Step 1\uff1aInstall Raspbian official image</p> <p>1)Please download the image of the latest version from Raspberry Pi's website\uff1ahttps://www.raspberrypi.org/downloads/raspbian/</p> <p>2)Download the compressed file to your PC and unpack it to get the .Img file.</p> <p>3)The TF card is connected to the PC and formatted using the \u201cSDFormatter\u201d software.</p> <p>4)Open the \u201cWin32DiskImager\u201d software, select the system image prepared in step 1), and click write to burn the system image.</p> <p>5)Insert the TF card into the Raspberry Pi.</p> <p>6)Connect to Raspberry Pi</p> <p></p> <p></p> <p>As shown in the figure, connect the LCD module to the Raspberry Pi</p> <p>Step 2: Install the LCD driver</p> <p>Install drivers in the Raspbian system (Raspberry Pi requires Internet connection)</p> <p>1)Log on to the Raspberry Pi terminal (User: pi; Password: raspberry)</p> <p>2)Execute the following command (copy and paste it by right-clicking on the Putty window):</p> <pre><code> sudo rm -rf LCD-show&lt;br&gt;&lt;/br&gt;\n git clone https://github.com/goodtft/LCD-show.git\n chmod -R 755 LCD-show\n cd LCD-show/\n sudo ./MPI4008-show\n</code></pre> <p>3)Wait for a moment after executing, the system will restart automatically. If the LCD can be normally displayed and touched, the installation of the driver is successful.</p>"},{"location":"Products/Display/rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#buse-with-ubuntu-kali-or-retropie-official-image","title":"B.Use with Ubuntu, Kali or RetroPie official image","text":"<p>A.Install Ubuntu, Kali or RetroPie official image</p> <p>1)Please download the image of the latest version from blew websites. Ubuntu: https://ubuntu-mate.org/raspberry-pi/RetroPie: https://retropie.org.uk/download/Kali: https://www.offensive-security.com/kali-linux-arm-images/</p> <p>2)Download the compressed file to your PC and unpack it to get the .Img file.</p> <p>3)The TF card is connected to the PC and formatted using the \u201cSDFormatter\u201d software.</p> <p>4)Open the \u201cWin32DiskImager\u201d software, select the system image prepared in step 1), and click write to burn the system image.</p> <p>5)Insert the TF card into the Raspberry Pi.</p> <p>6)Connect to Raspberry Pi.</p> <p>B.Install the LCD driver</p> <p>Due to system differences, Ubuntu, Kali, RetroPie are temporarily unable to install drivers online. Only the offline installation method can be used.</p> <p>1)Download local drivers \"LCD-show.tar.gz\" (Note: if the version does not match, the LCD may not display properly)</p> <p>Kali-2019.1-Drivers \uff08see attachment\uff09</p> <p>Ubuntu-18.04-Drivers \uff08see attachment\uff09</p> <p>RetroPie-Pi2-Pi3-Drivers \uff08see attachment\uff09</p> <p>RetroPie-Pi1-ZERO-Drivers \uff08see attachment\uff09</p> <p>2)Copy \"LCD-show.tar.gz\" to the Raspberry Pi system</p> <p>3)Log on to the Raspberry Pi terminal, Execute the following command</p> <pre><code> tar -xvzf LCD-show.tar.gz\n chmod -R 755 LCD-show \n cd LCD-show/\n sudo ./MPI4008-show\n</code></pre> <p>4)After the installation of the LCD driver is completed, the system will restart automatically. If the LCD can be normally displayed and touched, the installation of the driver is successful.</p> <p>3: Use as PC Monitor</p> <p>1)Connected the computer HDMI output to the LCD HDMI interface by HDMI cable.</p> <p>2)Power to Micro USB interface</p> <p>3)If you have multiple monitors, please pull the other displayer, and make this LCD as the only displayer for testing.</p> <p>4)As computer monitors, the touch function will not be available.</p>"},{"location":"Products/Display/rr040i-4-inch-hd-800x480-resolution-ips-tft-touch-screen-display-for-raspberry-pi.html#image-download","title":"Image Download","text":"<p>If you have difficulty installing the driver, or if you still can't use the display properly after installing the driver, please try our already configured images for tested. Just need download and write the image into the Micro SD card. DO NOT need any driver installation steps. (see attachment for miror)</p>"},{"location":"Products/Display/rr070-7-inch-1024x600-hdmivgaav-display-for-raspberry-pi-bb2b2b3b.html","title":"RR070 7 Inch 1024x600 HDMI/VGA/AV Display for Raspberry Pi B/B+/2B/3B","text":""},{"location":"Products/Display/rr070-7-inch-1024x600-hdmivgaav-display-for-raspberry-pi-bb2b2b3b.html#description","title":"Description","text":"<p>This is an adorable small HDMI television with incredibly high resolution! We tried to get the smallest possible HDMI display with high-res, high-contrast visibility. The display is very easy to use - simply connect the 12VDC adapter to the 2.1mm center-positive DC jack, then connect a digital video source to one of the ports. It work connect to any device with direct HDMI such as raspberry pi, banana pi and pcduino. The biggest difference is that it can work when you plug it on device without any software support. Wish you have a better experience.</p> <p>Model:RR070</p>"},{"location":"Products/Display/rr070-7-inch-1024x600-hdmivgaav-display-for-raspberry-pi-bb2b2b3b.html#specifications","title":"Specifications","text":"<ul> <li>Input voltage: DC 11-13V</li> <li>Power consumption: \u22646W</li> <li>16:9 display ratio</li> <li>Pixels: 1024 \u00d7 600 (1,152,000) pixels, the maximum support 1920X1440.</li> <li>Multi-language menu: English, French, Italian, German, Japanese, Spanish, Russian, Chinese.</li> <li>Brightness: 300cd / m2</li> <li>VGA input: H: 30-60KHZ, V: 60-75HZ</li> <li>Sound output: \u2265250mW / 8\u03a9</li> <li>Specifications (mm): 188 (L) x 129 (W) x 40 (H)</li> <li>Working temperature: -20 ~ 55 \u2103</li> <li>Storage temperature: -30 ~ 65 \u2103</li> </ul>"},{"location":"Products/Display/rr070-7-inch-1024x600-hdmivgaav-display-for-raspberry-pi-bb2b2b3b.html#usage","title":"Usage","text":""},{"location":"Products/Display/rr070-7-inch-1024x600-hdmivgaav-display-for-raspberry-pi-bb2b2b3b.html#1-connect-raspberry-pi-to-use","title":"1: Connect Raspberry Pi to use","text":"<ul> <li>Step 1: Please download the image of the latest version from Raspberry Pi's website.</li> </ul> <p>https://www.raspberrypi.org/downloads/raspbian/</p> <ul> <li>Step 2: Download the compressed file to your PC and unpack it to get the .Img file.</li> <li>Step 3: The TF card is connected to the PC and formatted using the SDFormatter software.</li> <li>Step 4: Open the Win32DiskImager software, select the system image prepared in step 1, and click write to burn the system image.</li> <li>Step 5: After the programming is completed, open the config.txt file in the root directory of the TF card, and add the following code at the end of \u201cconfig.txt\u201d to save and safely eject the TF card.</li> </ul> <p>hdmi_force_hotplug=1 max_usb_current=1 hdmi_group=2 hdmi_mode=1 hdmi_mode=87 hdmi_cvt 1024 600 60 6 0 0 0 hdmi_drive=1</p> <ul> <li>Step 6: Save and insert the TF card into the Raspberry Pi.</li> <li>Step 7: Connect the HDMI interface of the 7-inch screen to the HDMI interface of the Raspberry Pi, power on the Raspberry Pi, and wait for a few seconds to display normally.</li> <li>Step 8: Connect the 12V/2A power adapter to the DC interface on the screen. Then power on the Raspberry Pi, and wait for a few seconds to display normally.</li> </ul>"},{"location":"Products/Display/rr070-7-inch-1024x600-hdmivgaav-display-for-raspberry-pi-bb2b2b3b.html#2use-as-pc-monitor","title":"2\uff1aUse as PC Monitor","text":"<p>Install drivers in the Raspbian system (Raspberry Pi requires Internet connection).</p> <ul> <li>Step 1: Connect the computer HDMI output signal to the display\u2019s HDMI interface by using the HDMI cable.</li> <li>Step 2: Connect the 12V/2A power adapter to the DC interface on the screen.</li> <li>Step 3: Then it can display normally.</li> </ul>"},{"location":"Products/Display/sf101-101-inch-1920x1080-display-hdmi-vga-ips-ps3-ps4-gaming-screen.html","title":"SF101 10.1 Inch 1920x1080 Display HDMI VGA IPS PS3 PS4 Gaming Screen","text":""},{"location":"Products/Display/sf101-101-inch-1920x1080-display-hdmi-vga-ips-ps3-ps4-gaming-screen.html#description","title":"Description","text":"<p>The 10.1 inch HD LED display comes with Full HD 1080p support, the HDMI screen delivers spectacular image quality. The on-screen vibrancy is contrasted by the vortex pattern on the pedestal. it uses the VESA wall mount pattern, easily mount your LED monitor on the wall in a manner that is both aesthetically pleasing and conveniently practical. You will be able to save sample space and view the screen in a position that affords the greatest visibility possible. IPS provides advanced in-plane switching technology for premium color performance at any viewing angle. With Flicker-less technology say goodbye to annoying screen flickering, and with a blue light filter, you\u2019re shielded from eye-straining blue light. Works perfectly for PS3 PS4 WiiU XBOX360 Raspberry Pi 3, 2 1 Model B B+, industrial equipment, car audio and video, car headrest, medical equipment display.</p> <p>Model:SF101</p> <p></p>"},{"location":"Products/Display/sf101-101-inch-1920x1080-display-hdmi-vga-ips-ps3-ps4-gaming-screen.html#features","title":"Features","text":"<ul> <li>1920*1080 resolution, up to 1080p with clear image and colorful display.</li> <li>IPS LED Technology Display brings you a subversive color experience and large viewing screen.</li> <li>Support audio speaker with built-in high-quality loudspeakers.</li> <li>10.1 inch Screen Size - portable display monitor much more easily to take it to anywhere you like.</li> <li>Compatible for PS3 PS4 XBOX360 Raspberry pi, industrial equipment, car audio and video, car headrest, medical equipment display.</li> </ul>"},{"location":"Products/Display/sf101-101-inch-1920x1080-display-hdmi-vga-ips-ps3-ps4-gaming-screen.html#specifications","title":"Specifications","text":"<ul> <li>Model: SF101</li> <li>Display Technology: LED Display</li> <li>Screen Size: 10.1 inches</li> <li>Aspect ratio: 16: 9 (width: height)</li> <li>Panel brightness: 350cd / m\u00b2</li> <li>Contrast: 800: 1 (Min) (transmission)</li> <li>Resolution: 1920X1080, up to 1080p</li> <li>Viewing angle: 170 degrees wide viewing angle</li> <li>Appearance size: 255mm x 164mmX28mm</li> <li>Working environment temperature: -30\u2103--+50\u2103</li> <li>Display mode: Constant black display, transmission type)</li> <li>Display color: 262K/16.7M (6-bit/6-bit+Hi-FRC)</li> <li>Response time: 13/12 (TYP) (Tr/Td) (ms)</li> </ul>"},{"location":"Products/Display/sf101-101-inch-1920x1080-display-hdmi-vga-ips-ps3-ps4-gaming-screen.html#usage","title":"Usage","text":""},{"location":"Products/Display/sf101-101-inch-1920x1080-display-hdmi-vga-ips-ps3-ps4-gaming-screen.html#1-connect-raspberry-pi-to-use","title":"1: Connect Raspberry Pi to use","text":"<p>Step 1: Please download the image of the latest version from Raspberry Pi's website. https://www.raspberrypi.org/downloads/raspbian/ Step 2: Download the compressed file to your PC and unpack it to get the image file. Step 3: The TF card is connected to the PC and formatted using the SDFormatter software. Step 4: Open the Win32DiskImager software, select the system image prepared in step 1, and click write to burn the system image. Step 5: After the programming is completed, then insert the TF card into the Raspberry Pi. Step 6: Connect the HDMI interface of the 10.1-inch screen to the HDMI interface of the Raspberry Pi, Step 7: Connect the 12V/2A power adapter to the DC interface on the screen. Then power on the Raspberry Pi, and wait for a few seconds to display normally.</p>"},{"location":"Products/Display/sf101-101-inch-1920x1080-display-hdmi-vga-ips-ps3-ps4-gaming-screen.html#2use-as-pc-monitor","title":"2\uff1aUse as PC Monitor","text":"<p>Step 1: Connect the computer HDMI output signal to the display's HDMI interface by using the HDMI cable. Step 2: Connect the 12V/2A power adapter to the DC interface on the screen. Step 3: Then it can display normally.</p>"},{"location":"Products/Display/sf101c-101-inch-1280800-ips-hdmi-lcd-displaywith-case-for-raspberry-pi.html","title":"SF101C 10.1 inch 1280*800 IPS HDMI LCD Display(with case) for Raspberry Pi","text":""},{"location":"Products/Display/sf101c-101-inch-1280800-ips-hdmi-lcd-displaywith-case-for-raspberry-pi.html#description","title":"Description","text":"<p>This is the latest 10.1-inch screen for raspberry pi, under normal circumstances we used to match the raspberry pi, of course, it is compatible with many occasions due to its HDMI interface. Its IPS screen has 1280 * 800 high resolution, and this is a capacitive screen, which means high sensitivity, supports up to ten-points touch, when it works with raspberry pi, it is not required to driver support, and compatible with many systems, including win10/8/7 .</p> <p>Model:DRD01230D</p> <p></p>"},{"location":"Products/Display/sf101c-101-inch-1280800-ips-hdmi-lcd-displaywith-case-for-raspberry-pi.html#features","title":"Features","text":"<ul> <li>IPS raspberry pi screen,1280\u00d7800 high resolution.</li> <li>Capacitive touch control, supports up to ten-points touch.</li> <li>When works with Raspberry Pi, supports Raspbian, Ubuntu, single touch, and driver free.</li> <li>Supports Banana Pi, Banana Pro, comes with Ubuntu, Raspbian images.</li> <li>Supports BB Black, comes with Angstrom image.</li> <li>HDMI interface for displaying, USB interface for touch control.</li> <li>Backlight control to lower power consumption.</li> </ul>"},{"location":"Products/Display/sf101c-101-inch-1280800-ips-hdmi-lcd-displaywith-case-for-raspberry-pi.html#specifications","title":"Specifications","text":"<ul> <li>Model: SF101C</li> <li>Working Voltage\uff1aDC 5V</li> <li>Resolution: 1280 x 800</li> </ul>"},{"location":"Products/Display/sf101c-101-inch-1280800-ips-hdmi-lcd-displaywith-case-for-raspberry-pi.html#usage","title":"Usage","text":""},{"location":"Products/Display/sf101c-101-inch-1280800-ips-hdmi-lcd-displaywith-case-for-raspberry-pi.html#1-working-with-raspberry-pi","title":"1: Working with Raspberry Pi","text":"<p>When working with Raspberry Pi, you should set the resolution of the LCD by yourself, or else the LCD screen will not work.</p> <p>Step 1: Please download the image of the latest version from Raspberry Pi's website. https://www.raspberrypi.org/downloads/raspbian/ Step 2: Download the compressed file to your PC and unpack it to get the .Img file. Step 3: The TF card is connected to the PC and formatted using the SDFormatter software. Step 4Open the Win32DiskImager software, select the system image prepared in step 1, and click write to burn the system image. Step 5:After the programming is completed, open the config.txt file in the root directory of the TF card, and add the following code at the end of \"config.txt\" to save and safely eject the TF card.  </p> <p>max_usb_current=1 hdmi_group=2 hdmi_mode=87 hdmi_cvt 1280 800 60 6 0 0 0 hdmi_drive=1  </p> <p>Step 6: Save and insert the TF card into the Raspberry Pi. Step 7: Connect the HDMI port of the LCD to the HDMI port on your Pi with a HDMI cable. Step 8: Connect the Touch port of the LCD to one of the USB ports on your Pi. Step 9: Connect the Power Only Port of the LCD to 5V 2.5A power adapter with a Type A to micro USB cable. Step 10: Turn on the \u201cbacklight\u201d switch on the back of the LCD. </p>"},{"location":"Products/Display/sf101c-101-inch-1280800-ips-hdmi-lcd-displaywith-case-for-raspberry-pi.html#2use-as-pc-monitor","title":"2\uff1aUse as PC Monitor","text":"<p>This product supports Windows 10/8.1/7. Step 1: Connect the HDMI port of the LCD to the HDMI port on your PC with a HDMI cable. Step 2: Connect the Touch port of the LCD to one of the USB ports on your PC. Step 3: Connect the Power Only Port of the LCD to a 5V 2.5A power adapter with a Type A to micro USB cable. Step 4: Turn on the backlight switch on the back of LCD.  </p>"},{"location":"Products/Display/sf101r-101-inch-portable-hd-display-for-raspberry-pi-3.html","title":"SF101R 10.1 Inch Portable HD Display for Raspberry Pi 3","text":""},{"location":"Products/Display/sf101r-101-inch-portable-hd-display-for-raspberry-pi-3.html#description","title":"Description","text":"<p>Our 10.1inch portable HD display is super powerful of 16:9 standard and brand-new LED LCD screen with many interfaces of HDMI+VGA+AV+TV+USB. You could apply it as the computer display, video monitor, PS\u00be/XBOX game display and video player and so on. Besides you could also enjoy its high panel brightness of 400cd/m2 and fast response time of 13/12 (TYP) (Tr/Td) (ms). Moreover, the 10.1 inch HD display runs with high resolution, audio, remote- control and stereo speaker at a wide range of -30\u2103to +50\u2103working environment temperature which all could share you comfortable and convenient using experience.</p> <p>Model:SF101R</p> <p></p>"},{"location":"Products/Display/sf101r-101-inch-portable-hd-display-for-raspberry-pi-3.html#features","title":"Features","text":"<ul> <li>Remote control, by an exquisite infrared remote controller</li> <li>A wide range of -30\u2103 to +50\u2103 working environment temperature</li> <li>With audio output and compatible with speakers and headphones</li> <li>High resolution of 1024x600, up to 1080p for you to enjoy clearer pictures and movies</li> <li>LED LCD screen and Stereo speaker to bring you better visual and sound effects</li> </ul>"},{"location":"Products/Display/sf101r-101-inch-portable-hd-display-for-raspberry-pi-3.html#specifications","title":"Specifications","text":"<ul> <li>Panel Size: 10.1 inches</li> <li>Aspect ratio: 16: 9 (width: height)</li> <li>Spanel brightness: 400cd / m\u00b2</li> <li>Contrast: 800: 1 (Min) (transmission)</li> <li>Resolution: 1024x600, up to 1080p</li> <li>Viewing angle: 89/89/89/89 (left/right/up/down)</li> <li>Liquid crystal appearance size: 233.8mm x 138.5mm</li> <li>Display area: 222.52 x 125.11mm</li> <li>Working environment temperature: -30\u2103--+50\u2103</li> <li>Display mode: Constant black display, transmission type</li> <li>Display color: 262K/16.7M (6-bit/6-bit+Hi-FRC)</li> <li>Response time: 13/12 (TYP) (Tr/Td)\uff08ms\uff09</li> </ul>"},{"location":"Products/Display/sf101r-101-inch-portable-hd-display-for-raspberry-pi-3.html#usage","title":"Usage","text":""},{"location":"Products/Display/sf101r-101-inch-portable-hd-display-for-raspberry-pi-3.html#1-connect-raspberry-pi-to-use","title":"1: Connect Raspberry Pi to use","text":"<p>Step 1: Please download the image of the latest version from Raspberry Pi's website. https://www.raspberrypi.org/downloads/raspbian/ Step 2:Download the compressed file to your PC and unpack it to get the .Img file. Step 3:The TF card is connected to the PC and formatted using the SDFormatter software. Step 4:Open the Win32DiskImager software, select the system image prepared in step 1 and click write to burn the system image. Step 5:After the programming is completed, then insert the TF card into the Raspberry Pi. Step 6:Connect the HDMI port of the 10.1-inch screen to the HDMI port of the Raspberry Pi. Step 7:Connect the 12V power adapter to the DC interface on the screen. Then power on the Raspberry Pi, and wait for a few seconds to display normally.</p>"},{"location":"Products/Display/sf101r-101-inch-portable-hd-display-for-raspberry-pi-3.html#2use-as-pc-monitor","title":"2\uff1aUse as PC Monitor","text":"<p>Step 1: Connect the computer HDMI output signal to the display's HDMI interface by using the HDMI cable. Step 2:Connect the 12V power adapter to the DC interface on the screen. Step 3:Then it can display normally.  </p>"},{"location":"Products/Display/sf116-116-inch-1920x1080-hdmi-1080p-led-display-for-raspberry-pi.html","title":"SF116 11.6 Inch 1920x1080 HDMI 1080P LED Display for Raspberry Pi","text":""},{"location":"Products/Display/sf116-116-inch-1920x1080-hdmi-1080p-led-display-for-raspberry-pi.html#description","title":"Description","text":"<p>HDMI PS3 PS4WiiU xbox360 is an aluminum-based HD resolution gaming monitor. Its good sound quality, clear quality, good heat dissipation, with metal texture, design reasonable, beloved by the majority of game enthusiasts, model shooting lovers. Besides, it has automatic recognition function with HDMI/VGA of the input port and its backlight brightness can be adjusted, which is widely used in our daily lives such as used as medical equipment display or industrial equipment, car video and car headrest monitor etc, at the same time, it can compatible PS3 PS4 XBOX360 Raspberry pi. This product is in line with industrial equipment and home entertainment audio and video display, is definitely a good choice.</p> <p>Model:SF116</p> <p></p>"},{"location":"Products/Display/sf116-116-inch-1920x1080-hdmi-1080p-led-display-for-raspberry-pi.html#features","title":"Features","text":"<ul> <li>Metal texture</li> <li>Adopted imported TFT LCD</li> <li>High definition and good sound quality</li> <li>Clear picture quality, IPS wide-color gamut</li> <li>Aluminum alloy material,durability,good heat dissipation</li> </ul>"},{"location":"Products/Display/sf116-116-inch-1920x1080-hdmi-1080p-led-display-for-raspberry-pi.html#specifications","title":"Specifications","text":"<ul> <li>Display Technology: LED Display</li> <li>Screen Size: 11.6 inches</li> <li>Aspect ratio: 16: 9 (width: height)</li> <li>Panel brightness: 350cd / m\u00b2</li> <li>Contrast: 800: 1 (Min) (transmission)</li> <li>Resolution: 1920X1080, up to 1080p</li> <li>Viewing angle: 170 degrees wide viewing angle</li> <li>Appearance size: 288mm x 185mmX25mm</li> <li>Display area: 257mmx 115mm</li> <li>Working environment temperature: -30\u2103--+50\u2103</li> <li>Display mode: Constant black display, transmission type</li> <li>Display color: 262K/16.7M (6-bit/6-bit+Hi-FRC)</li> <li>Response time: 13/12 (TYP) (Tr/Td)\uff08ms</li> <li>Two colors to choose: black and gold</li> </ul>"},{"location":"Products/Display/sf116-116-inch-1920x1080-hdmi-1080p-led-display-for-raspberry-pi.html#usage","title":"Usage","text":""},{"location":"Products/Display/sf116-116-inch-1920x1080-hdmi-1080p-led-display-for-raspberry-pi.html#1-connect-raspberry-pi-to-use","title":"1: Connect Raspberry Pi to use","text":"<p>Step 1: Please download the image of the latest version from Raspberry Pi's website.   https://www.raspberrypi.org/downloads/raspbian/ Step 2: Download the compressed file to your PC and unpack it to get the .Img file. Step 3: The TF card is connected to the PC and formatted using the SDFormatter software.   Step 4: Open the Win32DiskImager software, select the system image prepared in step 1, and click write to burn the system image. Step 5: After the programming is completed, then insert the TF card into the Raspberry Pi. Step 6: Connect the HDMI interface of the 11.6-inch screen to the HDMI interface of the Raspberry Pi. Step 7: Connect the 12V/2A power adapter to the DC interface on the screen. Then power on the Raspberry Pi, and wait for a few seconds to display normally. </p>"},{"location":"Products/Display/sf116-116-inch-1920x1080-hdmi-1080p-led-display-for-raspberry-pi.html#2use-as-pc-monitor","title":"2\uff1aUse as PC Monitor","text":"<p>Step 1: Connect the computer HDMI output signal to the display\u2019s HDMI interface by using the HDMI cable. Step 2: Connect the 12V/2A power adapter to the DC interface on the screen. Step 3: Then it can display normally.</p>"},{"location":"Products/Display/sf133-133-inch-ips-1920x1080-monitor-dual-hdmi-portableps3-ps4-gaming-screen.html","title":"SF133 13.3 Inch IPS 1920X1080 Monitor Dual HDMI PortablePS3 PS4 Gaming Screen","text":""},{"location":"Products/Display/sf133-133-inch-ips-1920x1080-monitor-dual-hdmi-portableps3-ps4-gaming-screen.html#description","title":"Description","text":"<p>The SF133 13.3 inch Full HD LED monitor, with Dual HDMI interface, is optimized for the finest image and color quality. This approach extends to the sturdy stand and slim profile without compromising style in ensuring stability and durability. Splendid Video Intelligence Technology enhances color, brightness, contrast, and sharpness to provide optimal viewing. IPS provides advanced in-plane switching technology for premium color performance at any viewing angle. Crafted with stylish slim bezels, this screen creates a sophisticated look while keeping things nice and compact. Minimize distractions and create a multi-panel configuration with slim bezel monitors. Compatible with PS3 PS4 XBOX360 Raspberry pi, industrial equipment, car audio and video, car headrest, medical equipment display.</p> <p>Model:SF133</p> <p> </p>"},{"location":"Products/Display/sf133-133-inch-ips-1920x1080-monitor-dual-hdmi-portableps3-ps4-gaming-screen.html#features","title":"Features","text":"<ul> <li>Full HD LED monitor, with dual HDMI interface, optimized for the finest image and color quality.</li> <li>Support audio speaker with built-in high-quality loudspeakers.</li> <li>IPS LED Technology Display with an aluminum material design. More durable for usage.</li> </ul>"},{"location":"Products/Display/sf133-133-inch-ips-1920x1080-monitor-dual-hdmi-portableps3-ps4-gaming-screen.html#specifications","title":"Specifications","text":"<ul> <li>Display Technology: LED Display</li> <li>Screen Size: 13.3 inches</li> <li>Aspect ratio: 16: 9 (width: height)</li> <li>Panel brightness: 400cd / m\u00b2</li> <li>Contrast: 800: 1 (Min) (transmission)</li> <li>Resolution: 1920X1080, up to 1080p</li> <li>Viewing angle: 170 degrees wide viewing angle</li> <li>Working environment temperature: -30\u2103--+50\u2103</li> <li>Display mode: Constant black display, transmission type</li> <li>Display color: 262K/16.7M (6-bit/6-bit+Hi-FRC)</li> <li>Response time: 5ms</li> <li>Speaker parameters: 8\u03a9 2W</li> </ul>"},{"location":"Products/Display/sf133-133-inch-ips-1920x1080-monitor-dual-hdmi-portableps3-ps4-gaming-screen.html#usage","title":"Usage","text":""},{"location":"Products/Display/sf133-133-inch-ips-1920x1080-monitor-dual-hdmi-portableps3-ps4-gaming-screen.html#1-connect-raspberry-pi-to-use","title":"1: Connect Raspberry Pi to use","text":"<p>Step 1: Please download the image of the latest version from Raspberry Pi's website. https://www.raspberrypi.org/downloads/raspbian/ Step 2: Download the compressed file to your PC and unpack it to get the .Img file. Step 3: The TF card is connected to the PC and formatted using the SDFormatter software. Step 4: Open the Win32DiskImager software, select the system image prepared in step 1, and click write to burn the system image. Step 5: After the programming is completed, then insert the TF card into the Raspberry Pi. Step 6: Connect the Mini HDMI interface of the 13.3-inch display to the HDMI interface of the Raspberry Pi. Step 7: Use the Type C cable to power the screen with 5V/2A. Power on the Raspberry Pi, and wait for a few seconds to display normally.  </p>"},{"location":"Products/Display/sf133-133-inch-ips-1920x1080-monitor-dual-hdmi-portableps3-ps4-gaming-screen.html#2use-as-pc-monitor","title":"2\uff1aUse as PC Monitor","text":"<p>Step 1: Connect the computer HDMI output signal to the display's Mini HDMI interface by using the HDMI cable. Step 2: Use the Type C cable to power the screen with 5V/2A.</p>"},{"location":"Products/Display/sf133m-133-inch-1920-x-1080-hdmi-portable-display-for-raspberry-pi-ps4-xbox-ns.html","title":"SF133M 13.3 inch 1920 x 1080 HDMI Portable Display for Raspberry Pi/ PS4/ XBOX/ NS","text":""},{"location":"Products/Display/sf133m-133-inch-1920-x-1080-hdmi-portable-display-for-raspberry-pi-ps4-xbox-ns.html#description","title":"Description","text":"<p>The HD 1920 X 1080 resolution and true color (16.7M) provide you a stunning color performance. The whole aluminum alloy shell can meet your requirements of beautiful appearance. It can be charged by USB3.0, 5V power bank, 5V/ 2A power adapter. There are two HDMI interfaces, 3.5mm headset jack and 75mm x 75mm wall hole on the display. It can be used as a computer screen, phone screen, wireless screen, also used as a display for Raspberry Pi, ps4, XBOX/ NS gamer.  The HD 1920 X 1080 resolution and true color (</p> <p>Model:SF133M</p> <p> </p>"},{"location":"Products/Display/sf133m-133-inch-1920-x-1080-hdmi-portable-display-for-raspberry-pi-ps4-xbox-ns.html#features","title":"Features","text":"<ul> <li>Full HD 1920 x 1080 resolution and true color (16.7M).</li> <li>Built-in sound.</li> <li>New edp full view LCD screen.</li> <li>A variety of charging methods.</li> <li>Supports 75mm x 75mm wall hole.</li> </ul>"},{"location":"Products/Display/sf133m-133-inch-1920-x-1080-hdmi-portable-display-for-raspberry-pi-ps4-xbox-ns.html#specifications","title":"Specifications","text":"<ul> <li>Resolution: 1920 x 1080</li> <li>Color gamut: 72%</li> <li>Dimension: 320mm x 200mm x 8mm</li> <li>Screen type: IPS TFT- LCD</li> <li>Brightness: 300cd/m2</li> <li>Contrast ratio: 800: 1</li> <li>Power voltage: 5V/ 2A ( USB type C)</li> <li>Interface type: dual mini HDMI</li> <li>Visual angle: 178 whole angle</li> <li>Screen ratio: 16: 9</li> <li>Display color: 16.7M (8bit)</li> <li>Shell material: aluminum alloy</li> <li>Color: black, blue, red</li> <li>The weight of screen: 670g</li> </ul>"},{"location":"Products/Display/sf133m-133-inch-1920-x-1080-hdmi-portable-display-for-raspberry-pi-ps4-xbox-ns.html#usage","title":"Usage","text":""},{"location":"Products/Display/sf133m-133-inch-1920-x-1080-hdmi-portable-display-for-raspberry-pi-ps4-xbox-ns.html#1-connect-raspberry-pi-to-use","title":"1: Connect Raspberry Pi to use","text":"<p>Step 1: Please download the image of the latest version from Raspberry Pi's website. https://www.raspberrypi.org/downloads/raspbian/ Step 2: Download the compressed file to your PC and unpack it to get the .Img file. Step 3: The TF card is connected to the PC and formatted using the SDFormatter software.  Step 4: Open the Win32DiskImager software, select the system image prepared in step 1, and click write to burn the system image. Step 5: After the programming is completed, then insert the TF card into the Raspberry Pi. Step 6: Connect the Mini HDMI interface of the 13.3-inch display to the HDMI interface of the Raspberry Pi. Step 7: Use a 5V/2A power adapter to connect to the DC interface of the screen. Power on the Raspberry Pi, and wait for a few seconds to display normally.</p>"},{"location":"Products/Display/sf133m-133-inch-1920-x-1080-hdmi-portable-display-for-raspberry-pi-ps4-xbox-ns.html#2use-as-pc-monitor","title":"2\uff1aUse as PC Monitor","text":"<p>Step 1: Connect the computer HDMI output signal to the display\u2019s Mini HDMI interface by using the HDMI cable.  Step 21: Use the 5V/2A power adapter or Micro USB cable to power the screen with 5V/2A.</p>"},{"location":"Products/Display/ws2812-rgb-led-ring.html","title":"WS2812 RGB LED Ring","text":""},{"location":"Products/Display/ws2812-rgb-led-ring.html#description","title":"Description","text":"<p>This is a RGB LED ring with 16 pcs of WS2812 Chainable&amp; Addressable LED. Users can control all the LED with only one microcontroller pin! Besides, the LED Ring can be also chainable, that is, you can connect more the one ring together to make your project more dreamful.</p> <p>Model:DLC2812RLR</p> <p></p>"},{"location":"Products/Display/ws2812-rgb-led-ring.html#features","title":"Features","text":"<ul> <li>Qty of LED: 16</li> <li>Current for each LED: 18mA</li> <li>Working Voltage: 5V DC</li> <li>Out Diameter: 61 mm</li> </ul>"},{"location":"Products/Display/ws2812-rgb-led-ring.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p></p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Download the library WS2812 RGB LED Ring library;Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;Adafruit_NeoPixel-&gt;strandtest.</p> <pre><code>#include &lt;Adafruit_NeoPixel.h&gt;\n#define PIN 5\n\n// Parameter 1 = number of pixels in strip\n// Parameter 2 = pin number (most are valid)\n// Parameter 3 = pixel type flags, add together as needed:\n//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)\n//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)\n//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)\n//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)\nAdafruit_NeoPixel strip = Adafruit_NeoPixel(60, PIN, NEO_GRB + NEO_KHZ800);\n\nvoid setup() {\n strip.begin();\n strip.show(); // Initialize all pixels to 'off'\n}\n\nvoid loop() {\n // Some example procedures showing how to display to the pixels:\n colorWipe(strip.Color(255, 0, 0), 50); // Red\n colorWipe(strip.Color(0, 255, 0), 50); // Green\n colorWipe(strip.Color(0, 0, 255), 50); // Blue\n // Send a theater pixel chase in...\n theaterChase(strip.Color(127, 127, 127), 50); // White\n theaterChase(strip.Color(127,   0,   0), 50); // Red\n theaterChase(strip.Color(  0,   0, 127), 50); // Blue\n\n rainbow(20);\n rainbowCycle(20);\n theaterChaseRainbow(50);\n}\n\n// Fill the dots one after the other with a color\nvoid colorWipe(uint32_t c, uint8_t wait) {\n for(uint16_t i=0; i&lt;strip.numPixels(); i++) {\n     strip.setPixelColor(i, c);\n     strip.show();\n     delay(wait);\n }\n}\n\nvoid rainbow(uint8_t wait) {\n uint16_t i, j;\n\n for(j=0; j&lt;256; j++) {\n   for(i=0; i&lt;strip.numPixels(); i++) {\n     strip.setPixelColor(i, Wheel((i+j) &amp; 255));\n   }\n   strip.show();\n   delay(wait);\n }\n}\n\n// Slightly different, this makes the rainbow equally distributed throughout\n void rainbowCycle(uint8_t wait) {\n uint16_t i, j;\n\n for(j=0; j&lt;256*5; j++) { // 5 cycles of all colors on wheel\n   for(i=0; i&lt; strip.numPixels(); i++) {\n     strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) &amp; 255));\n   }\n   strip.show();\n   delay(wait);\n }\n}\n\n//Theatre-style crawling lights.\nvoid theaterChase(uint32_t c, uint8_t wait) {\n for (int j=0; j&lt;10; j++) {  //do 10 cycles of chasing\n   for (int q=0; q &lt; 3; q++) {\n     for (int i=0; i &lt; strip.numPixels(); i=i+3) {\n       strip.setPixelColor(i+q, c);    //turn every third pixel on\n     }\n     strip.show();\n\n     delay(wait);\n\n     for (int i=0; i &lt; strip.numPixels(); i=i+3) {\n       strip.setPixelColor(i+q, 0);        //turn every third pixel off\n     }\n   }\n }\n}\n\n//Theatre-style crawling lights with rainbow effect\nvoid theaterChaseRainbow(uint8_t wait) {\n for (int j=0; j &lt; 256; j++) {     // cycle all 256 colors in the wheel\n   for (int q=0; q &lt; 3; q++) {\n       for (int i=0; i &lt; strip.numPixels(); i=i+3) {\n         strip.setPixelColor(i+q, Wheel( (i+j)\u00a0% 255));    //turn every third pixel on\n       }\n       strip.show();\n\n       delay(wait);\n\n       for (int i=0; i &lt; strip.numPixels(); i=i+3) {\n         strip.setPixelColor(i+q, 0);        //turn every third pixel off\n       }\n   }\n }\n}\n\n// Input a value 0 to 255 to get a color value.\n// The colours are a transition r - g - b - back to r.\nuint32_t Wheel(byte WheelPos) {\n if(WheelPos &lt; 85) {\n  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);\n } else if(WheelPos &lt; 170) {\n  WheelPos -= 85;\n  return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);\n } else {\n  WheelPos -= 170;\n  return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);\n }\n}\n</code></pre> <p>5.Upload the Code,then you shoule see the colourful RGB-LED display.</p> <p> </p>"},{"location":"Products/Display/ws2812-rgb-led-ring.html#resource","title":"Resource","text":"<ul> <li>WS2812 RGB LED Program</li> </ul>"},{"location":"Products/Elecrow-Cooperator-Partner/cooperator-designer.html","title":"Cooperator Designer","text":"<p>View cooperator designer's products on this page</p> <p>It's Win-Win-Win cooperation. Elecrow bring great Projects/Products to customers and Expand cooperator's project worldwide and New customers may find Elecrow because of this design.</p> <p>Many designers and developers have encountered this problem: product design and development have proceeded smoothly, but production is a big problem. PCB Manufacturing and Assembly, Component Sourcing, Quality Control, Logistics, Payment, Packaging, and Shipping are all complicated issues that consume a lot of time and effort.</p> <p>Elecrow supplies professional hardware-related services worldwide, in order to help makers interact and learn from each other, and to create a harmonious and sustainable development environment. Now, let Elecrow help you solve your production problems. As Elecrow Cooperator Designers, you can get the following services:</p> <ul> <li>Investment in the production if your design gets approved by the Elecrow team.</li> <li>Production Services. Elecrow has a professional team to finish the PCB fabrication, Parts sourcing, PCB assembly, Testing, Packaging, and dropshipping, etc.</li> <li>Warehousing; Logistics to ensure that your design is presented to the user beautifully.</li> <li>Monthly sales report for your product.</li> <li>Drop shipping: Elecrow ships the products to your customers one by one and lower the shipping price.</li> <li>Other Special Needs</li> </ul> <p>This PDF file Elecrow partner v1.2.pdf Shows how the cooperator works.</p>"},{"location":"Products/Elecrow-Cooperator-Partner/cooperator-designer.html#qa-for-being-elecrow-cooperator","title":"Q&amp;A for being Elecrow Cooperator","text":"<ul> <li>Q: Can I send the products to Elecrow and sells them to Elecrow's online store?</li> <li> <p>A: Yes, it is ok. there will be extra stock fees if need a large place or stocked for more than 1 month.</p> </li> <li> <p>Q: What profit would the cooperate designer get?</p> </li> <li>A: The designer decides the retail price and gets 90% of the retail sale fees per sale. Elecrow shares 10% of the retail price for the promotion fee, handling fee, and payment fees</li> </ul> <p>(ps: PayPal or credit card processor will charge about 5% of the total fees that are included in the 10% that Elecrow charged).</p> <ul> <li>Q: Can I join the Elecrow affiliate program?</li> <li>A: Yes, you will get 5% to 10% affiliate fees for customers who clicked your link to purchase on the Elecrow website. Manual quoted products not included, such as PCB assembly, and Premium PCB service.</li> </ul> <p>Here are the details of Elecrow affiliate</p> <ul> <li>Q: Who responded to the loss when shipping to customers?</li> <li>A: There will be about 0.5% to 1% shipping loss for international shipping.</li> </ul> <p>Elecrow will respond to the product cost for shipping loss. Elecrow will Re-ship the product to the customer or cancel the order and refund the customer.</p> <ul> <li>Q: Can we have NDA with the design file?</li> <li> <p>A: Yes, we guarantee 100% confidentiality and allow cooperated designers worldwide to submit their work to us with complete confidence. NDA is also applicable if needed.</p> </li> <li> <p>Q: Can you give a probable quantity for the sales?</p> </li> <li> <p>A\uff1a Elecrow will not promise the sales quantity but we'll help list your design on the Elecrow store and support promotions during special events like Black Friday.</p> </li> <li> <p>Q: Is free shipping available for cooperators' products?</p> </li> <li>A: Free shipping is not available for the cooperator's products.</li> </ul> <p>Please feel free to contact us if there is any question.</p>"},{"location":"Products/Elecrow-Cooperator-Partner/products-wiki.html","title":"Products Wiki","text":""},{"location":"Products/Elecrow-Cooperator-Partner/products-wiki.html#devicter","title":"Devicter","text":"<p>devDuino Sensor Node (ATmega 328) is a compact Arduino-compatible microcontroller and is designed to build wireless networks based on transceiver nRF24L01+.  You can easily connect other sensors (series Grove) or actuators to this platform, to build your remote monitoring or controlling system..</p> devDuino Sensor Node V1.2 (ATmega 328) devDuino Sensor Node V1.3 (ATmega 328) devDuino Sensor Node V2.0 (ATmega 328) devDuino Sensor Node V3.0 (ATmega 328) devDuino Sensor Node V4.0 (ATmega 328) <p>Here lists the comparison among various versions:</p> Parameter devDuino Sensor Node V1.2 devDuino Sensor Node V1.3 devDuino Sensor Node V2.0 devDuino Sensor Node V2.1 devDuino Sensor Node V2.2 rev1 devDuino Sensor Node V3.0 devDuino Sensor Node V4.0 Product Release Date 04.11.2013 31.03.2014 28.03.2014 21.10.2014 18.10.2015 23.08.2014 22.12.2014 Production Status Not produced In production Not production In production In production In production In production Jumper (RFpower) YES NO NO NO NO NO NO Voltage Divider YES YES YES YES NO NO NO E2prom onboard NO NO NO NO 64kb SPI flash NO NO IC Cripto verification NO NO NO NO ATSHA204A NO NO OTA firmware updates NO NO NO NO Supports NO NO Built-in sensor MCP9700 (temperature) MCP9700 (temperature) MCP9700 (temperature) MCP9700 (temperature) MCP9700 (temperature) MCP9700 (temperature) HTU21D (temperature &amp; humidity) Battery RC2032 x 1 RC2032 x 1 AAA x 2 AAA x 2 AAA x 2 0.5W Solar Panel  1.5 F Super capacitor CR123A \u0445 1 Size 30 \u0445 40 (with RF module 30 \u0445 60) mm 30 \u0445 40 (with RF module 30 \u0445 60) mm 30,5 x 67 mm 32 x 68.5 mm 32 x 68.5 mm 55 x 70 mm (break off 31.4 x 57.3) 30 x 65 mm"},{"location":"Products/Elecrow-Services/elecrow-services.html","title":"Elecrow Services","text":""},{"location":"Products/Elecrow-Services/elecrow-services.html#what-is-elecrow-services","title":"What is Elecrow Services","text":"<p>Elecrow provide one-stop Electronics manufacturing services for engineers that include PCB Design, PCB Layout, Arduino&amp;Raspberry PI programing,PCB Manufacturing, one by one quotation Premium PCB Service, PCB Assembly, Stencil(On-line Ordering), Component Sourcing or Products Sourcing, Acrylic Laser Cutting(On-line Ordering), injection Molding Service, 3D Printing, Laser Cutting Service, CNC service, Case Desgin, packing &amp; Drop Shipping. There will be one project manager to follow your project to insure product quality and lead time.</p>"},{"location":"Products/Elecrow-Services/elecrow-services.html#pcb-manufacturing","title":"PCB manufacturing","text":"<p>Please visit this page order PCB online https://www.elecrow.com/pcb-manufacturing.html.</p> Read Me before Ordering  PCB Specification FAQ Q&amp;A for PCB service Common PCB design problem for PCB fabrication"},{"location":"Products/Elecrow-Services/elecrow-services.html#pcb-software-configuration-gerber-file-export","title":"PCB Software Configuration &amp; Gerber File Export","text":""},{"location":"Products/Elecrow-Services/elecrow-services.html#free-online-pcb-gerber-viewer","title":"Free online PCB Gerber viewer","text":""},{"location":"Products/Elecrow-Services/elecrow-services.html#how-to-export-gerber-files-from-eagle-file","title":"How to export gerber files from Eagle file","text":""},{"location":"Products/Elecrow-Services/elecrow-services.html#how-to-export-gerber-files-from-eagle-in-japanese","title":"How to export gerber files from Eagle in Japanese","text":"<p>\u30d7\u30ea\u30f3\u30c8\u57fa\u677f\u3092\u683c\u5b89\u306b\u767a\u6ce8 | Make http://make.bcde.jp/category/53</p> <p>eagle elecrow\u3067PCB\u767a\u6ce8\u307e\u3068\u3081 - \u306f\u308b\u307e\u304d\u30d1\u30bf\u30d1\u30bf | harumaki-flipflop.hatenablog.com</p> <p>Elecrow\u3078\u306e\u767a\u6ce8\u624b\u9806 - \u041e\u041a\u0411-810 \u30eb\u30a4\u30bb\u30f3\u30b3\u8a2d\u8a08\u5c40 | okb-lysenko.hatenablog.com</p> <p>Eagle\u3092\u6d3b\u7528 \u57fa\u677f\u3092ELECROW\u3067\u767a\u6ce8\u3059\u308b\u65b9\u6cd5| e-work-education.com</p>"},{"location":"Products/Elecrow-Services/elecrow-services.html#how-to-export-gerber-files-from-kicad","title":"How to export gerber files from KiCad","text":"<p>KiCad\u3067\u96d1\u306b\u57fa\u677f\u3092\u4f5c\u308b \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb</p> <p>blog.protoneer.co.nz/kicad-creating-gerber-files \uff1aKiCad \u2013 Creating Gerber Files</p> <p>forum.kicad.info: 1356 Creating Gerberfiles</p> <p>forum.kicad.info: Elecrow Design Rules</p> <p>forum.kicad.info: Coordinate File for PCB Assembly</p> <p>mikrocontroller.net : KiCad und Elecrow</p> <p>360customs.de : KiCAD Elecrow PCB service</p> <p>ak1211.com : KiCad\u3067\u56de\u8def\u56f3\u304b\u3089\u30ac\u30fc\u30d0\u30fc\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u3063\u3066elecrow\u306b\u767a\u6ce8\u3059\u308b\u307e\u3067</p> <p>blog.livedoor.jp : KiCAD\u3067elecrow\u306b\u57fa\u677f\u3092\u6295\u3052\u308b</p> <p>atmel.client.jp : kicad (Mac OSX Version: 4.0.1-stable release build)\u7248\u3067Elecrow\u7528\u30ac\u30fc\u30d0\u30fc\u30c7\u30fc\u30bf\u306e\u4f5c\u308a\u65b9</p> <p>kicad.xyz: KiCAD\u3067\u57fa\u677f\u8a2d\u8a08</p> <p>jnduli.co.ke: Prepare Kicad PCB for Elecrow Production</p>"},{"location":"Products/Elecrow-Services/elecrow-services.html#how-to-export-gerber-files-from-altium-designer","title":"How to export gerber files from Altium designer","text":""},{"location":"Products/Elecrow-Services/elecrow-services.html#how-to-export-gerber-files-from-protel","title":"How to export gerber files from Protel","text":""},{"location":"Products/Elecrow-Services/elecrow-services.html#how-to-export-gerber-files-from-proteus-ares","title":"How to export gerber files from Proteus ARES","text":"<p>circuitsonline.net:PCB design Ultiboard -&gt; Elecrow</p> <p>diptrace.com:Gerber Export!!! - DipTrace Forum</p> <p>gerbv:an open source Gerber file viewer for RS-274X</p> <p>beerduino.eu:Fritzing + Gerbv + Elecrow</p> <p>Any great article about PCB design for fabrication can be shared\uff0cplease feel free to contact us PCB@elecrow.com</p>"},{"location":"Products/Elecrow-Services/elecrow-services.html#customer-reviews-for-elecrow-pcb","title":"Customer Reviews for Elecrow PCB","text":"<p>Elecrow.com/reviews: Elecrow customers' reviews</p> <p>eevblog.com/forum: Elecrow PCB manufacturing mini review (with photos)</p> <p>pcbshopper.com: Elecrow PCB review</p> <p>youtube.com\uff1aReview Elecrow PCB Assembly Service</p> <p>hackaday.com\uff1aONE PERSON\u2019S EXPERIENCE OF HAVING PCB ASSEMBLY DONE IN CHINA</p> <p>edn.com: Quick-Turn PCB shop review project: Elecrow</p> <p>blogspot.com: Having electronic breakout boards manufactured in China by Elecrow</p> <p>instructables.com: PCB Business Card With NFC</p> <p>http://blog.taniho.net: 2018\u5e74Elecrow\u30af\u30ea\u30b9\u30de\u30b9\u30c4\u30ea\u30fc\u3092\u4f5c\u3063\u305f</p> <p>techtravels.org: SRAM PCB built, populated, and is testing good!</p> <p>sunnyhe.org: Business Card</p> <p>thingiverse.com: Differential infrared z probe</p> <p>syntherjack.net: SSI2144 to SSM2044 VCF converter</p> <p>sakaguchi-miniscope.blogspot.com: CMOS\u30bb\u30f3\u30b5\u57fa\u677f\u3001\u305d\u306e\u4ed6\u57fa\u677f\u306e\u88fd\u4f5c(\u65e5\u672c\u304b\u3089\u5411\u3051\u767a\u6ce8\u5148\u60c5\u5831\u4ed8\u304d)</p> <p>youtube.com/: My new OLEDiUNO PCB made by Elecrow</p> <p>atmel.client.jp: Elecrow\u306ePCB Assembly\u30b5\u30fc\u30d3\u30b9\u3092\u5229\u7528\u3057\u3066\u307f\u307e\u3059</p> <p>powerele.sblo.jp: Elecrow\u3067\u90e8\u54c1\u5b9f\u88c5\uff08PCB Assembly\uff09\u306e\u983c\u307f\u65b9</p> <p>jiwashin.blogspot.com: Elecrow PCB : \u30b9\u30c6\u30f3\u30b7\u30eb\u3082\u6ce8\u6587\u3057\u3066\u307f\u305f</p> <p>Steven's Blog: BGA on a budget</p> <p>eevblog.com/forum/:DIY watch based on the Casio F-91W</p> <p>kerikeri.top:\u8d64\u5916\u7dda\u5b66\u7fd2\u30ea\u30e2\u30b3\u30f3\u306e\u57fa\u677f\u304c\u5c4a\u304d\u307e\u3057\u305f\uff01</p> <p>mikrocontroller.net: Elecrow - Assembly Service</p> <p>embed.next-step.asia: DesignSpark PCB\u3067\u8a2d\u8a08\u3057\u305f\u57fa\u677f\u3092\u9762\u4ed8\u3051\u3057\u3066V-CUT\u6709\u308a\u3067ELECROW\u306b\u767a\u6ce8</p> <p>qiita.com/:PCB\u304b\u3089\u81ea\u4f5c\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u4f5c\u3063\u305f\uff01 with Pro Micro</p> <p>inopage.com/:KiCAD\u3067\u30d7\u30ea\u30f3\u30c8\u57fa\u677f\u3092\u4f5c\u3063\u3066Elecrow\u3055\u3093\u306b\u6ce8\u6587</p> <p>Please feel free to contact us at PCB@elecrow.com to add your Elecrow service experience here to share with us.</p>"},{"location":"Products/Elecrow-Services/how-to-export-gerber-files-from-eagle-file.html","title":"How to export gerber files from Eagle file","text":""},{"location":"Products/Elecrow-Services/how-to-export-gerber-files-from-eagle-file.html#design-rule","title":"Design rule","text":"<p>Elecrow_PCB_eagle_rule.zip This design rule is to help check whether the width, drills meet the manufacturing ability or not.</p>"},{"location":"Products/Elecrow-Services/how-to-export-gerber-files-from-eagle-file.html#resource-neededcam-file-download","title":"Resource Needed\uff08CAM file download)","text":"<ul> <li>For 2 layers board,you need to download Elecrow_Gerber_Generater_DrillAlign.zip.</li> <li>For 4 layers board,you need to download Elecrow_Gerber_Generater_4-layer_1-2-15-16.zip</li> </ul>"},{"location":"Products/Elecrow-Services/how-to-export-gerber-files-from-eagle-file.html#operation-steps","title":"Operation steps","text":"<p>1. unzip the CAM file you download and add it to you eagle CAM folder.</p> <p>2. Open you PCBname.brd with eagle software. Here used the Crowduino as an example.</p> <p></p> <p>3.Display all the layers of the PCB. It's very important to avoid missing some layers in the gerber file.</p> <p></p> <p>4.Right-Click the CAM button</p> <p></p> <p>5.Right-Click File/Open/Job.</p> <p>6. Choose Elecrow_Gerber_Generater_DrillAlign.CAM and OPEN it. If the PCB is 4 layer, select the 4 layer CAM file.</p> <p></p> <p>7.Right-Click the Processing Job Button</p> <p></p> <p>8.Copy all the needed files to one folder and zip it.</p> <p>Top layer: pcbname.GTL</p> <p>Bottom layer: pcbname.GBL</p> <p>Solder Stop Mask top: pcbname.GTS</p> <p>Solder Stop Mask Bottom: pcbname.GBS</p> <p>Silk Top: pcbname.GTO</p> <p>Silk Bottom: pcbname.GBO</p> <p>NC Drill: pcbname.TXT</p> <p>Mechanical layer : pcbname.GML</p> <p>For Stencil, the GTP and GBP layer is also needed.</p> <p>Now, What you need to do is order PCB online ,and wait to get the PCB boards.</p>"},{"location":"Products/Elecrow-Services/how-to-export-gerber-files-from-proteus-ares.html","title":"How to export gerber files from Proteus ARES","text":"<p>It's really appreciated that @Christophe HAMON to share the method that how to configurate proteus ARES for Elecrow PCB. The following is the content that he shared with us.</p> <p>This document explains how to generate correct Gerber files for Elecrow pcb.</p>"},{"location":"Products/Elecrow-Services/how-to-export-gerber-files-from-proteus-ares.html#ares-design-rules","title":"ARES Design Rules","text":"<p>The following specifications are the minimum specifications you have to consider. You can of course increase the trace style (T25, T40\u2026Etc.), Pad \u2013 Pad Clearance\u2026</p> <ul> <li>Design Rules Tab</li> </ul> <p></p> <ol> <li>Pad \u2013 Pad Clearance =12<sup>th</sup></li> <li>Pad \u2013 Trace Clearance = 8<sup>th</sup></li> <li>Trace \u2013 Trace Clearance = 6<sup>th</sup></li> <li>Graphics Clearance = 10<sup>th</sup></li> <li> <p>Edge/Slot Clearance =20<sup>th</sup></p> </li> <li> <p>Net Classes Tab</p> </li> </ol> <p></p> <ol> <li>Trace Style = (6<sup>th</sup>)</li> <li>The minimum value in ARES is 8<sup>th</sup> (T8)</li> <li>Via Style =DEFAULT</li> <li>Mini via: <ol> <li>Hole:12<sup>th</sup></li> <li>Ring: 6<sup>th</sup></li> </ol> </li> </ol>"},{"location":"Products/Elecrow-Services/how-to-export-gerber-files-from-proteus-ares.html#gerber-export","title":"Gerber Export","text":"<ol> <li>Click on Ouput -&gt;Generate Gerber/Excellon Files</li> <li>Select all the layers to export. At least all selected on the following picture:</li> </ol> <p>Be sure to select \u201cRS274X\u201d for the Gerber Format.</p> <p>After pressing OK button ARES will generate a ZIP file containing several .TXT files. This is the package you have to send to Elecrow.</p> <p>It's really appreciated to share your method to export gerber file for other PCB design software. Please feel free to contact David@elecrow.com to share with us.</p>"},{"location":"Products/Elecrow-Services/how-to-export-gerber-files-from-proteus-ares.html#relate-links","title":"Relate Links","text":"<p>Order PCB Service Elecrow online</p>"},{"location":"Products/Elecrow-Services/pcb-fabricate-service-overview.html","title":"PCB Fabricate Service Overview","text":"<p>Please Visit this page to order the PCBs http://www.elecrow.com/services-c-73.html</p> <p>PCB Material FR4 datasheet File:PCB material FR-4 info.pdf</p> <p>PCB order steps and PCB fabrication specification</p> <p>Q&amp;A for PCB service</p>"},{"location":"Products/Elecrow-Services/q26a-for-pcb-service.html","title":"Q&A for PCB service","text":"<p>If there is any question, please feel free to email PCB@elecrow.com, we will reply soon.</p> <p>1 layer 2layer 4layer PCB quotation online https://www.elecrow.com/pcb-manufacturing.html?utm_source=wiki&amp;utm_medium=pcb</p> <p>For special needs PCB fabrication, PCB assembly, Mechanical Service/Molding/laser cutting etc needs. please feel free to contact service@elecrow.com</p>"},{"location":"Products/Elecrow-Services/q26a-for-pcb-service.html#qa-for-pcb-service","title":"Q&amp;A For PCB Service","text":"<ul> <li>Q: I used the CAM file on your website, why there isn't drill layer in the gerber file?</li> <li>A: Display all the layers before you exporting the gerber file from the eagle file to have a try. The format of the drill file can be excellon or RS-274x format And the drill file is solid circle with size when checked by gerber viewer.</li> <li> <p>Ps: there are many customers send the gerber file without the drill file. The drill file in the gerber file should be solid hole with size.</p> </li> <li> <p>Q: Is there a way to provide the information regarding non-plated through holes to you in future designs?</p> </li> <li>A: We will plate all the holes by default. If you need some holes not be plated, please name the plated holes/via layer as PCBname-PHT.txt and name the non-plated holes layer as PCBname-NPTH.txt.</li> <li> <p>PS: For holes display on the GML/GKO layer, we will fabricated as Non-plated default. If need to fabricate as plated holes, please leave a comment.</p> </li> <li> <p>Q: What the dielectric constant is for your PCBs?</p> </li> <li> <p>A: This is the datasheet of the material of FR4 http://www.elecrow.com/wiki/images/3/34/PCB_material_FR-4_info.pdf</p> </li> <li> <p>Q: Boards are outline milled, right?</p> </li> <li>A: Yes, The outline and all the GML layer will be milled or add V-groove following the lines. The V-cut line can be added on the GML/GKO layer.</li> </ul> <p>The tolerance of outline is \u00b10.2mm from the middle of the outline.</p> <ul> <li>Q: What the minimum space to print the solder mask between the IC pads. is the following picture ok?</li> </ul> <p></p> <ul> <li>A: Sorry, It is not ok to print the solder mask. The minimum space to print the solder mask is 0.3mm. For less than 0.3mm spacing, we won't print the solder mask between the pads.</li> </ul> <p>You can leave a comment for this so that our engineer will contact you if we can't print the solder mask between the IC pads.</p> <ul> <li>Q: What's the recommend space between two sub-PCB with V-groove.</li> <li>A: The minimum distance between the copper/trace and the V-groove line is 0.4mm/16mil.</li> </ul> <p>And the minimum distance between the board outline GML/GKO layer and the copper/ trace is 0.3mm/12mil.</p> <ul> <li>Q: Are blind and buried vias supported?</li> <li>A: Blind vias are not available for normal PCB service. It is ok to fabricate blind/buried vias for premium PCB service</li> </ul> <p>The following picture show the difference between buried via, blind via and Through hole. Through holes is ok for fabrication by the normal PCB service.  </p> <ul> <li>Q: Is it possible to repeat a previous order? If you have saved the gerber file of course.</li> <li> <p>A: It is ok to repeat a previous order. You can leave a comment for the previous order number and file number on Elecrow website and gerber file name.</p> </li> <li> <p>Q: What the minimum space or slot in the PCB can you fabricate?</p> </li> <li> <p>A: The diameter of the milling cutter is 0.8mm. So the minimum space or slot is 1mm.</p> </li> <li> <p>Q: How far away do I need the silkscreen/traces from the board outline?</p> </li> <li> <p>A: The minimum distance is 0.3mm.</p> </li> <li> <p>Q: For the PCB rush service, It says rush 12 hours, why it is 2 to 3 working days.</p> </li> <li> <p>A: We will ship out PCB in 2 days normally. But there is weekend each week and the customers is from worldwide, We don't make sure that we can arrange it into fabrication immediately.</p> </li> <li> <p>Q: What is the stack up for your 4 layers pcb?</p> </li> <li>A: Please look at the following picture and mark the layers as GTL, GL2, GL3 and GBL.The thickness of the inner layer is 1oz now.Please note, the outer layer thickness is not the unique value(0.2mm) for normal PCB service.</li> </ul> <p>Please contact us for inquiring if you have strict requirements for the layer stack up.</p> <p> </p> <ul> <li>Q: What is the minimum recommended annular ring size for your 2 layer (color free) service?</li> <li>A: Please have a look at the following picture.</li> </ul> <p> </p> <ul> <li>Q: what is the minimum gap between a via and a route ?</li> <li> <p>A: The minimum gap between a via and a route is 6mil.</p> </li> <li> <p>Q:What the recommend minimum space between the THT pad and copper?</p> </li> <li>A: The recommend minimum distance is 0.3mm to avoid circuit short when soldering.</li> </ul> <p></p> <ul> <li>Q:What is the minimum space between holes? To make sure, see this picture;</li> </ul> <p></p> <ul> <li> <p>A: The minimum of W1 is 0.45mm. there is no request about W2.</p> </li> <li> <p>Q: Do you offer silkscreen for free on both layers?</p> </li> <li>A: silkscreen for both side is free. There are black and white two silkscreen color.</li> </ul> <p>Solder mask for both side is free too. There are six option color: Green, Red, Blue, Yellow, Black and White. Matte green and Matte black needs $20 extra fabrication fees.</p> <ul> <li>Q: What the minimum distance between two panelized PCBs?</li> <li> <p>A: Zero distance is recommend. </p> <ul> <li>ps1: The milling cutter can only run straight line. And the V-groove straight line should through the whole board.</li> <li>ps2: For larger quantities (over 200pcs), we will combine your PCBs automatically to a panel.If you donot want it or want to define your own panel, please leave a comment.</li> </ul> </li> <li> <p>Q: What is minimum width of silkscreen printing?</p> </li> <li>A: Minimum height 40mil is recommend, 32 mil is also ok. Please have a look at the following picture.</li> </ul> <p> </p> <ul> <li>Q: Can you please provide a list of available drill sizes for the prototype PCB service?</li> <li>A: The drill size is 0.3mm, 0.35mm, 0.4mm, 0.45mm etc.to 6.0mm. it is 0.05mm increments to 6.0mm.</li> </ul> <p>The PCB engineer will enlarge the PCB drill file about 0.15mm for Hasl finished PCB and enlarge 0.1mm for the ENIG finished PCB to ensure the finished drill size is almost the same as the design.</p> <ul> <li>Q: What is maximum PCB size? 20cm x 20cm?</li> <li>A: The maximum PCB size that our normal PCB service can manufacturing is 60*60cm.</li> </ul> <p>For PCB less than 30*30cm, you can order it on the website. For PCB larger than 30*30cm, you can send the gerber file and parameter( qty, color, thickness, surface finished) to service@elecrow.com. we will give the quotation to you soon. For small batch of PCB fabrication, You can order the PCB via the PCB area.</p> <ul> <li>Q: Is two design sub-board allowed? (Two design PCB is separated by V-groove)</li> <li> <p>A: Yes, it is ok now, you can order it online.</p> </li> <li> <p>Q: Is \u201ccustom shape\u201d allowed? (see following pictures)</p> </li> </ul> <p> </p> <ul> <li>A: Yes, All is ok. The space between the outline needs to larger than 1mm.</li> </ul> <p>The following PCB designed by Sparkfun may for your reference. This shape looks great.</p> <p></p> <ul> <li>Q: Do you provide \"castellated via\" and how can I do that.</li> <li>A: Yes, Castellated via is ok for fabrication. You can cut the hole by GKO/GML and leave a comment that you need these hole to be castellated via(Plated half Holes).</li> </ul> <p>It needs $16 extra fees. You can purchase 16 units of Premium PCB service(SKU: PRE88740PCB)when place the order online and leave a comment. If these Half hole don't need to be plated, it doesn't need extra fees. It may need more extra fees if the board is complex or have many castellated holes and we will contact you before fabrication.</p> <ul> <li>Q: For the premium pcb service, can I use the matte black?</li> <li>A: The green and black color use the matte black and matte Green. The price is a little higher than normal solder mask color.</li> </ul> <p> </p> <ul> <li>Q: Does the small batch of PCB support urgent process?</li> <li> <p>A: The e-test time for small batch of PCB fabrication is much more than prototyping PCBs(5pcs, 10pcs and 20pcs). So the lead time for small batch of PCB fabrication needs to more than 2 days at least.</p> </li> <li> <p>Q: My CAD software, KiCAD, does not create NC drill.txt and mechanical layer.GML. What the mechanical layer it is? Is is ok without these files?</p> </li> <li>A: The mechanical layer.GML is PCB outline file. It can placed on other layers. If the gerber file is RS-274x format and all the needed file is included, it should be ok for fabrication.</li> </ul>"},{"location":"Products/HMI-Display/wizee-hmi-touch-display.html","title":"Wizee HMI touch display","text":""},{"location":"Products/HMI-Display/wizee-hmi-touch-display.html#description","title":"Description","text":"<p>Wizee stands for WYSIWYG, what you see is what you get. We name this series Wizee because it comes with a graphical programming software. Users can freely arrange existing graphics and burn them into the screen, and the corresponding program will be displayed on the screen. Wizee HMI touchable serial displays adopt the 400M SOC processor, makes the screen runs faster, and it can run after power is on. Wizee supports a variety of configuration controls, and conventional configuration controls can meet 95% of the user's needs. LUA script programming is supported, and logic and algorithms are run inside the screen to reduce communication frequency. At the same time, its power consumption is low. When the backlight is in the darkest mode, the processor runs at about 0.4w at full speed, and the sleep mode can be as low as 0.17w.   </p>"},{"location":"Products/HMI-Display/wizee-hmi-touch-display.html#product-comparison","title":"Product Comparison","text":"Product Name Wizee 2.4 inch HMI Display Wizee 2.8 inch HMI Display Wizee 3.5 inch HMI Display Wizee 4.3 inch HMI Display Wizee 5 inch HMI Display Wizee 7 inch HMI Display Communication Method TTL RS232(short circuit J5 change to TTL ) RS232(short circuit J5 change to TTL ) TTL RS232(short circuit J5 change to TTL ) RS232(short circuit J5 change to TTL ) Resolution 240*320 240*320 320*480 480*272 800*480 800*480 Storage 8MB 16MB 16MB 8MB 16MB 16MB Flash 8MB 16MB 16MB 8MB 16MB 16MB RAM(DDR SDRAM) 32MB 32MB 32MB 32MB 32MB 32MB Music player Not support MP3 audio format (speaker 4\u03a92W, mono), share storage space with pictures. Not support Not support MP3 audio format (speaker 4\u03a92W, mono), share storage space with pictures. MP3 audio format (speaker 4\u03a92W, mono), share storage space with pictures. Active Area 49.0mm*36.7mm 57.6mm*43.4mm 73.9mm*49.4mm 96.0mm*54.9mm 108.9mm*65.8mm 155.0mm*87.0mm Appearance Dimension 76.3mm(L)*47.2mm(W)*11.9mm(H) (MAX, including TP) 87.0mm(L)*56.5mm(W)*11.9mm(H)(MAX, including TP) 103.9mm(L)*60.9mm(W)*11.9mm(H)(MAX, including TP) 122.3mm(L)*73.5mm(W)*14.6mm(H)(MAX, including TP) 143.5mm(L)*81.0mm(W)*16.4mm(H)(MAX, including TP) 188.9mm*105.1mm*16.8m (MAX, including TP) Real Time Clock(RTC) Not support Not support Not support Not support Support clock, timer, countdown and other functions Support clock, timer, countdown and other functions Audio Connector Specifications None PH2.0-2P None None PH2.0-2P PH2.0-2P Voltage 5V 4.5-15V 4.5-15V 5-18V 4.5-30V 4.5-30V Screen Type HD screen HD screen IPS screen HD screen HD screen HD screen"},{"location":"Products/HMI-Display/wizee-hmi-touch-display.html#quick-get-start","title":"Quick Get Start","text":""},{"location":"Products/HMI-Display/wizee-hmi-touch-display.html#type-name-meaning","title":"Type Name Meaning","text":""},{"location":"Products/HMI-Display/wizee-hmi-touch-display.html#hardware-connection","title":"Hardware connection","text":"<p>7 inch HMI diaplay </p>"},{"location":"Products/HMI-Display/wizee-hmi-touch-display.html#visualtft","title":"VisualTFT","text":"<p>Download link: VisualTFT</p> <p>Select English and the installation directory according to the prompts, and click \"next\" step by step to complete the installation.  The installation process is as follows Introduction to Visual TFT software operation interface </p> <p>\u2460 Menu bar area Debug 1.It is used for serial port debugging. When the screen is not Wizee protocol, the online operation fails. At this time, click Debug \u2192 Connect Device(No Handshake) in the menu bar, and you can view the interaction of serial port commands in Command Window 2.Download project to the HMI display. Click Debug \u2192 Download Resource, and click COM Download(make sure the Wizee is connected with VisualTFT) </p> <p>Tools</p> <p></p> Tool Description Product Wizard Download files to Wizee Display Icon Creator Create icon files Art Font Creator Create vector font Keyboard Set Customizing user keyboard styles Protocol and Variable Setting Configuration of modbus/fx2n/xgus protocol MiniC Script After the modbus/fx2n/xgus protocol is enabled, the logic lightweight script can be edited LUA Script The application of lua script, which is used for powerful applications such as computing and private serial port protocol <p>\u2461 Compile Area </p> Name Description Compile Project You can see the editing results and the size of the space used in the Output window Download to device Basic type, click to download through miniusb port, while mass production download interface will pop up for other series, and you can select serial port or SD card/U disk to download Run Simulator Simulate the running logic of the physical screen with the configured page <p> </p> <p>\u2462 Control Area  Select the com port corresponding to the Wizee, and the device will connect. After the connection is successful, it will be displayed in the lower right corner. </p> <p>\u2463the Controls Area Controls are mainly divided into basic controls and configuration controls The basic controls are as follows: brush, line segment, rectangular box, filled rectangle, circle, filled circle, ellipse, filled ellipse, static text, picture, etc  The configuration controls are as follows: button, text, instrument, slider, RTC, animation, icon, curve, menu, sliding selection, QR code, data record, historical curve, circular progress bar, basic graphics, video, sub screen window controls, etc </p> <p>\u2464 Controls Layout It is used to adjust the height and distribution of the upper and lower stacked display, alignment, spacing, equal width, etc. between controls, and to lock, hide, zoom in and out during the picture layout process </p> <p>\u2465 Project Window You can view the list of created pictures and loaded pictures, audio, video and other files </p> <p>\u2466 Edit Area  It is mainly responsible for editing the UI interface and the main operation areas in development. The user clicks to select the desired controls and places them in this area, which completes the creation of controls. The specific operations are as follows  </p> <p>\u2467 Property Window The right side belongs to the property window, which is mainly used to view the properties of the overall project configuration, the properties of the controls, and all the screens and pictures. As shown below </p> <p>\u2468 Output Window When the user compiles, all errors, alarms, and total project size are output in this window</p> <p>\u2469 Command Window After the user comes online successfully, he/she can view the specific message information in [Command Window] through command sending and receiving control, such as the VisualTFT online entity screen, and shake hands with the device in Instruction Helper VisualTFT send: EE 04 FF FC FF FF Screen feedback: EE 55 FF FC FF FF </p> <p>If the connection fails, the following prompt will appear: </p>"},{"location":"Products/HMI-Display/wizee-hmi-touch-display.html#how-to-build-a-project","title":"How to build a project","text":"<p>Click here to watch the video  1. Click File -&gt;New Project or click the shortcut key of New Project to create a new project  2. Name the project, choose the storage path, select M-series, and select the corresponding type according to the screen size </p> Size Type number 2.4inch DC240320M028 2.8inch DC240320M028 3.5inch DC32480M035 4.3inch DC480272M043 5.0inch DC800480M050 7.0inch DC800480M070"},{"location":"Products/HMI-Display/wizee-hmi-touch-display.html#faqs","title":"FAQS","text":"<p>1. Using other serial port debugging assistant software can communicate with the screen, but clicking 'Open Device' in VisualTFT will cause connection failure. A:Confirm whether the screen is RS232 level or TTL level, and check whether the hardware connection and settings are correct.</p> <p>2.Set the language to English. Some windows of VisualTFT are still in Chinese. A:This may be a software bug. Try switching languages several times. Click Compile. If you need to download, click Tools -&gt;Product Wizard</p> <p>3. Why can't I open he tft file of Project_DEMO? A: Click 'Files'-&gt;'Open Projects', and select .'tftprj file' to open project. If you need to rename .'tft file', please right click the file at Project window and click 'Rename' to modify the name. If you rename files in the hard disk folder, it will cause the failure to open files. Unless you re import the file that changed name.</p> <p> </p>"},{"location":"Products/HMI-Display/wizee-hmi-touch-display.html#resources","title":"Resources","text":"<p>VisualTFT_3.0.0.1215.zip Project_demo_7inch.zip Project_demo_5inch.zip Project_demo_3.5inch.zip Instruction_set_EN.pdf</p>"},{"location":"Products/Mechanical-Keyboard/mechanical-keyboard-esp32-s3.html","title":"Mechanical Keyboard ESP32-S3","text":""},{"location":"Products/Mechanical-Keyboard/mechanical-keyboard-esp32-s3.html#description","title":"Description","text":"<p>Mechanical_ Keyboard_ ESP32-S3 is an open-source mechanical keyboard backplane based on the ESP32-S3 main control chip.</p> <p>It carries 87 universal mechanical keyboard shaft sockets and SMD3528 reverse labeled (6028) programmable RGB LEDs (supporting WS2812/SK6812 chips), 3 USB power/program burning interfaces, PH2.0 lithium battery power interface, and 2 pre reserved 1 * 4PIN 2.54mm spacing pin interfaces. All key functions and RGB light effects can be defined and designed through program programming.</p> <p>The keyboard supports Bluetooth wireless connection and USB wired connection. It supports the Arduino open-source programming platform, making it particularly suitable for open-source creators and DIY design enthusiasts.</p> <p>Model: DIS03024H </p> <p></p>"},{"location":"Products/Mechanical-Keyboard/mechanical-keyboard-esp32-s3.html#pinout","title":"PinOut","text":"PWR Power LED. CAP Letter case toggle indicator. BT1 Bluetooth Channel 1 toggle indicator. BT2 Bluetooth Channel 2 toggle indicator. BT13 Bluetooth Channel 3 toggle indicator. CABLE USB wired access indicator/lithium battery charging indicator. BOOT Download button.Push it to start the Firmware download mode.Through USB interface, users can download the upgraded firmware to modify the underlying software and add new function to the hardware. USB-C*3 USB-C interface, which is used as the power supply of the keyboard board and the communication interface between the PC and ESP32 S3, and can charge the lithium battery when an external lithium battery is connected. BAT PH2.0-3.7V lithium battery interface, can be used for external 3.7V lithium battery ON/OFF System power toggle switch. ESP32(UART) ESP32 UART serial communication interface is reserved. STC8(UART) STC UART serial communication interface is reserved."},{"location":"Products/Mechanical-Keyboard/mechanical-keyboard-esp32-s3.html#feature","title":"Feature","text":"<ul> <li>Integrated ESP32-WROOM-32 module and and STC8G1K08 chip, built-in 384KB ROM, 512KB SRA, 16KB RTC SRAM, onboard 4MB Flash;</li> <li>Xtensa 32-bit LX7 dual core processor, with a main frequency of 240MHz;</li> <li>built-in wireless communication 2.4 GHz Wi-Fi (802.11 b/g/n) and Bluetooth 5.0;</li> <li>Support development environment Arduino IDE, Micro python;</li> <li>87 universal mechanical keyboard axes and SMD3528 anti stick (6028) programmable RGB LEDs (supporting WS2812/SK6812 chips);</li> <li>Support for USB charging and USB/lithium battery power supply.</li> </ul>"},{"location":"Products/Mechanical-Keyboard/mechanical-keyboard-esp32-s3.html#specification","title":"Specification","text":"<ul> <li>Input voltage of TYPE C USB: DC-5V</li> <li>Input voltage of PH2.0 lithium battery interface: 3.7V-4.2V</li> <li>Operating temperature range: -10 \u00b0 C~65 \u00b0 C</li> <li>Size: 130mm*354mm (W*L)</li> </ul>"},{"location":"Products/Mechanical-Keyboard/mechanical-keyboard-esp32-s3.html#development-environment-configuration","title":"Development environment configuration","text":"<ul> <li>1.Please go to the official website https://www.arduino.cc/ to download the Arduino IDE development tool and download the corresponding library file, install the tool. Open the Arduino IDE after the installation:</li> </ul> <ul> <li>2.Click the \"File\" menu, select \"Preferences\" in the drop-down menu, and then the picture will appear: Unzip the downloaded library file and put it in the libraries folder.</li> </ul> <ul> <li>Add the ESP32 S3 URL as follows\uff1a</li> </ul> <p>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json </p> <ul> <li>The tool automatically downloads and updates the corresponding model, check the steps as shown in the figure:</li> </ul> <p> </p> <ul> <li>warn:</li> </ul> <p>please install esp32 version 2.0.3, if you install another version,some modules may go wrong.</p>"},{"location":"Products/Mechanical-Keyboard/mechanical-keyboard-esp32-s3.html#software-settings","title":"Software settings:","text":"<ul> <li>1.Under the \"Tools\" menu, see \"Board: ESP32-XXX\" and select ESP32 Dev MODULE as shown in the figure.</li> </ul> <ul> <li>2.After connecting the Mechanical_Keyboard_ESP32-S3 to the computer through the TYPE-C USB cable, the computer will automatically recognize the USB COM port (if the USB is not recognized successfully, please disconnect the USB cable and connect to the computer, press and hold the BOOT button, and connect the computer again at power-on).</li> </ul> <ul> <li>3.After the USB COM port is successfully recognized, open the Arduino IDE to download a sample code, as shown in the following figure: File-&gt;Examples-&gt;Basics-&gt;Blink.</li> </ul> <p> The code that opens is as follows: </p> <ul> <li>Noted:</li> <li>If the CH340 driver is not installed on your PC, please install the CH340 driver first, or switch the SWITCH to the USB position and connect it with a USB cable.</li> </ul>"},{"location":"Products/Mechanical-Keyboard/mechanical-keyboard-esp32-s3.html#download-process","title":"Download process","text":"<ul> <li>1.Connect the keyboard and computer through a USB to type-c data cable;</li> <li>2.Click on the tool on the arduino software and select the corresponding serial port number;</li> </ul> <ul> <li>3.Click \"upload\" to upload the program to the ESP32 keyrboard</li> </ul> <ul> <li>Until the prompt upload is successful, as shown in the figure:</li> </ul>"},{"location":"Products/Mechanical-Keyboard/mechanical-keyboard-esp32-s3.html#io-port","title":"I/O Port","text":"ESP32 S3 Mechanical_Keyboard_ESP32-S3 ESP32 S3 Mechanical_Keyboard_ESP32-S3 GPIO0 BOOT GPIO1 KEY_IN5(6X17 Matrix keyboard line control signal) GPIO2 KEY_IN4(6X17 Matrix keyboard line control signal) GPIO3 KEY_IN3(6X17 Matrix keyboard line control signal) GPIO4 KEY_IN2(6X17 Matrix keyboard line control signal) GPIO5 KEY_IN1(6X17 Matrix keyboard line control signal) GPIO6 KEY_IN0(6X17 Matrix keyboard line control signal) GPIO7 KEY_OUT0(6X17 Matrix keyboard line control signal) GPIO8 KEY_OUT1(6X17 Matrix keyboard line control signal) GPIO9 KEY_OUT2(6X17 Matrix keyboard line control signal) GPIO10 KEY_OUT3(6X17 Matrix keyboard line control signal) GPIO11 KEY_OUT4(6X17 Matrix keyboard line control signal) GPIO12 KEY_OUT5(6X17 Matrix keyboard line control signal) GPIO13 KEY_OUT6(6X17 Matrix keyboard line control signal) GPIO14 KEY_OUT7(6X17 Matrix keyboard line control signal) GPIO15 KEY_OUT8(6X17 Matrix keyboard line control signal) GPIO16 KEY_OUT9(6X17 Matrix keyboard line control signal) GPIO17 KEY_OUT10(6X17 Matrix keyboard line control signal) GPIO18 KEY_OUT11(6X17 Matrix keyboard line control signal) GPIO19 USB_D - differential signaling GPIO20 USB_D + differential signaling GPIO21 KEY_OUT12(6X17 Matrix keyboard line control signal) GPIO26 NC GPIO27 SPIHD GPIO28 SPIWP GPIO29 SPICS0 GPIO30 SPICLK GPIO31 SPIQ GPIO32 SPID GPIO33 NC GPIO34 NC GPIO35 SCL GPIO36 SDA GPIO37 NC GPIO38 KEY_OUT13(6X17 Matrix keyboard line control signal) GPIO39 KEY_OUT14(6X17 Matrix keyboard line control signal) GPIO40 KEY_OUT15(6X17 Matrix keyboard line control signal) GPIO41 KEY_OUT16(6X17 Matrix keyboard line control signal) GPIO42 BAT_DET_CON GPIO43 ESP32-U0TXD GPIO44 ESP32-U0RXD GPIO45 NC GPIO46 NC GPIO47 NC GPIO48 RGB_DI STC8G1K08 Mechanical_Keyboard_ESP32-S3 STC8G1K08 Mechanical_Keyboard_ESP32-S3 P1.0 CABLE P1.1 BT2 P1.2 BT3 P1.3 BAT_DET_CON P1.4 SDA P1.5 SCL P1.6 BT1 P1.7 NC P3.0 STC_TXD P3.1 STC_RXD P3.2 NC P3.3 ON/OFF P3.4 CHRG P3.5 BAT_DET P3.6 PWR P3.7 CAP"},{"location":"Products/Mechanical-Keyboard/mechanical-keyboard-esp32-s3.html#example","title":"Example","text":"<ul> <li>Before using the Mechanical_Keyboard_ESP32-S3 keyboard, you need to flash the program firmware of STC8G1K08.</li> <li>Example1. The STC8G1K08 programming program is downloaded through the USB to serial port module by reserving the STC8 UART interface.</li> </ul> <p>The wiring method is as follows:</p> STC8 UART USB TO TTL GND GND 3V3 VO-3V3 RXD TXD TXD RXD <ul> <li>Open the \"stc-isp-v6.91M.exe\" STC single-chip microcomputer special programming tool in the STC8 firmware and programming tool folder, and connect the USB to serial port module with the computer through the USB data cable.</li> </ul> <p>The \"stc-isp-v6.91M.exe\" tool interface is as follows: </p> <ul> <li>Select STC8G1K08-20/16PIN, click Auto to automatically identify and select COM port (confirm that it is the COM port of the USB to serial port module you access), and keep other settings as default.</li> </ul> <p></p> <ul> <li>Click \"Open Code File\" in the downloading tool and select the \"keyboard-0_4_2.bin\" file in the \"KEYBOARD_STC_BIN\" folder.</li> </ul> <p></p> <ul> <li>Click \"Download/Program\" to start flashing the firmware.</li> </ul> <p></p> <ul> <li>Special note: After clicking \"Download/Program\", the downloading tool print window prints \"Checking target MCU ... \", disconnect the STC8G1K08 from the 3V3/GND connection of the USB to serial port module, and power it back on to perform the downloading normally.</li> </ul> <p></p> <ul> <li>Until the prompt download is successful, as shown in the figure:</li> </ul> <p></p> <ul> <li>Example2. Use the Arduino IDE to flash the sample program for ESP32-S3.</li> </ul> <p>Before flashing the sample program, copy the used library files to the \"libraries\" folder, as shown in the following figure.Open the library file in the \"Arduino Program Source\" folder and copy \"ESP32-BLE-Keyboard-0.3.2-beta\" and \"FastLED\" to the Arduino IDE's libraries folder. </p> <ul> <li>Use the Arduino IDE software to open the \"keyboard_main.ino\" sample program in the sample code folder.</li> </ul> <p></p> <ul> <li> <p>Note: After the program downloading is completed, you need to toggle the power switch on the keyboard board, power on and reset again, and the mechanical keyboard can work normally!</p> </li> <li> <p>Wireless Bluetooth keyboard connection mode usage demo:</p> </li> </ul> <p>The sample program defaults to \"FN+1\", \"FN+2\", and \"FN+3\" key combinations for Bluetooth channel switching, and the corresponding \"BT1\", \"BT2\", \"BT3\" on the keyboard will always light up for 3S and then turn off when the corresponding key combination is pressed.</p> <ul> <li>Press \"FN+1\" to switch to Bluetooth channel 1 mode, corresponding to the indicator \"BT1\" solid 3S.</li> </ul> <p></p> <ul> <li>Using a computer with wireless Bluetooth, turn on the Bluetooth device, click Add Bluetooth or other device,Select \"ELECROW_BT\" and connect.</li> </ul> <p></p> <ul> <li>USB wired keyboard connection mode demo:</li> </ul> <p>The example program defaults to \"FN+4\" key combination for switching to USB wired connection keyboard mode, after pressing the key combination, the \"CABLE\" indicator light is solid for 3S, and then off, then it can be operated directly using the Mechanical_Keyboard_ESP32-S3 keyboard. </p> <ul> <li>RGB equivalent switching demo:</li> </ul> <p>By default, the sample program uses the \"FN+Insert\" key combination to switch different lighting effects. </p>"},{"location":"Products/Mechanical-Keyboard/mechanical-keyboard-esp32-s3.html#faqs","title":"FAQS","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Mechanical-Keyboard/mechanical-keyboard-esp32-s3.html#resource","title":"Resource","text":"<ul> <li>Code &amp; STC8.zip</li> <li>Other_files.zip</li> </ul>"},{"location":"Products/Modules-for-Prototyping/adjustable-integrated-dc-dc-module--lm2596s.html","title":"Adjustable Integrated DC-DC Module- LM2596S","text":""},{"location":"Products/Modules-for-Prototyping/adjustable-integrated-dc-dc-module--lm2596s.html#description","title":"Description","text":"<p>This module integrated a volage meter with the DC-DC module \u2013 LM2596S, with this function, you can monitor your project much more easier. The voltage meter can measure the input voltage or output voltage, which is adjustable by the protentiometer, with a precision of \u00b10.1V.Note that the voltage meter would not work if the input voltage below 4V. Press the button to switch voltage to measure, between the input voltage and output voltage. There are also 2 LEDs (IN and OUT) to indicate which voltage is measuring by the voltage meter. Model:PCH2596M </p> <p></p>"},{"location":"Products/Modules-for-Prototyping/adjustable-integrated-dc-dc-module--lm2596s.html#specification","title":"Specification","text":"<ul> <li>Input Voltage: 4V~40V (1.5V higher than the output at least)</li> <li>Measurement Accuracy: \u00b10.1V</li> <li>Adjustable Output Voltage: 1.5V~35V.</li> <li>Output Current: 3A</li> <li>Dimension: 66mm x 35mm x 14mm</li> </ul>"},{"location":"Products/Modules-for-Prototyping/adjustable-integrated-dc-dc-module--lm2596s.html#interface","title":"Interface","text":""},{"location":"Products/Modules-for-Prototyping/adjustable-integrated-dc-dc-module--lm2596s.html#usage","title":"Usage","text":"<p>This module can be also calibrated manually as following method: 1. Power up the module with a stable and accurate power supply , such as a 5V power supply, and long pressing (press time &gt; 4S) the button makes the module enter the calibration model, after releasing the button, the related LED would light up to indicate which voltage is now calibrating, and the numeric display blinks the correction value.(Default: 0.0V) 2. Short press the botton to change the correction value(-0.5V ~ 0.5V), for example, if your power supply is 5V, but the result of voltage meter is 4.8, you need to set the correction value to +0.2V. 3. Long press (press time \u2248 2S), to store the input voltage correction value, the module will enter the output voltage correction value calibration model automatically. 4. Calibrate the output voltage in the same way above; The correction value will be stored in nonvolatile memory.  </p> <p></p> <p></p> <p></p> <p>You can also close the voltage meter by long pressing the button (1S&lt; press time &lt; 4S), after you releasing the button, the voltage meter would be close.</p>"},{"location":"Products/Modules-for-Prototyping/breadboard-power-supply.html","title":"Breadboard Power Supply","text":""},{"location":"Products/Modules-for-Prototyping/breadboard-power-supply.html#introduction","title":"Introduction","text":"<p>This Breadboard Power Supply can directly takes power from DC Jack or Mini USB port and outputs a selectable 5V or 3.3V regulated voltage directly to breadboard. This power supply fits the breadboard like Basic Bread Board With Slot.</p> <p>With this board, you can send power to both power lane of the breadboard, and each side has a on/off switch.</p> <p>Model: PSB02011B</p> <p></p>"},{"location":"Products/Modules-for-Prototyping/breadboard-power-supply.html#features","title":"Features","text":"<ul> <li>5V/3.3V regulated voltage</li> <li>Dual lane output</li> <li>Separate power selection for each lane</li> <li>Dual power port input</li> <li>Special designed for Breadboard usage</li> </ul>"},{"location":"Products/Modules-for-Prototyping/breadboard-power-supply.html#specification","title":"Specification","text":"Specification Conditions Min Typ max Unit Input voltage 5.0 6.5 12.0 V Output Voltage Channel 3.3V 3.235 3.3 3.365 V Channel 5V: 10mA\u2264IOUT\u2264600mA, 6.5V\u2264VIN \u226412V 4.9000 5.0 5.100 V Output Current 800 mA"},{"location":"Products/Modules-for-Prototyping/breadboard-power-supply.html#usage","title":"Usage","text":""},{"location":"Products/Modules-for-Prototyping/breadboard-power-supply.html#hardware-installation","title":"Hardware Installation","text":"<ol> <li>Align the polarity of pin header to breadboard. (Usually Red for +, Blue for -)</li> <li>Plug the supply board to breadboard completely.</li> </ol> <p>Now you may de-activate power by the two jumpers, or adjust the vertical switches to select different voltage. The horizontal switch is used to select Jack pin or mini USB cable as input.</p>"},{"location":"Products/Modules-for-Prototyping/breadboard-power-supply.html#resource","title":"Resource","text":"<ul> <li>Breadboard Power Supply Schematic in PDF</li> </ul>"},{"location":"Products/Modules-for-Prototyping/breadboard-power-supply.html#how-to-buy","title":"How to buy","text":"<p>You can visit here to purchase it.</p>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html","title":"DevDuino Sensor Node V1.3 (ATmega 328)","text":""},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#introduction","title":"Introduction","text":"<p>Sensor Node is compact, Arduino-compatible microcontroller and is designed for wireless sensor networks using transceiver nRF24L01+.</p> <p>Model: CODI3976SN</p> <p> </p>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#feature","title":"Feature","text":"<ul> <li>Built on Arduino-compatible architecture</li> <li>Clock frequency - 16MHz (may be reduced in order to reduce energy consumption by up to 8MHz)</li> <li>Built-in temperature sensor MCP9700 (-40 \u00b0 C +125 \u00b0 C, accuracy of \u00b1 2 \u00b0 C)</li> <li>Built-in voltage divider (to monitor the supply voltage)</li> <li>Built-in button</li> <li>Built-in LED</li> <li>3 GROVE-compatible connector: I2C, Analog, Digital</li> <li>Powered by one element CR2032 (not included)</li> <li>Dimensions 30 x 40 mm</li> </ul>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#layout-and-schematics","title":"Layout and schematics","text":"<p>Schematic of the device</p>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#basic-functionality","title":"Basic functionality","text":"<p>In the basic version (without additional sensors) module can be used as a wireless temperature sensor (using built-in sensor MCP9700, connected to A3) to control the battery charge level (via integrated voltage divider connected to A2).</p>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#expansion-capabilities","title":"Expansion Capabilities","text":"<p>Basic functionality can be greatly expanded by connecting the various components GROVE from Seeed Studio.</p> <p></p> <p>Also you can use the modules own making, for example, a temperature sensor based on MCP9700 (a temperature sensor similar to that installed on board Sensor Node).</p> <p></p>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#interfaces","title":"Interfaces","text":"<ul> <li>A0, A1 - displayed on the connector \"Analog\" (the other two pin connector - VCC and GND for sensor supply)</li> <li>D3, D4 - displayed on the connector \"Digital\" (the other two pin connector - VCC and GND for sensor supply)</li> <li>A4 (SDA), A5 (SCL) - displayed on the connector \"I2C\" (the other two pin connector - VCC and GND for sensor supply)</li> <li>Interface for RF-module nRF24L01 +: <ul> <li>D11 - RF_MOSI</li> <li>D12 - RF_MISO</li> <li>D13 - RF_SCK</li> <li>D8 - RF_CE</li> <li>D7 - RF_CSN</li> <li>D2 - RF_IRQ</li> </ul> </li> <li>D4 - button</li> <li>D9 - LED</li> <li>A2 - voltage divider to monitor the battery level</li> <li>A3 - MCP9700 temperature sensor</li> </ul>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#features-sensor-node","title":"Features Sensor Node","text":""},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#module-programming","title":"Module Programming","text":""},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#with-the-help-of-programmer-based-ft232rl-and-such","title":"With the help of programmer based FT232RL (and such)","text":"<p>By default, the standard boot stitched microcontroller Arduino, allowing to record the firmware in the module with the type of programmers FOCA v2.2.</p> <p>Connecting the programmer via 5-pin (PROG) on the module (battery installed when programming is required - module receives power from the programmer)</p> <p>Warning! Do not forget to set the programmer working voltage of 3.3V. When flashing the bootloader via ISP, be sure to disconnect the wireless module nRF24L01 +.</p> <p>Just programmer can be used to debug (monitor port).</p>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#using-isp-programmer","title":"Using ISP-Programmer","text":"<p>If you want to get even further about 2K more memory for your sketch, you can use almost any ISP-Programmer for example, Arduino ISP (regular Arduino-compatible board and a standard example of the environment Arduino) or USBtinyISP.</p> <p>Connecting programmer via 6-pin connector (ISP) on the module (battery installed when programming is required - module receives power from the programmer).</p>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#option-module-supply-nrf24l01","title":"Option module supply nRF24L01+","text":"<ul> <li>Power to the constantly fed - jumper RFpower position 1-2</li> <li>Power to the given with digital pin microcontroller (D6) - jumper RFpower position 2-3</li> </ul> <p>In the first case, to maximize the operating time of a battery should be fitted in use nRF24L01+ power saving mechanisms:</p> <pre><code>...\n\n      radio.powerUp();  //turn the power on NRF24\n\n      // sending data\n\n      ...\n\n      radio.powerDown();  //turn off the power on NRF24\n\n...\n</code></pre> <p>In the second case power is supplied to a module only when the high level signal D6:</p> <pre><code>...\n\n      digitalWrite(6, HIGH);  //turn off the power on NRF24\n\n      // sending data\n\n      ...\n\n      digitalWrite(6, LOW);  //turn the power on NRF24\n\n...\n</code></pre>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#job-button","title":"Job button","text":"<p>Button connected to digital pin of D4 without external pull-up resistor. This connection is necessary to use the built-in pull-up resistor microcontroller.</p> <p>This is done as follows (in the example being polled button once 0.5s and if it is pressed - LED lights):</p> <pre><code>void setup (){\n  // button\n  pinMode(4, INPUT);\n  // enable pull-up resistor\n  digitalWrite(4, HIGH);\n\n  // LED\n  pinMode(9, OUTPUT);\n}\n\nvoid loop(){\n  if(digitalRead(4) == LOW) {\n    digitalWrite(9, HIGH);\n  }\n  else {\n    digitalWrite(9, LOW);\n  }\n  delay(500);\n}\n</code></pre>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#measurement-voltage-power","title":"Measurement voltage power","text":"<p>Besides measuring the voltage at the voltage divider with a simple analogRead (A2), you can use more \"advanced\" way - use the built-in capabilities of the microcontroller.</p> <p>You can use the following universal function:</p> <pre><code>long readVcc() {\n  // Read 1.1V reference against AVcc\n  // set the reference to Vcc and the measurement to the internal 1.1V reference\n  #if defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)\n    ADMUX = _BV(REFS0) | _BV(MUX4) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);\n  #elif defined (__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)\n    ADMUX = _BV(MUX5) | _BV(MUX0);\n  #elif defined (__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)\n    ADMUX = _BV(MUX3) | _BV(MUX2);\n  #else\n    ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);\n  #endif  \n\n  delay(75); // Wait for Vref to settle\n  ADCSRA |= _BV(ADSC); // Start conversion\n  while (bit_is_set(ADCSRA,ADSC)); // measuring\n\n  uint8_t low  = ADCL; // must read ADCL first - it then locks ADCH  \n  uint8_t high = ADCH; // unlocks both\n\n  long result = (high&lt;&lt;8) | low;\n\n  result = 1125300L / result; // Calculate Vcc (in mV); 1125300 = 1.1*1023*1000\n  return result; // Vcc in millivolts\n}\n</code></pre> <p>The function returns the voltage in millivolts.</p>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#features-connector-digital","title":"Features connector Digital","text":"<p>In the present pin connector Digital D3. The peculiarity of its use is that this digital signal to the pins of the interrupt can be processed (INT1).</p>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#getting-more-time-working-sensor-node","title":"Getting more time working Sensor Node","text":"<p>To ensure longer battery module from one battery can reduce the frequency of the microcontroller to 1MHz and lower \"threshold\" voltage at which it will start to 1.8V.</p> <p>This is done by adding the following section in the file boards.txt IDE Arduino:</p> <pre><code>s328o1.name=Sensor328p (int1MHz, 1.8V)\n\ns328o1.upload.protocol=arduino\ns328o1.upload.maximum_size=30720\ns328o1.upload.speed=19200\n\ns328o1.bootloader.low_fuses=0x62\ns328o1.bootloader.high_fuses=0xda\ns328o1.bootloader.extended_fuses=0x06\ns328o1.bootloader.path=atmega\n\ns328o1.bootloader.file=ATmegaBOOT_168_atmega328_pro_8MHz.hex\n\n#s328o8.bootloader.file=ATmegaBOOT_168_atmega328.hex\n\ns328o1.bootloader.unlock_bits=0x3F\ns328o1.bootloader.lock_bits=0x0F\n\ns328o1.build.mcu=atmega328p\ns328o1.build.f_cpu=1000000L\ns328o1.build.core=arduino\ns328o1.build.variant=standard\n</code></pre> <p>After adding this code to the appropriate file (and restarting the Arduino) in the list of available cards will be a new line: Sensor328 (int1MHz, 1.8V)</p> <p>Warning! Fuse bits specified in the file boards.txt and defining modes of microcontroller sewn Arduino environment only when writing the bootloader (but not the firmware of the microcontroller).</p> <p>To correct fuse bits without changing the boot loader can be used, for example avrdude GUI</p>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#libraries","title":"Libraries","text":""},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#necessary-libraries","title":"Necessary libraries","text":"<p>To use the Sensor Node requires the following libraries:</p> <ul> <li>Working with the transceiver nRF24L01+ - RF24</li> </ul> <p>Requires the libraries that are used at work RF24:</p> <ul> <li>SPI</li> </ul>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#features-using-libraries","title":"Features using libraries","text":"<p>Library has used examples of them just to understand how it works.</p> <p>Initialization RF-module as follows:</p> <pre><code>...\n\n//RF24 radio(CE,CSN);\nRF24 radio(8,7);\n\n...\n</code></pre>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#version-tracker","title":"Version Tracker","text":"Revision Description Release 0.9 Prototype 07.06.2013 1.2 Public version (Not produced) 04.11.2013 1.3 Public version 28.03.2014"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#areas-of-application","title":"Areas of application","text":"<ul> <li>Weather station sensors (basic functionality)</li> <li>Collect data with pulse sensors or gas flow (using interrupt (D3 - IRQ1))</li> <li>Universal sensor (with extensions Grove)</li> <li>Data transfer (on a similar device)</li> </ul>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#questions-and-answers","title":"Questions and Answers","text":"<ul> <li>Blog Sensor Node</li> <li>Ask a question by e-mail support@devicter.ru</li> </ul>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#how-to-buy","title":"How to buy","text":"<p>This product can be purchased: China (shipping worldwide)  Seeed store Elecrow store  Russia  Devicter store</p>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#licensing","title":"Licensing","text":"<p>This documentation is licensed under the Creative Commons Attribution-ShareAlike License 3.0 Source code and libraries are</p> <p>licensed under GPL/LGPL, see source code files for details.</p>"},{"location":"Products/Modules-for-Prototyping/devduino-sensor-node-v13-atmega-328.html#useful-links","title":"Useful links","text":"<p>Schematic of the device</p> <p>Wireless communication is a \"smart home\" RU</p> <p>Measuring voltage microcontroller</p>"},{"location":"Products/Modules-for-Prototyping/led-matrix-kit.html","title":"LED matrix kit","text":""},{"location":"Products/Modules-for-Prototyping/led-matrix-kit.html#introduction","title":"Introduction","text":"<p>This product is a serially driven 8x8 LED Matrix kit powered by MAX7219.</p> <p>It only needs three data lines and two power lines.</p> <p>The 8x8 LED Matrix is easy to use and compatible with Arduino, and its LED brightness adjustment can be implemented in software.</p> <p>8x8 LED Matrix kit has many applications in real life, such as various types of electronic display panels. If the LED matrix is not driven by any peripherals, it\u2019ll waste the interface of devices, and the LED brightness will be impaired due to insufficient power, so that we cannot get ideal display effect.</p> <p>The LED matrix can be driven in two ways: parallel or serial. We usually drive it in the serial manner in order to save interface. The serial-driven LED matrix actually dynamically displays the LEDs, i.e., displays the LEDs row-by-row or column-by-column. The persistence of vision for humans is about 0.1s, so as long as we can serially display all 8 rows/columns within 0.1s, we\u2019ll see a complete character or pattern. Model: DLM72192R </p> <p>This product comes in the form of a kit or module. The kit includes the following components:</p> <ul> <li> <p>MAX7219</p> </li> <li> <p>Electrolytic cpaacitor\uff1a10uF/25V</p> </li> <li> <p>Resistor\uff1a10K</p> </li> <li> <p>Capacitance\uff1a0.1uF</p> </li> <li> <p>Headers and receptacles.</p> </li> </ul> <p>After assembling, The Led matrix module will look as:</p> <p></p>"},{"location":"Products/Modules-for-Prototyping/led-matrix-kit.html#specification-of-led-matrix","title":"Specification of LED Matrix","text":"<ul> <li>Operating Voltage: DC 4.7V \u2013 5.3V</li> </ul> <p>Typical Voltage: 5V</p> <ul> <li>Operating Current: 320mA</li> </ul> <p>Max Operating Current: 2A</p> <ul> <li>Operating Temperature: 0 \u2103 \u2013 50 \u2103</li> </ul> <p>Typical Temperature: 25 \u2103</p>"},{"location":"Products/Modules-for-Prototyping/led-matrix-kit.html#assembly-instruction","title":"Assembly Instruction","text":"<p>This is a great beginner kit, easy to make even if you are have never soldered before. Please download this step by step Assembly tutorials and then follow it to solder it.</p> <p>Please pay attention that if it doesn't show as you wanted. it isn't that you soldered wrong. you need to change the direction then assemble it.</p>"},{"location":"Products/Modules-for-Prototyping/led-matrix-kit.html#usage","title":"Usage","text":""},{"location":"Products/Modules-for-Prototyping/led-matrix-kit.html#hardware-installation","title":"Hardware Installation","text":"<p>Connection Wires</p> <p>The schematics of the LED matrix is attached below.</p> <p>Please follow the following instructions to connect hardwares.</p> <ol> <li>The 8x8 LED Matrix must be common-grounded with the Arduino module;</li> <li>Connect Arduino pin 8 to DIN on the LED Matrix;</li> <li>Connect Arduino pin 9 to CS on the LED Matrix;</li> <li>Connect Arduino pin 10 to CLK on the LED Matrix;</li> <li>Use independent power supply for the 8x8 LED Matrix Shield, and the supply voltage is 5V/2A.</li> </ol> <p></p> <p>Schematics of the 8x8 LED Matrix</p> <p>Testing Steps</p> <p>1.Wiring Instructions</p> <ul> <li>Connect Arduino pin8 to DIN on 8x8 LED Matrix</li> <li>Connect Arduino pin9 to CS of 8x8 LED Matrix</li> <li>Connect Arduino pin10 to CLK of 8x8 LED Matrix</li> <li>Connect Arduino 5V to VCC of 8x8 LED Matrix</li> <li>Connect Arduino GND to GND of 8x8 LED Matrix</li> </ul> <p>Attention\uff1a8*8LED Matrix must be common-grounded with Arduino module.</p> <p></p> <p>2.Check the corresponding interfaces are properly connected.</p> <p>3.You'd better powering up the Arduino/Crowduino with AC adapter.</p> <p>4.Observation\uff1aThe LED matrix should circularly display the digits 0 to 9 on LED screen first, then the characters A to Z, as shown in the above figure.</p>"},{"location":"Products/Modules-for-Prototyping/led-matrix-kit.html#software-programming","title":"Software Programming","text":"<p>You can download the Max7219 drive library LedControl,zip or program the Arduino/Crowduino with the following Example code.</p> <p>Example code</p> <pre><code> unsigned char i;\n unsigned char j; \n/*Port Definitions*/\nint Max7219_pinCLK = 10;\nint Max7219_pinCS = 9;\nint Max7219_pinDIN = 8;\n\nunsigned char disp1[38][8]={\n{0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C},//0 \n{0x10,0x18,0x14,0x10,0x10,0x10,0x10,0x10},//1 \n{0x7E,0x2,0x2,0x7E,0x40,0x40,0x40,0x7E},//2 \n{0x3E,0x2,0x2,0x3E,0x2,0x2,0x3E,0x0},//3  \n{0x8,0x18,0x28,0x48,0xFE,0x8,0x8,0x8},//4 \n{0x3C,0x20,0x20,0x3C,0x4,0x4,0x3C,0x0},//5 \n{0x3C,0x20,0x20,0x3C,0x24,0x24,0x3C,0x0},//6 \n{0x3E,0x22,0x4,0x8,0x8,0x8,0x8,0x8},//7  \n{0x0,0x3E,0x22,0x22,0x3E,0x22,0x22,0x3E},//8 \n{0x3E,0x22,0x22,0x3E,0x2,0x2,0x2,0x3E},//9 \n{0x8,0x14,0x22,0x3E,0x22,0x22,0x22,0x22},//A \n{0x3C,0x22,0x22,0x3E,0x22,0x22,0x3C,0x0},//B \n{0x3C,0x40,0x40,0x40,0x40,0x40,0x3C,0x0},//C \n{0x7C,0x42,0x42,0x42,0x42,0x42,0x7C,0x0},//D \n{0x7C,0x40,0x40,0x7C,0x40,0x40,0x40,0x7C},//E \n{0x7C,0x40,0x40,0x7C,0x40,0x40,0x40,0x40},//F \n{0x3C,0x40,0x40,0x40,0x40,0x44,0x44,0x3C},//G\n{0x44,0x44,0x44,0x7C,0x44,0x44,0x44,0x44},//H\n{0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x7C},//I\n{0x3C,0x8,0x8,0x8,0x8,0x8,0x48,0x30},//J\n{0x0,0x24,0x28,0x30,0x20,0x30,0x28,0x24},//K\n{0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x7C},//L\n{0x81,0xC3,0xA5,0x99,0x81,0x81,0x81,0x81},//M\n{0x0,0x42,0x62,0x52,0x4A,0x46,0x42,0x0},//N\n{0x3C,0x42,0x42,0x42,0x42,0x42,0x42,0x3C},//O\n{0x3C,0x22,0x22,0x22,0x3C,0x20,0x20,0x20},//P\n{0x1C,0x22,0x22,0x22,0x22,0x26,0x22,0x1D},//Q\n{0x3C,0x22,0x22,0x22,0x3C,0x24,0x22,0x21},//R\n{0x0,0x1E,0x20,0x20,0x3E,0x2,0x2,0x3C},//S\n{0x0,0x3E,0x8,0x8,0x8,0x8,0x8,0x8},//T\n{0x42,0x42,0x42,0x42,0x42,0x42,0x22,0x1C},//U\n{0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18},//V\n{0x0,0x49,0x49,0x49,0x49,0x2A,0x1C,0x0},//W\n{0x0,0x41,0x22,0x14,0x8,0x14,0x22,0x41},//X\n{0x41,0x22,0x14,0x8,0x8,0x8,0x8,0x8},//Y\n{0x0,0x7F,0x2,0x4,0x8,0x10,0x20,0x7F},//Z\n};\n\nvoid Write_Max7219_byte(unsigned char DATA) \n{   \n            unsigned char i;\n        digitalWrite(Max7219_pinCS,LOW);        \n        for(i=8;i&gt;=1;i--)\n          {       \n             digitalWrite(Max7219_pinCLK,LOW);\n             digitalWrite(Max7219_pinDIN,DATA&amp;0x80);// Extracting a bit data\n             DATA = DATA&lt;&lt;1;\n             digitalWrite(Max7219_pinCLK,HIGH);\n           }                                 \n}\n\nvoid Write_Max7219(unsigned char address,unsigned char dat)\n{\n        digitalWrite(Max7219_pinCS,LOW);\n        Write_Max7219_byte(address);           //address\uff0ccode of LED\n        Write_Max7219_byte(dat);               //data\uff0cfigure on LED \n        digitalWrite(Max7219_pinCS,HIGH);\n}\n\nvoid Init_MAX7219(void)\n{\n Write_Max7219(0x09, 0x00);       //decoding \uff1aBCD\n Write_Max7219(0x0a, 0x03);       //brightness \n Write_Max7219(0x0b, 0x07);       //scanlimit\uff1b8 LEDs\n Write_Max7219(0x0c, 0x01);       //power-down mode\uff1a0\uff0cnormal mode\uff1a1\n Write_Max7219(0x0f, 0x00);       //test display\uff1a1\uff1bEOT\uff0cdisplay\uff1a0\n}\n\nvoid setup()\n{\n\n  pinMode(Max7219_pinCLK,OUTPUT);\n  pinMode(Max7219_pinCS,OUTPUT);\n  pinMode(Max7219_pinDIN,OUTPUT);\n  delay(50);\n  Init_MAX7219();\n}\n\nvoid loop()\n{ \n   for(j=0;j&lt;38;j++)\n  {\n   for(i=1;i&lt;9;i++)\n    Write_Max7219(i,disp1[j][i-1]);\n   delay(500);\n  }         \n}\n</code></pre>"},{"location":"Products/Modules-for-Prototyping/led-matrix-kit.html#resources","title":"Resources","text":"<ul> <li>step by step Assembly tutorials</li> <li>Arduino playground</li> <li>Led Matrix Arduino library</li> </ul>"},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html","title":"Lipo Charger v1.0","text":""},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#description","title":"Description","text":"<p>Power your favorite electronic kit with green energy. The LiPo Charger board will Show RED to alarm when the quantity of electricity of battery is less than 60%, or it will show Green. It allows you ride the solar wave to run your favorite 5V device. The LiPo Charger board is the ideal green power solution for your outdoor sensor design. Attach the LiPo Charger board to your sensor board and it can run on solar power forever! It can also be used to charge mobile phone.</p> <p>The LiPo Charger is extremely affordable and easy to use. No programming is required. Plug it in and it works. The internal charger IC handles all the power flow between the various components. In case solar power is not sufficient, the microUSB port allows you to charge your lithium battery through USB. It can also be used to program your kit without detaching the LiPo Charger board.</p> <p>Model:PSB01012B</p> <p></p>"},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#interface","title":"Interface","text":""},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#features","title":"Features","text":"<ul> <li>Maximum 1A load output</li> <li>Battery and Solar panel connector is JST 2.0</li> <li>Stable 5V USB power supply regardless of source</li> <li>Charge/Recharge algorithms built into chip</li> <li>Charge Lithium Polymer Battery through solar power or USB</li> <li>Stable supply voltage through either lithium battery or USB</li> <li>2 x USB ports let you program your kit while charging your Lithium battery</li> <li>LED indications for battery full or charging states</li> <li>One red alarm LED and one green status LED</li> </ul>"},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Green Power and backup supply for distributed outdoor sensor network</li> <li>Charger for Lithium batteries</li> <li>Charger for mobile phone</li> </ul>"},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#cautions","title":"Cautions","text":"<ul> <li>Live exposed electronic components</li> <li>The board may get hot when supplying large loads</li> <li>Potential short circuit or electric shock, especially if device gets wet when placed outdoors for solar power collection</li> </ul>"},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#specification","title":"Specification","text":"Items Min Norm Max V<sub>in</sub> Solar 4.8V 5.0V 6.5V(10s) I<sub>charge</sub> (R<sub>Iset</sub>=3.9k\u03a9) 400mA 500mA 600mA I<sub>load</sub> 0mA 1000mA V<sub>batt</sub>(R<sub>x</sub>=0\u03a9) 4.2V V<sub>source USB</sub> 5.0V V<sub>destination USB</sub> 5.0V Dimensions 50mm*68mm"},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#usage","title":"Usage","text":""},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#application-idea","title":"Application Idea","text":""},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#1-outdoor-sensor-device-power-supply","title":"1. Outdoor Sensor Device Power Supply","text":"<p>One important application of the Lipo Charger board is as an affordable power supply for outdoor sensors. The outdoor sensor device will be powered by the lithium battery supplemented by the solar panel. Please note that it is not recommended to run the outdoor sensor ONLY on solar power, as this may vary during the day and may cause the sensor to reset / power down unexpectedly. In this case, the device is running in \u201cUSB Mode\u201d.</p> <p>If a firmware reprogram for the outdoor sensor device is required, simple connect the mini USB port to your PC which will put the device under \u201cProgram Mode\u201d as explained above.</p>"},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#2-charge-lithium-polymer-battery-through-solar-power","title":"2. Charge Lithium Polymer Battery through solar power","text":""},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#faq","title":"FAQ","text":"<p>Please list your question here, or connect with techsupport@elecrow.com.</p>"},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#support","title":"Support","text":"<p>If you have questions or other better design ideas, you can go to our forum to discuss.</p>"},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#additional-idea","title":"Additional Idea","text":"<p>The Additional Idea is the place to write your project ideas about this product, or other usages you've found. Or you can write them on Projects page.</p> <ul> <li>Get Lipo rider pro to charge Ipod or Iphone</li> </ul>"},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#resources","title":"Resources","text":"<ul> <li>CN3065 Datasheet in PDF</li> <li>LiPo_Charger_1.0 Schematic in PDF</li> </ul>"},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#how-to-buy","title":"How to buy","text":"<p>Click here to buy Lipo Charger ,or other products you like.</p>"},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#licensing","title":"Licensing","text":"<p>This documentation is licensed under the Creative Commons Attribution-ShareAlike License 3.0 Source code and libraries are licensed under GPL/LGPL, see source code files for details.</p>"},{"location":"Products/Modules-for-Prototyping/lipo-charger-v10.html#external-links","title":"External Links","text":"<p>Links to external webpages which provide more application ideas, documents/datasheet or software libraries</p>"},{"location":"Products/Modules-for-Prototyping/rtd2556-driver-boardcontroller-board-kit.html","title":"RTD2556 Driver Board/Controller Board Kit","text":""},{"location":"Products/Modules-for-Prototyping/rtd2556-driver-boardcontroller-board-kit.html#introduction","title":"Introduction","text":"<p>The driver board supports EDP 30-pin interface LCD screens, with a full HD resolution of 1920 x 1080, and it also supports touch functionality. It accepts HDMI signal input, making it suitable for desktop computers, laptops, smartphones, PS4/PS5, Nintendo Switch, Xbox, and other gaming consoles for video output. It can also display the screen of single-board computers such as Raspberry Pi, Nvidia Jetson Nano, Orange Pi 4b, Banana Pi M5, and more.</p> <p>Model:CRT01267K </p>"},{"location":"Products/Modules-for-Prototyping/rtd2556-driver-boardcontroller-board-kit.html#specification","title":"Specification","text":"<ul> <li>Main Chip: RTD2556CG</li> <li>Voltage: 5V/2A(USB type C)</li> <li>Interface: EDP 30Pin</li> <li>Max Resolution: up to 1920*1080(1080P) @60Hz</li> <li>Signal Input: Mini HDMI-compatible interface and Type C interface</li> <li>Audio input: 3.5mm headphone jack</li> <li>Speaker output: support</li> <li>Touch: support</li> <li>Type-C PD one-line interface</li> <li>Button:toggle button(Menu, Volume +,Volume -) and switch button</li> <li>Standby power consumption: 0.1w</li> <li>Bare board startup power consumption: 1w</li> <li>Size of main board: 56mm \u00d7 76mm \u00d7 4mm</li> <li>Size of keyboard: 36mm \u00d7 54mm \u00d7 4mm</li> <li>Weight of main board: 17.2g</li> <li>Weight of keyboard: 3.9g</li> </ul>"},{"location":"Products/Modules-for-Prototyping/rtd2556-driver-boardcontroller-board-kit.html#feature","title":"Feature","text":"<ul> <li>Main controller chip: RTD2556, is a high-performance LCD display control chip with powerful image processing and display capabilities.</li> <li>Two signal input interface types: It supports Mini-HDMI compatible interface and Type C interface, providing versatile connectivity options for seamless integration with various devices.</li> <li>Maximum resolution support 1080P: It supports multiple resolutions for LCD displays, including HD(1020x800) and Full HD(1920x1080), catering to various display needs.</li> <li>Wide compatibility: It supports not only the screen output of various computers, smartphones, and gaming consoles like Switch but also the screen output of single-board computers such as Raspberry Pi and Nvidia.</li> <li>Rich external interfaces: It provides multiple external interfaces for connection and interaction with other devices and systems. It includes HDMI-compatible input interface, EDP 40Pin interface(1-30 for LCD Screen, 33-40 for touch), speaker interface, audio interface, USB-C interface, and more.</li> </ul>"},{"location":"Products/Modules-for-Prototyping/uln2003-stepper-motor-driver.html","title":"ULN2003 Stepper Motor Driver","text":""},{"location":"Products/Modules-for-Prototyping/uln2003-stepper-motor-driver.html#description","title":"Description","text":"<p>The Mini Stepper Driver is small size and easy to use. It used ULN2003A to amplify the control signal from the Arduino. The Drive voltage can up to 15v.</p> <p>Model: RDR02805D</p> <p></p> <p></p>"},{"location":"Products/Modules-for-Prototyping/uln2003-stepper-motor-driver.html#features","title":"Features","text":"<ul> <li>The most easy module to learn how to control the Stepper and finish the simple project.</li> <li>The logic control voltage:3~5.5V</li> <li>Motor Supply Voltage: 5~ 15V</li> <li>it can sink 500mA from a 50V supply,but you'd better limit the driver voltage under 15v.</li> <li>Operating temperature: -25 degree Celsius ~ +90 degree Celsius</li> </ul>"},{"location":"Products/Modules-for-Prototyping/uln2003-stepper-motor-driver.html#how-to-control-stepper","title":"HOW TO CONTROL STEPPER","text":"<p>Step motor is to a machine to convert pulse to angle displacement. So if you give stepper driver a certain pulse signal, it will drive step motor to a certain angle. you can control the angle the stepper moved by the number of the pulse. And you also can control the speed of the stepper rotate by the frequency of the pulse. The following picture is the schematic of the stepper driver.</p> <p></p> <p>The following picture is the control signal to drive a 28BYJ48 stepper to rotate 1/4096 circle.</p> line 1 2 3 4 5 6 7 8 red 1 1 1 1 1 1 1 1 orange 1 1 0 0 0 0 0 1 yellow 0 1 1 1 0 0 0 0 pink 0 0 0 1 1 1 0 0 blue 0 0 0 0 0 1 1 1 <p>So we defined the time series in a array</p> <pre><code>&lt;br&gt;byte CCW[8] = {0x09,0x01,0x03,0x02,0x06,0x04,0x0c,0x08};  //CouterClockWise\n&lt;br&gt;byte CW[8]= {0x08,0x0c,0x04,0x06,0x02,0x03,0x01,0x09};    //ClockWise\n</code></pre> <p>and in the following usage it will run, and then you must know how to drive a stepper.</p>"},{"location":"Products/Modules-for-Prototyping/uln2003-stepper-motor-driver.html#usage","title":"Usage","text":"<ul> <li>Stepper Control</li> </ul> <p>This usage is to drive a 28BYJ stepper. The stepper stopped when pushed the stop_button. It also can be changed to control the stepper to counterclockwise or clockwise rotate. Connect 28BYJ step motor to mini stepper driver as below:</p> <p></p> <p>Program Arduino as following:</p> <pre><code>/***************************\nThis code is shared by elecrow.com\nit is public domain, enjoy!\nit is used to control 28BYJ stepper\nit can be changed to control almost all the 4-wire or 5-wire stepper.\n*************************/\n\n/*\nThe time Series to control the stepper\n--make your making more easy!\n*/\nbyte CCW[8] = {0x09,0x01,0x03,0x02,0x06,0x04,0x0c,0x08};\nbyte CW[8] = {0x08,0x0c,0x04,0x06,0x02,0x03,0x01,0x09}; \n\nconst int stop_key = 14;  //stop_button connect to Arduino-A0\nbyte  change_angle=64;  //change the parameter to change the angle of the stepper\n\nvoid Motor_CCW()    //the steper move 360/64 angle at CouterClockwise \n{\n  for(int i = 0; i &lt; 8; i++)\n\n    for(int j = 0; j &lt; 8; j++)\n    {\n     if(digitalRead(stop_key)==0)\n      {\n      PORTB =0xf0;\n      break;\n      }\n      PORTB = CCW[j];\n      delayMicroseconds(1150);\n    }    \n}\nvoid Motor_CW()  //the steper move 360/64 angle at Clockwise\n{\n  for(int i = 0; i &lt; 8; i++)\n\n    for(int j = 0; j &lt; 8; j++)\n    {\n    if(digitalRead(stop_key)==0)\n      {\n      PORTB =0xf0;\n      break;\n      } \n      PORTB = CW[j];\n      delayMicroseconds(1150);\n    }\n}\n\nvoid setup()\n{\n  pinMode(stop_key,INPUT);\n  digitalWrite(stop_key,HIGH);\n  Serial.begin(57600);\n  DDRB=0xff;\n  PORTB = 0xf0;  \n  for(int k=0;k&lt;change_angle;k++) \n  {\n  Motor_CCW();  \n  }\n }\n\nvoid loop()\n{\n Motor_CCW();  //make the stepper to anticlockwise rotate\n// Motor_LR(); //make the stepper to clockwise rotate\n}\n</code></pre> <p>The connected stepper would rotate with a changing direction for this progam.</p>"},{"location":"Products/Modules-for-Prototyping/uln2003-stepper-motor-driver.html#resource","title":"Resource","text":"<p>ULN2003 datasheet</p>"},{"location":"Products/Modules-for-Prototyping/uln2003-stepper-motor-driver.html#how-to-buy","title":"How to buy","text":"<p>You can visit this page http://www.elecrow.com/uln2003-stepper-motor-driver-p-262.html to purchase it.</p>"},{"location":"Products/Modules-for-Prototyping/uln2003-stepper-motor-driver.html#faq","title":"FAQ","text":"<p>You can list your questions here or contact us</p>"},{"location":"Products/Raspberry-Pi/crowpi-2.html","title":"CrowPi-2","text":""},{"location":"Products/Raspberry-Pi/crowpi-2.html#description","title":"Description","text":"<p>CrowPi2 combines Raspberry Pi, a range of common sensors, and independently developed software, it\u2019s just as useful for learning about computer science, STEAM education, and setting up as a portable laptop. No matter whether you are a fan of Raspberry Pi, a STEAM educator, or someone who wants to experience something interesting, CrowPi2 will be your best choice!</p> <p>Model: SER35001L </p> <p></p>"},{"location":"Products/Raspberry-Pi/crowpi-2.html#features","title":"Features","text":"<ul> <li>11.6-inch 1920*1080 IPS screen</li> <li>Sleek body made out of environmentally-friendly material, portable for on-the-go use</li> <li>The wireless keyboard detaches from the body or stays connected via a magnet</li> <li>Convert between playing and learning in second</li> <li>Get started via the one-step installation of Raspberry Pi 4B</li> <li>2-MP camera, microphone, and stereo output built-in</li> <li>Switch between projects using one button and get creative using Raspberry PI GPIO pins, all of which connect to the onboard sensors or function as independent outputs</li> <li>The All-in-one board includes all necessary sensors for learning hardware and software</li> <li>Self-developed software for learning Scratch, Python, AI, and Minecraft step-by-step via an engaging dialogue teaching mode</li> <li>Offline account management for saving learning progress and achievements and conveniently continuing education</li> </ul>"},{"location":"Products/Raspberry-Pi/crowpi-2.html#specifications","title":"Specifications","text":"Item Value Model CrowPi-2 Size 291(Length)*190(Width)*46(Height)mm Weight 1.3kg Screen 11.6-inch 1920*1080 IPS screen Camera 2.0MP camera with microphone Power Supply DC12V/ USB 5V power supply Power port Micro USB/ DC Keyboard 2.4G wireless Mouse 2.4G wireless Audio output Stereo speaker Volume adjustment Support Screen brightness adjustment Support Induction screen function Support Screen Brightness Adjustment Support Induction Screen Function Support Audio port 3.5mm headphone jack Compatibility Compatible with Raspberry Pi 4B Other function storage box (power bank box) Supporting operation system Raspbian, Ubuntu, CentOS, Windows IOT, KALI, Pidora, ArchLinux, FreeBSD, Kodi, OpenWrt, RISC OS, RetroPie, LAKKA, Recalbox, LibreELEC, OSMC Certification CE FCC Rohs"},{"location":"Products/Raspberry-Pi/crowpi-2.html#safety-warning","title":"SAFETY WARNING","text":"<ul> <li>This appliance can be used by children aged from 8 years and above and persons with reduced physical, sensory or mental capabilities or lack of experience and knowledge if they have been given supervision or instruction concerning use of the appliance in a safe way and understand the hazards involved.</li> <li>Children shall not play with the appliance.</li> <li>Cleaning and user maintenance shall not be made by children without supervision.</li> </ul> <p>WARNING: Use the detachable supply unit provided with this appliance only.</p>"},{"location":"Products/Raspberry-Pi/crowpi-2.html#parameters","title":"Parameters","text":""},{"location":"Products/Raspberry-Pi/crowpi-2.html#the-gpio-call-form-of-the-sensor-module","title":"The gpio call form of the sensor module","text":"Sensor GPIO BUZZER GPIO 1 PIR GPIO 4 VIRABITION GPIO 2 TOUCH GPIO 0 RGB MATRIX GPIO 26 STEP MOTOR 1 GPIO 21 STEP MOTOR 2 GPIO 22 STEP MOTOR 3 GPIO 23 STEP MOTOR 4 GPIO 6 IR GPIO 28 RELAY GPIO 29 DHT11 GPIO 7 TILT GPIO 3 ULTRASONIC TRIG GPIO 27 EHCO GPIO 25 SOUND TRIG GPIO 5 SERVO GPIO 24 SDA1 GPIO 2 SCL1 GPIO 3"},{"location":"Products/Raspberry-Pi/crowpi-2.html#uasage","title":"Uasage","text":""},{"location":"Products/Raspberry-Pi/crowpi-2.html#hardware","title":"Hardware","text":""},{"location":"Products/Raspberry-Pi/crowpi-2.html#install-raspberry-pi","title":"Install Raspberry Pi","text":"<p>Step 1. Insert the SD card (built in system) into the Raspberry Pi SD card slot  Step 2. Push to the right to open the back cover of the CrowPi 2 Raspberry Pi compartment.  Step 3. Vertically install the Raspberry Pi 4 with the TF card inserted into the Raspberry Pi compartment.  Step 4. Connect the Micro HDMI adapter board to the Micro HDMI interface of the Raspberry Pi   Step 5. Connect the Raspberry Pi power cable and the 2pin interface to the female socket on the PCBA board, and insert the Type-c into the Raspberry Pi type-c power port.  Step 6. Remove the USB head and insert it into the USB port of the Raspberry Pi through the cable hole. It\u2019s for camera and microphone  Step 7. Close the cover  Step 8. Connect the power supply, Use the 12V power supply in the accessories, insert the DC round head into the DC12V power supply port. </p>"},{"location":"Products/Raspberry-Pi/crowpi-2.html#keyboard-and-mouse","title":"Keyboard and mouse","text":"<p>Step 1. Remove the wireless receiver in the mouse compartment .  Step 2. Insert any USB port of the Raspberry Pi. .  Step 3. Install a battery into the mouse,and then switch the button of keyboard and mouse to \"ON\" side.  Step 4. Get started, and you can use to open/close the touchpad.  Step 5. When the power led of keyboard is blink, it means that the power is almost exhausted, please use the micro usb cable to power the keyboard. And you can replace the battery of mouse if it runs out of power </p>"},{"location":"Products/Raspberry-Pi/crowpi-2.html#storage-compartment","title":"Storage compartment","text":"<p>Use your finger to open and close the storage compartment.  </p>"},{"location":"Products/Raspberry-Pi/crowpi-2.html#power-bank","title":"Power bank","text":"<p>1 Install 5v power  1.1. Open the storage compartment, put the powerbank into the compartment, insert the wire through the wire hole, and then push it into device.</p> <p> 1.2. Access to 5V micro USB port.</p> <p> 2. Press the power button </p>"},{"location":"Products/Raspberry-Pi/crowpi-2.html#screen-brightness-adjustment","title":"Screen brightness adjustment","text":"<p>Press the + button to increase the brightness, press - to decrease.</p> <p></p>"},{"location":"Products/Raspberry-Pi/crowpi-2.html#software","title":"Software","text":"<p>This is a software specially designed for CrowPi 2 users, which integrates scratch, python programming and adaptation tutorials, Micro:bit and Arduino IDE, as well as the most popular programming game Minecraft. In addition, it also can be used as entertainment device, which not only allows you to play small python games, but also enjoy videos and audios with a built-in player. Even if you want to learn the hottest AI related projects of recent years face and speech recognition, we've provided some examples for you to get started.  </p>"},{"location":"Products/Raspberry-Pi/crowpi-2.html#parts","title":"Parts","text":"Parts name Function Learing Python lessons:Let users quickly master the knowledge of python programming and software and hardware interaction Scratch lessons:Let users quickly master the knowledge of scratch programming and software and hardware interaction Projects 20 small applications designed for quick familiarity with CrowPi 2 hardware features Minecraft Use game Minecraft to open the door to python programming world for children, teaching in fun AI Get the most popular knowledge of AI- face recognition and speech recognition Python Built-in python programming client Game Experience the fun of simple Mini Game written by python and develop your child's brain Micro:bit Makecode entry which is designed for Micro:bit programming Scratch Built-in Scratch Visual Programming Client Arduino Built-in Arduino programming IDE"},{"location":"Products/Raspberry-Pi/crowpi-2.html#main-page-and-user-settings","title":"Main page and User Settings","text":"<p>Main page The page is the main software page, click on the corresponding module area to enter the corresponding section. Click \"return\"to return to the desktop. Click \"login\"to Create and login accounts. Click \"shutdown\"to pop up the shutdown window.</p> <p> Click \"shutdown\"shutdown the device or\"reboot\" to reboot.</p> <p> Create and login accounts Enter account login page, click go back to the previous step. The first time you use the software you need to register a new account.</p> <p>Click Create Account to create a new user account. Then go to the page shown in the image below, click back to the previous step</p> <p> Enter Name, only support numbers and letters. Enter Password, limit the number of characters to 6-12 bits Reconfirm the password entered in the second step, Click \"NEXT\"  </p> <p> Set up secret questions and answers, click\"CREATE\" to complete account creation. Go back to the login page and enter the username and password you just set up. Then click \"LOGIN\"to sign in.</p> <p> Once you've successfully logged in, click on the user icon, pop up a personal user window, where you can view the progress of your course and your private folder. Click \"LOGOUT\" to log out of your account.</p> <p></p> <p>For more detailed instructions on how to operate, please read the manual.</p>"},{"location":"Products/Raspberry-Pi/crowpi-2.html#faqs","title":"FAQs","text":"<p>1. Unable to boot 1. Make sure you are using the correct charger and you inserted the SD card into the Raspberry Pi 2. Re-format and re-flash the SD/TF card. After booting the CrowPi L, use Gparted to resize the partition /dev/mmcblk0p2 where the image of CrowPi L is installed. For details, please refer to Step5 on this page .</p> <p>2. The wireless mouse cannot be used Please ensure that the battery is sufficient and the wireless receiver has been inserted into the USB port of the Raspberry Pi  </p> <p>3. The touchpad cannot be used Please confirm that the touch function (keyboard touch function switch: FN+F1) is turned on</p> <p>4. The screen is black and freezes Please check whether the high-current peripherals were mounted and led to insufficient power supply. It may also due to standby caused by long periods of non-use, use a touchpad or keyboard to wake up</p> <p>5.The camera and microphone do not work  The USB adapter connection is unstable, please re-plug</p> <p>6. Unable to connect to the network Please turn on the wireless network or connect to the Raspberry Pi Ethernet port. </p> <p>7. How to show battery status in the system tray of the native Raspberry Pi OS Here's a little app to show the battery status: https://github.com/ppyne/crowPi-L_BatteryStatus For details, please refer to this page. You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Raspberry-Pi/crowpi-2.html#resources","title":"Resources","text":"<p>CrowPi L image CE_EMC certification FCC_Certificate ROHS_Certificate </p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html","title":"CrowPi-L","text":""},{"location":"Products/Raspberry-Pi/crowpi-l.html#description","title":"Description","text":"<p>CrowPi-L is a lite version born out of CrowPi2, \"L\" stands for Lite, Light, and Laptop. This is a real Raspberry Pi computer. We collected a lot of opinions from CrowPi users and Raspberry Pi enthusiasts, focusing on solving many inconveniences of using Raspberry Pi DIV laptops, such as installing Raspberry Pi , switching system, heat dissipation, expanding screens, etc. Better yet, we still retain the highlights of the CrowPi series, built-in course system. Users will have a new experience bringing by Crowpi-L.</p> <p>Model: SER35001L </p> <p></p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#features","title":"Features","text":"<ul> <li>11.6-inch 1366*768 IPS screen, sleek body made out of environmentally-friendly material, portable and delicate.</li> <li>Come with keyboard and touchpad, which are the assistant for using Raspberry Pi.</li> <li>Built-in fan and air circulation cooling system designed to protect the smooth operation of the Raspberry Pi system.</li> <li>40 pin expansion Raspberry Pi pin, allow users to connect the onboard sensor or output independently, which can help build Raspberry Pi projects faster and enables more creative usage.</li> <li>2 megapixels camera which is integrated with microphone, and also equipped with stereo output speakers.</li> <li>The Type-C interface supports 9-20V wide voltage input, and a built-in 5000 mAh battery, which supports the device to work independently for more than three hours, and the software synchronously displays the battery power status.</li> <li>The HDMI expansion port can be used to connect an external monitor, and the audio expansion port allow headphone or speaker to be connected.</li> <li>Equipped with self-developed learning software, customized UI that is more suitable for traditional computer users, making software and hardware programming learning easier and more convenient.</li> <li>Unique dual system switching function and extended storage function.</li> </ul>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#specifications","title":"Specifications","text":"Item Value Model CrowPi-L Size 291(Length)*190(Width)*46(Height)mm Weight 1.1kg Screen 11.6 inch 1366*768 IPS screen Camera 2 megepixels camera with microphone Power Supply DC 12V 2A Power Connector USB-C interface Keyboard Built-in USB keyboard Touchpad Function Support Mouse 2.4G mouse Audio Output Stereo speakers Volume Adjustment Support Screen Brightness Adjustment Support Induction Screen Function Support External Storage Support Extended Screen Function Support Audio Output Interface 3. 5MM headphone jack Equipment Compatible Raspberry Pi 4B Dual System Function Support Support Operating System Raspbian, Ubuntu, CentOS, Windows IOT, Kail, Pidora, ArchLinux, FreeBSD, Kodi, OpenWrt, RISC OS, RetroPie, LAKKA, Recalbox, LibreELEC, OSMC Certification CE FCC Rohs"},{"location":"Products/Raspberry-Pi/crowpi-l.html#safety-warning","title":"SAFETY WARNING","text":"<ul> <li>This appliance can be used by children aged from 8 years and above and persons with reduced physical, sensory or mental capabilities or lack of experience and knowledge if they have been given supervision or instruction concerning use of the appliance in a safe way and understand the hazards involved.</li> <li>Children shall not play with the appliance.</li> <li>Cleaning and user maintenance shall not be made by children without supervision.</li> <li>WARNING: Use the detachable supply unit provided with this appliance only.</li> </ul>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#parameters","title":"Parameters","text":""},{"location":"Products/Raspberry-Pi/crowpi-l.html#uasage","title":"Uasage","text":""},{"location":"Products/Raspberry-Pi/crowpi-l.html#hardware","title":"Hardware","text":""},{"location":"Products/Raspberry-Pi/crowpi-l.html#install-raspberry-pi-and-boot","title":"Install Raspberry Pi and boot","text":"<p>CrowPi L Rapspberry Pi Laptop Install Video Correctly Install and Disassemble the Raspberry Pi Laptop  Step 1. Install the screws for Raspberry Pi which will be installed in the laptop   Step 2. Insert the 2-in-1 TF card adapter board into the TF card slot on the back of the Raspberry Pi   Step 3. Install HDMI expansion board   Step 4. Install USB adapter board and connect the flat cable to HDMI expansion board</p> <p>Notice: The blue part is upward and the metal part is downward. Othervise there'll show nothing on the screen.</p> <p> Step 5. Put the assembled Raspberry Pi into the Raspberry Pi storage compartment, there is a magnetic base at the bottom of the compartment to fix the Raspberry Pi.  Step 6. Connect the other end of the flat cable to the motherboard.  Warning: Don't install with power on! Warning: Do not install it askew! Otherwise, a short circuit may occur and the flat cable may be burnt, and fingers may be burned!  Step 7. Press the GPIO adapter board with fan from top to bottom to connect the 40 pins on both sides.   Step 8. Cover the Raspberry Pi protective cover.Step 9. Plug the 12V/2A type-c power adapter and press the power button at the top of the keyboard to start using. </p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#use-of-camera-and-microphone","title":"Use of camera and microphone","text":"<p>Connect camera and microphone via USB, if there is abnormal, you need to first check whether the USB adapter is properly connected in the forth step of the \"Raspberry Pi Installation and Booting\" operation guide.  </p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#use-of-wireless-mouse","title":"Use of wireless mouse","text":"<p>1.Take out the wireless receiver in the mouse compartment.  2.Insert the receiver into the USB port of the Raspberry Pi.  3.Turn on the power of the mouse to start normal use.  Note: Your operation should follow the order above, don't turn on the power first.</p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#use-of-touchpad","title":"Use of touchpad","text":"<p>When CrowPi-L is working normally, press FN+F1 to unlock the touchpad for normal use, and press FN+F1 again to disable the touchpad function. </p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#connect-to-the-network","title":"Connect to the network","text":"<p>Insert the network cable into the network port of the Raspberry Pi or turn on the wireless network switch to connect to the wireless network.</p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#screen-brightness-adjustment","title":"Screen brightness adjustment","text":"<p>When CrowPi-L is working normally, press F9 to decrease the brightness and press F10 to increase the brightness.</p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#charging-and-battery","title":"Charging and battery","text":"<p>When using the type-c power supply, the battery can be charged. It takes 3 hours to fully charge the battery when it is not working. After being fully charged, it can support the device to work continuously for 3 hours.</p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#dual-system-switch","title":"Dual system switch","text":"<p>The self-developed dual-system switching adapter board allows two TF cards to be inserted at the same time, and users can quickly switch the system through the switch on the switching board. Note: Switch operation need to do when machine is turned off, and turn on the laptop after switching successfully. </p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#support-external-storage","title":"Support external storage","text":"<p>The product provides an independent memory card interface, and users can connect an external memory card to expand the memory capacity.#### Use of expansion screen</p> <p>CrowPi-L has set aside a standard HDMI interface for customers to use the expansion screen.  Note: Affected by the Raspberry Pi 4B hardware, the expansion screen needs to be connected to the HDMI cable and screen before the Raspberry Pi is turned on, and the expansion screen can be used normally after turning on the device. </p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#use-of-headphonespeaker","title":"Use of headphone/speaker","text":"<p>Compatible with headphones or speakers with 3.5mm interface</p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#use-of-gpio-port","title":"Use of GPIO port","text":"<p>We specially designed the GPIO port adapter board for CrowPi-L. After the user plugs in the adapter board, the Crowtail series sensor can be connected externally, and users can learn software and hardware knowledge through our tutorials. Connection steps: Step 1. Connect the cable to the shield board   Step 2. Insert the other end of the cable into the GPIO slot on the side of the laptop  </p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#program-lesson","title":"Program Lesson","text":""},{"location":"Products/Raspberry-Pi/crowpi-l.html#letscode-lessons","title":"Letscode lessons","text":"<p>16 Game design lessons: Suitable for beginners, simple graphical programming can quickly output interesting game projects, which can help users build a programming system and exercise logical thinking. 24 Hardware control lessons: Letscode's advanced course adds a wealth of sensor knowledge. The combination of software and hardware can quickly output intelligent electronic projects, help users understand electronic circuits, open the door to hardware design, and exercise hands-on ability.  </p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#python-lessons","title":"Python lessons","text":"<p>32 Python Introduction to syntax lessons: Suitable for students with basic graphical programming, systematic code programming introduction, staged project design, allowing users to learn the underlying logic of programming and improve logical thinking.  24 Python hardware control lessons : An advanced course for the introduction of Python syntax, complete hardware projects through code programming, consolidate and improve programming ability, and cultivate systematic design thinking.  </p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#usage-of-pi-panel-software","title":"Usage of Pi Panel Software","text":"<p>After installing the CrowPi L accessories and SD card, and making sure that the SD card switch is turned to the side of the system you need to boot, you can turn on the CrowPi L by pressing the power button.   Once powered on, Pi Panel, the course software we designed, will automatically turn on. If you turn off the software, you can open it again by clicking the icon in the menu at the bottom of the desktop.  In Pi Panel software, there are Letscode lessons and Python lessons in the upper left corner. Letscode is a graphical programming software similar to Scratch which is designed by Elecrow, you don't need to write code, but drag and drop the code blocks to build the program, which is suitable for the beginners to learn.In Python lessons, you need to write code, which is suitable for people who have the basic knowledge of programming. You can learn letscode course first and then learn python course.   There are projects in the upper right corner of the software, there are programs that have already been written and can run directly. Other icons are some program software.  First of all, let's demonstrate the letscode lessons, click to enter the letscode lessons. The first entrance is for small game writing tutorial, the second is hardware control tutorial, you need to use with crowdtail kit, the third entrance is to add your own tutorials.  Click into the tutorials to start learning, each lesson has detailed steps. Here take the first lesson of hardware control as an example.   Enter the course to learn, first it will introduce the letscode software, and then introduce the hardware used in this course.   The first lesson blinking LED, the course will introduce principle of LED lighting, and then introduce the software writing method. According to the step by step guide, click on the run icon after building the program, then we can see the led blinking up as expected.   Then look at the python lessons, the editor used is thonny IDE, the content of the course is similar to the letscode course, but the code writing part is different, here we need to follow the instructions, and then type the code in thonny IDE.   That's all for the introduction of Pi Panel software.  Turn off the Pi Panel software, you can use CrowPi L as a laptop, such as open the browser to surf the Internet, open the terminal to run commands, manage your files and so on. You can figure out the other functions and start learning journey by yourself.  </p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#faqs","title":"FAQs","text":"<p>1. Unable to boot 1. Make sure you are using the correct charger and you inserted the SD card into the Raspberry Pi 2. Re-format and re-flash the SD/TF card. After booting the CrowPi L, use Gparted to resize the partition /dev/mmcblk0p2 where the image of CrowPi L is installed. For details, please refer to Step5 on this page .</p> <p>2. The wireless mouse cannot be used  Please ensure that the battery is sufficient and the wireless receiver has been inserted into the USB port of the Raspberry Pi</p> <p>3. The touchpad cannot be used  Please confirm that the touch function (keyboard touch function switch: FN+F1) is turned on</p> <p>4. The screen is black and freezes  Please check whether the high-current peripherals were mounted and led to insufficient power supply. It may also due to standby caused by long periods of non-use, use a touchpad or keyboard to wake up</p> <p>5.The camera and microphone do not work  The USB adapter connection is unstable, please re-plug</p> <p>6. Unable to connect to the network  Please turn on the wireless network or connect to the Raspberry Pi Ethernet port.</p> <p>7. How to show battery status in the system tray of the native Raspberry Pi OS  Here's a little app to show the battery status: https://github.com/ppyne/crowPi-L_BatteryStatusFor details, please refer to this page.</p> <p>**You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Raspberry-Pi/crowpi-l.html#resources","title":"**Resources","text":"<p>CrowPi L image CE_EMC certification FCC_Certificate ROHS_Certificate</p>"},{"location":"Products/Raspberry-Pi/crowpi.html","title":"CrowPi","text":""},{"location":"Products/Raspberry-Pi/crowpi.html#description","title":"Description","text":"<p>CrowPi is an educational tool based on Raspberry Pi, designed to help people learn electronics, programming, and basic computer science. CrowPi was first released on Kickstarter in May 2018 and won a very successful campaign. The initial users spoke highly of CrowPi and left several good reviews. The success of CrowPi is based on the popularity of Raspberry Pi and on the unique advantages of the product itself, such as the compact development board, the neat and portable case, the step-by-step tutorials, and the affordable price. As we all know, computer science and programming are now regarded as essential abilities for 21<sup>st</sup>-century students and are becoming a key component of many curriculums, even in primary schools. And when we combine computer science and programming with electronics, we can build many useful devices both for industrial applications and for use in our daily life. Some examples of modern applications for IT are: running a weather station, PIR automatic lighting, line tracking robot car, vehicle radar, and so on. By mastering knowledge, and these skills, today's kids can be better prepared for a future in which AI, lOT, big data, and robotics dominate the world.  Model: SER35001L </p> <p> </p>"},{"location":"Products/Raspberry-Pi/crowpi.html#safety-warning","title":"SAFETY WARNING","text":"<p>Elecrow puts their customer's safety and security at the first priority, for the same reason Elecrow doesn't use dangerous materials while manufacturing, and we follow extremely strict QA tests to make sure the highest quality product will be shipped to our customers. The CrowPi is a safe-to-use product with 5V input by power supply. Even though it's completely safe to use it under normal circumstances there are a few rules that parents should be aware of when buying this product for their children.</p> <ul> <li>Children should be under parent's supervision while using such a product, the product contains small parts which might cause chocking to small children if swallowed.</li> <li>The relay module supplied inside our CrowPi board should ONLY be used within the breadboard circuit designing, standing with 3v/5v power supply and SHOULD NOT under any circumstances be used / connected or wired to a 220v/110v power plug like light bulb, air conditioner etc ...</li> <li>We care about your children's eyes and health just as you do, we do not recommend using the device in dark room with no light for safety reasons and to protect the eyes from the light of the LED\u2019 s and LCD display.</li> <li>The device was designed to be portable. It's possible to take it anywhere including out-doors, school, train etc \u2026 The device should not be left out-doors without supervision and / or in bad weather conditions such as rain and snow. The device is neither water or dust proof.</li> </ul>"},{"location":"Products/Raspberry-Pi/crowpi.html#parameters","title":"Parameters","text":""},{"location":"Products/Raspberry-Pi/crowpi.html#sensor-control-description","title":"Sensor Control Description","text":"Sensor Name Control Pin Control Method Remarks BUZZER pin12/GPIO18 GPIO OUTPUT RELAY pin40/GPIO21 GPIO OUTPUT SOUND SENSOR pin18/GPIO24 GPIO INTPUT TILT SWITCH pin15/GPIO22 GPIO INTPUT UX5-2 ON VIBRATION MOTOR pin13/GPIO27 GPIO OUTPUT UX5-1 ON PIR MOTION SENSOR pin16/GPIO23 GPIO OUTPUT TOUCH SENSOR pin11/GPIO17 GPIO INTPUT STEPPER MOTOR pin29/GPIO5 pin31/GPIO6 pin33/GPIO13 pin35/GPIO19 GPIO OUTPUT UX5-3 ON UX5-4 ON UX5-5 ON UX5-6 ON SERVO pin22/GPIO25 GPIO OUTPUT UX5-8 ON IR RECEIVER pin38/GPIO20 GPIO BOTH TEMPERATURE&amp;HUMIDITY pin7/GPIO4 GPIO INTPUT ULTRASONIC SENSOR ECHO:Pin32/GPIO12 TRIG:Pin36/GPIO16 GPIO INTPUT LIGHT SENSOR I2C I2C Address:0x5c I2C LCD I2C I2C Address:0x21 4 BIT SEGMENT I2C I2C Address:0x70 LED MATRIX SPI SPI CS: pin26/GPIO8 NFC MOUDLE SPI SPI CS: pin24/GPIO7 INDEPENDENT BUTTON UP: pin37/GPIO26 DOWN: pin33/GPIO13 RIGHT: pin35/GPIO19 LEFT:pin22/GPIO25 GPIO INPUT UX1-5 ON UX1-6 ON UX1-7 ON BUTTON ARRAY Row1: pin13/GPIO27 Row2: pin15/GPIO22 Row3: pin29/GPIO5 Row4: pin31/GPIO6 Col1: pin22/GPIO25 Col2: pin37/GPIO26 Col3: pin35/GPIO19 Col4: pin33/GPIO13 GPIO INPUT UX1-1 ON UX1-2 ON UX1-3 ON UX1-4 ON UX1-5 ON UX1-6 ON UX1-7 ON UX1-8 ON <p>NOTE: UX1 and UX5 are dialing switches, some sensors use the same GPIO, so if you want to use those sensors, you have to turn on the right switch, for example: button-LEFT using the same GPIO with the SERVO 2, if you want to use the SERVO, You can open UX5-8, if you want to use button-LEFT , you can open UX1-8.</p>"},{"location":"Products/Raspberry-Pi/crowpi.html#uasage","title":"Uasage","text":""},{"location":"Products/Raspberry-Pi/crowpi.html#initial-installation","title":"Initial Installation","text":""},{"location":"Products/Raspberry-Pi/crowpi.html#pre-installation-requirements","title":"Pre-installation requirements","text":"<p>Before diving right into the CrowPi Initial installation guide we'd like to confirm you have everything that is required in order to make the installation process as smooth as possible.Please go through the following checklist and make sure you have it allNote: These are not optional. They are all necessary for the installation process.  </p>"},{"location":"Products/Raspberry-Pi/crowpi.html#downloading-the-crowpi-image","title":"Downloading the CrowPi Image","text":"<p> The Raspberry Pi uses an Linux-based operating system in order to function properly,it uses a Micro-SD card to boot the operating system into a use-friendly environment to enable customers like you to code and make amazing things.In the following steps we'll go through downloading the Raspberry Pi Image that we're going to use. In order to make the whole process much easier and user-friendly, we've created an image based on the stock Raspberry Pi Raspbian Image with all the necessary drivers and installation that will help you get you started right away without hassle .You can either use this method and burn our Image or use a stock Raspbian Image from the Raspberry Pi website and then install all the drivers manually. We highly recommend the first method. To clarify, We didn't modify or add any thing unnecessary to the image, all the modifications are for the pure purpose of making our CrowPi working perfectly with the Raspbian OS. If you don't have any advanced knowledge with compiling packages from source / getting around Linux OS - We strongly recommend downloading our Image. To download our Image, go to the following link on your favourite web  browser:https://www.elecrow.com/download/crowpi/Crowpi-image-RPI-4B-Version.zip  And download the \u201c.img\u201d (image) file that contains the CrowPi Raspbian OS. To download the stock Raspbian image, go to the following link on your favourite web browser: https://www.raspberrypi.org/downloads/ And download the official Raspberry pi Raspbian OS or any other Raspberry compatible image that works for you .</p>"},{"location":"Products/Raspberry-Pi/crowpi.html#burning-the-image-into-an-micro-sd-card","title":"Burning the image into an Micro SD Card","text":"<p>After you've successfully downloaded the image, you should have a file called\u201c&lt;file_name&gt;.img\u201d while \u201c&lt;file_name&gt;\u201d can depend on where you downloaded from,either Elecrow website or the Raspberry Pi Official website. The file extension should be \u201c.img\u201d or \u201c.zip\u201d if it\u2019 s an \u201c.zip\u201d you should extract it to have a file extension \u201c.img\u201d . In order to extract it,download the software \u201c7zip\u201d for Windows or \u201cthe unarchiver\u201dfor Mac OSX: Windows: http://www.7-zip.org/download.html Mac OSX: http://wakaba.c3.cx/s/apps/unarchiver.html After you successfully confirmed you have the file, the next step will be burning the image into your Micro SD card. In order to burn the image, we'll need a tool called \u201cEtcher\u201d , Etcher is a graphical MicroSD card writing tool that works on Mac OS, Linux and Windows. You can download Etcher for your Operating System here: https://etcher.io/ After downloading and opening Etcher you should see something like this:  Follow the following steps: 1) Click the \u201cSelect Image\u201d button and select your .img file which you downloaded from either Elecrow Website or Raspberry Pi official website 2) Click \u201cSelect Drive\u201d button to select your Micro SD Card that you would like to burn the image on (if Micro SD Card inserted, Etcher will do this step for you automatically) 3) Click Flash Button to flash the image, wait for it to finish and we're done! Attaching the Raspberry Pi to the CrowPi Board**After finishing the burning process it's time to disconnect the micro SD card from the PC/ laptop and plug it into the Raspberry Pi.  **Note : Make sure to follow the following steps carefully, don't apply extra pressure or strong force over the cable as you might damage the pins. After successfully plugging back in the Micro SD card, we'll need to lay the Raspberry Pi over it's location on top of the CrowPi board.  Afterwards, we'll need to plug it in by using \u201crainbow\u201d (flat) cable. We'll first carefully plug it into the Raspberry pi making sure it covers the exact pins of the raspberry pi and very importantly doing it carefully not to damage the Raspberry Pi pins.  The second step will be plugging the \u201crainbow\u201d cable into the CrowPi board.We'll take the other end of the \u201crainbow\u201d cable and carefully plug it directly into the board making sure it covers all the pins and placed at the right spots.  And \u2026 We are done! Well \u2026 almost!  To make sure that the Raspberry Pi won't move during your rapid development we will need to attach it using screws, the Raspberry Pi contains screws to be attached to the CrowPi board, take a look at the following picture for reference:  Make sure to attach them tightly for your Raspberry Pi safety.  Last thing will be to plug the power adapter into the CrowPi board , it's highly recommended to use the power supply we supply with the board, but also any other power supply like micro-USB / Battery will work as well.  First time booting into the Operating System After We've prepared everything and plugged the power on. After powering on the board by clicking on the power button of cable, the Raspberry Pi should load the operating system automatically. Give it few seconds up to one minute to load until you'll see the desktop environment and you'll be ready to go.  Congratulations! You've officially got your CrowPi up and running. You might have realized that you have no way to control the desktop environment except for the 7 inch touch screen \u2026 let's get it solved by plugging in a keyboard and external mouse. We can do it by simply plugging in a USB keyboard and USB mouse   Or connect Bluetooth keyboard and mouse using the touch screen with the bluetooth configuration    Last thing will be connecting to a local wifi access point or using Ethernet cable if that works better for you (both are optional)   After this, you should have fully functional CrowPi laptop that you can do everything you want to with it!</p>"},{"location":"Products/Raspberry-Pi/crowpi.html#summary","title":"Summary","text":"<p>What should you do next? Now, when the initial installation is complete - you're ready to go!  We've prepared 21 lessons for you to get started with the CrowPi.  The lessons will get you started using Python 2.7 and modules usages including all on-board sensors and creating your own first project using the breadboard.  Download the lessons PDF Here:  https://www.elecrow.com/download/CrowPi-lessons.pdf</p>"},{"location":"Products/Sensors/1-axis-analog-gyro-module-enc03.html","title":"1-Axis Analog Gyro Module-ENC03","text":""},{"location":"Products/Sensors/1-axis-analog-gyro-module-enc03.html#description","title":"Description","text":"<p>This angular velocity sensor utilizes a Coriolis force that act on a vibrating object when an angular velocity is applied to it. The use of this unit simplifies equipment structure and circuit configuration, thus making it possible to provide outstanding performance. This module can be used for positional control and posture control of a moving object requiring precision and quick-response measurements. There is one ENC-03r senor on this module, provides 1-axis velocity with high speed, which outputs as analog voltage.</p> <p>Model:SENC031G</p> <p></p>"},{"location":"Products/Sensors/1-axis-analog-gyro-module-enc03.html#features","title":"Features","text":"<ul> <li>Supply Voltage: 2.7V~5.25V DC</li> <li>Resonance Frequency: 30.8 kHz</li> <li>Max Angular Velocity: \u00b1300 Degree</li> <li>Output (at Angular Velocity=0): 1.35 V DC</li> <li>Scale Factor: 0.67 mV/deg/sec.</li> <li>Linearity: \u00b15%;</li> </ul>"},{"location":"Products/Sensors/1-axis-analog-gyro-module-enc03.html#usage","title":"Usage","text":"<p>The module detects one-axis rotation with analog signal.</p> <p>1.Hardware Connection 5V+--5V GND--GND OUT--A0</p> <p></p> <p>2.Upload the below code.</p> <pre><code>int sensorPin = A0;             // select the input pin for the sensor\n\nfloat reference_Value=0;\n\nint sensorValue = 0;            // variable to store the value coming from the sensor\n\nvoid setup() {\n\n   int i;\n   float sum=0;\n   pinMode(sensorPin, INPUT);\n   Serial.begin(9600);\n   Serial.println(\"Please do not rotate it before calibrate!\");\n   Serial.println(\"Get the reference value:\");\n\n   for(i=0;i&lt;1000;i++)\n   {\n       // read the value from the sensor:\n       sensorValue = analogRead(sensorPin);\n       sum += sensorValue;\n       delay(5);\n   }\n   reference_Value = sum/1000.0;\n   Serial.println(reference_Value);\n   Serial.println(\"Now you can begain your test!\");\n}\n\nvoid loop() \n{\n\n   double angularVelocity;\n   sensorValue = analogRead(sensorPin);\n   angularVelocity =((double)(sensorValue-reference_Value)*4930.0)/1023.0/0.67; //get the angular velocity\n   Serial.print(angularVelocity);\n   Serial.println(\"deg/s\");\n   Serial.println(\" \");\n   delay(500);\n}\n</code></pre> <p>3.Now, it is time to the calibration. Put the sensor on your desk horizontally, and then press the Reset button on the Crowduino, and then Open the serial tool:</p> <p></p> <p>4.As you see the \"Now you can begin your test\", that means the calibration done. You can use the sensor now. Rotating direction can reference the following picture:</p> <p></p>"},{"location":"Products/Sensors/1-axis-analog-gyro-module-enc03.html#resource","title":"Resource","text":"<ul> <li>Analog_Gyro Program</li> <li>ENC-03 Datasheet </li> </ul>"},{"location":"Products/Sensors/1019dround-fingerprint-recognition-sensor-module-id809.html","title":"1019DRound fingerprint recognition sensor module ID809","text":""},{"location":"Products/Sensors/1019dround-fingerprint-recognition-sensor-module-id809.html#description","title":"Description","text":"<p>This round fingerprint module takes ID809 high-performance processor and semiconductor fingerprint sensor as the core runs the new IDfinger6.0 fingerprint algorithm, which can realize fingerprint registration, comparison, deletion functions ,and colorful lighting effects. And the integrated chip also reduces the volume of the fingerprint module.</p> <p>The product structure is simple, and the modular design improves the stability and consistency of the product. The fingerprint sensor module supports UART communication mode and with the SDK development kit, it can be connected to any microcontroller or system using a TTL serial, which is convenient for secondary development. It also comes with a 6-pin Molex style 1mm pitch connector that you can easily cut and solder directly to the wires.</p> <p>Model: DPI59818S </p> <p></p>"},{"location":"Products/Sensors/1019dround-fingerprint-recognition-sensor-module-id809.html#features","title":"Features","text":"<ul> <li>Good experience and high security: The brand-new IDfinger6.0 fingerprint algorithm is deeply optimized and fully accelerated; Fingerprint recognition has fast speed and high security, and it supports 360-degree recognition at any angle.</li> <li>High performance and low power consumption: The module CPU is produced by advanced technology, with ARM\u00ae Cortex\u2122-M4 core, which has fast operation speed and low power consumption.</li> <li>Complete functions: It integrates functions such as fingerprint collection, image processing, feature extraction, fingerprint registration, fingerprint comparison, fingerprint deletion, and other functions.</li> <li>Easy to develop: support Windows, Android, embedded systems, standard UART communication, and provide SDK development kit</li> <li>Compact size: simple structure, small size, can be flexibly embedded in various products with limited size</li> <li>Durable: high electrostatic withstand voltage, strong anti-interference ability, and sturdy shape.</li> </ul>"},{"location":"Products/Sensors/1019dround-fingerprint-recognition-sensor-module-id809.html#specifications","title":"Specifications","text":"<ul> <li>Active capacitive sensor can store 200 fingerprints</li> <li>1:1 verification time is about 300~400ms</li> <li>The communication method with the host is UART</li> <li>The pixel resolution of the sensor is 508dpi</li> <li>The pixel count of the sensor is 160x160</li> <li>360\u00b0 fingerprint entry and matching</li> <li>The outer frame size of the sensor is 12.8m in diameter, fingerprint detection area 8.0mm x 8.0mm</li> <li>The anti-scratch rating of the sensor is 4H, and the anti-static level is +/\u2010 15kV</li> <li>The working environment of the product is -40 -60\u2103/&lt;RH 90%</li> <li>PCB diameter of the product is 21mm, installation is 19mm,height is 5mm</li> <li>CNC firing metal ring, plus aperture</li> </ul>"},{"location":"Products/Sensors/1019dround-fingerprint-recognition-sensor-module-id809.html#dimensions","title":"Dimensions","text":"<p>PCB diameter: 21mm, installation diameter: 19mm, height: 5mm </p>"},{"location":"Products/Sensors/1019dround-fingerprint-recognition-sensor-module-id809.html#pinout","title":"Pinout","text":"No. Name Description 1 GND Groud 2 UART_RX UART receive 3 UART_TX UART transmit 4 VIN +3.3V: connect to work; disconnect to enter sleep 5 IRQ/WAKEUP Finger sensing output: active high 6 VCC Power supply (+3.3V)"},{"location":"Products/Sensors/1019dround-fingerprint-recognition-sensor-module-id809.html#resources","title":"Resources","text":"<ul> <li>Programm_File</li> <li>NOEM_Host.zip</li> <li>specification_ch.pdf</li> <li>Instruction_set_ch.pdf</li> </ul>"},{"location":"Products/Sensors/2-axis-analog-gyro-module-enc03.html","title":"2-Axis Analog Gyro Module-ENC03","text":""},{"location":"Products/Sensors/2-axis-analog-gyro-module-enc03.html#description","title":"Description","text":"<p>This angular velocity sensor utilizes a Coriolis force that act on a vibrating object when an angular velocity is applied to it. The use of this unit simplifies equipment structure and circuit configuration, thus making it possible to provide outstanding performance.  This module can be used for positional control and posture control of a moving object requiring precision and quick-response measurements. There is two ENC-03r senor on this module, provides 2-axis velocity with high speed, which outputs as analog voltage.</p> <p>Model:SENC032G</p> <p></p>"},{"location":"Products/Sensors/2-axis-analog-gyro-module-enc03.html#features","title":"Features","text":"<ul> <li>Supply Voltage: 2.7V~5.25V DC</li> <li>Resonance Frequency: 30.8 kHz</li> <li>Max Angular Velocity: \u00b1300 Degree</li> <li>Output (at Angular Velocity=0): 1.35 V DC</li> <li>Scale Factor: 0.67 mV/deg/sec.</li> <li>Linearity: \u00b15%;</li> </ul>"},{"location":"Products/Sensors/2-axis-analog-gyro-module-enc03.html#usage","title":"Usage","text":"<p>The module detects one-axis rotation with analog signal.</p> <p>1.Hardware Connection 5V+--5V GND--GND X--A0 Y--A1</p> <p></p> <p>2.Copy the below code to you new skecth,then upload it.</p> <pre><code>int X_Axis = A0;             // select the input pin for the sensor\nint Y_Axis = A1; \nfloat X_reference_Value=0;\nfloat Y_reference_Value=0;\n\nint X_Axis_Value = 0;            // variable to store the value coming from the sensor\nint Y_Axis_Value = 0;\n\nvoid setup() {\n\n   int i;\n   float X_sum=0,Y_sum=0;\n   pinMode(X_Axis, INPUT);\n   pinMode(Y_Axis, INPUT);\n   Serial.begin(9600);\n   Serial.println(\"Please do not rotate it before calibrate!\");\n   Serial.println(\"Get the reference value:\");\n\n   for(i=0;i&lt;1000;i++)\n   {\n       // read the value from the sensor:\n       X_Axis_Value = analogRead(X_Axis);\n       Y_Axis_Value = analogRead(Y_Axis);\n       X_sum += X_Axis_Value;\n       Y_sum += Y_Axis_Value;\n       delay(5);\n   }\n   X_reference_Value = X_sum/1000.0;\n   Y_reference_Value = Y_sum/1000.0;\n   Serial.print(\"reference_Value:   \");\n   Serial.print(\"X:\");\n   Serial.print(X_reference_Value);\n   Serial.print(\"  Y:\");\n   Serial.println(Y_reference_Value);\n   Serial.println(\"Now you can begain your test!\");\n}\n\nvoid loop() \n{\n   double X_angularVelocity,Y_angularVelocity;\n   X_Axis_Value = analogRead(X_Axis);\n   Y_Axis_Value = analogRead(Y_Axis);\n   X_angularVelocity =((double)(X_Axis_Value-X_reference_Value)*4930.0)/1023.0/0.67; //get the angular velocity\n   Y_angularVelocity =((double)(Y_Axis_Value-Y_reference_Value)*4930.0)/1023.0/0.67;\n   Serial.print(\"angularVelocity:  \");\n   Serial.print(\"X:\");\n   Serial.print(X_angularVelocity);\n   Serial.print(\"deg/s\");\n   Serial.print(\"   Y:\");\n   Serial.print(Y_angularVelocity);\n   Serial.print(\"deg/s\");\n   Serial.println(\" \");\n   delay(500);\n}\n</code></pre> <p>3.Now, it is time to the calibration. Put the sensor on your desk horizontally, and then press the Reset button on the Crowduino, and then Open the serial tool:</p> <p></p> <p>4.As you see the \"Now you can begin your test\", that means the calibration done. You can use the sensor now. Rotating direction can reference the following picture:</p> <p></p>"},{"location":"Products/Sensors/2-axis-analog-gyro-module-enc03.html#resource","title":"Resource","text":"<ul> <li>Demo code</li> <li>ENC-03 Datasheet </li> </ul>"},{"location":"Products/Sensors/3-axis-analog-gyro-module-enc03.html","title":"3-Axis Analog Gyro Module-ENC03","text":""},{"location":"Products/Sensors/3-axis-analog-gyro-module-enc03.html#description","title":"Description","text":"<p>This angular velocity sensor utilizes a Coriolis force that act on a vibrating object when an angular velocity is applied to it. The use of this unit simplifies equipment structure and circuit configuration, thus making it possible to provide outstanding performance.  This module can be used for positional control and posture control of a moving object requiring precision and quick-response measurements. There is two ENC-03r senor on this module, provides 2-axis velocity with high speed, which outputs as analog voltage.</p> <p>Model:SENC032G</p> <p></p>"},{"location":"Products/Sensors/3-axis-analog-gyro-module-enc03.html#features","title":"Features","text":"<ul> <li>Supply Voltage: 2.7V~5.25V DC</li> <li>Resonance Frequency: 30.8 kHz</li> <li>Max Angular Velocity: \u00b1300 Degree</li> <li>Output (at Angular Velocity=0): 1.35 V DC</li> <li>Scale Factor: 0.67 mV/deg/sec.</li> <li>Linearity: \u00b15%;</li> </ul>"},{"location":"Products/Sensors/3-axis-analog-gyro-module-enc03.html#usage","title":"Usage","text":"<p>The module detects one-axis rotation with analog signal.</p> <p>1.Hardware Connection 5V+--5V GND--GND X--A0 Y--A1 Z--A2</p> <p></p> <p>2.Copy the below code to you new skecth,then upload it.</p> <pre><code>int X_Axis = A0;             \nint Y_Axis = A1; \nint Z_Axis = A2;\nfloat X_reference_Value=0;\nfloat Y_reference_Value=0;\nfloat Z_reference_Value=0;\nint X_Axis_Value = 0;           \nint Y_Axis_Value = 0;\nint Z_Axis_Value = 0;\nvoid setup() {\n\n   int i;\n   float X_sum=0,Y_sum=0,Z_sum=0;\n   pinMode(X_Axis, INPUT);\n   pinMode(Y_Axis, INPUT);\n   pinMode(Z_Axis, INPUT);\n   Serial.begin(9600);\n   Serial.println(\"Please do not rotate it before calibrate!\");\n   Serial.println(\"Get the reference value:\");\n\n   for(i=0;i&lt;1000;i++)\n   {\n       // read the value from the sensor:\n       X_Axis_Value = analogRead(X_Axis);\n       Y_Axis_Value = analogRead(Y_Axis);\n       Z_Axis_Value = analogRead(Z_Axis);\n       X_sum += X_Axis_Value;\n       Y_sum += Y_Axis_Value;\n       Z_sum += Z_Axis_Value;\n       delay(5);\n   }\n   X_reference_Value = X_sum/1000.0;\n   Y_reference_Value = Y_sum/1000.0;\n   Z_reference_Value = Z_sum/1000.0;\n   Serial.print(\"reference_Value:   \");\n   Serial.print(\"X:\");\n   Serial.print(X_reference_Value);\n   Serial.print(\"  Y:\");\n   Serial.print(Y_reference_Value);\n   Serial.print(\"  Z:\");\n   Serial.println(Z_reference_Value);\n   Serial.println(\"Now you can begain your test!\");\n}\n\nvoid loop() \n{\n   double X_angularVelocity,Y_angularVelocity,Z_angularVelocity;\n   X_Axis_Value = analogRead(X_Axis);\n   Y_Axis_Value = analogRead(Y_Axis);\n   Z_Axis_Value = analogRead(Z_Axis);\n   X_angularVelocity =((double)(X_Axis_Value-X_reference_Value)*4930.0)/1023.0/0.67; //get the angular velocity\n   Y_angularVelocity =((double)(Y_Axis_Value-Y_reference_Value)*4930.0)/1023.0/0.67;\n   Z_angularVelocity =((double)(Z_Axis_Value-Z_reference_Value)*4930.0)/1023.0/0.67;\n   Serial.print(\"angularVelocity:  \");\n   Serial.print(\"X:\");\n   Serial.print(X_angularVelocity);\n   Serial.print(\"deg/s\");\n   Serial.print(\"   Y:\");\n   Serial.print(Z_angularVelocity);\n   Serial.print(\"deg/s\");\n  Serial.print(\"   Z:\");\n   Serial.print(Z_angularVelocity);\n   Serial.print(\"deg/s\");\n   Serial.println(\" \");\n   delay(500);\n}\n</code></pre> <p>3.Now, it is time to the calibration. Put the sensor on your desk horizontally, and then press the Reset button on the Crowduino, and then Open the serial tool:</p> <p></p> <p>4.As you see the \"Now you can begin your test\", that means the calibration done. You can use the sensor now. Rotating direction can reference the following picture:</p> <p></p>"},{"location":"Products/Sensors/3-axis-analog-gyro-module-enc03.html#resource","title":"Resource","text":"<ul> <li>Demo code</li> <li>ENC-03 Datasheet </li> </ul>"},{"location":"Products/Sensors/4mm-inductive-metal-proximity-sensor.html","title":"4MM Inductive Metal Proximity Sensor","text":""},{"location":"Products/Sensors/4mm-inductive-metal-proximity-sensor.html#description","title":"Description","text":"<p>Metal Proximity Sensor, which is also called non-contact proximity switch, it is composed of generator and shaping amplifier oscillator vibration in the switch after induction head, and produces an alternating magnetic field when the metal body detected. This Inductive Proximity Sensor has high sensitivity, fast frequency response, high repeat positioning accuracy and also stability and reliable, it can detects metal components in 0~4mm distance, and is widely used in modern industry, such as machinery, metallurgy, transportation, electric power, military industry and so on.</p> <p>Model:SPM0409IP</p> <p></p>"},{"location":"Products/Sensors/4mm-inductive-metal-proximity-sensor.html#specification","title":"Specification","text":"<ul> <li>Working Voltage:DC 6~36V;</li> <li>Probe Demension: 12mm diameter;</li> <li>Sensoring Distance: 0~4mm</li> <li>Output signal: Low</li> </ul>"},{"location":"Products/Sensors/4mm-inductive-metal-proximity-sensor.html#usage","title":"Usage","text":"<p>1.Hardware Connection</p> <p></p> <p>2.Copy the below code to you new skecth,then upload it.</p> <pre><code>const int ledpin=5;\nconst int Sensor = 4;\nvoid setup()\n{\n  pinMode(ledpin,OUTPUT);\n  pinMode(Sensor,INPUT); \n}\nvoid loop()\n{\n    if(digitalRead(Sensor))\n    {\n       digitalWrite(ledpin,LOW);\n    }\n    else{\n        digitalWrite(ledpin,HIGH);\n    }\n}\n</code></pre> <p>3.The LED will light up when a metal gets closed to the metal proximity sensor(0-4mm).</p>"},{"location":"Products/Sensors/4mm-inductive-metal-proximity-sensor.html#resource","title":"Resource","text":"<ul> <li>Demo code</li> </ul>"},{"location":"Products/Sensors/80cm-infrared-proximity-sensor-gp2y0a21yk0f.html","title":"80cm Infrared Proximity Sensor-GP2Y0A21YK0F","text":""},{"location":"Products/Sensors/80cm-infrared-proximity-sensor-gp2y0a21yk0f.html#description","title":"Description","text":"<p>The Sharp distance sensors are a popular choice for many projects that require accurate distance measurements. This IR sensor is more economical than sonar rangefinders, yet it provides much better performance than other IR alternatives. Interfacing to most microcontrollers is straightforward: the single analog output can be connected to an analog-to-digital converter for taking distance measurements, or the output can be connected to a comparator for threshold detection.</p> <p>Model:SPGP2YIP</p> <p></p>"},{"location":"Products/Sensors/80cm-infrared-proximity-sensor-gp2y0a21yk0f.html#specification","title":"Specification","text":"<ul> <li>Operating voltage: 4.5 V to 5.5 V</li> <li>Average current consumption: 30 mA (typical)</li> <li>Distance measuring range: 10 cm to 80 cm (4\" to 32\")</li> <li>Output type: analog voltage</li> <li>Output voltage differential over distance range: 1.9 V (typical)</li> <li>Response time: 38 \u00b1 10 ms</li> <li>Package size: 29.5\u00d713.0\u00d713.5 mm (1.16\u00d70.5\u00d70.53\")</li> <li>Weight: 3.5 g (0.12 oz)</li> </ul> <p>The detection range of this version is approximately 10 cm to 80 cm (4\" to 32\"); a plot of distance versus output voltage is shown below: </p>"},{"location":"Products/Sensors/80cm-infrared-proximity-sensor-gp2y0a21yk0f.html#usage","title":"Usage","text":"<p>The module detects one-axis rotation with analog signal.</p> <p>1.Hardware Connection</p> <p></p> <p>2.Copy the below code to you new skecth,then upload it.</p> <pre><code>/*\n *      \n *      VCC -- VCC  \n *      GND -- GND  \n *      Signal -- Analog 0 \n */\n#define pin A0\n\nvoid setup () {\n    Serial.begin (9600);\n    pinMode (pin, INPUT);\n}\n\nvoid loop () {\n    uint16_t value = analogRead (pin);\n    uint16_t range = get_gp2d12 (value);\n    Serial.print(\"Analog value:\");\n    Serial.println (value);\n    Serial.print (\"Distance:\");\n    Serial.print (range);\n    Serial.println (\" mm\");\n    Serial.println ();\n    delay (500);\n}\n\nuint16_t get_gp2d12 (uint16_t value) {\n    if (value &lt; 10) value = 10;\n    return ((67870.0 / (value - 3.0)) - 40.0);\n}\n</code></pre> <p>3.Open the serial tool,you can see the distance:</p> <p></p>"},{"location":"Products/Sensors/80cm-infrared-proximity-sensor-gp2y0a21yk0f.html#resource","title":"Resource","text":"<ul> <li>Demo code</li> <li>Datasheet</li> </ul>"},{"location":"Products/Sensors/accelerometer-breakout-mma7361.html","title":"Accelerometer Breakout-MMA7361","text":""},{"location":"Products/Sensors/accelerometer-breakout-mma7361.html#introduction","title":"Introduction","text":"<p>This is a breakout board for Freescale's MMA7361L three-axis analog accelerometer. The sensor requires a very low amount of power and has a g-select input which switches the accelerometer between \u00b11.5g and \u00b16g measurement ranges. Other features include a sleep mode, signal conditioning, a 1-pole low pass filter, temperature compensation, self test, and 0g-detect which detects linear freefall. Zero-g offset and sensitivity are factory set and require no external device.</p> <p>Model:SPS07361S</p> <p></p>"},{"location":"Products/Sensors/accelerometer-breakout-mma7361.html#specification","title":"Specification","text":"<ul> <li>Two selectable measuring ranges (\u00b11.5g, \u00b16g).</li> <li>Low current consumption: 400 \u00b5ASleep mode: 3 \u00b5A.</li> <li>High sensitivity (800 mV/g at 1.5g).</li> <li>Seletable Sensitivity(\u00b11.5g, \u00b16g).</li> <li>Fast turn on time (0.5 ms enable response time).</li> <li>Dimensions: 28 * 17mm.</li> </ul>"},{"location":"Products/Sensors/accelerometer-breakout-mma7361.html#pin-definition","title":"Pin Definition","text":"Pin Pad Name Type Description 1 5V P 5V power 2 3V3 P 3V3 power 3 GND GND GND 4 g-select I Input pin to initiate Self Test 5 Selftest I Self-Test 6 X A XOUT 7 Y A YOUT 8 Z A ZOUT 9 Sleep I Sleep mode, Low active 10 0g-detect O Linear Freefall digital logic output signal <p>A: Anlog Output  I: Digital Input  O: Digital Output</p>"},{"location":"Products/Sensors/accelerometer-breakout-mma7361.html#usage","title":"Usage","text":"<p>it would be very easy to use this module. here we introduce 2 ways to use this module. a simple method, and a comprehensive method.</p>"},{"location":"Products/Sensors/accelerometer-breakout-mma7361.html#use-this-module-with-the-default-settings","title":"Use this module with the default settings","text":"<p>Connect the X/Y/Z pins of the MMA7361 moduel to A0/A1/A2 of your Arduino/Crowduino. and power it with 5V power supply. Connect the \"SL\" pin to logic HIGH to enable the MMA7361 work. you can get the test result with analogRead in Arduino IDE as below:  </p> <p>1.Hardware connection  </p> <p>2.Copy the following program to Arduino IDE and upload to your Arduino/Crowduino:</p> <pre><code>// # Description:\n// # read the data from the accelerometer in default setting\n\n// # Connection:\n// #        x  -&gt; Analog pin 0\n// #        y  -&gt; Analog pin 1\n// #        z  -&gt; Analog pin 2\n// #\n\nconst int Sleep=2;\nvoid setup() \n{ \n  Serial.begin(9600); // 9600 bps\n  pinMode(Sleep, OUTPUT);\n  digitalWrite(Sleep, HIGH);\n}\nvoid loop() \n{\n  int x,y,z;\n  x=analogRead(0);\n  y=analogRead(1);\n  z=analogRead(2);\n  Serial.print(\"x= \");\n  Serial.print(x ,DEC);\n  Serial.print(',');\n  Serial.print(\"y= \");\n  Serial.print(y ,DEC);\n  Serial.print(',');\n  Serial.print(\"z= \");\n  Serial.println(z ,DEC);\n  delay(100);\n}\n</code></pre> <p>3.Open the Serial moniter , and set the baudrate to 9600, you will see the test value. </p>"},{"location":"Products/Sensors/accelerometer-breakout-mma7361.html#use-this-module-in-a-comprehensive-way","title":"Use this module in a comprehensive way","text":"<p>1.Hardware connection </p> <p>2.You can also use the MMA7371 Library to use this module, you should first connect this module to your Arduino/Crowduino as belows: 3.Install the library and upload the program to your Arduino. please refer to here to learn how to upload the program.</p> <pre><code>#include &lt;AcceleroMMA7361.h&gt;\n\nAcceleroMMA7361 accelero;\nint x;\nint y;\nint z;\n\nvoid setup()\n{\n  Serial.begin(9600);\n  accelero.begin(13, 12, 11, 10, A0, A1, A2);\n  accelero.setARefVoltage(3.3);                   //sets the AREF voltage to 3.3V\n  accelero.setSensitivity(LOW);                   //sets the sensitivity to +/-6G\n  accelero.calibrate();\n}\n\nvoid loop()\n{\n  x = accelero.getXAccel();\n  y = accelero.getYAccel();\n  z = accelero.getZAccel();\n  Serial.print(\"\\nx: \");\n  Serial.print(x);\n  Serial.print(\" \\ty: \");\n  Serial.print(y);\n  Serial.print(\" \\tz: \");\n  Serial.print(z);\n  Serial.print(\"\\tG*10^-2\");\n  delay(500);                                     //make it readable\n}\n</code></pre> <p>4.Open the serial monitor, after the calibrating, MMA 7361 will output the gravity on x, y and z axis. The photo below shows the output data when the accelerometor is lying flat, the gravity of Z axis is about 100(1 G).Please note keep this module flat when calibrating. </p>"},{"location":"Products/Sensors/accelerometer-breakout-mma7361.html#resource","title":"Resource","text":"<ul> <li>MMA7361 Module DataSheet</li> <li>MMA7361 Module Demo code</li> </ul>"},{"location":"Products/Sensors/acs712-current-sensor--5a.html","title":"ACS712 Current Sensor- 5A","text":""},{"location":"Products/Sensors/acs712-current-sensor--5a.html#description","title":"Description","text":"<p>Sensing and controlling current flow is a fundamental requirement in a wide variety of applications including, over-current protection circuits, battery chargers, switching mode power supplies, digital watt meters, programmable current sources, etc. This ACS721 current module is based on ACS712 sensor, which can accurately detect AC or DC current. The maximum AC or DC that can be detected can reach 5A, and the present current signal can be read via analog I / O port of Arduino.</p> <p>Model:SEL7125A</p> <p></p> <p></p>"},{"location":"Products/Sensors/acs712-current-sensor--5a.html#features","title":"Features","text":"<ul> <li>Supply Voltage: 4.5V~5.5V DC</li> <li>Measure Current Range: -5A~ 5A</li> <li>Sensitivity: 180mV/A ~190mV/A, Typical: 185mV/A</li> </ul>"},{"location":"Products/Sensors/acs712-current-sensor--5a.html#usage","title":"Usage","text":"<p>Arduino test the crrrent.</p> <p>1.Hardware connection</p> <p> 600px</p> <p>Notice:Current sensor can not directly connect on both ends of the power supply.</p> <p>2.Connect the board to PC using USB cable.</p> <p>3.Upload the following sample sketch:</p> <pre><code>void setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n float average = 0;\n for(int i = 0; i &lt; 1000; i++) {\n     average = average + (.0264 * analogRead(A0) -13.51);//for the 5A mode,  \n//   average = average + (.049 * analogRead(A0) -25);// for 20A mode\n// average = average + (.742 * analogRead(A0) -37.8);// for 30A mode\n   delay(1);\n }\n Serial.print(\"Current\u00a0:\");\n Serial.print(average/1000);\n Serial.println(\"A\");\n}\n</code></pre> <p>4.Open the serial monitor.You can see the current you test.</p> <p></p>"},{"location":"Products/Sensors/acs712-current-sensor--5a.html#resource","title":"Resource","text":"<ul> <li>Demo code</li> <li>ACS712.pdf</li> </ul>"},{"location":"Products/Sensors/adjustable-infrared-sensor-switch.html","title":"Adjustable Infrared Sensor Switch","text":""},{"location":"Products/Sensors/adjustable-infrared-sensor-switch.html#introduction","title":"Introduction","text":"<p>This infrared distance switch features a high-sensitivity photoreflector to perform distance detection function,ranging from 3cm to 80cm. When the infrared light emitted by the emitter gets reflected on a surface that blocked it, the phototransistor can pick up the signal for distance calculation. Also a potentiometer for adjustment is arranged for easy and clear use. It is small, easy to use/assemble, and inexpensive. Useful for robotics, interactive media, industrial assembly line, etc. Model: SOD00380S </p> <p></p>"},{"location":"Products/Sensors/adjustable-infrared-sensor-switch.html#features","title":"Features","text":"<ul> <li>Power supply: 5V</li> <li>Current: 100mA</li> <li>Range: 3-80cm adjustable</li> <li>Red: +5V</li> <li>Yellow: Signal</li> <li>Black: GND</li> <li>Wire length: 20cm</li> </ul>"},{"location":"Products/Sensors/adjustable-infrared-sensor-switch.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/adjustable-infrared-sensor-switch.html#hardware","title":"Hardware","text":"<p>Connect this sensor to your Arduino/Crowduino digital pins( D2 for example). When there is an object behind this sensor, the output would be low. </p>"},{"location":"Products/Sensors/adjustable-infrared-sensor-switch.html#programming","title":"Programming","text":"<p>1.Download the following program to Arduino, Please refer to here</p> <pre><code>void setup()  {\n Serial.begin(9600);\n pinMode(2,INPUT);\n}\nvoid loop()  {\n while(1)  {\n   delay(500);\n   if(digitalRead(2)==LOW)  {\n     Serial.println(\"object detected.\");\n   }\n   else  {\n     Serial.println(\"no object detected.\");\n   }\n }\n}\n</code></pre> <p>2.open the serial monitor , and set the baudrate to 9600, you will see the output changes with the object behind this sensor or not. </p>"},{"location":"Products/Sensors/analog-cocombustible-gas-sensormq9.html","title":"Analog CO/Combustible Gas Sensor(MQ9)","text":""},{"location":"Products/Sensors/analog-cocombustible-gas-sensormq9.html#description","title":"Description","text":"<p>The Analog CO/Combustible Gas Sensor(MQ9) module is useful for gas leakage detecting, it used the sensitive material SnO2, which with lower conductivity in clean air. It make detection by method of cycle high and low temperature, and detect CO when low temperature (heated by 1.5V). The sensors conductivity is more higher along with the gas concentration rising. When high temperature (heated by 5.0V), it detects Methane, Propane etc combustible gas and cleans the other gases adsorbed under low temperature. MQ-9 gas sensor has high sensitity to Carbon Monoxide, Methane and LPG. The sensor could be used to detect different gases contains CO and combustible gases, it is with low cost and suitable for different application. SKU: SEN90512P SES90101S</p> <p></p> <p></p>"},{"location":"Products/Sensors/analog-cocombustible-gas-sensormq9.html#features","title":"Features","text":"<ul> <li>High sensitivity to Methane, Propane and CO</li> <li>Long life and low cost</li> <li>Simple drive circuit</li> </ul>"},{"location":"Products/Sensors/analog-cocombustible-gas-sensormq9.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Domestic gas leakage detector</li> <li>Industrial gas detector</li> <li>Portable gas detector</li> </ul>"},{"location":"Products/Sensors/analog-cocombustible-gas-sensormq9.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/analog-cocombustible-gas-sensormq9.html#hardware-installation","title":"Hardware Installation","text":"Arduino UNO Gas Sensor 5V VCC GND GND Analog A0 A0"},{"location":"Products/Sensors/analog-cocombustible-gas-sensormq9.html#demo-cede","title":"Demo cede","text":"<p>1.Put the sensor in a clear air, copy the demo code to your sketch, then upload to Arduino or Crowduino board.</p> <pre><code>void setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  float sensor_volt; \n  float RS_air; //  Get the value of RS via in a clear air\n  float R0;  // Get the value of R0 via in LPG\n  float sensorValue;\n\n/*--- Get a average data by testing 100 times ---*/   \n    for(int x = 0\u00a0; x &lt; 100\u00a0; x++)\n  {\n    sensorValue = sensorValue + analogRead(A0);\n  }\n  sensorValue = sensorValue/100.0;\n/*-----------------------------------------------*/\n\n  sensor_volt = sensorValue/1024*5.0;\n  RS_air = (5.0-sensor_volt)/sensor_volt; // omit *RL\n  R0 = RS_air/9.9; // The ratio of RS/R0 is 9.9 in LPG gas\n\n  Serial.print(\"sensor_volt = \");\n  Serial.print(sensor_volt);\n  Serial.println(\"V\");\n\n  Serial.print(\"R0 = \");\n  Serial.println(R0);\n  delay(1000);\n\n}\n</code></pre> <p>2.Open the monitor of Arduino IDE, you can see some data are printed, write down the value of R0 and you need to use it in the following program. During this step, you may pay a while time to test the value of R0.</p> <p></p> <p>3.Put the sensor in one gas where the environment you want to test in. However, don't forget to replace the R0 below with value of R0 tested above</p> <pre><code>void setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  float sensor_volt;\n  float RS_gas; // Get value of RS in a GAS\n  float ratio; // Get ratio RS_GAS/RS_air\n  int sensorValue = analogRead(A0);\n  sensor_volt=(float)sensorValue/1024*5.0;\n  RS_gas = (5.0-sensor_volt)/sensor_volt; // omit *RL\n\n  /*-Replace the name \"R0\" with the value of R0 in the demo of First Test -*/\n  ratio = RS_gas/R0;  // ratio = RS/R0 \n  /*-----------------------------------------------------------------------*/\n\n  Serial.print(\"sensor_volt = \");\n  Serial.println(sensor_volt);\n  Serial.print(\"RS_ratio = \");\n  Serial.println(RS_gas);\n  Serial.print(\"Rs/R0 = \");\n  Serial.println(ratio);\n\n  Serial.print(\"\\n\\n\");\n\n  delay(1000);\n\n}\n</code></pre> <p>Now, we can get the concentration of gas from the below figure </p> <p></p>"},{"location":"Products/Sensors/analog-cocombustible-gas-sensormq9.html#resources","title":"Resources","text":"<ul> <li>Demo code</li> <li>MQ-9.pdf</li> </ul>"},{"location":"Products/Sensors/analog-smokelpgco-gas-sensormq2.html","title":"Analog Smoke/LPG/CO Gas Sensor(MQ2)","text":""},{"location":"Products/Sensors/analog-smokelpgco-gas-sensormq2.html#description","title":"Description","text":"<p>The Analog Smoke/LPG/CO Gas Sensor(MQ2) module utilizes an MQ-2 as the sensitive component and has a protection resistor and an adjustable resistor on board. The MQ-2 gas sensor is sensitive to LPG, i-butane, propane, methane, alcohol, Hydrogen and smoke. It could be used in gas leakage detecting equipments in family and industry. The resistance of the sensitive component changes as the concentration of the target gas changes. SKU: SEN90512P SES28011S</p> <p></p>"},{"location":"Products/Sensors/analog-smokelpgco-gas-sensormq2.html#features","title":"Features","text":"<ul> <li>Domestic gas leakage detector</li> <li>Industrial gas detector</li> <li>Portable gas detector</li> </ul>"},{"location":"Products/Sensors/analog-smokelpgco-gas-sensormq2.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Domestic gas leakage detector</li> <li>Industrial gas detector</li> <li>Portable gas detector</li> </ul>"},{"location":"Products/Sensors/analog-smokelpgco-gas-sensormq2.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/analog-smokelpgco-gas-sensormq2.html#hardware-installation","title":"Hardware Installation","text":"Arduino UNO Gas Sensor 5V VCC GND GND Analog A0 A0"},{"location":"Products/Sensors/analog-smokelpgco-gas-sensormq2.html#demo-cede","title":"Demo cede","text":"<p>1.Put the sensor in a clear air, copy the demo code to your sketch, then upload to Arduino or Crowduino board.</p> <pre><code>void setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  float sensor_volt; \n  float RS_air;                 //  Get the value of RS via in a clear air\n  float R0;                     // Get the value of R0 via in H2\n  float sensorValue;\n\n/*--- Get a average data by testing 100 times ---*/   \n    for(int x = 0\u00a0; x &lt; 100\u00a0; x++)\n  {\n    sensorValue = sensorValue + analogRead(A0);\n  }\n  sensorValue = sensorValue/100.0;\n/*-----------------------------------------------*/\n\n  sensor_volt = sensorValue/1024*5.0;\n  RS_air = (5.0-sensor_volt)/sensor_volt; // omit *RL\n  R0 = RS_air/10.0;                       // The ratio of RS/R0 is 10 in a clear air\n\n  Serial.print(\"sensor_volt = \");\n  Serial.print(sensor_volt);\n  Serial.println(\"V\");\n\n  Serial.print(\"R0 = \");\n  Serial.println(R0);\n  delay(1000);\n}\n</code></pre> <p>2.Open the monitor of Arduino IDE, you can see some data are printed, write down the value of R0 and you need to use it in the following program. During this step, you may pay a while time to test the value of R0.</p> <p></p> <p>3.Put the sensor in one gas where the environment you want to test in. However, don't forget to replace the R0 below with value of R0 tested above</p> <pre><code>void setup() {\n  Serial.begin(9600);\n}\n\nvoid loop() {\n\n  float sensor_volt;\n  float RS_gas; // Get value of RS in a GAS\n  float ratio; // Get ratio RS_GAS/RS_air\n  int sensorValue = analogRead(A0);\n  sensor_volt=(float)sensorValue/1024*5.0;\n  RS_gas = (5.0-sensor_volt)/sensor_volt; // omit *RL\n\n  /*-Replace the name \"R0\" with the value of R0 in the demo of First Test -*/\n  ratio = RS_gas/R0;  // ratio = RS/R0 \n  /*-----------------------------------------------------------------------*/\n  Serial.print(\"sensor_volt = \");\n  Serial.println(sensor_volt);\n  Serial.print(\"RS_ratio = \");\n  Serial.println(RS_gas);\n  Serial.print(\"Rs/R0 = \");\n  Serial.println(ratio);\n  Serial.print(\"\\n\\n\");\n  delay(1000);\n}\n</code></pre> <p>Now, we can get the concentration of gas from the below figure </p> <p></p>"},{"location":"Products/Sensors/analog-smokelpgco-gas-sensormq2.html#resources","title":"Resources","text":"<ul> <li>Demo code</li> <li>MQ-2.pdf</li> </ul>"},{"location":"Products/Sensors/apm25-airspeed-breakout-board-mpxv7002dp.html","title":"APM2.5 Airspeed Breakout Board MPXV7002DP","text":""},{"location":"Products/Sensors/apm25-airspeed-breakout-board-mpxv7002dp.html#description","title":"Description","text":"<p>The MPXV7002 series piezoresistive transducer in the small outline package (SOP) is a state-of-the-art monolithic silicon pressure sensor designed for a wide range of applications, but particularly those employing a microcontroller or microprocessor with A/D inputs. This patented, single element transducer combines advanced micromachining techniques, thin-film metallization, and bipolar processing to provide an accurate, high level analog output signal that is proportional to the applied pressure. The MPXV7002 is designed to measure positive and negative pressure. In addition, with an offset specifically at 2.5V instead of the conventional 0V, this new series allows to measure pressure up to 7kPa through each port for pressure sensing but also for vacuum sensing (refer to the transfer function in the data sheet for more detailed information). Model:SLF0025APM</p> <p></p>"},{"location":"Products/Sensors/apm25-airspeed-breakout-board-mpxv7002dp.html#features","title":"Features","text":"<ul> <li>-2 to 2 kPa (-0.3 to 0.3 psi)</li> <li>0.5 to 4.5 V Output</li> <li>Size:22x18x11mm</li> </ul>"},{"location":"Products/Sensors/apm25-airspeed-breakout-board-mpxv7002dp.html#usage","title":"Usage","text":"<p>1.Hardware Installation</p> <p></p> <p>2.copy the demo code to your sketch, then upload to Arduino or Crowduino board.</p> <pre><code>int sensorPin = A0;   \nint sensorValue = 0; \nfloat Vout=0;\nfloat P=0;\nvoid setup() {\n\n  // declare the ledPin as an OUTPUT:\n   Serial.begin(9600); \n}\n\nvoid loop() {\n    int i=0;\n    int sum=0;\n    int offset=0;\n    Serial.println(\"init...\");\n    for(i=0;i&lt;10;i++)\n    {\n         sensorValue = analogRead(sensorPin)-512;\n         sum+=sensorValue;\n    }\n    offset=sum/10.0;\n    Serial.println(\"Ok\");\n    while(1)\n    {\n       sensorValue = analogRead(sensorPin)-offset; \n       Vout=(5*sensorValue)/1024.0;\n       P=Vout-2.5;           \n       Serial.print(\"Presure = \" );                       \n       Serial.print(P*1000); \n       Serial.println(\"Pa\");\n       delay(1000);   \n    }\n}\n</code></pre> <p>3.Open the monitor of Arduino IDE,then blow the air to the MPXV7002DP, you can see the test result like flow.</p> <p></p>"},{"location":"Products/Sensors/apm25-airspeed-breakout-board-mpxv7002dp.html#resources","title":"Resources","text":"<ul> <li>Datasheet</li> </ul>"},{"location":"Products/Sensors/barometer-sensor.html","title":"Barometer Sensor","text":""},{"location":"Products/Sensors/barometer-sensor.html#description","title":"Description","text":"<p>This Barometer Sensor has a Bosch BMP085 which is a high-accuracy chip to detect barometric pressure and temperature. It can widely measure pressure ranging from 300hPa to 1100hPa, AKA +9000m to -500m above sea level, with a super high accuracy of 0.03hPa(0.25m) in ultra-high resolution mode. This Barometer sensor compatible with 3.3V and 5V, so it can be used in Arduinos without moditdfication.</p> <p>Model:STH01002S</p> <p></p>"},{"location":"Products/Sensors/barometer-sensor.html#features","title":"Features","text":"<ul> <li>Wide pressure range</li> <li>Arduino/Crowduino compatible interface (3.3V or 5V)</li> <li>I2C interface</li> <li>Fully calibrated</li> <li>Low power consumption: 5\u03bcA at 1 sample/sec. in standard mode</li> <li>Low noise:</li> </ul> <pre><code>   0.06hPa(0.5m) in ultra-low power mode\n   0.03hPa(0.25m) in ultra-high resolution mode\n</code></pre> <ul> <li>Possibility to lower to 0.1m(rms noise)</li> </ul>"},{"location":"Products/Sensors/barometer-sensor.html#usage","title":"Usage","text":"<p>Barometric condition is one of the criteria used to predict coming change in weather and deduce altitude above sea level. Here is a demo to show you how to read the barometric data from this Barometer Sensor.</p> <p>1.Hardware connection</p> <p></p> <p>2.Download the library 3.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries. 4.Create a new Arduino sketch and paste the codes below to it or open the code directly by the path:File -&gt; Examples -&gt;Barometer-&gt;Barometer_Sensor.</p> <pre><code>/* Barometer demo V1.0\n* Get pressure, altitude, and temperature from the BMP085.\n* Serial.print it out at 9600 baud to serial monitor.\n*\n*/\n#include \"Barometer.h\"\n#include &lt;Wire.h&gt;\nfloat temperature;\nfloat pressure;\nfloat atm;\nfloat altitude;\nBarometer myBarometer;\nvoid setup(){\n  Serial.begin(9600);\n  myBarometer.init();\n\n}\n\nvoid loop()\n{\n   temperature = myBarometer.bmp085GetTemperature(myBarometer.bmp085ReadUT()); //Get the temperature, bmp085ReadUT MUST be called first\n   pressure = myBarometer.bmp085GetPressure(myBarometer.bmp085ReadUP());//Get the temperature\n   altitude = myBarometer.calcAltitude(pressure); //Uncompensated caculation - in Meters \n   atm = pressure / 101325; \n\n  Serial.print(\"Temperature: \");\n  Serial.print(temperature, 2); //display 2 decimal places\n  Serial.println(\"deg C\");\n\n  Serial.print(\"Pressure: \");\n  Serial.print(pressure, 0); //whole number only.\n  Serial.println(\" Pa\");\n\n  Serial.print(\"Ralated Atmosphere: \");\n  Serial.println(atm, 4); //display 4 decimal places\n\n  Serial.print(\"Altitude: \");\n  Serial.print(altitude, 2); //display 2 decimal places\n  Serial.println(\" m\");\n\n  Serial.println();\n\n  delay(1000); //wait a second and get values again.\n}\n</code></pre> <p>5.Open the serial monitor.You should see the data from BMP085.</p> <p></p>"},{"location":"Products/Sensors/barometer-sensor.html#resource","title":"Resource","text":"<ul> <li>Barometer Program</li> </ul>"},{"location":"Products/Sensors/dht11.html","title":"DHT11","text":""},{"location":"Products/Sensors/dht11.html#introduction","title":"Introduction","text":"<p>This DHT11 Temperature &amp; Humidity Sensor features a temperature &amp; humidity sensor complex with a calibrated digital signal output. By using the exclusive digital-signal-acquisition technique and temperature &amp; humidity sensing technology, it ensures high reliability and excellent long-term stability. This sensor includes a resistive-type humidity measurement component and an NTC temperature measurement component, and connects to a high-performance 8-bit microcontroller, offering excellent quality, fast response, anti-interference ability and cost-effectiveness</p> <p>Model:STH01101S</p> <p></p> <p></p> <p>Each DHT11 element is calibrated in the laboratory that is extremely accurate on humidity calibration. The calibration coefficients are stored as programmes in the OTP memory, which are used by the sensor\u2019s internal signal detecting process. The single-wire serial interface makes system integration quick and easy. Its small size, low power consumption and up-to-20 meter signal transmission making it the best choice for various applications, including those most demanding ones. The component is 4-pin single row pin package. It is convenient to connect and special packages can be provided according to users\u2019 request.</p>"},{"location":"Products/Sensors/dht11.html#specification","title":"Specification","text":"Items Conditions Min Norm Max Unit VCC - 3.3 - 5\u00a0 Volts Measuring Range Humidity 20% - 90% RH Temperature 0; - 50 \u00b0C Sensitivity Humidity - - \u00b11% RH Temperature - - \u00b11 \u00b0C Signal Collecting Period - - 2 - S"},{"location":"Products/Sensors/dht11.html#interface","title":"Interface","text":""},{"location":"Products/Sensors/dht11.html#usage","title":"Usage","text":"<p>When the connecting cable is shorter than 20 metres, a 5K pull-up resistor is recommended; when the connecting cable is longer than 20 metres, choose a appropriate pull-up resistor as needed.</p>"},{"location":"Products/Sensors/dht11.html#hardware","title":"Hardware","text":"<p>The sensor has 3 wires: red (VCC), black (GND) and white (DATA). Connect the red to +5V, the black to GND and the white to the digital pin D10. Then, put a 4.7kohm resistor between the white wire and the +5V.  Power DHT11\u2019s power supply is 3-5.5V DC. When power is supplied to the sensor, do not send any instruction to the sensor in within one second in order to pass the unstable status. One capacitor valued 100nF can be added between VDD and GND for power filtering. Communication When MCU sends a start signal, DHT11 changes from the low-power-consumption mode to the running-mode, waiting for MCU completing the start signal. Once it is completed, DHT11 sends a response signal of 40-bit data that include the relative humidity and temperature information to MCU. Users can choose to collect (read) some data. Without the start signal from MCU, DHT11 will not give the response signal to MCU. Once data is collected, DHT11 will change to the low-power-consumption mode until it receives a start signal from MCU again. MCU Sends out Start Signal to DHT Data Single-bus free status is at high voltage level. When the communication between MCU and DHT11 begins, the programme of MCU will set Data Single-bus voltage level from high to low and this process must take at least 18ms to ensure DHT\u2019s detection of MCU's signal, then MCU will pull up voltage and wait 20-40us for DHT\u2019s response.  </p> <p>DHT Responses to MCU  Once DHT detects the start signal, it will send out a low-voltage-level response signal, which lasts 80us. Then the programme of DHT sets Data Single-bus voltage level from low to high and keeps it for 80us for DHT\u2019s preparation for sending data. When DATA Single-Bus is at the low voltage level, this means that DHT is sending the response signal. Once DHT sent out the response signal, it pulls up voltage and keeps it for 80us and prepares for data transmission. When DHT is sending data to MCU, every bit of data begins with the 50us low-voltage-level and the length of the following high-voltage-level signal determines whether data bit is \"0\" or \"1\"  If the response signal from DHT is always at high-voltage-level, it suggests that DHT is not responding properly and please check the connection. When the last bit data is transmitted, DHT11 pulls down the voltage level and keeps it for 50us. Then the Single-Bus voltage will be pulled up by the resistor to set it back to the free status.</p>"},{"location":"Products/Sensors/dht11.html#programming","title":"Programming","text":"<p>1.Download Temperature_humidity_sensor library for Arduino boards with 16MHz XTAL; Unzip and put it in the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries;</p> <p>2.Open \u201cDHTtester\u201d example via the path: File --&gt; Examples --&gt; Humidity_Temperature_Sensor --&gt; DHTtester.</p> <pre><code>// Example testing sketch for various DHT humidity/temperature sensors\n\n#include \"DHT.h\"\n\n#define DHTPIN 5     // what pin we're connected to\n\n// Uncomment whatever type you're using!\n#define DHTTYPE DHT11   // DHT 11 \n//#define DHTTYPE DHT22   // DHT 22  (AM2302)\n//#define DHTTYPE DHT21   // DHT 21 (AM2301)\n\n// Connect pin 1 (on the left) of the sensor to +5V\n// Connect pin 2 of the sensor to whatever your DHTPIN is\n// Connect pin 4 (on the right) of the sensor to GROUND\n// Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor\n\nDHT dht(DHTPIN, DHTTYPE);\n\nvoid setup() {\n  Serial.begin(9600); \n  Serial.println(\"DHTxx test!\");\n\n  dht.begin();\n}\n\nvoid loop() {\n // Reading temperature or humidity takes about 250 milliseconds!\n // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)\n float h = dht.readHumidity();\n float t = dht.readTemperature();\n\n // check if returns are valid, if they are NaN (not a number) then something went wrong!\n if (isnan(t) || isnan(h)) {\n   Serial.println(\"Failed to read from DHT\");\n } else {\n   Serial.print(\"Humidity: \"); \n   Serial.print(h);\n   Serial.print(\"\u00a0%\\t\");\n   Serial.print(\"Temperature: \"); \n   Serial.print(t);\n   Serial.println(\" *C\");\n  }\n}\n</code></pre> <p>3.Upload it into your Arduino board and open the serial monitor to observe the temperature and relative humidity information of the environment.</p> <p></p>"},{"location":"Products/Sensors/dht11.html#resource","title":"Resource","text":"<p>File:Humidity Temperature Lib For Arduino.zip</p>"},{"location":"Products/Sensors/digital-light-sensor.html","title":"Digital light Sensor","text":""},{"location":"Products/Sensors/digital-light-sensor.html#introduction","title":"Introduction","text":"<p>This module is based on the light-to-digital converter BH1750FVI, to transform light intensity to a digital signal. The sensor BH1750FVI is an digital Ambient light sensor IC for I2C bus interface. it is the most suiable to obtain the ambient light data for adjusting LCD and Keypad backlight, it is possible to detect wide range at high resolution, just using this digital light sensor. </p> <p>BH1750FVI </p>"},{"location":"Products/Sensors/digital-light-sensor.html#features","title":"Features","text":"<ul> <li>I2C bus Interface.</li> <li>Spectral responsibility is approximately human eye response.</li> <li>Illuminance to Digital Converter.</li> <li>Wide range and High resolution. ( 1 - 65535 lx ).</li> <li>Low Current by power down function.</li> <li>50Hz / 60Hz Light noise reject-function.</li> <li>Light source dependency is little. ( ex. Incandescent Lamp. Fluorescent Lamp. Halogen Lamp. White LED. Sun Light).</li> <li>It is possible to select 2 type of I2C slave-address.</li> <li>Adjustable measurement result for influence of optical window.</li> <li>Small measurement variation (\u00b1 20%).</li> <li>The influence of infrared is very small.</li> <li>Operating Voltage: 3.3V-5V.</li> <li>Dimensions: 0.85*0.63*0.13\"(21*16*3.3mm).</li> </ul>"},{"location":"Products/Sensors/digital-light-sensor.html#specification","title":"Specification","text":"<ul> <li>power supply voltage: +3 to 5Vdc.</li> <li>Interface: I2C.</li> <li>Wide range and High resolution. ( 1 - 65535 lx ).</li> <li>It is possible to select 2 types of I2C slave-address.</li> <li>Small measurement variation (\u00b1 20%).</li> <li>Size: 0.85*0.63*0.13\"(21*16*3.3mm).</li> </ul>"},{"location":"Products/Sensors/digital-light-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/digital-light-sensor.html#hardware","title":"Hardware","text":"<p>Connect digital light sensor to your Arduino/Crowduino I2C wires(SDA:A4, D18;SCL:A5, D19)as below:  note to connect the address pin to GND to set the I2C address to 0100011  </p>"},{"location":"Products/Sensors/digital-light-sensor.html#programming","title":"Programming","text":"<p>Copy the following program to Arduino IDE and upload to your Arduino/Crowduino:</p> <pre><code>/*\n Sample code for the BH1750 Light sensor\n website:www.elecrow.com\n Connection:\n VCC-5v\n GND-GND\n SCL-SCL(analog pin 5)\n SDA-SDA(analog pin 4)\n ADD-NC or GND\n */  \n#include &lt;Wire.h&gt; //BH1750 IIC Mode \n#include &lt;math.h&gt; \nint BH1750address = 0x23; //setting i2c address\nbyte buff[2];\nvoid setup()\n{\n  Wire.begin();\n  Serial.begin(57600);//init Serail band rate\n}\n\nvoid loop()\n{\n  int i;\n  uint16_t val=0;\n  BH1750_Init(BH1750address);\n  delay(200);\n\n  if(2==BH1750_Read(BH1750address))\n  {\n    val=((buff[0]&lt;&lt;8)|buff[1])/1.2;\n    Serial.print(val,DEC);     \n    Serial.println(\"[lx]\"); \n  }\n  delay(150);\n}\nint BH1750_Read(int address) //\n{\n  int i=0;\n  Wire.beginTransmission(address);\n  Wire.requestFrom(address, 2);\n  while(Wire.available()) //\n  {\n    buff[i] = Wire.read();  // receive one byte\n    i++;\n  }\n  Wire.endTransmission();  \n  return i;\n} \nvoid BH1750_Init(int address) \n{\n  Wire.beginTransmission(address);\n  Wire.write(0x10);//1lx reolution 120ms\n  Wire.endTransmission();\n}\n</code></pre> <p>Open the Sscom32 terminal or the Serial moniter , and set the baudrate to 57600, you will see the output changing with light density.   </p>"},{"location":"Products/Sensors/digital-light-sensor.html#resource","title":"Resource","text":"<p>BH1750FVI datasheet A Demo Video for Digital Light Sensor</p>"},{"location":"Products/Sensors/dust-sensor--dsm501a.html","title":"Dust Sensor- DSM501A","text":""},{"location":"Products/Sensors/dust-sensor--dsm501a.html#description","title":"Description","text":"<p>The dust sensor module DSM501A is low cost, compact size for a particle density sensor.it is used to quantitative particle (&gt; 1 micron) measurement with the principle of particle counter, can sense the tobacco smoke and pollen, house dust. This sensor is consist of light emitting diode lamp, detector, signal amplifier circuit and heater, it can be used in applications such as the air cleaner or air purifier, users can used this sensor easily with sensor PWM output. Model:SDSM501ADS</p> <p></p> <p></p>"},{"location":"Products/Sensors/dust-sensor--dsm501a.html#feature","title":"Feature","text":"<ul> <li>PWM Output</li> <li>Compact size and lightweight</li> <li>Easy installation</li> <li>5V Single power supply</li> </ul>"},{"location":"Products/Sensors/dust-sensor--dsm501a.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p> </p> <p>2.Copy and paste code below to a new Arduino sketch:</p> <pre><code>// Connect the Pin_3 of DSM501A to Arduino 5V\n// Connect the Pin_5 of DSM501A to Arduino GND\n// Connect the Pin_2 of DSM501A to Arduino D8\n// www.elecrow.com\n#include&lt;string.h&gt;\nbyte buff[2];\nint pin = 8;//DSM501A input D8\nunsigned long duration;\nunsigned long starttime;\nunsigned long endtime;\nunsigned long sampletime_ms = 30000;\nunsigned long lowpulseoccupancy = 0;\nfloat ratio = 0;\nfloat concentration = 0;\n\nint i=0;\nvoid setup()\n{\n  Serial.begin(9600);\n  pinMode(8,INPUT);\n  starttime = millis(); \n}\nvoid loop()\n{\n  duration = pulseIn(pin, LOW);\n  lowpulseoccupancy += duration;\n  endtime = millis();\n  if ((endtime-starttime) &gt; sampletime_ms)\n  {\n    ratio = (lowpulseoccupancy-endtime+starttime + sampletime_ms)/(sampletime_ms*10.0);  // Integer percentage 0=&gt;100\n    concentration = 1.1*pow(ratio,3)-3.8*pow(ratio,2)+520*ratio+0.62; // using spec sheet curve\n    Serial.print(\"lowpulseoccupancy:\");\n    Serial.print(lowpulseoccupancy);\n    Serial.print(\"    ratio:\");\n    Serial.print(ratio);\n    Serial.print(\"    DSM501A:\");\n    Serial.println(concentration);\n    lowpulseoccupancy = 0;\n    starttime = millis();\n  } \n}\n</code></pre> <p>4.Open the serial monitor. You should the test result.</p> <p></p>"},{"location":"Products/Sensors/dust-sensor--dsm501a.html#resource","title":"Resource","text":"<ul> <li>DSM501A demo code</li> <li>DSM501 Dust Sensor Datasheet</li> </ul>"},{"location":"Products/Sensors/dust-sensor--gp2y1010au0f.html","title":"Dust Sensor- GP2Y1010AU0F","text":""},{"location":"Products/Sensors/dust-sensor--gp2y1010au0f.html#description","title":"Description","text":"<p>Sharp's GP2Y1010AU0F is an optical air quality sensor, designed to sense dust particles. An infrared emitting diode and a phototransistor are diagonally arranged into this device, to allow it to detect the reflected light of dust in air. It is especially effective in detecting very fine particles like cigarette smoke, and is commonly used in air purifier systems. The sensor has a very low current consumption (20mA max, 11mA typical), and can be powered with up to 7VDC. The output of the sensor is an analog voltage proportional to the measured dust density, with a sensitivity of 0.5V/0.1mg/m3. This sensor is packaged with a 6-pin wires with JST connector to help connect it with your system. Model:SGP2Y1010AU </p> <p></p>"},{"location":"Products/Sensors/dust-sensor--gp2y1010au0f.html#dimensions-and-interface","title":"Dimensions and Interface","text":""},{"location":"Products/Sensors/dust-sensor--gp2y1010au0f.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p> </p> <p>2.Copy and paste code below to a new Arduino sketch:</p> <pre><code>/*\n Standalone Sketch to use with a Arduino UNO and a\n Sharp Optical Dust Sensor GP2Y1010AU0F\n*/\n\nint measurePin = 0; //Connect dust sensor to Arduino A0 pin\nint ledPower = 2;   //Connect 3 led driver pins of dust sensor to Arduino D2\n\nint samplingTime = 280;\nint deltaTime = 40;\nint sleepTime = 9680;\n\nfloat voMeasured = 0;\nfloat calcVoltage = 0;\nfloat dustDensity = 0;\n\nvoid setup(){\n  Serial.begin(9600);\n  pinMode(ledPower,OUTPUT);\n}\n\nvoid loop(){\n  digitalWrite(ledPower,LOW); // power on the LED\n  delayMicroseconds(samplingTime);\n\n  voMeasured = analogRead(measurePin); // read the dust value\n\n  delayMicroseconds(deltaTime);\n  digitalWrite(ledPower,HIGH); // turn the LED off\n  delayMicroseconds(sleepTime);\n\n  // 0 - 5V mapped to 0 - 1023 integer values\n  // recover voltage\n  calcVoltage = voMeasured * (5.0 / 1024.0);\n\n  // linear eqaution taken from http://www.howmuchsnow.com/arduino/airquality/\n  // Chris Nafis (c) 2012\n  dustDensity = 0.17 * calcVoltage - 0.1;\n\n  Serial.print(\"Raw Signal Value (0-1023): \");\n  Serial.print(voMeasured);\n\n  Serial.print(\" - Voltage: \");\n  Serial.print(calcVoltage);\n\n  Serial.print(\" - Dust Density: \");\n  Serial.println(dustDensity); // unit: mg/m3\n\n  delay(1000);\n}\n</code></pre> <p>4.Open the serial monitor. You should the test result.</p> <p></p>"},{"location":"Products/Sensors/dust-sensor--gp2y1010au0f.html#resource","title":"Resource","text":"<ul> <li>GP2Y1010AU0F Demo code</li> <li>DSM501 GP2Y1010AU0F Datasheet</li> <li>DSM501 Application Note</li> </ul>"},{"location":"Products/Sensors/enc28j60-ethernet-module.html","title":"ENC28J60 Ethernet Module","text":""},{"location":"Products/Sensors/enc28j60-ethernet-module.html#description","title":"Description","text":"<p>The ENC28J60 Ethernet Module utilizes the new Microchip ENC28J60 Stand-Alone Ethernet Controller IC featuring a host of features to handle most of the network protocol requirements. The board connects directly to most microcontrollers with a standard SPI interface with a transfer speed of up to 20MHz. Model:SIN16080E</p> <p></p> <p></p>"},{"location":"Products/Sensors/enc28j60-ethernet-module.html#specification","title":"Specification","text":"<ul> <li>ENC28J60 Ethernet chips, SOP28 package</li> <li>SPI Interface</li> <li>2X5 connector, can be easily mounted with the MCU</li> <li>Power indicator</li> <li>Single Supply: +3.3 V</li> <li>PCB size: 55x36 mm</li> </ul>"},{"location":"Products/Sensors/enc28j60-ethernet-module.html#usage","title":"Usage","text":"<p>1.Hardware Installation</p> <p> </p> <p>2.Download the library File:ENC28J60 Library 3.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries. 4.Open Arduino IDE Files -&gt; Examples -&gt; ENC_28J60 -&gt; Helloworld. The IP address in the example code need to be changed for the address assigned to ENC28J60 module.</p> <pre><code>// A simple web server that always just says \"Hello World\"\n\n#include \"etherShield.h\"\n#include \"ETHER_28J60.h\"\n\nstatic uint8_t mac[6] = {0x54, 0x55, 0x58, 0x10, 0x00, 0x24};   // this just needs to be unique for your network, \n                                                                // so unless you have more than one of these boards\n                                                                // connected, you should be fine with this value.\n\nstatic uint8_t ip[4] = {192, 168, 1, 15};                       // the IP address for your board. Check your home hub\n                                                                // to find an IP address not in use and pick that\n                                                                // this or 10.0.0.15 are likely formats for an address\n                                                                // that will work.\n\nstatic uint16_t port = 80;                                      // Use port 80 - the standard for HTTP\n\nETHER_28J60 ethernet;\n\nvoid setup()\n{ \n  ethernet.setup(mac, ip, port);\n}\n\nvoid loop()\n{\n  if (ethernet.serviceRequest())\n  {\n    ethernet.print(\"&lt;H1&gt;Hello World&lt;/H1&gt;\");\n    ethernet.respond();\n  }\n  delay(100);\n}\n</code></pre> <p>5.Upload the code,then enter your Ethernet shield IP address into the URL bar. </p>"},{"location":"Products/Sensors/enc28j60-ethernet-module.html#resources","title":"Resources","text":"<ul> <li>[ENC28J60 Library</li> </ul>"},{"location":"Products/Sensors/encoder-gear-motor-25mm-95rpm.html","title":"Encoder Gear Motor-25MM 95RPM","text":""},{"location":"Products/Sensors/encoder-gear-motor-25mm-95rpm.html#description","title":"Description","text":"<p>This is a gear motor that has an encoder to help users adjust the speed. The gear motor has a large torque, low loudness and easy to use. Besides, the encoder on this module has two outputs: output_A and output_B, to monitor the motor speed and direction of rotation, so that you can monitor the speed and then to adjust it in a closed-loop control. The encoder output 2 signals with 90 degree phase difference. There will be 334 pulses on each of the signal for a round of the motor, with the rising &amp; falling edge, you can get 334x2x2=1336 signals for a round of the motor, with a interval of 360/1336=0.2694 degree. Model:AM2595EC</p> <p></p>"},{"location":"Products/Sensors/encoder-gear-motor-25mm-95rpm.html#specification","title":"Specification","text":"<ul> <li>Working Voltage for Motor: 6~24 VDC</li> <li>Rated Voltage for Motor: 12 VDC</li> <li>Voltage for Encoder: 5 VDC</li> <li>Motor Speed: 95 rpm@12V</li> <li>Torque: 1.1 kg.cm</li> <li>Motor Length: 65 mm</li> <li>Motor diameter: 25 mm</li> <li>Current: 250 mA</li> <li>Motor Power: 1.25W</li> <li>Weight: 86 g</li> </ul>"},{"location":"Products/Sensors/encoder-gear-motor-25mm-95rpm.html#application-ideas","title":"Application Ideas","text":"<ul> <li>High precision non-contact temperature measurements</li> <li>Thermal Comfort sensor for Mobile AirConditioning control system</li> <li>Temperature sensing element for residential,commercial and industrial building airconditioning</li> <li>Windshield defogging</li> <li>Automotive blind angle detection</li> <li>Industrial temperature control of moving parts</li> <li>Temperature control in printers and copiers</li> <li>Home appliances with temperature control</li> <li>Healthcare</li> <li>Livestock monitoring</li> <li>Movement detection</li> <li>Multiple zone temperature control \u2013 up to 127sensors can be read via common 2 wires</li> <li>Thermal relay / alert</li> <li>Body temperature measurement</li> </ul>"},{"location":"Products/Sensors/encoder-gear-motor-25mm-95rpm.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/encoder-gear-motor-25mm-95rpm.html#hardware-installation","title":"Hardware Installation","text":""},{"location":"Products/Sensors/encoder-gear-motor-25mm-95rpm.html#demo-c0de","title":"Demo c0de","text":"<p>1.Download the library File:Encoder Gear Motor Library</p> <p>2.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries.</p> <p>3.Open the code directly by the path:File -&gt; Examples -&gt;MsTimer2 -&gt;Encoder_Gear_Motor.</p> <pre><code>#include &lt;MsTimer2.h&gt; \n#define ENCODER_A_PIN 2\nlong position;\nlong speed=0;\nvoid setup(){\n  MsTimer2::set(1000, flash);       \n  MsTimer2::start();   \n  pinMode(ENCODER_A_PIN, INPUT);\n  attachInterrupt(0, read_quadrature, CHANGE);\n  Serial.begin(9600);\n}\n\nvoid loop(){\n   Serial.print(\"speed: \");\n   Serial.print(speed/334, DEC);\n   Serial.println(\"rmp\");\n   delay(1000);\n}\n\nvoid read_quadrature(){  \n\n  if (digitalRead(ENCODER_A_PIN) == LOW){   \n      position++;\n  }\n}\nvoid flash()                      \n{                        \n     speed=position;\n     position=0;     \n}\n</code></pre> <p>4.Open the monitor of Arduino IDE, you can see the speed of the motor. </p>"},{"location":"Products/Sensors/encoder-gear-motor-25mm-95rpm.html#resources","title":"Resources","text":"<ul> <li>Encoder Gear Motor Library</li> </ul>"},{"location":"Products/Sensors/fingerprint-sensor.html","title":"Fingerprint Sensor","text":""},{"location":"Products/Sensors/fingerprint-sensor.html#description","title":"Description","text":"<p>This all-in-one optical fingerprint sensor will make adding fingerprint detection and verification super simple. These modules are typically used in safes - there's a high powered DSP chip AS601 that does the image rendering, calculation, feature-finding and searching. Connect to any microcontroller or system with TTL serial, and send packets of data to take photos, detect prints, hash and search. You can also enroll new fingers directly - up to 120 finger prints can be stored in the onboard FLASH memory. As the usage, the fingerprint is really easy to use with the serial UART. There is already some libraries to help your using this sensor with Arduino , such as the adafruit fingerprint library.</p> <p>Model:SOT6439F</p> <p></p> <p></p>"},{"location":"Products/Sensors/fingerprint-sensor.html#features","title":"Features","text":"<ul> <li>Communication: UART(TTL)</li> <li>Fingerprint number: 120 on default</li> <li>Can set the security level and baud rate flexibility</li> <li>Working Current@Voltage: &lt;120mA@DC3.6~6V</li> <li>Temprature: -20 - +50 degrees</li> <li>Humidity: &lt;85%</li> <li>Dimension: 56x20x21.5mm</li> </ul>"},{"location":"Products/Sensors/fingerprint-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/fingerprint-sensor.html#enrolling-new-users-with-windows","title":"Enrolling New Users with Windows","text":"<p>1.Hardware Connection</p> <p></p> <p>2.Copy the below code to you new skecth,then upload it.</p> <pre><code>// Red connects to +5V\n// Black connects to Ground\n// White goes to Digital 0\n// Green goes to Digital 1\n\nvoid setup() {}\nvoid loop() {}\n</code></pre> <p>3.Download the SFGDemoV2.0 :SFGDemoV2.0  3.Start up the SFGDemo software and click Open Device from the bottom left corner. Select the COM port used by the Arduino.</p> <p></p> <p>4.And press OK when done. You should see the following, with a blue success message and some device statistics in the bottom corner. You can change the baud rate in the bottom left hand corner, as well as the \"security level\" (how sensitive it is) but we suggest leaving those alone until you have everything running and you want to experiment. They should default to 57600 baud and security level 3 so set them if they're wrong .</p> <p></p> <p>5.Lets enroll a new finger! Click the Preview checkbox and press the Enroll button next to it (Con Enroll means 'Continuous' enroll, which you may want to do if you have many fingers to enroll). When the box comes up, enter in the ID # you want to use. You can use up to 162 ID numbers.</p> <p></p> <p>6.The software will ask you to press the finger to the sensor.</p> <p></p> <p>7.You can then see a preview (if you cliecked the preview checkbox) of the fingerprint.</p> <p></p> <p>You will then have to repeat the process, to get a second clean print. Use the same finger! On success you will get a notice.</p> <p></p> <p>If there's a problem such as a bad print or image, you'll have to do it again.</p>"},{"location":"Products/Sensors/fingerprint-sensor.html#searching-with-the-software","title":"Searching with the Software","text":"<p>1.Click on the Search button on the right hand side.</p> <p></p> <p>2.When prompted, press a different/same finger to the sensor. If it is the same finger, you should get a match with the ID #</p> <p></p> <p>If it is not a finger in the database, you will get a failure notice.</p> <p></p>"},{"location":"Products/Sensors/fingerprint-sensor.html#wiring-for-use-with-arduino","title":"Wiring for use with Arduino","text":"<p>1.Hardware Connection</p> <p></p> <p>2.Download the Fingerprint Sensor library:Fingerprint Sensor library,Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>3.Open the code directly by the path:File -&gt; Example -&gt;Adafruit_Fingerprint\u2192fingerprint</p> <pre><code>#include &lt;Adafruit_Fingerprint.h&gt;\n#include &lt;SoftwareSerial.h&gt;\n\nint getFingerprintIDez();\n\n// pin #2 is IN from sensor (GREEN wire)\n// pin #3 is OUT from arduino  (WHITE wire)\nSoftwareSerial mySerial(2, 3);\n\n\nAdafruit_Fingerprint finger = Adafruit_Fingerprint(&amp;mySerial);\n\nvoid setup()  \n{\n  Serial.begin(9600);\n  Serial.println(\"fingertest\");\n\n  // set the data rate for the sensor serial port\n  finger.begin(57600);\n\n  if (finger.verifyPassword()) {\n    Serial.println(\"Found fingerprint sensor!\");\n  } else {\n    Serial.println(\"Did not find fingerprint sensor\u00a0:(\");\n    while (1);\n  }\n  Serial.println(\"Waiting for valid finger...\");\n}\n\nvoid loop()                     // run over and over again\n{\n  getFingerprintIDez();\n  delay(50);            //don't ned to run this at full speed.\n}\n\nuint8_t getFingerprintID() {\n  uint8_t p = finger.getImage();\n  switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image taken\");\n      break;\n    case FINGERPRINT_NOFINGER:\n      Serial.println(\"No finger detected\");\n      return p;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      return p;\n    case FINGERPRINT_IMAGEFAIL:\n      Serial.println(\"Imaging error\");\n      return p;\n    default:\n      Serial.println(\"Unknown error\");\n      return p;\n  }\n\n  // OK success!\n\n  p = finger.image2Tz();\n  switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image converted\");\n      break;\n    case FINGERPRINT_IMAGEMESS:\n      Serial.println(\"Image too messy\");\n      return p;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      return p;\n    case FINGERPRINT_FEATUREFAIL:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    case FINGERPRINT_INVALIDIMAGE:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    default:\n      Serial.println(\"Unknown error\");\n      return p;\n  }\n\n  // OK converted!\n  p = finger.fingerFastSearch();\n  if (p == FINGERPRINT_OK) {\n    Serial.println(\"Found a print match!\");\n  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {\n    Serial.println(\"Communication error\");\n    return p;\n  } else if (p == FINGERPRINT_NOTFOUND) {\n    Serial.println(\"Did not find a match\");\n    return p;\n  } else {\n    Serial.println(\"Unknown error\");\n    return p;\n  }   \n\n  // found a match!\n  Serial.print(\"Found ID #\"); Serial.print(finger.fingerID); \n  Serial.print(\" with confidence of \"); Serial.println(finger.confidence); \n}\n\n// returns -1 if failed, otherwise returns ID #\nint getFingerprintIDez() {\n  uint8_t p = finger.getImage();\n  if (p\u00a0!= FINGERPRINT_OK)  return -1;\n\n  p = finger.image2Tz();\n  if (p\u00a0!= FINGERPRINT_OK)  return -1;\n\n  p = finger.fingerFastSearch();\n  if (p\u00a0!= FINGERPRINT_OK)  return -1;\n\n  // found a match!\n  Serial.print(\"Found ID #\"); Serial.print(finger.fingerID); \n  Serial.print(\" with confidence of \"); Serial.println(finger.confidence);\n  return finger.fingerID; \n}\n</code></pre> <p>4.Upload the Code,Open up the serial monitor at 9600 baud and when prompted place your finger against the sensor that was already enrolled. You should see the following:</p> <p></p>"},{"location":"Products/Sensors/fingerprint-sensor.html#enrolling-with-arduino","title":"Enrolling with Arduino","text":"<p>1.Hardware Connection</p> <p></p> <p>2.Download the Fingerprint Sensor library:Fingerprint Sensor library,Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>3.Open the code directly by the path:File -&gt; Example -&gt;Adafruit_Fingerprint\u2192enroll</p> <pre><code>#include &lt;Adafruit_Fingerprint.h&gt;\n#include &lt;SoftwareSerial.h&gt;\n\nuint8_t getFingerprintEnroll(int id);\n\n\n// pin #2 is IN from sensor (GREEN wire)\n// pin #3 is OUT from arduino  (WHITE wire)\nSoftwareSerial mySerial(2, 3);\n\nAdafruit_Fingerprint finger = Adafruit_Fingerprint(&amp;mySerial);\n\nvoid setup()  \n{\n  Serial.begin(9600);\n  Serial.println(\"fingertest\");\n\n  // set the data rate for the sensor serial port\n  finger.begin(57600);\n\n  if (finger.verifyPassword()) {\n    Serial.println(\"Found fingerprint sensor!\");\n  } else {\n    Serial.println(\"Did not find fingerprint sensor\u00a0:(\");\n    while (1);\n  }\n}\n\nvoid loop()                     // run over and over again\n{\n  Serial.println(\"Type in the ID # you want to save this finger as...\");\n  int id = 0;\n  while (true) {\n    while (! Serial.available());\n    char c = Serial.read();\n    if (! isdigit(c)) break;\n    id *= 10;\n    id += c - '0';\n  }\n  Serial.print(\"Enrolling ID #\");\n  Serial.println(id);\n\n  while (!  getFingerprintEnroll(id) );\n}\n\nuint8_t getFingerprintEnroll(int id) {\n  int p = -1;\n  Serial.println(\"Waiting for valid finger to enroll\");\n  while (p\u00a0!= FINGERPRINT_OK) {\n    p = finger.getImage();\n    switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image taken\");\n      break;\n    case FINGERPRINT_NOFINGER:\n      Serial.println(\".\");\n      break;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      break;\n    case FINGERPRINT_IMAGEFAIL:\n      Serial.println(\"Imaging error\");\n      break;\n    default:\n      Serial.println(\"Unknown error\");\n      break;\n    }\n  }\n\n  // OK success!\n\n  p = finger.image2Tz(1);\n  switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image converted\");\n      break;\n    case FINGERPRINT_IMAGEMESS:\n      Serial.println(\"Image too messy\");\n      return p;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      return p;\n    case FINGERPRINT_FEATUREFAIL:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    case FINGERPRINT_INVALIDIMAGE:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    default:\n      Serial.println(\"Unknown error\");\n      return p;\n  }\n\n  Serial.println(\"Remove finger\");\n  delay(2000);\n  p = 0;\n  while (p\u00a0!= FINGERPRINT_NOFINGER) {\n    p = finger.getImage();\n  }\n\n  p = -1;\n  Serial.println(\"Place same finger again\");\n  while (p\u00a0!= FINGERPRINT_OK) {\n    p = finger.getImage();\n    switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image taken\");\n      break;\n    case FINGERPRINT_NOFINGER:\n      Serial.print(\".\");\n      break;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      break;\n    case FINGERPRINT_IMAGEFAIL:\n      Serial.println(\"Imaging error\");\n      break;\n    default:\n      Serial.println(\"Unknown error\");\n      break;\n    }\n  }\n\n  // OK success!\n\n  p = finger.image2Tz(2);\n  switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image converted\");\n      break;\n    case FINGERPRINT_IMAGEMESS:\n      Serial.println(\"Image too messy\");\n      return p;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      return p;\n    case FINGERPRINT_FEATUREFAIL:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    case FINGERPRINT_INVALIDIMAGE:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    default:\n      Serial.println(\"Unknown error\");\n      return p;\n  }\n\n\n  // OK converted!\n  p = finger.createModel();\n  if (p == FINGERPRINT_OK) {\n    Serial.println(\"Prints matched!\");\n  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {\n    Serial.println(\"Communication error\");\n    return p;\n  } else if (p == FINGERPRINT_ENROLLMISMATCH) {\n    Serial.println(\"Fingerprints did not match\");\n    return p;\n  } else {\n    Serial.println(\"Unknown error\");\n    return p;\n  }   \n\n  Serial.print(\"ID \"); Serial.println(id);\n  p = finger.storeModel(id);\n  if (p == FINGERPRINT_OK) {\n    Serial.println(\"Stored!\");\n  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {\n    Serial.println(\"Communication error\");\n    return p;\n  } else if (p == FINGERPRINT_BADLOCATION) {\n    Serial.println(\"Could not store in that location\");\n    return p;\n  } else if (p == FINGERPRINT_FLASHERR) {\n    Serial.println(\"Error writing to flash\");\n    return p;\n  } else {\n    Serial.println(\"Unknown error\");\n    return p;\n  }   \n}\n</code></pre> <p>4.Upload the Code,open up the serial monitor, it will ask for you to type in the ID to enroll - use the box up top to type in a number and click Send</p> <p></p> <p>5.Then go through the enrollment process as indicated. When it has successfully enrolled a finger, it will print Stored!</p> <p></p>"},{"location":"Products/Sensors/fingerprint-sensor.html#resource","title":"Resource","text":"<ul> <li>Fingerprint library</li> <li>SFGDemoV2.0</li> <li>Datasheet</li> </ul>"},{"location":"Products/Sensors/hc-sr505-mini-pir-motion-sensor.html","title":"HC-SR505 Mini PIR Motion Sensor","text":""},{"location":"Products/Sensors/hc-sr505-mini-pir-motion-sensor.html#introduction","title":"Introduction","text":"<p>HC-SR505 Mini PIR Motion Sensor is based on infrared technology and it can automatic control by itself with high sensitivity and high reliability. Because of the minimum size and low-power operation mode, it widely used in various of automatic electronic equipment, especially battery-powered automatic products. Module:SPS50506S</p> <p></p>"},{"location":"Products/Sensors/hc-sr505-mini-pir-motion-sensor.html#features","title":"Features","text":"<ul> <li>Automatic Control</li> <li>Minimum size</li> <li>Repeatable Trigger</li> <li>Wide range of operating voltage</li> <li>Low-power</li> <li>Output high signal</li> </ul>"},{"location":"Products/Sensors/hc-sr505-mini-pir-motion-sensor.html#specification","title":"Specification","text":"<ul> <li>Operating voltage range: DC4.5-20V</li> <li>Quiescent Current: &lt;60uA</li> <li>Trigger: reusable trigger (default)</li> <li>Delay Time: The default 8S + -30%</li> <li>Board Dimensions: 10 * 23mm</li> <li>Induction angle: &lt;100 degrees cone angle</li> <li>Sensing distance: 3 meters</li> <li>Working temperature: -20 to +80 degrees</li> <li>Sensor Lens Dimensions: Diameter: 10mm</li> </ul>"},{"location":"Products/Sensors/hc-sr505-mini-pir-motion-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/hc-sr505-mini-pir-motion-sensor.html#hardware","title":"Hardware","text":"<p>Connect the PIR Motion Sensor to your Arduino/Crowduino power supply pin and digital pins. You can can connect the \"s\" terminal to any of your arduino Pins,like the \"D6\" as belows: </p>"},{"location":"Products/Sensors/hc-sr505-mini-pir-motion-sensor.html#programming","title":"Programming","text":"<p>1.Copy the following program to Arduino IDE and upload to your Arduino/Crowduino:</p> <pre><code>void setup()  {\n  Serial.begin(9600);\n  pinMode(6,INPUT);\n  digitalWrite(6,LOW);\n}\nvoid loop()  {\n    if(digitalRead(6)==HIGH)  {\n      Serial.println(\"Somebody is here.\");\n    }\n    else  {\n      Serial.println(\"Nobody.\");\n    }\n    delay(1000);\n}\n</code></pre> <p>2.Open the Serial moniter , and set the baudrate to 9600, you will see that When somebody is in front of the sensor , the Serial Monitor will output \"Somebody is here.\".Or, the Serial Monitor output \"Nobody.\"</p> <p></p>"},{"location":"Products/Sensors/imu-10dof-lsm303d2bl3gd20-2bbmp180.html","title":"IMU 10DOF LSM303D+L3GD20 +BMP180","text":""},{"location":"Products/Sensors/imu-10dof-lsm303d2bl3gd20-2bbmp180.html#introduction","title":"Introduction","text":"<p>This IMU 10DOF is a motion tracking module based on the sensor LSM303D,L3GD20 and BMP180. The LSM303D is a system-in-package featuring a 3D digital linear acceleration sensor and a 3D digital magnetic sensor. The L3GD20 is a low-power three-axis angular rate sensor. It includes a sensing element and an IC interface capable of providing the measured angular rate to the external world through a digital interface (I2C/SPI). The BMP180 is the function compatible successor of the BMP085, a new generation of high precision digital pressure sensors for consumer applications. The ultra-low power, low voltage electronics of the BMP180 is optimized for use in mobile phones, PDAs, GPS navigation devices and outdoor equipment. With a low altitude noise of merely 0.25m at fast conversion time, the BMP180 offers superior performance. The I2C interface allows this module easy system integration with a microcontroller. You can uses it in your DIY or your product,for example, Quadcopter, Self-Balancing Robot and so on.</p> <p>Model:SMO08910DOF</p> <p></p>"},{"location":"Products/Sensors/imu-10dof-lsm303d2bl3gd20-2bbmp180.html#specification","title":"Specification","text":"<ul> <li>\u00b12/\u00b14/\u00b18/\u00b112 gauss dynamically selectable magnetic full-scale</li> <li>\u00b12/\u00b14/\u00b16/\u00b18/\u00b116 g dynamically selectable linear acceleration full-scale</li> <li>Three selectable full scales (250/500/2000dps)</li> <li>Pressure range:300 to1100hPa (+9000m to -500m above sea level)</li> <li>I2C interfaces</li> <li>Power supply: 3-5v</li> </ul>"},{"location":"Products/Sensors/imu-10dof-lsm303d2bl3gd20-2bbmp180.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/imu-10dof-lsm303d2bl3gd20-2bbmp180.html#resource","title":"Resource","text":""},{"location":"Products/Sensors/infrared-thermometer-mlx90614-breakout-board.html","title":"Infrared Thermometer MLX90614 Breakout Board","text":""},{"location":"Products/Sensors/infrared-thermometer-mlx90614-breakout-board.html#description","title":"Description","text":"<p>This is a MELEXIS MLX90614ESF-BAA-000-TU-ND non-contact infrared thermometer for use with Arduino, or any microcontroller that can communicate with it through it's I2C interface.   Model:SPM90614S</p> <p></p>"},{"location":"Products/Sensors/infrared-thermometer-mlx90614-breakout-board.html#features","title":"Features","text":"<ul> <li>Small size, low cost</li> <li>Mounted on a breakout board with two types of pins</li> <li>10k Pull up resistors for the I2C interface with optional solder jumpers</li> <li>Easy to integrate</li> <li>Factory calibrated in wide temperature range:-40\u2026+125\u00b0C for sensor temperature and -70\u2026+380\u00b0C for object temperature.</li> <li>High accuracy of 0.5\u00b0C over wide temperaturerange (0\u2026+50\u00b0C for both Ta and To) High (medical) accuracy calibration</li> <li>Measurement resolution of 0.02\u00b0C</li> <li>Single and dual zone versions</li> <li>SMBus compatible digital interface</li> <li>Customizable PWM output for continuousreading</li> <li>Simple adaptation for 8-16V applications</li> <li>Sleep mode for reduced power consumption</li> <li>Different package options for applications andmeasurements versatility</li> </ul>"},{"location":"Products/Sensors/infrared-thermometer-mlx90614-breakout-board.html#application-ideas","title":"Application Ideas","text":"<ul> <li>High precision non-contact temperature measurements</li> <li>Thermal Comfort sensor for Mobile AirConditioning control system</li> <li>Temperature sensing element for residential,commercial and industrial building airconditioning</li> <li>Windshield defogging</li> <li>Automotive blind angle detection</li> <li>Industrial temperature control of moving parts</li> <li>Temperature control in printers and copiers</li> <li>Home appliances with temperature control</li> <li>Healthcare</li> <li>Livestock monitoring</li> <li>Movement detection</li> <li>Multiple zone temperature control \u2013 up to 127sensors can be read via common 2 wires</li> <li>Thermal relay / alert</li> <li>Body temperature measurement</li> </ul>"},{"location":"Products/Sensors/infrared-thermometer-mlx90614-breakout-board.html#usage","title":"Usage","text":"<p>1. Hardware Installation</p> <p></p> <p>2.Download the library File:MLX90614 Library</p> <p>3.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;MLS90614.</p> <pre><code>#include &lt;i2cmaster.h&gt;\nvoid setup(){\n    Serial.begin(9600);\n    Serial.println(\"Setup...\");\n\n    i2c_init(); //Initialise the i2c bus\n    PORTC = (1 &lt;&lt; PORTC4) | (1 &lt;&lt; PORTC5);//enable pullups\n}\n\nvoid loop(){\n    int dev = 0x5A&lt;&lt;1;\n    int data_low = 0;\n    int data_high = 0;\n    int pec = 0;\n\n    i2c_start_wait(dev+I2C_WRITE);\n    i2c_write(0x07);\n\n    // read\n    i2c_rep_start(dev+I2C_READ);\n    data_low = i2c_readAck(); //Read 1 byte and then send ack\n    data_high = i2c_readAck(); //Read 1 byte and then send ack\n    pec = i2c_readNak();\n    i2c_stop();\n\n    //This converts high and low bytes together and processes temperature, MSB is a error bit and is ignored for temps\n    double tempFactor = 0.02; // 0.02 degrees per LSB (measurement resolution of the MLX90614)\n    double tempData = 0x0000; // zero out the data\n    int frac; // data past the decimal point\n\n    // This masks off the error bit of the high byte, then moves it left 8 bits and adds the low byte.\n    tempData = (double)(((data_high &amp; 0x007F) &lt;&lt; 8) + data_low);\n    tempData = (tempData * tempFactor)-0.01;\n\n    float celcius = tempData - 273.15;\n    float fahrenheit = (celcius*1.8) + 32;\n\n    Serial.print(\"Celcius: \");\n    Serial.println(celcius);\n\n    Serial.print(\"Fahrenheit: \");\n    Serial.println(fahrenheit);\n\n    delay(1000); // wait a second before printing again\n}\n</code></pre> <p>5.Upload the code,then open the serial monitor to see the result. </p>"},{"location":"Products/Sensors/infrared-thermometer-mlx90614-breakout-board.html#resources","title":"Resources","text":"<ul> <li>Demo code</li> </ul>"},{"location":"Products/Sensors/luminosity-sensor--tsl2561-breakout.html","title":"Luminosity Sensor- TSL2561 Breakout","text":""},{"location":"Products/Sensors/luminosity-sensor--tsl2561-breakout.html#description","title":"Description","text":"<p>The TSL2561 Luminosity Sensor Breakout is a sophisticated light sensor which has a flat response across most of the visible spectrum. Unlike simpler sensors, the TSL2561 measures both infrared and visible light to better approximate the response of the human eye. And because the TSL2561 is an integrating sensor (it soaks up light for a predetermined amount of time), it is capable of measuring both small and large amounts of light by changing the integration time. The TSL2561 is capable of direct I2C communication and is able to conduct specific light ranges from 0.1 - 40k+ Lux easily. Additionally, the TSL12561 contains two integrating analog-to-digital converters (ADC) that integrate currents from two photodiodes, simultaneously. Model:SM2561TSL </p> <p></p>"},{"location":"Products/Sensors/luminosity-sensor--tsl2561-breakout.html#features","title":"Features","text":"<ul> <li>I2C interfaces</li> <li>Power supply:3.3v ~ 5v</li> <li>A low supply current max of 0.6mA</li> </ul>"},{"location":"Products/Sensors/luminosity-sensor--tsl2561-breakout.html#usage","title":"Usage","text":"<p>1.Hardware Installation</p> <p></p> <p>2.Download the library File:TSL2561 Library 3.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries. 4.Open the code directly by the path:File -&gt; Examples -&gt;SFE_TSL2561-&gt;SFE_TSL2561_example.</p> <pre><code>#include &lt;SFE_TSL2561.h&gt;\n#include &lt;Wire.h&gt;\n\n// Create an SFE_TSL2561 object, here called \"light\":\n\nSFE_TSL2561 light;\n\n// Global variables:\n\nboolean gain;     // Gain setting, 0 = X1, 1 = X16;\nunsigned int ms;  // Integration (\"shutter\") time in milliseconds\n\nvoid setup()\n{\n  // Initialize the Serial port:\n\n  Serial.begin(9600);\n  Serial.println(\"TSL2561 example sketch\");\n\n  // Initialize the SFE_TSL2561 library\n\n  // You can pass nothing to light.begin() for the default I2C address (0x39),\n  // or use one of the following presets if you have changed\n  // the ADDR jumper on the board:\n\n  // TSL2561_ADDR_0 address with '0' shorted on board (0x29)\n  // TSL2561_ADDR   default address (0x39)\n  // TSL2561_ADDR_1 address with '1' shorted on board (0x49)\n\n   light.begin();\n\n  // Get factory ID from sensor:\n  // (Just for fun, you don't need to do this to operate the sensor)\n\n  unsigned char ID;\n\n  if (light.getID(ID))\n  {\n    Serial.print(\"Got factory ID: 0X\");\n    Serial.print(ID,HEX);\n    Serial.println(\", should be 0X5X\");\n  }\n  // Most library commands will return true if communications was successful,\n  // and false if there was a problem. You can ignore this returned value,\n  // or check whether a command worked correctly and retrieve an error code:\n  else\n  {\n    byte error = light.getError();\n    printError(error);\n  }\n  gain = 0;\n\n  // If time = 0, integration will be 13.7ms\n  // If time = 1, integration will be 101ms\n  // If time = 2, integration will be 402ms\n  // If time = 3, use manual start / stop to perform your own integration\n\n  unsigned char time = 2;\n\n  // setTiming() will set the third parameter (ms) to the\n  // requested integration time in ms (this will be useful later):\n\n  Serial.println(\"Set timing...\");\n  light.setTiming(gain,time,ms);\n\n  // To start taking measurements, power up the sensor:\n\n  Serial.println(\"Powerup...\");\n  light.setPowerUp();\n\n  // The sensor will now gather light during the integration time.\n  // After the specified time, you can retrieve the result from the sensor.\n  // Once a measurement occurs, another integration period will start.\n}\n\nvoid loop()\n{\n  delay(ms);\n  unsigned int data0, data1;\n\n  if (light.getData(data0,data1))\n  {\n    // getData() returned true, communication was successful\n\n    Serial.print(\"data0: \");\n    Serial.print(data0);\n    Serial.print(\" data1: \");\n    Serial.print(data1); \n    double lux;    // Resulting lux value\n    boolean good;  // True if neither sensor is saturated\n\n    // Perform lux calculation:\n\n    good = light.getLux(gain,ms,data0,data1,lux);\n\n    // Print out the results:\n\n    Serial.print(\" lux: \");\n    Serial.print(lux);\n    if (good) Serial.println(\" (good)\"); else Serial.println(\" (BAD)\");\n  }\n  else\n  {\n    // getData() returned false because of an I2C error, inform the user.\n\n    byte error = light.getError();\n    printError(error);\n  }\n}\n\nvoid printError(byte error)\n  // If there's an I2C error, this function will\n  // print out an explanation.\n{\n  Serial.print(\"I2C error: \");\n  Serial.print(error,DEC);\n  Serial.print(\", \");\n\n  switch(error)\n  {\n    case 0:\n      Serial.println(\"success\");\n      break;\n    case 1:\n      Serial.println(\"data too long for transmit buffer\");\n      break;\n    case 2:\n      Serial.println(\"received NACK on address (disconnected?)\");\n      break;\n    case 3:\n      Serial.println(\"received NACK on data\");\n      break;\n    case 4:\n      Serial.println(\"other error\");\n      break;\n    default:\n      Serial.println(\"unknown error\");\n  }\n}\n</code></pre> <p>5.Upload the code,then open the serial monitor to see the test result. </p>"},{"location":"Products/Sensors/luminosity-sensor--tsl2561-breakout.html#resources","title":"Resources","text":"<ul> <li>Demo code</li> <li>TSL2561-datasheet</li> </ul>"},{"location":"Products/Sensors/mpu-6050.html","title":"MPU-6050","text":""},{"location":"Products/Sensors/mpu-6050.html#introduction","title":"Introduction","text":"<p>The MPU-6000\u2122 family provides the world\u2019s first integrated 6-axis MotionProcessing\u2122 solution that eliminates the package-level gyro/accel cross-axis misalignment associated with discrete solutions. The devices combine a 3-axis gyroscope and a 3-axis accelerometer on the same silicon die together with an onboard Digital Motion Processor\u2122 (DMP\u2122) capable of processing complex 9-axis MotionFusion algorithms. The parts\u2019 integrated 9-axis MotionFusion algorithms access external magnetometers or other sensors through an auxiliary master I2C bus, allowing the devices to gather a full set of sensor data without intervention from the system processor. For precision tracking of both fast and slow motions, the parts feature a user-programmable gyro full-scale range of \u00b1250, \u00b1500, \u00b11000, and \u00b12000\u00b0/sec (dps) and a user-programmable accelerometer full-scale range of \u00b12g, \u00b14g, \u00b18g, and \u00b116g.</p> <p>The MPU-6050 supports I2C communications at up to 400kHz and has a VLOGIC pin that defines its interface voltage levels; Additional features include an embedded temperature sensor and an on-chip oscillator with \u00b11% variation over the operating temperature range.</p> <p>Model:SPS06050S</p> <p></p>"},{"location":"Products/Sensors/mpu-6050.html#specification","title":"Specification","text":"<ul> <li>I2C Digital-output of 6 or 9-axis MotionFusion data in rotation matrix, quaternion, Euler Angle, or raw data format.</li> <li>Input Voltage: 3 - 5V.</li> <li>Selectable Solder Jumpers on CLK, FSYNC and AD0.</li> <li>Tri-Axis angular rate sensor (gyro) with a sensitivity up to 131 LSBs/dps and a full-scale range of \u00b1250, \u00b1500, \u00b11000, and \u00b12000dps.</li> <li>Tri-Axis accelerometer with a programmable full scale range of \u00b12g, \u00b14g, \u00b18g and \u00b116g.</li> <li>Digital Motion Processing\u2122 (DMP\u2122) engine offloads complex MotionFusion, sensor timing synchronization and gesture detection.</li> <li>Embedded algorithms for run-time bias and compass calibration. No user intervention required.</li> <li>Digital-output temperature sensor.</li> <li>Dimensions: 20 * 15 * 1.6mm.</li> </ul>"},{"location":"Products/Sensors/mpu-6050.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/mpu-6050.html#hardware","title":"Hardware","text":"<p>Connect this module to arduino via I2C bus as below:</p> <p></p>"},{"location":"Products/Sensors/mpu-6050.html#programming","title":"Programming","text":"<p>1.Download the library File:MPU6050 Library 2.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries. 3.Open the code directly by the path:File -&gt; Example -&gt;MPU6050-&gt;Examples-&gt;MPU6050_raw.</p> <pre><code>// Arduino Wire library is required if I2Cdev I2CDEV_ARDUINO_WIRE implementation\n// is used in I2Cdev.h\n#include \"Wire.h\"\n\n// I2Cdev and MPU6050 must be installed as libraries, or else the .cpp/.h files\n// for both classes must be in the include path of your project\n#include \"I2Cdev.h\"\n#include \"MPU6050.h\"\n\n// class default I2C address is 0x68\n// specific I2C addresses may be passed as a parameter here\n// AD0 low = 0x68 (default for InvenSense evaluation board)\n// AD0 high = 0x69\nMPU6050 accelgyro;\n\nint16_t ax, ay, az;\nint16_t gx, gy, gz;\n\n#define LED_PIN 13\nbool blinkState = false;\n\nvoid setup() {\n    // join I2C bus (I2Cdev library doesn't do this automatically)\n    Wire.begin();\n\n    // initialize serial communication\n    // (38400 chosen because it works as well at 8MHz as it does at 16MHz, but\n    // it's really up to you depending on your project)\n    Serial.begin(38400);\n\n    // initialize device\n    Serial.println(\"Initializing I2C devices...\");\n    accelgyro.initialize();\n\n    // verify connection\n    Serial.println(\"Testing device connections...\");\n    Serial.println(accelgyro.testConnection()\u00a0? \"MPU6050 connection successful\"\u00a0: \"MPU6050 connection failed\");\n\n    // configure Arduino LED for\n    pinMode(LED_PIN, OUTPUT);\n}\n\nvoid loop() {\n    // read raw accel/gyro measurements from device\n    accelgyro.getMotion6(&amp;ax, &amp;ay, &amp;az, &amp;gx, &amp;gy, &amp;gz);\n\n    // these methods (and a few others) are also available\n    //accelgyro.getAcceleration(&amp;ax, &amp;ay, &amp;az);\n    //accelgyro.getRotation(&amp;gx, &amp;gy, &amp;gz);\n\n    // display tab-separated accel/gyro x/y/z values\n    Serial.print(\"a/g:\\t\");\n    Serial.print(ax); Serial.print(\"\\t\");\n    Serial.print(ay); Serial.print(\"\\t\");\n    Serial.print(az); Serial.print(\"\\t\");\n    Serial.print(gx); Serial.print(\"\\t\");\n    Serial.print(gy); Serial.print(\"\\t\");\n    Serial.println(gz);\n\n    // blink LED to indicate activity\n    blinkState = !blinkState;\n    digitalWrite(LED_PIN, blinkState);\n}\n</code></pre> <p>4.Upload the code,then open the serial monitor to see the test result.</p> <p></p>"},{"location":"Products/Sensors/mpu-6050.html#resource","title":"Resource","text":"<p>MPU-6050 DataSheet MPU Demo Code for Arduino</p>"},{"location":"Products/Sensors/non-invasive-ac-current-sensor-100a.html","title":"Non-invasive AC Current Sensor-100A","text":""},{"location":"Products/Sensors/non-invasive-ac-current-sensor-100a.html#description","title":"Description","text":"<p>The AC current sensor is based on Current transformers, it transforms the big AC current to little, and then convert to voltage with the build-in resistor so users can get the AC current value via measuring the output voltage with any microcontroller such as Arduino. The split core type makes this sensor suitable for DIY usage such as energy monitoring for house &amp; building. Model:SEL98100NI </p> <p></p>"},{"location":"Products/Sensors/non-invasive-ac-current-sensor-100a.html#feature","title":"Feature","text":"<ul> <li>Input Current: 0~100A AC</li> <li>Output Mode: 0~50mA</li> <li>Non-linearity: \u00b13%</li> <li>Turn Ratio: 100A:0.05A</li> <li>Resistance Grade: Grade B</li> <li>Work Temperature: -25\u00b0C ~ \ufe6270\u00b0C</li> <li>Dielectric Strength(between shell and output): 1000V AC/1min 5mA</li> <li>Leading Wire in Length: 1m</li> <li>Open Size: 13mm x 13mm</li> </ul>"},{"location":"Products/Sensors/non-invasive-ac-current-sensor-100a.html#specification","title":"Specification","text":""},{"location":"Products/Sensors/non-invasive-ac-current-sensor-100a.html#usage","title":"Usage","text":"<p>1.Hardware connection</p> <p> </p> <p>2.Download the library EmonLib;Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries. 3.Open the code directly by the path:File -&gt; Example -EmonLib-&gt;current only.</p> <pre><code>// EmonLibrary examples openenergymonitor.org, Licence GNU GPL V3\n\n#include \"EmonLib.h\"                   // Include Emon Library\nEnergyMonitor emon1;                   // Create an instance\n\nvoid setup()\n{  \n  Serial.begin(9600);\n\n  emon1.current(A1, 111.1);             // Current: input pin, calibration.\n}\n\nvoid loop()\n{\n  double Irms = emon1.calcIrms(1480);  // Calculate Irms only\n  Serial.print(\"Apparent power:\");\n  Serial.print(Irms*230.0);        // Apparent power\n  Serial.print(\" \");\n  Serial.print(\"Irms:\");\n  Serial.println(Irms);            // Irms\n}\n</code></pre> <p>4.Upload the Code,then open the serial monitor. You should the test result.</p> <p></p>"},{"location":"Products/Sensors/non-invasive-ac-current-sensor-100a.html#resource","title":"Resource","text":"<ul> <li>EmonLib</li> <li>SCT013 Datasheet</li> <li>How to build an Arduino energy monitor</li> <li>CT sensors - Interfacing with an Arduino</li> <li>CT sensors - An introduction</li> </ul>"},{"location":"Products/Sensors/one-wire-waterproof-temperature-sensor.html","title":"One Wire Waterproof Temperature Sensor","text":""},{"location":"Products/Sensors/one-wire-waterproof-temperature-sensor.html#introduction","title":"Introduction","text":"<p>This is a waterproofed version of the DS18B20 Temperature sensor. Handy for when you need to measure something far away, or in wet conditions. While the sensor is good up to 125\u00b0C the cable is jacketed in PVC so we suggest keeping it under 100\u00b0C. Because they are digital, you don't get any signal degradation even over long distances! The DS18B20 provides 9 to 12-bit (configurable) temperature readings over a 1-Wire interface, so that only one wire (and ground) needs to be connected from a central microprocessor.Usable with 3.0-5.5V systems.</p> <p>Because each DS18B20 contains a unique silicon serial number, multiple DS18B20s can exist on the same 1-Wire bus. This allows for placing temperature sensors in many different places. Applications where this feature is useful include HVAC environmental controls, sensing temperatures inside buildings,equipment or machinery, and process monitoring and control.</p> <p>Model:STH01102S</p> <p></p>"},{"location":"Products/Sensors/one-wire-waterproof-temperature-sensor.html#features","title":"Features","text":"<ul> <li>9 to 12 bit selectable resolution.</li> <li>one digital pin for communication.</li> <li>Multiple sensors can share one pin.</li> <li>Query time is less than 750ms.</li> </ul>"},{"location":"Products/Sensors/one-wire-waterproof-temperature-sensor.html#specification","title":"Specification","text":"<ul> <li>3.0V to 5.5V input.</li> <li>Temperature range: -55 to 125\u00b0C (-67\u00b0F to +257\u00b0F).</li> <li>\u00b10.5\u00b0C Accuracy from -10\u00b0C to +85\u00b0C.</li> <li>Red wire - VCC.</li> <li>Black wire - GND.</li> <li>Yellow wire - DATA.</li> <li>Stainless steel tube 6mm diameter by 30mm long.</li> <li>Cable length: 90cm.</li> </ul>"},{"location":"Products/Sensors/one-wire-waterproof-temperature-sensor.html#usage","title":"Usage","text":"<p>Here, we will show how to use the waterproof temperature sensor (DS18B20) with your Arduino. This sensor uses the one wire protocol to talk with the microcontroller. So, it requires only one digital port to communicate.</p>"},{"location":"Products/Sensors/one-wire-waterproof-temperature-sensor.html#hardware","title":"Hardware","text":"<p>The sensor has 3 wires: red (VCC), black (GND) and white (DATA). Connect the red to +5V, the black to GND and the white to the digital pin D10.  Then, put a 4.7kohm resistor between the white wire and the +5V.  </p>"},{"location":"Products/Sensors/one-wire-waterproof-temperature-sensor.html#programming","title":"Programming","text":"<p>First download the DS18B20 Library for Arduino to your computer. please refer to here to learn how to install the library and upload the programs.</p> <p>The demo code is:</p> <pre><code>#include &lt;OneWire.h&gt;\nOneWire  ds(10);  // on pin 10\n\nvoid setup(void) {\n  Serial.begin(9600);\n}\n\nvoid loop(void) {\n  byte i;\n  byte present = 0;\n  byte type_s;\n  byte data[12];\n  byte addr[8];\n  float celsius, fahrenheit;\n\n  if ( !ds.search(addr)) {\n    Serial.println(\"No more addresses.\");\n    Serial.println();\n    ds.reset_search();\n    delay(250);\n    return;\n  }\n\n  Serial.print(\"ROM =\");\n  for( i = 0; i &lt; 8; i++) {\n    Serial.write(' ');\n    Serial.print(addr[i], HEX);\n  }\n\n  if (OneWire::crc8(addr, 7)\u00a0!= addr[7]) {\n      Serial.println(\"CRC is not valid!\");\n      return;\n  }\n  Serial.println();\n\n  // the first ROM byte indicates which chip\n  switch (addr[0]) {\n    case 0x10:\n      Serial.println(\"  Chip = DS18S20\");  // or old DS1820\n      type_s = 1;\n      break;\n    case 0x28:\n      Serial.println(\"  Chip = DS18B20\");\n      type_s = 0;\n      break;\n    case 0x22:\n      Serial.println(\"  Chip = DS1822\");\n      type_s = 0;\n      break;\n    default:\n      Serial.println(\"Device is not a DS18x20 family device.\");\n      return;\n  } \n\n  ds.reset();\n  ds.select(addr);\n  ds.write(0x44,1);         // start conversion, with parasite power on at the end\n\n  delay(1000);     // maybe 750ms is enough, maybe not\n  // we might do a ds.depower() here, but the reset will take care of it.\n\n  present = ds.reset();\n  ds.select(addr);    \n  ds.write(0xBE);         // Read Scratchpad\n\n  Serial.print(\"  Data = \");\n  Serial.print(present,HEX);\n  Serial.print(\" \");\n  for ( i = 0; i &lt; 9; i++) {           // we need 9 bytes\n    data[i] = ds.read();\n    Serial.print(data[i], HEX);\n    Serial.print(\" \");\n  }\n  Serial.print(\" CRC=\");\n  Serial.print(OneWire::crc8(data, 8), HEX);\n  Serial.println();\n\n  // convert the data to actual temperature\n\n  unsigned int raw = (data[1] &lt;&lt; 8) | data[0];\n  if (type_s) {\n    raw = raw &lt;&lt; 3; // 9 bit resolution default\n    if (data[7] == 0x10) {\n      // count remain gives full 12 bit resolution\n      raw = (raw &amp; 0xFFF0) + 12 - data[6];\n    }\n  } else {\n    byte cfg = (data[4] &amp; 0x60);\n    if (cfg == 0x00) raw = raw &lt;&lt; 3;  // 9 bit resolution, 93.75 ms\n    else if (cfg == 0x20) raw = raw &lt;&lt; 2; // 10 bit res, 187.5 ms\n    else if (cfg == 0x40) raw = raw &lt;&lt; 1; // 11 bit res, 375 ms\n    // default is 12 bit resolution, 750 ms conversion time\n  }\n  celsius = (float)raw / 16.0;\n  fahrenheit = celsius * 1.8 + 32.0;\n  Serial.print(\"  Temperature = \");\n  Serial.print(celsius);\n  Serial.print(\" Celsius, \");\n  Serial.print(fahrenheit);\n  Serial.println(\" Fahrenheit\");\n}\n</code></pre> <p>Open the Sscom32 terminal or the Serial moniter , and set the baudrate to 9600, you will see calculated temperature on the moniter. </p>"},{"location":"Products/Sensors/one-wire-waterproof-temperature-sensor.html#resource","title":"Resource","text":"<p>DS18B20 DataSheet DS18B20 Lib Get Start 1-Wire Protocol Explanation  </p>"},{"location":"Products/Sensors/photosensor--long-range.html","title":"Photosensor- Long Range","text":""},{"location":"Products/Sensors/photosensor--long-range.html#introduction","title":"Introduction","text":"<p>The reflectivity of infrared light varies with the color and distance of the reflecting surface, According to this principle,Photosensor- Long Range utilizes a ST178H reflective photosensor module to detect color and distance. When a light-colored object approaches,the signal intensity received by infrared reflective sensor increases and the indicator LED on board turns ON. When a dark-colored object approaches, the intensity decreases and the LED turns off. This sensor is a basic and widely used part in applications such as line-following cars, rotary speed detection, auto data logging on utility meters or other situations where color or distance contrast is sharp. There is also a short version Photosensor for you to choose. Module:SLS01012S</p> <p></p>"},{"location":"Products/Sensors/photosensor--long-range.html#features","title":"Features","text":"<ul> <li>Operating voltage: 4.5 V - 5.5 V.</li> <li>Digital output, 0 or VCC.</li> <li>High resolution sensor;minumum detectable length: 1mm black line.</li> <li>Effective distance\uff1a2-10mm,optimum:5mm.</li> <li>Indicator LED on board.</li> <li>Size:35*7.5*5mm.</li> <li>Easy to use in obstacle sensoring; White/Black wire tracking</li> </ul>"},{"location":"Products/Sensors/photosensor--long-range.html#usage","title":"Usage","text":"<p>There is a infrared emitter and a receiver on this module, the emitter always emit infrared ray. When the infrared light emitted by the emitter gets reflected on a surface that blocked it, the phototransistor can pick up the signal. with this way, this module can be used to detect if there is a obstacle in the measuring range. It can be also use to do White/Black wire tracking because the black wire absorb the rays while the white wire reflect the rays.</p>"},{"location":"Products/Sensors/photosensor--long-range.html#hardware","title":"Hardware","text":"<p>Connect the Photosensor to your Arduino/Crowduino power supply pin and digital pins. You can can connect the \"s\" terminal to any of your arduino Pins,like the \"D6\" as belows: </p>"},{"location":"Products/Sensors/photosensor--long-range.html#programming","title":"Programming","text":"<p>1.Copy the following program to Arduino IDE and upload to your Arduino/Crowduino:</p> <pre><code>void setup()  {\n  Serial.begin(9600);\n  pinMode(6,INPUT);\n}\nvoid loop()  {\n  while(1)  {\n    delay(500);\n    if(digitalRead(6)==LOW)  {\n      Serial.println(\"Somebody is here.\");\n    }\n    else  {\n      Serial.println(\"Nobody.\");\n    }\n  }\n}\n</code></pre> <p>2.Open the Serial moniter , and set the baudrate to 9600, you will see that When somebody is in front of the sensor , the Serial Monitor will output \"Somebody is here.\".Or, the Serial Monitor output \"Nobody.\"</p> <p></p>"},{"location":"Products/Sensors/photosensor--long-range.html#resource","title":"Resource","text":"<p>File:SH178 datasheet.pdf</p>"},{"location":"Products/Sensors/photosensor--short-range.html","title":"Photosensor- Short Range","text":""},{"location":"Products/Sensors/photosensor--short-range.html#introduction","title":"Introduction","text":"<p>The reflectivity of infrared light varies with the color and distance of the reflecting surface, According to this principle,Photosensor- Short Range utilizes a TCRT5000 reflective photosensor module to detect color and distance. When a light-colored object approaches,the signal intensity received by infrared reflective sensor increases and the indicator LED on board turns ON. When a dark-colored object approaches, the intensity decreases and the LED turns off. This sensor is a basic and widely used part in applications such as line-following cars, rotary speed detection, auto data logging on utility meters or other situations where color or distance contrast is sharp. There is also a long range version Photosensor for you to choose. SLS01013S </p>"},{"location":"Products/Sensors/photosensor--short-range.html#features","title":"Features","text":"<ul> <li>Operating voltage: 4.5 V - 5.5 V.</li> <li>Digital output, 0 or VCC.</li> <li>High resolution sensor;minumum detectable length: 1mm black line.</li> <li>Effective distance\uff1a1-8mm,optimum:2.5mm.</li> <li>Indicator LED on board.</li> <li>Size:35*7.5*5mm.</li> <li>Easy to use in obstacle sensoring; White/Black wire tracking</li> </ul>"},{"location":"Products/Sensors/photosensor--short-range.html#usage","title":"Usage","text":"<p>There is a infrared emitter and a receiver on this module, the emitter always emit infrared ray. When the infrared light emitted by the emitter gets reflected on a surface that blocked it, the phototransistor can pick up the signal. with this way, this module can be used to detect if there is a obstacle in the measuring range. It can be also use to do White/Black wire tracking because the black wire absorb the rays while the white wire reflect the rays.</p>"},{"location":"Products/Sensors/photosensor--short-range.html#hardware","title":"Hardware","text":"<p>Connect the Photosensor to your Arduino/Crowduino power supply pin and digital pins. You can can connect the \"s\" terminal to any of your arduino Pins,like the \"D6\" as belows: </p>"},{"location":"Products/Sensors/photosensor--short-range.html#programming","title":"Programming","text":"<p>1.Copy the following program to Arduino IDE and upload to your Arduino/Crowduino:</p> <pre><code>void setup()  {\n  Serial.begin(9600);\n  pinMode(6,INPUT);\n}\nvoid loop()  {\n  while(1)  {\n    delay(500);\n    if(digitalRead(6)==HIGH)  {\n      Serial.println(\"Somebody is here.\");\n    }\n    else  {\n      Serial.println(\"Nobody.\");\n    }\n  }\n}\n</code></pre> <p>2.Open the Serial moniter , and set the baudrate to 9600, you will see that When somebody is in front of the sensor , the Serial Monitor will output \"Somebody is here.\".Or, the Serial Monitor output \"Nobody.\"  </p>"},{"location":"Products/Sensors/photosensor--short-range.html#resource","title":"Resource","text":"<p>File:TCRT5000 datasheet.pdf</p>"},{"location":"Products/Sensors/pir-motion-sensor.html","title":"PIR Motion Sensor","text":""},{"location":"Products/Sensors/pir-motion-sensor.html#introduction","title":"Introduction","text":"<p>This is a highly integrated module popularly used for human-being entry detection, it can simplely and easily to adopt in system. There are two adjustable potentiometer on the module, you can use them to change the trigger sensitivity and the duration of the trigger signal.Besides,The module can also be set as retriggerable or un- retriggerable. When the switch is in the H position, the module is retriggerable and is unretrigerred when the switch is in L position. Model: SOD00101S</p> <p> </p>"},{"location":"Products/Sensors/pir-motion-sensor.html#specification","title":"Specification","text":"<ul> <li>Input Voltage: DC 4.5-20V</li> <li>Static current: 50uA</li> <li>Output signal: 0,3V or 5V (Output high when motion detected)</li> <li>Sentry Angle: 110 degree</li> <li>Sentry Distance: max 7 m</li> <li>Shunt for setting overide trigger: H - Yes, L - No</li> </ul>"},{"location":"Products/Sensors/pir-motion-sensor.html#interface","title":"Interface","text":""},{"location":"Products/Sensors/pir-motion-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/pir-motion-sensor.html#hardware","title":"Hardware","text":"<p>Connect this sensor to your Arduino/Crowduino digital pins( D2 for example). Adjust the RT&amp;CDS to change trigger sensitivity and duration of the trigger signal.Set the module as retriggerable or un- retriggerable with the switch, when the H position, the module is retriggerable and is unretrigerred when the switch is in L position. </p>"},{"location":"Products/Sensors/pir-motion-sensor.html#programming","title":"Programming","text":"<p>1.Copy and paste code below to a new Arduino sketch.</p> <pre><code> const int PIRPin = 2;// the number of the PIR Motion sensor pin\n const int ledPin=13;//The led to indicate the motion\n int PIRState = 0; // variable for reading the PIR Motion sensor status\n void setup(){\n     pinMode(PIRPin, INPUT);//Use pin 2 to receive the signal outputted by the module \n     pinMode(ledPin, OUTPUT);\n }\n void loop() {\n      PIRState=digitalRead(PIRPin);\n     if(PIRState==HIGH)\n     {\n           digitalWrite(ledPin,HIGH);\n     }\n     else\n     {\n           digitalWrite(ledPin,LOW);\n     }\n }\n</code></pre> <p>2.Upload the code,When someone moves before the sensor, the led on the arduino board light. </p>"},{"location":"Products/Sensors/pulse-sensor.html","title":"Pulse Sensor","text":""},{"location":"Products/Sensors/pulse-sensor.html#description","title":"Description","text":"<p>The Pulse Sensor is a plug-and-play heart-rate sensor for Arduino. It can be used by students, artists, athletes, makers, and game &amp; mobile developers who want to easily incorporate live heart-rate data into their projects.Essence it is an integrated optical amplifying circuit and noise eliminating circuit sensor. Clip the Pulse Sensor to your earlobe or finger tip and plug it into your Arduino ,you can ready to read heart rate. Also it have an Arduino demo code that make it easy to use.</p> <p>Model:SO00837PS</p> <p></p> <p></p>"},{"location":"Products/Sensors/pulse-sensor.html#features","title":"Features","text":"<ul> <li>Working voltage: 5V</li> <li>Working current: 4mA</li> </ul>"},{"location":"Products/Sensors/pulse-sensor.html#usage","title":"Usage","text":"<p>In the example,we will tell you how to test your pulse with Arduino use the pluse sensor,the pluse ware will display in your PC. So, in this example,we need to install procesing and need two code,one for Arduino,another for processing.</p> <p>1.Hardware connection </p> <p>2.Download the Arduino demo code:Pulse Sensor Arduino demo code</p> <p>3.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;PulseSensorAmpd_Processing_1dot1.</p> <pre><code>//  VARIABLES\nint pulsePin = 0;                 // Pulse Sensor purple wire connected to analog pin 0\nint blinkPin = 13;                // pin to blink led at each beat\nint fadePin = 5;                  // pin to do fancy classy fading blink at each beat\nint fadeRate = 0;                 // used to fade LED on with PWM on fadePin\n\n\n// these variables are volatile because they are used during the interrupt service routine!\nvolatile int BPM;                   // used to hold the pulse rate\nvolatile int Signal;                // holds the incoming raw data\nvolatile int IBI = 600;             // holds the time between beats, must be seeded! \nvolatile boolean Pulse = false;     // true when pulse wave is high, false when it's low\nvolatile boolean QS = false;        // becomes true when Arduoino finds a beat.\n\n\nvoid setup(){\n  pinMode(blinkPin,OUTPUT);         // pin that will blink to your heartbeat!\n  pinMode(fadePin,OUTPUT);          // pin that will fade to your heartbeat!\n  Serial.begin(115200);             // we agree to talk fast!\n  interruptSetup();                 // sets up to read Pulse Sensor signal every 2mS \n   // UN-COMMENT THE NEXT LINE IF YOU ARE POWERING The Pulse Sensor AT LOW VOLTAGE, \n   // AND APPLY THAT VOLTAGE TO THE A-REF PIN\n   //analogReference(EXTERNAL);   \n}\n\n\n\nvoid loop(){\n  sendDataToProcessing('S', Signal);     // send Processing the raw Pulse Sensor data\n  if (QS == true){                       // Quantified Self flag is true when arduino finds a heartbeat\n        fadeRate = 255;                  // Set 'fadeRate' Variable to 255 to fade LED with pulse\n        sendDataToProcessing('B',BPM);   // send heart rate with a 'B' prefix\n        sendDataToProcessing('Q',IBI);   // send time between beats with a 'Q' prefix\n        QS = false;                      // reset the Quantified Self flag for next time    \n     }\n\n  ledFadeToBeat();\n\n  delay(20);                             //  take a break\n}\n\n\nvoid ledFadeToBeat(){\n    fadeRate -= 15;                         //  set LED fade value\n    fadeRate = constrain(fadeRate,0,255);   //  keep LED fade value from going into negative numbers!\n    analogWrite(fadePin,fadeRate);          //  fade LED\n  }\n\n\nvoid sendDataToProcessing(char symbol, int data ){\n    Serial.print(symbol);                // symbol prefix tells Processing what type of data is coming\n    Serial.println(data);                // the data to send culminating in a carriage return\n  }\n</code></pre> <p>5.Download the processing code:processing demo code,then unzip to your PC. 6.Download the processing.exe:processing.exe,then insstall it. 7.Open the processing. 8.Open the processing code.  9.Run it,stick the Pulse Sensor onto your fingertip, then you can see the pulse wave. </p> <p>10.Upload the code,then open the serial monitor to see the result.</p> <p></p>"},{"location":"Products/Sensors/pulse-sensor.html#resource","title":"Resource","text":"<ul> <li>Pulse Sensor Arduino demo code</li> <li>Arduino Code Walkthrough</li> <li>processing demo code</li> <li>processing.exe</li> </ul>"},{"location":"Products/Sensors/rectangle-capacitive-fingerprint-scanner-breathing-light-fingerprint-as608-sensor.html","title":"Rectangle capacitive fingerprint scanner breathing light fingerprint AS608 sensor","text":""},{"location":"Products/Sensors/rectangle-capacitive-fingerprint-scanner-breathing-light-fingerprint-as608-sensor.html#description","title":"Description","text":"<p>This fingerprint module can store 300 fingerprints and has the functions of collecting fingerprints, reading fingerprints, and identifying fingerprints. It is not only small in size, low in power consumption, simple in interface, high in reliability, and also has fast recognition speed and good adaptability to wet and dry fingers. When the fingerprint image is read, it has a sensitive response and judgment to dry and wet fingers and obtains the best imaging quality, which is suitable for a wide range of people. At the same time, it has the function of self-learning, which can achieve better matching. The module also has the function of sensing the finger. When the finger is pressed on the fingerprint collection surface, the module Touch pin outputs a high level. The module communication interface is UART communication interface. Model:DPI50249S </p>"},{"location":"Products/Sensors/rectangle-capacitive-fingerprint-scanner-breathing-light-fingerprint-as608-sensor.html#module-dimension-drawing-unit-mm","title":"Module dimension drawing (unit: mm)","text":""},{"location":"Products/Sensors/rectangle-capacitive-fingerprint-scanner-breathing-light-fingerprint-as608-sensor.html#feature","title":"Feature","text":"<ul> <li>Compact size and simple structure</li> <li>Low power consumption, simple interface, high reliability</li> <li>Fast recognition speed, good adaptability to wet and dry fingers, and fast fingerprint search</li> </ul> Parameter VALUE Sensor Capacitive touch sensor Resolution 508 DPI Image pixels 160*160 Fingerprint image collection time &lt;110ms Fingerprint capacity 300 Algorithmic search time &lt;30ms(100pcs) Matching method 1:1,1:N Overall recognition time &lt;1s(100pcs) False acceptance rate &lt;0.001% False rejection rate &lt;1% Operating voltage 3.3\u00b10.3\uff08v\uff09 Operating current &lt;55mA Communication port UART"},{"location":"Products/Sensors/rectangle-capacitive-fingerprint-scanner-breathing-light-fingerprint-as608-sensor.html#pin-definition","title":"Pin Definition","text":"Pin Number Name Type Function Description 1 Vsen In Fingerprint sensor power input, +3.3V 2 Touch Out Fingerprint sensor touch sensing signal output, active high by default 3 VDD In Module DSP power positive input, +3.3V 4 TX Out Serial data output, TTL logic level 5 RX In Serial data input, TTL logic level 6 GND - Signal ground, internally connected to power ground <p> The Wiring diagram\uff1a</p> <p>The order of the pins is from right to left, \u2460 in the figure is the No. 1 pin </p>"},{"location":"Products/Sensors/rectangle-capacitive-fingerprint-scanner-breathing-light-fingerprint-as608-sensor.html#building-a-smart-fingerprint-box","title":"Building a Smart fingerprint box","text":"<p>Download files:Smart fingerprint box</p> <p>Implement a box that can lock and unlock by fingerprint identification: 1. Fingerprint sensor cable details: </p> <p></p> <p>2. Uploading code: Upload code with Arduino\uff1a </p> <pre><code>#include &lt;Adafruit_Fingerprint.h&gt;\n// For UNO and others without hardware serial, we must use software serial...\n// pin #2 is IN from sensor (GREEN wire)\n// pin #3 is OUT from Arduino  (WHITE wire)\n// comment these two lines if using hardware serial\n#include &lt;Servo.h&gt;\nSoftwareSerial mySerial(2, 3);\nServo myservo;  // create servo object to control a servo\nint i = 0;\nint potpin = A0;  // analog pin used to connect the potentiometer\nint val;    // variable to read the value from the analog pin\n\nAdafruit_Fingerprint finger = Adafruit_Fingerprint(&amp;mySerial);\n\nvoid setup()  \n{\n  Serial.begin(9600);\n  myservo.attach(9);  // attaches the servo on pin 9 to the servo object\n  myservo.write(80);\n  while (!Serial);  // For Yun/Leo/Micro/Zero/...\n  delay(100);\n  Serial.println(\"\\n\\nAdafruit finger detect test\");\n\n  // set the data rate for the sensor serial port\n  finger.begin(57600);\n  delay(5);\n  if (finger.verifyPassword()) {\n    Serial.println(\"Found fingerprint sensor!\");\n  } \n  else {\n    Serial.println(\"Did not find fingerprint sensor\u00a0:(\");\n    while (1) { delay(1); }\n  }\n\n  finger.getTemplateCount();\n  Serial.print(\"Sensor contains \"); Serial.print(finger.templateCount); Serial.println(\" templates\");\n  Serial.println(\"Waiting for valid finger...\");\n}\n\nvoid loop()                     // run over and over again\n{\n  getFingerprintIDez();\n  delay(50);            //don't ned to run this at full speed.\n}\n\nuint8_t getFingerprintID() {\n  uint8_t p = finger.getImage();\n  switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image taken\");\n      break;\n    case FINGERPRINT_NOFINGER:\n      Serial.println(\"No finger detected\");\n      return p;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      return p;\n    case FINGERPRINT_IMAGEFAIL:\n      Serial.println(\"Imaging error\");\n      return p;\n    default:\n      Serial.println(\"Unknown error\");\n      return p;\n  }\n\n  // OK success!\n\n  p = finger.image2Tz();\n  switch (p) {\n    case FINGERPRINT_OK:\n      Serial.println(\"Image converted\");\n      break;\n    case FINGERPRINT_IMAGEMESS:\n      Serial.println(\"Image too messy\");\n      return p;\n    case FINGERPRINT_PACKETRECIEVEERR:\n      Serial.println(\"Communication error\");\n      return p;\n    case FINGERPRINT_FEATUREFAIL:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    case FINGERPRINT_INVALIDIMAGE:\n      Serial.println(\"Could not find fingerprint features\");\n      return p;\n    default:\n      Serial.println(\"Unknown error\");\n      return p;\n  }\n\n  // OK converted!\n  p = finger.fingerFastSearch();\n  if (p == FINGERPRINT_OK) {\n    Serial.println(\"Found a print match!\");\n  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {\n    Serial.println(\"Communication error\");\n    return p;\n  } else if (p == FINGERPRINT_NOTFOUND) {\n    Serial.println(\"Did not find a match\");\n    return p;\n  } else {\n    Serial.println(\"Unknown error\");\n    return p;\n  }   \n\n  // found a match!\n  Serial.print(\"Found ID #\"); Serial.print(finger.fingerID); \n  Serial.print(\" with confidence of \"); Serial.println(finger.confidence); \n\n  return finger.fingerID;\n}\n\n// returns -1 if failed, otherwise returns ID #\nint getFingerprintIDez() {\n  uint8_t p = finger.getImage();\n\n  if (p\u00a0!= FINGERPRINT_OK)  return -1;\n\n  p = finger.image2Tz();\n  if (p\u00a0!= FINGERPRINT_OK)  return -1;\n\n  p = finger.fingerFastSearch();\n  if (p\u00a0!= FINGERPRINT_OK)  return -1;\n\n  // found a match!\n  Serial.print(\"Found ID #\"); Serial.print(finger.fingerID); \n  Serial.print(\" with confidence of \"); Serial.println(finger.confidence);\n  if(finger.confidence &gt; 80){\n    if (i &gt; 0){\n      myservo.write(80);\n      delay(1000);\n      i = 0;\n      Serial.print(i);\n    }\n    else{\n      myservo.write(160);\n      delay(1000);\n      i = 1;\n      Serial.print(i);\n      }\n\n    }\n\n  return finger.fingerID; \n}\n</code></pre>"},{"location":"Products/Sensors/serial-jpg-camera.html","title":"Serial JPG Camera","text":""},{"location":"Products/Sensors/serial-jpg-camera.html#introduction","title":"Introduction","text":"<p>This Serial Camera is a JPEG color camera module easy for PC&amp; MCU use.It has integrated image processing DSP to generate 320*240 or 640*480 JPEG image without thumbnail information, captured picture will be stored in internal buffer and transferred via UART port. Model: SOD03010S</p> <p> </p>"},{"location":"Products/Sensors/serial-jpg-camera.html#features","title":"Features","text":"<ul> <li>Default baud rate of serial port is 38400</li> <li>640x480/320x240(default) resolution</li> <li>JPEG compressed image without Thumbnail Information</li> <li>5v power supply</li> <li>Controlled by UART protocol</li> </ul>"},{"location":"Products/Sensors/serial-jpg-camera.html#application","title":"Application","text":"<ul> <li>Digital Camara with Wireless SD Card Shield</li> <li>Vidio Monitoring</li> </ul>"},{"location":"Products/Sensors/serial-jpg-camera.html#interface","title":"Interface","text":"<p>The Serial JPG Camera module use RS232 to communicate with PC or Microcontrollers. </p>"},{"location":"Products/Sensors/serial-jpg-camera.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/serial-jpg-camera.html#use-the-serial-jpg-camera-with-pc","title":"Use the Serial JPG Camera with PC","text":"<p>Step 1:Download dedicated serial port debugging tool File:Serial Camera software.zip and install it. Step 2: Connect Serial camera to PC UART Port with a USB2UART module such as the USB convertor. Step 3: Open the tool on PC.Choose the correct COM number of the port you link to the camera ,default bautrate 38400,and then open the port.   { loading=lazy }</p> <p>Step 4: Click the button \"Reset\" to reset the camera.</p> <p>Step 5::Click \"\u5355\u5f20\u62cd\u6444\"(Single capture mode) to take a picture. Of course you can modify the image to 640x480 mode, note that you should click the resume button after you modidy the setting.</p>"},{"location":"Products/Sensors/serial-jpg-camera.html#use-camera-with-arduino-and-wirelss-sd-card-shield","title":"Use Camera with Arduino and wirelss SD card shield","text":"<p>Here we use the Serial JPG Camera to make a Arduino Camera.  First, you need to install a SD card shield to Arduino, to store the pictures with SD card, and a proto shield onto the SD shield, install a button on the protoshield so that when the button pressed, the voltage on A5 would be HIGH and LOW when not pressed.  And then connect the Serial Camera to Arduino: Camera &lt;------------&gt; Arduino TX &lt;-----------&gt; Pin0 RX &lt;------------&gt;Pin1 Vcc &lt;------------&gt;5V GND &lt;------------&gt; GND  </p> <p>2. And then upload the demo code to your Arduino board, note that you may need to take away the RX/TX of camera from Arduino when uploading the code:</p> <p></p> <p>3. Press the button , the Camera will take a picture and store the picture into the SD card. you can adjust the camera lens to change the focal distance, to make the picture more clear.</p> <p></p>"},{"location":"Products/Sensors/serial-jpg-camera.html#resource","title":"Resource","text":"<p>File:SerialCameral DemoCode.zip Note that it may not work ok in Arduino1.01 sometimes, please download Arduino IDE beyond V1.0.2.</p>"},{"location":"Products/Sensors/soil-moisture-sensor.html","title":"Soil Moisture Sensor","text":""},{"location":"Products/Sensors/soil-moisture-sensor.html#description","title":"Description","text":"<p>This Moisture Sensor can be used to detect the moisture of soil or your pet plant's water level, let the plants in your garden reach out for human help. With the Octopus Electronic Bricks interface can very easy to used with the sensor shield V4.0. This sensor uses the two probes to pass current through the soil, and then it reads that resistance to get the moisture level. More water makes the soil conduct electricity more easily (less resistance), while dry soil conducts electricity poorly (more resistance). Module\uff1aSPM32100S</p> <p></p> <p></p>"},{"location":"Products/Sensors/soil-moisture-sensor.html#specification","title":"Specification","text":"Item Value Power supply 3.3v or 5v Output voltage signal 0~4.2v Current 35mA"},{"location":"Products/Sensors/soil-moisture-sensor.html#interface","title":"Interface","text":""},{"location":"Products/Sensors/soil-moisture-sensor.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Sensors/soil-moisture-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/soil-moisture-sensor.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs:  </p> Crowduino Uno Sensor Shield For Arduino Moisture Sensor Get one now Get one now Get one now <p>STEP2 Plug Sensor Shield For Arduino into Crowduino; STEP3 Plug Moisture Sensor into A0 port on the Sensor Shield with cable; STEP4 Connect Crowduino to PC via a Mini USB cable. </p> NOTE If we don't have Sensor Shield For Arduino, We also can directly connect this module to Crowduino Uno as below. Crowduino Uno Moisture Sensor A0 SIG 5V VCC GND GND"},{"location":"Products/Sensors/soil-moisture-sensor.html#software","title":"Software","text":"<p>STEP1 Download MoistureSample.zip STEP2 Configure controller board&amp;communication port On top of the Arduino IDE, click \u201cTools&gt;Board&gt;\u201d and select \u201cArduino Uno\u201d from the available options  Select the COM port that indicates Arduino Uno. Please note that the actual numbers after the \u201cCOM\u201d word will vary from computer to computer, so they could be different from the ones shown in the figure.  STEP3 Load the program in the Arduino IDE  STEP4 Click the  to upload the code to the Crowduino board STEP5 After the program is downloaded, open the Serial Monitor of Arduino IDE, set baud rate to 9600, and the value of soil moisture will be printed STEP6 Put the sensor in different environments, look at the printed value, in different environments, the value will change   1.Put the sensor in the air, and the printed value is 0; 2.Put the sensor in the water to read the value;  3.Touch the sensor with your hand </p>"},{"location":"Products/Sensors/soil-moisture-sensor.html#faqs","title":"FAQs","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Sensors/soil-moisture-sensor.html#resources","title":"Resources","text":"<p>Moisture_Sensor_Eagle_file.zip MoistureSample.zip</p>"},{"location":"Products/Sensors/sound-recorder--isd1760.html","title":"Sound Recorder- ISD1760","text":""},{"location":"Products/Sensors/sound-recorder--isd1760.html#description","title":"Description","text":"<p>The Sound Recorder Module uses the ISD1760 Chip to record and store voice signals. ISD1700 series recording chip is a kind of high integration, high performance chip. This module can be multiple recording, the sampling rate can be set to 6k or 8k by the on-board resistor. There are also some inside sounds to remind the user working state of the module, such as record beginning, record stopping, record erasing , etc. The recording data is stored in the FLASH, without any compression to ensure a good quality. You can easily control this module manually or by Arduino. There are some keys on the module including \u201cREC\u201d,\u201dPLAY\u201d,\u201dEARSE\u201d, you can control the module with these keys. The module can be also controlled by SPI, with an Arduino, you can control the detail function such as the analog path configuration, so you can integrated this module to your sound related applications.</p> <p>Model:SISD1760SR</p> <p></p>"},{"location":"Products/Sensors/sound-recorder--isd1760.html#features","title":"Features","text":"<ul> <li>Size: 52x 55mm</li> <li>Power supply: DC5V</li> <li>The recording time: 6K/75Sec, 8K/60Sec</li> <li>Frequency 6 KHz or 8 KHz</li> <li>Power LED, IC LED</li> <li>Simple operation , not need to SCM or other module work direct</li> <li>Output all PIN For Chip control , Convenient for control</li> </ul>"},{"location":"Products/Sensors/sound-recorder--isd1760.html#usage","title":"Usage","text":"<p>The module detects one-axis rotation with analog signal.</p> <p>1.Hardware Connection</p> <p></p> <p>2.Control the Elecrow Sound Recorder Manually</p> <pre><code>1. Recording-- REC:\n\n    Press and hold the REC key, the LED will lights up. Speak to the onboard MIC, the content\nof speech will be recorded into the ISD1700 voice chip.\n    After recording, release the REC button, the LED will be off, you can press the REC button\nagain to start recording another speech.\n\n2. Playback--- PLAY:\n    There are two ways to control the module playback function: edge-triggered and\nlevel-triggered . (Note: After recording, the inside pointer will remain in the final finished\nrecording segment, that\u2019s to say, the module will play the last segment you recorded.)\n    (1) Edge Trigger\u00a0: Click the PLAY button and then release, the module will playback the\nsegment that the inside pointer pointed. Note that if click again, it will playback this segment\nagain because the inside pointer not moved. The LED flashes until the playback finished.\n    (2) Level Trigger: Press the PLAY button and hold, the module will playback all the segment\nuntil released.\n\n3. Fast forward--- FWD:\n    (1) Before the playback function, tap this button once to move the inside pointer to the next\nsection , double-click this button to move the inside pointer to the next-next section.\n    (2) Click this button during playback to stop playback of the current segment and then play\nthe next paragraph, if you are currently playing the last paragraph , the last paragraph\nplayback t will stop, and begin to playback the first paragraph.\n\n4. ERASE ---ERASE:\n    (1) Single-segment erase operation: can only be effective for the first and last paragraph ,\nwhen the playback pointer is the first or the last paragraph , press this button tol erase the\nfirst or the last paragraph . of cause the inside pointer will jump to the second paragraph\nbefore erasing or penultimate paragraph .\n    (2) All Erase Operation: Press this button more than 3 seconds often chips into the \" All Erase\noperation mode \" while the LED flashes twice, continue pressing this key , LED 7 flashes\noff , then release the button , the chip inside the voice message is All erased.\n\n5. Reset ---RESET:\n    Click this button chip will reset the module. After reset, the inside pointer points to the last\nparagraph, that to say, if Playback pressed, the module will playback the last segment, if REC pressed, the module will begin to record a new segment.\n\n6. Tuning--- VOL:\n    Click this button to adjust the size of the chip output sound . This module outputs maximum\non default. Each VOL clicking will reduce the sound attenuation by 4db until the smallest sound,\ncontinue to click this button , each VOL clicking will increase the sound by 4db ( Note\u00a0: the sound\noutput is the maximum after reset).\n\n7. Passthrough Operations ---FT:\n    Press this button to connect the FT pin with GND , the module will start passthrough mode.\nThe signal on \u201cANAL\u201d will direct pull to the speaker or AUD output. During recording, if you\npress the FT, the voice on \u201cANAL\u201d will also be recorded into the FLASH of ISD1760\n</code></pre>"},{"location":"Products/Sensors/sound-recorder--isd1760.html#resource","title":"Resource","text":"<ul> <li>ISD1760 Datasheet</li> <li>Elecrow Sound Recorder Manual</li> </ul>"},{"location":"Products/Sensors/strain-gauge-module.html","title":"Strain Gauge Module","text":""},{"location":"Products/Sensors/strain-gauge-module.html#description","title":"Description","text":"<p>A strain gaugeis a device used to measure strain on an object. This strain gauge module uses the strain gauge BF350-3AA to detect the strain, with the amplifier and potentiometer on the board to adjust the measured results, users can easily get the result with any microcontroller such as Arduino. This module can be positively used in measuring deformation (for example, across a bridge by loading positions and effects) in engineering and in physical distortions proportional to loading or thermal environments. In the everyday world, this module can be used to applications such as gating a traffic light into a new sequence when a car on a lightly traveled side-street enters a Tee-intersection.</p> <p>Model:SEN77631Y3</p> <p></p> <p></p>"},{"location":"Products/Sensors/strain-gauge-module.html#specification","title":"Specification","text":"<ul> <li>Working Voltage: 5VDC</li> <li>Analog Output 0~3.5VDC</li> <li>Potentiometer to adjust the zero point;</li> <li>Dimension: 32mm X 17mm</li> </ul>"},{"location":"Products/Sensors/strain-gauge-module.html#usage","title":"Usage","text":"<p>This example just a test. 1.Hardware Connection</p> <p></p> <p>2.Copy the below code to you new skecth,then upload it.</p> <pre><code>int sensorPin = A0;    // select the input pin for the Strain Gauge\nint sensorValue = 0;  // variable to store the value coming from the sensor\n\nvoid setup() {\n  // declare the ledPin as an OUTPUT:\n   Serial.begin(9600);  \n}\n\nvoid loop() {\n  // read the value from the sensor:\n  sensorValue = analogRead(sensorPin);    \n  delay(1000);          \n  Serial.print(\"sensor = \" );                       \n  Serial.println(sensorValue);                   \n}\n</code></pre> <p>3.Open the serial monitor, put the sensor on your desk horizontally, and then press it, you can see the output value was change.</p> <p></p>"},{"location":"Products/Sensors/strain-gauge-module.html#resource","title":"Resource","text":"<ul> <li>Demo code</li> <li>Datasheet</li> </ul>"},{"location":"Products/Sensors/tcs3200-colour-sensor-module.html","title":"TCS3200 Colour Sensor Module","text":""},{"location":"Products/Sensors/tcs3200-colour-sensor-module.html#description","title":"Description","text":"<p>TCS3200 chip is designed to detect the color of light incident on it. It has an array of photodiode (a matrix of 8x8, so a total 64 sensors). These photodiodes are covered with four type of filters. Sixteen sensor have RED filter over them thus can measure only the component of red in the incident light. Like wise other sixteen have GREEN filter and sixteen have BLUE filter. As you should know that any visible colour can be broken into three primary colours. So these three type of filtered sensors helps measure the weightage of each of primary colours in incident light. The rest 16 sensors have clear filter.   TCS3200 converts the intensity of incident radiation into frequency. The output waveform is a 50% duty cycle square wave. You can use the timer of a MCU to measure period of pulse and thus get the frequency. The output of TCS3200 is available in single line. So you would ask how we get the intensity of RED,GREEN, BLUE and CLEAR channels Well it has two inputs S2 and S3 that is used to select the sensor whose output need to be made available on the out line.   Model:SEN32001T</p> <p></p>"},{"location":"Products/Sensors/tcs3200-colour-sensor-module.html#specifications","title":"Specifications","text":"<ul> <li>Working voltage: 3V-5V</li> <li>Breakout all IC TCS3200 PINS</li> <li>VCC:3V-5V</li> <li>GND:GND</li> <li>S0-S3, E0,OUT: Communication interface</li> <li>The better distance between the TCS3200 and the tested object is 1cm</li> <li>Dimension: 3cm*2.7cm</li> </ul>"},{"location":"Products/Sensors/tcs3200-colour-sensor-module.html#application","title":"Application","text":"<ul> <li>Color detection solution</li> <li>Color identification device</li> </ul>"},{"location":"Products/Sensors/tcs3200-colour-sensor-module.html#pinout","title":"PinOut","text":"Pin Name I/O DESCRIPTION GND(4) Power supply ground. All voltages are referenced to GND OE(3) I Enable for fo (active low). OUT O Output frequency (fo). S0,S1\uff081\uff0c2\uff09 I Output frequency scaling selection inputs. S2,S3\uff087\uff0c8\uff09 I Photodiode type selection inputs VDD\uff085\uff09 Supply voltage"},{"location":"Products/Sensors/tcs3200-colour-sensor-module.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/tcs3200-colour-sensor-module.html#hardware-connection","title":"Hardware Connection","text":""},{"location":"Products/Sensors/tcs3200-colour-sensor-module.html#s0s1s2s3","title":"S0,S1,S2,S3","text":"<p>To TCS3002D, when choose a color filter, it can allow only one particular color to get through and prevent other color. For example, when choose the red filter, Only red incident light can get through, blue and green will be prevented. So we can get the red light intensity. Similarly ,when choose other filters we can get blue or green light.</p> <p>TCS3002D has four photodiode types. Red , blue, green and clear, reducing the amplitude of the incident light uniformity greatly, so that to increase the accuracy and simplify the optical. When the light project to the TCS3002D we can choose the different type of photodiode by different combinations of S2 and S3. Look at the form as follows.</p> S0 S1 OUTPUT FREQUENCY SCALING (fo) L L Power down L H 2% H L 20% H H 100% <p>TCS3002D can output the frequency of different square wave (occupies emptiescompared 50%),different color and light intensity correspond with different frequency of square wave. There is a relationship between the output and light intensity. The range of the typical output frequency is 2HZ~500KHZ. We can get different scaling factor by different combinations of S0 and S1. Look at the form as follows.</p> S2 S3 PHOTODIODE TYPE L L RED L H BLUE H L Clear (no filter) H H GREEN"},{"location":"Products/Sensors/tcs3200-colour-sensor-module.html#demo-code","title":"Demo Code","text":"<p>1.Copy and paste code below to a new Arduino sketch.</p> <pre><code>int s0=3,s1=4,s2=5,s3=6;\nint out=2;\nint flag=0;\nbyte counter=0;\nbyte countR=0,countG=0,countB=0;\nvoid setup()\n {\n Serial.begin(115200);\n pinMode(s0,OUTPUT);\n pinMode(s1,OUTPUT); \n pinMode(s2,OUTPUT);\n pinMode(s3,OUTPUT);\n\n }\nvoid TCS()\n {\n flag=0;  \n digitalWrite(s1,HIGH);\n digitalWrite(s0,HIGH);\n digitalWrite(s2,LOW);\n digitalWrite(s3,LOW);\n attachInterrupt(0, ISR_INTO, CHANGE);\n timer0_init();\n\n }\nvoid ISR_INTO()\n {\n counter++;\n }\n void timer0_init(void)\n {\n  TCCR2A=0x00;\n  TCCR2B=0x07;   //the clock frequency source 1024 points\n  TCNT2= 100;    //10 ms overflow again\n  TIMSK2 = 0x01; //allow interrupt\n }\n int i=0;\n ISR(TIMER2_OVF_vect)//the timer 2, 10ms interrupt overflow again. Internal overflow interrupt executive function\n{\n    TCNT2=100;\n    flag++;\n if(flag==1)\n  {\n    countR=counter;\n    Serial.print(\"red=\");\n    Serial.println(countR,DEC);\n    digitalWrite(s2,HIGH);\n    digitalWrite(s3,HIGH);\n  }\n  else if(flag==2)\n   {\n    countG=counter;\n    Serial.print(\"green=\");\n    Serial.println(countG,DEC);\n    digitalWrite(s2,LOW);\n    digitalWrite(s3,HIGH);\n   }\n   else if(flag==3)\n    {\n    countB=counter;\n    Serial.print(\"blue=\");\n    Serial.println(countB,DEC);\n    Serial.println(\"\\n\"); \n    digitalWrite(s2,LOW);\n    digitalWrite(s3,LOW);\n\n    }\n    else if(flag==4)\n     {\n     flag=0;\n     }\n       counter=0;\n}\nvoid loop()\n {\n  TCS();\nwhile(1);\n }\n</code></pre> <p>2.Open the serial monitor, you can see the test result:</p> <p></p>"},{"location":"Products/Sensors/tcs3200-colour-sensor-module.html#resource","title":"Resource","text":"<ul> <li>Demo code</li> <li>schematic</li> </ul>"},{"location":"Products/Sensors/temperature-26-humidity-sensor.html","title":"Temperature & Humidity Sensor","text":""},{"location":"Products/Sensors/temperature-26-humidity-sensor.html#introduction","title":"Introduction","text":"<p>This temperature &amp; Humidity sensor is a wired version of the DHT21, in a large plastic body. It is a basic, low-cost digital temperature and humidity sensor. It uses a capacitive humidity sensor and a thermistor to measure the surrounding air, and spits out a digital signal on the data pin (no analog input pins needed). Its fairly simple to use, but requires careful timing to grab data. The only real downside of this sensor is you can only get new data from it once every 2 seconds, so when using our library, sensor readings can be up to 2 seconds old.</p> <p>Model: STH02101S </p>"},{"location":"Products/Sensors/temperature-26-humidity-sensor.html#specification","title":"Specification","text":"<ul> <li>Dimension: 59 * 27 * 13mm </li> <li>3.5-5.5V Input</li> <li>1-1.5mA measuring current</li> <li>Humidity from 0-100% RH</li> <li>-40 - 80 degrees C temperature range</li> <li>+-3% RH accuracy</li> <li>+-0.5 degrees C</li> <li>Model: AM2301</li> <li>Wire length: 25cm</li> </ul>"},{"location":"Products/Sensors/temperature-26-humidity-sensor.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/temperature-26-humidity-sensor.html#hardware","title":"Hardware","text":"<p>This Sensor has 3 wires, connect these wires to your Arduino/Crowduino Project as following:</p> Sensor Arduino/Crowduino Red +5V Black GND Yellow Digital I/O <p></p>"},{"location":"Products/Sensors/temperature-26-humidity-sensor.html#programming","title":"Programming","text":"<p>First intall the Temperature&amp;Hunidity Sensor Library, please refer to here to learn how to install the library. and then open the sketch in ...\\examples\\DHTtester, modify the code as belows:</p> <pre><code>#include \"DHT.h\"\n#define DHTPIN 2    // modify to the pin we connected\n// Uncomment whatever type you're using!\n//#define DHTTYPE DHT11   // DHT 11 \n//#define DHTTYPE DHT22   // DHT 22  (AM2302)\n#define DHTTYPE DHT21   // DHT 21 (AM2301)\n// Connect pin 1 (on the left) of the sensor to +5V\n// Connect pin 2 of the sensor to whatever your DHTPIN is\n// Connect pin 4 (on the right) of the sensor to GROUND\n// Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor\nDHT dht(DHTPIN, DHTTYPE);\nvoid setup() {\n Serial.begin(9600); \n Serial.println(\"DHTxx test!\");\n dht.begin();\n}\nvoid loop() {\n // Reading temperature or humidity takes about 250 milliseconds!\n // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)\n float h = dht.readHumidity();\n float t = dht.readTemperature();\n // check if returns are valid, if they are NaN (not a number) then something went wrong!\n if (isnan(t) || isnan(h)) {\n   Serial.println(\"Failed to read from DHT\");\n } else {\n   Serial.print(\"Humidity: \"); \n   Serial.print(h);\n   Serial.print(\"\u00a0%\\t\");\n   Serial.print(\"Temperature: \"); \n   Serial.print(t);\n   Serial.println(\" *C\");\n }\n}\n</code></pre> <p>Upload the code,then open the serial monitor, you can see the signal outputs. </p>"},{"location":"Products/Sensors/temperature-26-humidity-sensor.html#resources","title":"Resources","text":"<ul> <li>File:AM2301 Datasheet.pdf</li> <li>File:Temperature&amp;Hunidity Sensor Library.zip</li> </ul>"},{"location":"Products/Sensors/temperature-26-humidity-sensor.html#related-link","title":"Related link","text":"<p>Click Capacitive Digital Temperature &amp; Humidity Sensor(AM2301) to buy</p>"},{"location":"Products/Sensors/tiny-adjustable-infrared-sensor-switch.html","title":"Tiny Adjustable Infrared Sensor Switch","text":""},{"location":"Products/Sensors/tiny-adjustable-infrared-sensor-switch.html#introduction","title":"Introduction","text":"<p>This is a new version of infrared distance switch. It has small size and higher ranging, it is able to detect ranging from 3cm to 100cm. It is tiny, easy to use/assemble, and inexpensive. Useful for robotics, interactive media, industrial assembly line, etc. Model: SOD00300S</p> <p></p>"},{"location":"Products/Sensors/tiny-adjustable-infrared-sensor-switch.html#features","title":"Features","text":"<ul> <li>Power supply: 5V</li> <li>Current: 100mA</li> <li>Range: 3-100cm adjustable</li> </ul>"},{"location":"Products/Sensors/tiny-adjustable-infrared-sensor-switch.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/tiny-adjustable-infrared-sensor-switch.html#hardware","title":"Hardware","text":"<p>Connect this sensor to your Arduino/Crowduino digital pins( D2 for example). When there is an object behind this sensor, the output would be low. </p>"},{"location":"Products/Sensors/tiny-adjustable-infrared-sensor-switch.html#programming","title":"Programming","text":"<p>1.Copy the following program to Arduino IDE and upload to your Arduino/Crowduino:</p> <pre><code> void setup()  {\n  Serial.begin(9600);\n  pinMode(2,INPUT);\n }\n void loop()  {\n  while(1)  {\n    delay(500);\n    if(digitalRead(2)==LOW)  {\n      Serial.println(\"object detected.\");\n    }\n    else  {\n      Serial.println(\"no object detected.\");\n    }\n  }\n }\n</code></pre> <p>2.Open the Serial moniter, and set the baudrate to 9600, you will see the output change with the object behind this sensor or not. </p>"},{"location":"Products/Sensors/tiny-rtc.html","title":"Tiny RTC","text":""},{"location":"Products/Sensors/tiny-rtc.html#introduction","title":"Introduction","text":"<p>This tiny RTC module is based on the clock chip DS1307 which supports the I2C protocol. It uses a Lithium cell battery (CR1225). The clock/calendar provides seconds, minutes, hours, day, date,month, and year information. The end of the month date is automatically adjusted for months with fewer than 31 days, including corrections for leap year. The clock operates in either the 24-hour or 12-hour format with AM/PM indicator. Model: SMI00101S</p> <p></p> <p></p>"},{"location":"Products/Sensors/tiny-rtc.html#features","title":"Features","text":"<ul> <li>5V DC supply</li> <li>Programmable Square-Wave output signal</li> <li>Automatic Power-Fail detect and switch circuitry</li> <li>Consumes less than 500nA in Battery-Backup Mode with Oscillator Running</li> <li>56-Byte, Battery-Backed, Nonvolatile (NV)RAM for data storage</li> </ul>"},{"location":"Products/Sensors/tiny-rtc.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/tiny-rtc.html#hardware","title":"Hardware","text":"<p>The RTC module use the I2C bus to communicate with Arduino&amp;Crowduinom. Arduino has one I2C port with A4 and A5, connect the RTC module to Arduino as below: </p>"},{"location":"Products/Sensors/tiny-rtc.html#programming","title":"Programming","text":"<p>1.Download the library File:RTC Library</p> <p>2.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries.</p> <p>3.Open the code directly by the path:File -&gt; Example -&gt;RTC.</p> <pre><code>#include &lt;Wire.h&gt;\n#include \"RTClib.h\"\nRTC_DS1307 RTC;\n\nvoid setup () {\n    Serial.begin(9600);\n    Wire.begin();\n    RTC.begin();\n  if (! RTC.isrunning()) {\n    Serial.println(\"RTC is NOT running!\");\n    // following line sets the RTC to the date &amp; time this sketch was compiled\n    RTC.adjust(DateTime(__DATE__, __TIME__));\n  }\n}\nvoid loop () {\n    DateTime now = RTC.now(); \n    Serial.print(now.year(), DEC);\n    Serial.print('/');\n    Serial.print(now.month(), DEC);\n    Serial.print('/');\n    Serial.print(now.day(), DEC);\n    Serial.print(' ');\n    Serial.print(now.hour(), DEC);\n    Serial.print(':');\n    Serial.print(now.minute(), DEC);\n    Serial.print(':');\n    Serial.print(now.second(), DEC);\n    Serial.println(); \n    delay(1000);\n}\n</code></pre> <p>4.Upload the code,then open the serial monitor to see the current time.</p>"},{"location":"Products/Sensors/tiny-rtc.html#resource","title":"Resource","text":"<ul> <li>RTC Program</li> <li>Click Tiny RTC For Arduino to buy.</li> </ul>"},{"location":"Products/Sensors/triple-axis-magnetometer-breakout.html","title":"Triple Axis Magnetometer Breakout","text":""},{"location":"Products/Sensors/triple-axis-magnetometer-breakout.html#introduction","title":"Introduction","text":"<p>Description: This is a breakout board for Honeywell's HMC5883L, a 3-axis digital compass, provides compass heading accuracy up to 1\u00b0 to 2\u00b0. Communication with the HMC5883L is simple and all done through an I2C interface. An Arduino Demo is given out to help users learn how to use this sensor. The breakout board includes the HMC5883L sensor and all filtering capacitors as shown. This module also includes a DC regular for power supply requirement. Hence user can connect any 3.3V to 6V DC power supply. Model: SPS05883S</p> <p></p>"},{"location":"Products/Sensors/triple-axis-magnetometer-breakout.html#features","title":"Features","text":"<ul> <li>Simple I2C interface.</li> <li>3.3~6V supply range.</li> <li>Low current draw.</li> <li>Dimensions: 18 * 16 * 1.6mm.</li> </ul>"},{"location":"Products/Sensors/triple-axis-magnetometer-breakout.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/triple-axis-magnetometer-breakout.html#hardware","title":"Hardware","text":"<p>Connect this triple axis magnetometer breadkout module to your Arduino/Crowduino I2C wires(SDA:A4, D18;SCL:A5, D19)as below: </p>"},{"location":"Products/Sensors/triple-axis-magnetometer-breakout.html#programming","title":"Programming","text":"<p>First download the HMC5883L library to your PC, please refer to the how to install library. you can begin your user application program as below:</p> <pre><code>// Reference the I2C Library\n#include &lt;Wire.h&gt;\n// Reference the HMC5883L Compass Library\n#include &lt;HMC5883L.h&gt;\n\n// Store our compass as a variable.\nHMC5883L compass;\n// Record any errors that may occur in the compass.\nint error = 0;\n\n// Out setup routine, here we will configure the microcontroller and compass.\nvoid setup()\n{\n  // Initialize the serial port.\n  Serial.begin(9600);\n\n  Serial.println(\"Starting the I2C interface.\");\n  Wire.begin(); // Start the I2C interface.\n\n  Serial.println(\"Constructing new HMC5883L\");\n\n  Serial.println(\"Setting scale to +/- 1.3 Ga\");\n  error = compass.setScale(1.3); // Set the scale of the compass.\n  if(error\u00a0!= 0) // If there is an error, print it out.\n    Serial.println(compass.getErrorText(error));\n\n  Serial.println(\"Setting measurement mode to continous.\");\n  error = compass.setMeasurementMode(MEASUREMENT_CONTINUOUS); // Set the measurement mode to Continuous\n  if(error\u00a0!= 0) // If there is an error, print it out.\n    Serial.println(compass.getErrorText(error));\n}\n\n// Our main program loop.\nvoid loop()\n{\n  // Retrive the raw values from the compass (not scaled).\n  MagnetometerRaw raw = compass.readRawAxis();\n  // Retrived the scaled values from the compass (scaled to the configured scale).\n  MagnetometerScaled scaled = compass.readScaledAxis();\n\n  // Values are accessed like so:\n  int MilliGauss_OnThe_XAxis = scaled.XAxis;// (or YAxis, or ZAxis)\n\n  // Calculate heading when the magnetometer is level, then correct for signs of axis.\n  float heading = atan2(scaled.YAxis, scaled.XAxis);\n  float declinationAngle = -0.0457;\n  heading += declinationAngle;\n\n  // Correct for when signs are reversed.\n  if(heading &lt; 0)\n    heading += 2*PI;\n\n  // Check for wrap due to addition of declination.\n  if(heading &gt; 2*PI)\n    heading -= 2*PI;\n\n  // Convert radians to degrees for readability.\n  float headingDegrees = heading * 180/M_PI; \n\n  // Output the data via the serial port.\n  Output(raw, scaled, heading, headingDegrees);\n\n  // Normally we would delay the application by 66ms to allow the loop\n  // to run at 15Hz (default bandwidth for the HMC5883L).\n  // However since we have a long serial out (104ms at 9600) we will let\n  // it run at its natural speed.\n  delay(66);//of course it can be delayed longer.\n}\n\n// Output the data down the serial port.\nvoid Output(MagnetometerRaw raw, MagnetometerScaled scaled, float heading, float headingDegrees)\n{\n   Serial.print(\"Raw:\\t\");\n   Serial.print(raw.XAxis);\n   Serial.print(\"   \");   \n   Serial.print(raw.YAxis);\n   Serial.print(\"   \");   \n   Serial.print(raw.ZAxis);\n   Serial.print(\"   \\tScaled:\\t\");\n\n   Serial.print(scaled.XAxis);\n   Serial.print(\"   \");   \n   Serial.print(scaled.YAxis);\n   Serial.print(\"   \");   \n   Serial.print(scaled.ZAxis);\n\n   Serial.print(\"   \\tHeading:\\t\");\n   Serial.print(heading);\n   Serial.print(\" Radians   \\t\");\n   Serial.print(headingDegrees);\n   Serial.println(\" Degrees   \\t\");\n}\n</code></pre> <p>Open the serial monitor, and set the baudrate to 9600, you will see the output change with the sensor orientation. </p>"},{"location":"Products/Sensors/triple-axis-magnetometer-breakout.html#resource","title":"Resource","text":"<p>HMC5883L datasheet File:Compass breakout demo code for arduino 10.zip</p>"},{"location":"Products/Sensors/ultrasonic-ranging-sensor-module.html","title":"Ultrasonic Ranging Sensor Module","text":""},{"location":"Products/Sensors/ultrasonic-ranging-sensor-module.html#introduction","title":"Introduction","text":"<p>Description: This HC-SR04 Ultrasonic Ranging Sensor is a non-contact distance measurement module with stable performance and high ranging accuracy. with the inexpensive price, The measurment range if it can be upto 5M, which would be helpful for your project such as robotic Obstacle Avoidance and so on.  Model: SOD00201S</p> <p> </p> <p></p>"},{"location":"Products/Sensors/ultrasonic-ranging-sensor-module.html#features","title":"Features","text":"<ul> <li>Power supply: 5V DC.</li> <li>Effectual angle: &lt;15\u00b0.</li> <li>Ranging distance: 25cm \u2013 500 cm.</li> <li>Resolution: 1 cm.</li> <li>Ultrasonic Frequency: 40k Hz.</li> </ul>"},{"location":"Products/Sensors/ultrasonic-ranging-sensor-module.html#usage","title":"Usage","text":"<p>  A short ultrasonic pulse is transmitted at the time 0, reflected by an object. The senor receives this signal and converts it to an electric signal. The next pulse can be transmitted when the echo is faded away. This time period is called cycle period. The recommend cycle period should be no less than 50ms. If a 10\u03bcs width trigger pulse is sent to the signal pin, the Ultrasonic module will output eight 40kHz ultrasonic signal and detect the echo back. The measured distance is proportional to the echo pulse width and can be calculated by the formula above. If no obstacle is detected, the output pin will give a 38ms high level signal.</p>"},{"location":"Products/Sensors/ultrasonic-ranging-sensor-module.html#hardware","title":"Hardware","text":"<p>Connect this triple axis magnetometer breadkout module to your Arduino/Crowduino I2C wires(SDA:A4, D18;SCL:A5, D19)as below: </p>"},{"location":"Products/Sensors/ultrasonic-ranging-sensor-module.html#programming","title":"Programming","text":"<p>Copy the following program to Arduino IDE and upload to your Arduino/Crowduino, you can also download the example in the Resource.</p> <pre><code>#include \"Ultrasonic.h\"\n\nUltrasonic ultrasonic(12,13);\nvoid setup() {\nSerial.begin(9600);\n}\n\nvoid loop()\n{\nSerial.println(ultrasonic.Ranging(CM));\ndelay(100);\n}\n</code></pre> <p>Open the Sscom32 terminal or the Serial moniter , and set the baudrate to 9600, you will see the output changing with the object distance.  </p>"},{"location":"Products/Sensors/ultrasonic-ranging-sensor-module.html#resource","title":"Resource","text":"<p>File:Ultrosonic ranger module Library and demo code for arduino 10.zip</p>"},{"location":"Products/Sensors/uv-sensor-ml8511.html","title":"UV Sensor ML8511","text":""},{"location":"Products/Sensors/uv-sensor-ml8511.html#description","title":"Description","text":"<p>The ML8511 UV sensor is an easy to use ultraviolet light sensor. The MP8511 UV (ultraviolet) Sensor works by outputing an analog signal in relation to the amount of UV light that\u2019s detected. This breakout can be very handy in creating devices that warn the user of sunburn or detect the UV index as it relates to weather conditions. This sensor detects 280-390nm light most effectively. This is categorized as part of the UVB (burning rays) spectrum and most of the UVA (tanning rays) spectrum. It outputs a analog voltage that is linearly related to the measured UV intensity (mW/cm2). If your microcontroller can do an analog to digital signal conversion then you can detect the level of UV!</p> <p>Model: SEN8511UV</p> <p></p> <p></p>"},{"location":"Products/Sensors/uv-sensor-ml8511.html#usage","title":"Usage","text":"<p>The ML8511 sensor is very easy to use. It outputs a analog voltage that is linearly related to the measured UV intensity (mW/cm2). If your microcontroller can do an analog to voltage conversion, then you can detect the level of UV.</p> <p>1.Hardware connection</p> <p></p> <p>2.Copy and paste code below to a new Arduino sketch.</p> <pre><code>/* \nMP8511 UV Sensor Read Example\nThe MP8511 UV Sensor outputs an analog signal in relation to the amount of UV light it detects.\nThis sensor detects 280-390nm light most effectively. This is categorized as part of the UVB (burning rays)\nspectrum and most of the UVA (tanning rays) spectrum.\nThere's lots of good UV radiation reading out there: \n*/\n//Hardware pin definitions\nint UVOUT = A5; //Output from the sensor\nint REF_3V3 = A4; //3.3V power on the Arduino board\nvoid setup()\n{\n Serial.begin(9600);\n pinMode(UVOUT, INPUT);\n pinMode(REF_3V3, INPUT);\n Serial.println(\"MP8511 example\");\n}\nvoid loop()\n{\n int uvLevel = averageAnalogRead(UVOUT);\n int refLevel = averageAnalogRead(REF_3V3);\n //Use the 3.3V power pin as a reference to get a very accurate output value from sensor\n float outputVoltage = 3.3 / refLevel * uvLevel;  \n float uvIntensity = mapfloat(outputVoltage, 0.99, 2.9, 0.0, 15.0);\n Serial.print(\"MP8511 output: \");\n Serial.print(uvLevel);\n Serial.print(\" MP8511 voltage: \");\n Serial.print(outputVoltage);\n Serial.print(\" UV Intensity (mW/cm^2): \");\n Serial.print(uvIntensity);  \n Serial.println();  \n delay(100);\n}\n//Takes an average of readings on a given pin\n//Returns the average\nint averageAnalogRead(int pinToRead)\n{\n  byte numberOfReadings = 8;\n  unsigned int runningValue = 0; \n  for(int x = 0\u00a0; x &lt; numberOfReadings\u00a0; x++)\n    runningValue += analogRead(pinToRead);\n  runningValue /= numberOfReadings;\n  return(runningValue);  \n}\n//The Arduino Map function but for floats\nfloat mapfloat(float x, float in_min, float in_max, float out_min, float out_max)\n{\n  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n}\n</code></pre> <p>3.Up;oad the code,then open the Serial Monitor to read the data.</p> <p></p>"},{"location":"Products/Sensors/uv-sensor-ml8511.html#resource","title":"Resource","text":"<ul> <li>UV Sensor Program</li> </ul>"},{"location":"Products/Sensors/uv-sensor-module-uvm30a.html","title":"UV Sensor Module-UVM30A","text":""},{"location":"Products/Sensors/uv-sensor-module-uvm30a.html#description","title":"Description","text":"<p>The UV Sensor is used for detecting the intensity of incident ultraviolet(UV) radiation. This form of electromagnetic radiation has shorter wavelengths than visible radiation. This module is based on the sensor UVM-30A, which has a wide spectral range of 200nm-370nm. The module outputs electrical signal which varies with the UV intensity, which gives your suggestion if it is a good idea to beach today. Model:SEUV30M</p> <p></p>"},{"location":"Products/Sensors/uv-sensor-module-uvm30a.html#specification","title":"Specification","text":"<ul> <li>Working voltage: DC 3~5V</li> <li>Curent: 0.06mA(Standard)/0.1mA(Max)</li> <li>Response wavelength: 200~370nm</li> <li>Working temperature: -20~85'C</li> </ul>"},{"location":"Products/Sensors/uv-sensor-module-uvm30a.html#usage","title":"Usage","text":""},{"location":"Products/Sensors/uv-sensor-module-uvm30a.html#hardware-installation","title":"Hardware Installation","text":""},{"location":"Products/Sensors/uv-sensor-module-uvm30a.html#resources","title":"Resources","text":""},{"location":"Products/Sensors/weight-sensor-amplifier-hx711.html","title":"Weight Sensor Amplifier-HX711","text":""},{"location":"Products/Sensors/weight-sensor-amplifier-hx711.html#description","title":"Description","text":"<p>This Weight Sensor amplifier is based on HX711,which consist of an amplifier and a precision 24-bit analog-to-digital convertor designed for weigh scale and industrial control applications to interface directly with a bridge sensor. Compared with other chips, HX711 not only has a few basic function, also contains high integration, fast response, immunity, and other features. The chip lowed the cost of the electronic scale, at the same time, improving the performance and reliability. The input interface of this weight sensor module is used sensor interface, which is compatible with Arduino I/O ports. The output adopts compact terminal that makes weight sensor module easier to connect the weight sensor. It's the best choose for electronic enthusiast to do some tiny home scale.</p> <p>Model: SHX711O </p> <p></p>"},{"location":"Products/Sensors/weight-sensor-amplifier-hx711.html#schematic","title":"Schematic","text":""},{"location":"Products/Sensors/weight-sensor-amplifier-hx711.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of setting the time and reading it out.</p> <p>1.Hardware connection</p> <p> </p> <p>2.Download the library File:Hx711 Library</p> <p>3.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;hx711-&gt;SerialScale.</p> <pre><code>// Hx711.DOUT - pin #A1\n// Hx711.SCK - pin #A0\n\n#include \"hx711.h\"\n\nHx711 scale(A1, A0);\n\nvoid setup() {\n\n  Serial.begin(9600);\n\n}\n\nvoid loop() {\n\n  Serial.print(scale.getGram(), 1);\n  Serial.println(\" g\");\n\n  delay(200);\n}\n</code></pre> <p>5.Upload the code,then open the serial monitor to see the result.</p> <p></p>"},{"location":"Products/Sensors/weight-sensor-amplifier-hx711.html#resource","title":"Resource","text":"<ul> <li>Demo code</li> <li>HX711 datasheet</li> </ul>"},{"location":"Products/Sensors/weight-sensor-scales-kit--20kg.html","title":"Weight Sensor Scales Kit- 20KG","text":""},{"location":"Products/Sensors/weight-sensor-scales-kit--20kg.html#description","title":"Description","text":"<p>This Kit includes a weight sensor that has a capacity of 20kg, and the mechanic parts to install the weight sensor, ready for an electronic scale application. As you know, the most difficult parts in developing such an electronic scales is the mechanic parts and A/D parts, we help you solving the whole problem by providing you all the mechanic parts and the Data acquisition parts. You can collect the data with any microcontroller include Arduino board. The Weight sensor outputs differential signal, with the Green wire (+) and White wire (-).</p> <p>Model:SEN20KGO</p> <p></p>"},{"location":"Products/Sensors/weight-sensor-scales-kit--20kg.html#features","title":"Features","text":"<ul> <li>Dimension: 170*115 mm</li> <li>Working Voltage: 3.3*10 V</li> <li>Max Output Voltage(mv): Power Voltage*2.0; for example, when power by 5V voltage, the full scale(20 Kg) output voltage is 10 mv</li> </ul>"},{"location":"Products/Sensors/weight-sensor-scales-kit--20kg.html#usage","title":"Usage","text":"<p>The following sketch demonstrates a simple application of setting the time and reading it out.</p> <p>1.Hardware connection</p> <p> </p> <p>2.Download the library File:Hx711 Library</p> <p>3.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries.</p> <p>4.Open the code directly by the path:File -&gt; Example -&gt;hx711-&gt;SerialScale.</p> <pre><code>// Hx711.DOUT - pin #A1\n// Hx711.SCK - pin #A0\n\n#include \"hx711.h\"\n\nHx711 scale(A1, A0);\n\nvoid setup() {\n\n  Serial.begin(9600);\n\n}\n\nvoid loop() {\n\n  Serial.print(scale.getGram(), 1);\n  Serial.println(\" g\");\n\n  delay(200);\n}\n</code></pre> <p>5.Upload the code,then open the serial monitor to see the result.</p> <p></p>"},{"location":"Products/Sensors/weight-sensor-scales-kit--20kg.html#resource","title":"Resource","text":"<ul> <li>Demo code</li> <li>HX711 datasheet</li> </ul>"},{"location":"Products/Shield/282727-tft-touch-shield.html","title":"2.8'' TFT Touch Shield","text":""},{"location":"Products/Shield/282727-tft-touch-shield.html#introduction","title":"Introduction","text":"<p>This TFT Touch Shield is Arduino/Crowduino/Arduino Mega compatible, it integrated a 2.8\u201d TFT Display and a resistive touch panel, to make this shield suitable for handheld devices. This TFT Touch Shield has 240x320 pixels with individual pixel control, it uses the ILI9341 driver and SPI interface to communicate with controllers such as Arduino, saving you much Arduino pins for other usages in your projects. Besides, A SD card socket is also added to help you develop applications that data storage is needed such as digital picture album.  </p> <p>Model: AMS320240TFT </p> <p></p>"},{"location":"Products/Shield/282727-tft-touch-shield.html#features","title":"Features","text":"<ul> <li>LCD Driver: ILI9341</li> <li>Backlight controllable</li> <li>65535 rich colors</li> <li>SPI Communication</li> <li>Voltage:4.8~5.5 V</li> <li>Max Current: 200 mA</li> <li>Resolution:320x 240</li> <li>LCD Panel Size: 2.8\u201d</li> <li>Touch Mode: Resistance</li> <li>Dimensions(mm):72.0(L)x14.5(W)x55.0(H)</li> </ul>"},{"location":"Products/Shield/282727-tft-touch-shield.html#cautions","title":"Cautions","text":"<ul> <li>Please Be careful to deposit the fragile scree,pressing too hard on the screen might cause display damage.</li> </ul>"},{"location":"Products/Shield/282727-tft-touch-shield.html#pins-usage-on-arduino","title":"Pins usage on Arduino","text":"Function Pin Name Arduino pin Description TFT Screen Control TF_CS D4 SD card select input TFT_CS D5 TFT chip select input TFT_D/C D6 TFT Data/Command control BACKLIGHT D7 TFT backlight control pin TFT SPI Interface SPI_MOSI D11 SPI data pin MOSI SPI_MISO D12 SPI data pin MISO SPI_SCK D13 SPI Clock Pin SCK Touch Interface ADC0 A0 Touch Screen Y- input ADC1 A1 Touch Screen X- input ADC2 A2 Touch Screen Y+ input ADC3 A3 Touch Screen X+ input"},{"location":"Products/Shield/282727-tft-touch-shield.html#usage","title":"Usage","text":""},{"location":"Products/Shield/282727-tft-touch-shield.html#hardware-connection","title":"Hardware connection","text":"<p>Plug 2.8 TFT Touch Shileld into Arduino or Crowduino.  Connect Arduino to PC via a USB cable. </p>"},{"location":"Products/Shield/282727-tft-touch-shield.html#program","title":"Program","text":"<p>1.Please download 2.8'TFT Program Files.zip</p> <p>2.Install the library to the Arduino IDE library to ...\\Arduino\\libraries, but please note that if you downloaded the library in .zip file, you should delete the \"-master\" in the library name when you unzip it, as the \"-\" can not be recognized in the Arduino Library.</p>"},{"location":"Products/Shield/282727-tft-touch-shield.html#draw-circle","title":"Draw Circle","text":"<p>1.Open the code directly by the path:File -&gt; Examples -&gt;TFT_Touch_Shield_v2-&gt;drawCircle.</p> <pre><code>#include &lt;stdint.h&gt;\n#include &lt;TFTv2.h&gt;\n#include &lt;SPI.h&gt;\n\nvoid setup()\n{\n    TFT_BL_ON;                                          //turn on the background light \n\n    Tft.TFTinit();                                      //init TFT library             \n\n    Tft.drawCircle(100, 100, 30,YELLOW);                //center: (100, 100), r = 30 ,color\u00a0: YELLOW              \n\n    Tft.drawCircle(100, 200, 40,CYAN);                  //center: (100, 200), r = 10 ,color\u00a0: CYAN  \n\n    Tft.fillCircle(200, 100, 30,RED);                   //center: (200, 100), r = 30 ,color\u00a0: RED    \n\n    Tft.fillCircle(200, 200, 30,BLUE);                  //center: (200, 200), r = 30 ,color\u00a0: BLUE                 \n}\n\nvoid loop()\n{\n\n}\n</code></pre> <p>2.Upload the code,you will see that. </p>"},{"location":"Products/Shield/282727-tft-touch-shield.html#touch-screen","title":"Touch Screen","text":"<p>1.Open the code directly by the path:File -&gt; Examples -&gt;Touch_Screen_Driver-&gt;touchScreen.</p> <pre><code>#include &lt;stdint.h&gt;\n#include &lt;SeeedTouchScreen.h&gt; \n\n#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) // mega\n#define YP A2   // must be an analog pin, use \"An\" notation!\n#define XM A1   // must be an analog pin, use \"An\" notation!\n#define YM 54   // can be a digital pin, this is A0\n#define XP 57   // can be a digital pin, this is A3 \n\n#elif defined(__AVR_ATmega32U4__) // leonardo\n#define YP A2   // must be an analog pin, use \"An\" notation!\n#define XM A1   // must be an analog pin, use \"An\" notation!\n#define YM 18   // can be a digital pin, this is A0\n#define XP 21   // can be a digital pin, this is A3 \n\n#else //168, 328, something else\n#define YP A2   // must be an analog pin, use \"An\" notation!\n#define XM A1   // must be an analog pin, use \"An\" notation!\n#define YM 14   // can be a digital pin, this is A0\n#define XP 17   // can be a digital pin, this is A3 \n\n#endif\n\n//Measured ADC values for (0,0) and (210-1,320-1)\n//TS_MINX corresponds to ADC value when X = 0\n//TS_MINY corresponds to ADC value when Y = 0\n//TS_MAXX corresponds to ADC value when X = 240 -1\n//TS_MAXY corresponds to ADC value when Y = 320 -1\n\n#define TS_MINX 116*2\n#define TS_MAXX 890*2\n#define TS_MINY 83*2\n#define TS_MAXY 913*2\n\n\n// For better pressure precision, we need to know the resistance\n// between X+ and X- Use any multimeter to read it\n// The 2.8\" TFT Touch shield has 300 ohms across the X plate\nTouchScreen ts = TouchScreen(XP, YP, XM, YM);\n\nvoid setup(void) {\n  Serial.begin(9600);\n}\n\nvoid loop(void) {\n  // a point object holds x y and z coordinates\n  Point p = ts.getPoint();\n\n  if (p.z &gt; __PRESURE) {\n     Serial.print(\"Raw X = \"); Serial.print(p.x);\n     Serial.print(\"\\tRaw Y = \"); Serial.print(p.y);\n     Serial.print(\"\\tPressure = \"); Serial.println(p.z);\n  }\n\n\n  p.x = map(p.x, TS_MINX, TS_MAXX, 0, 240);\n  p.y = map(p.y, TS_MINY, TS_MAXY, 0, 320);\n\n  // we have some minimum pressure we consider 'valid'\n  // pressure of 0 means no pressing!\n  if (p.z &gt; __PRESURE) {\n     Serial.print(\"X = \"); Serial.print(p.x);\n     Serial.print(\"\\tY = \"); Serial.print(p.y);\n     Serial.print(\"\\tPressure = \"); Serial.println(p.z);\n  }\n\n  delay(100);\n}\n</code></pre> <p>2.Upload the code,then open the serial monitor and touch the screen,you will see some information. </p>"},{"location":"Products/Shield/282727-tft-touch-shield.html#resources","title":"Resources","text":"<p>This TFT Shield uses the ILI9341 Driver IC, thanks to the Seeed TFT library, It works OK on this TFT Touch Shiled:</p> <ul> <li>2.8'TFT Program Files.zip</li> <li>SeeedTFTV2.0 Library for Arduino 1.0</li> <li>SeeedTouchScreen Library for Arduino 1.0</li> </ul>"},{"location":"Products/Shield/4-channel-i2c-motor-shield-v11.html","title":"4 Channel I2C Motor Shield v1.1","text":""},{"location":"Products/Shield/4-channel-i2c-motor-shield-v11.html#introduction","title":"Introduction","text":"<p>For Arduino beginners, there will always be problems when driving DC motors and servos. If you want to drive 4 motors and 2 servos, you need to build a platform to control their speed and direction of rotation. When the motor and steering gear are running, the current is large, and you will need a module to help you control the large current, such as a micro controller like Arduino. Therefore, Elecrow has designed the driver board you need in this type of application. This module will help users solve the problem of high-current drive and control of the motor. You only need to plug it into the Arduino or Crowduino. This module is connected to the Arduino or Crowduino through the I2C bus. Start your application and you can control 4 channels through the I2C bus. Motor. This driver board is designed based on the MOSFET H-bridge integrated circuit TB6612FNG, and its efficiency is higher than that of the transistor H-bridge driver. Compared with the L293D's average drive current of 600 mA per channel and 1.2 A pulse peak current, its output load capacity has doubled. Compared with the L298N's heat dissipation and peripheral diode freewheeling circuit, it does not require an external heat sink, and the peripheral circuit is simple. Only an external power supply filter capacitor can directly drive the motor, which is beneficial to reduce the system size. For the PWM signal, it supports frequencies up to 100 kHz, which also has greater advantages over the 5 kHz and 40 kHz of the above two chips.  </p> Motor Drive Control: <p>a. PCA9685 outputs PWM signals to control two TB6612FNG motor drive circuits, and then control 4 channels motors respectively;  </p> <p>b. Motor control mode: forward/reverse/brake/stop.</p> Servo Control: <p>The servo plug is inserted into the socket on the 4 Channel I2C Motor Shield board, and the Arduino or Crowduino controls the servo to work through D8 and D9. </p> <p>Model: ARS27361T</p> <p></p>"},{"location":"Products/Shield/4-channel-i2c-motor-shield-v11.html#features","title":"Features","text":"<ul> <li>Logic control voltage: 2.7~5.5V</li> <li>Motor power supply voltage: 6~15V</li> <li>Single channel continuous drive output current: 1.2 A</li> <li>Starting peak drive current: 2A/3.2 A (continuous pulse/single pulse)</li> <li>Driving current Io: 2A</li> <li>Maximum power consumption: 18W</li> <li>Working temperature: -20 degrees Celsius to +85 degrees Celsius</li> <li>Drive type: dual high-power H-bridge drive</li> </ul>"},{"location":"Products/Shield/4-channel-i2c-motor-shield-v11.html#specification","title":"Specification","text":""},{"location":"Products/Shield/4-channel-i2c-motor-shield-v11.html#interface-description","title":"Interface Description","text":"<p> Motor power supply voltage: ------&gt; External power supply, which may be 6~13.5V depending on the motor you use. Power indicator: ------&gt; LED indicator of external power supply. Motor driver: ------&gt; TB6612FNG high-power H-bridge driver. Drive ports: ------&gt; 4 motor ports and 2 servo ports.  </p>"},{"location":"Products/Shield/4-channel-i2c-motor-shield-v11.html#usage","title":"Usage","text":"<p>Copy the library file \"Adafruit_MotorShield\" in the \"4 Channel I2C Motor Shield-V1.1-Example\" folder to the library directory under the Arduino IDE installation directory. For example, our directory is: C:\\Program Files (x86) \\Arduino\\libraries, as shown in the figure:</p> <p></p> <ol> <li> <p>Motor control</p> <ol> <li> <p>Insert the 4 Channel I2C Motor Shield-V1.1 board into the Arduino motherboard (Crowduino UNO motherboard), connect the DC interface of the Arduino motherboard to a 12V power supply, and connect the Mini USB data cable to the USB port of the Arduino motherboard, and then connect it On the computer, as shown in the figure: </p> </li> <li> <p>Open the 4 Channel I2C Motor Shield-V1.1-Example\\DCMotorTest\\DCMotorTest.ino program and download it to the Arduino.</p> </li> <li> <p>Then connect the micro motor to the M1, M2, M3, and M4 terminals on the 4 Channel I2C Motor Shield-V1.1 board (note: each operation must be powered off before connecting the motor), as shown in the figure, After connecting the motor, turn on the electricity and observe the phenomenon.   </p> </li> <li> <p>Observe that each interface motor accelerates forward for a few seconds and accelerates reverse for a few seconds, then the DC motor drives normally.</p> <pre><code>#include &lt;Wire.h&gt;\n#include &lt;Adafruit_MotorShield.h&gt;\n#include \"utility/Adafruit_MS_PWMServoDriver.h\"\n\n// Create the motor shield object with the default I2C address\nAdafruit_MotorShield AFMS = Adafruit_MotorShield(0x60); \n// Or, create it with a different I2C address (say for stacking)\n// Adafruit_MotorShield AFMS = Adafruit_MotorShield(0x61); \n\n// Select which 'port' M1, M2, M3 or M4. In this case, M1\nAdafruit_DCMotor *myMotor = AFMS.getMotor(1);\nAdafruit_DCMotor *myMotor2 = AFMS.getMotor(2);\nAdafruit_DCMotor *myMotor3 = AFMS.getMotor(3);\nAdafruit_DCMotor *myMotor4 = AFMS.getMotor(4);\n\n// You can also make another motor on port M2\n//Adafruit_DCMotor *myOtherMotor = AFMS.getMotor(2);\n\nvoid setup() {\n  Serial.begin(9600);           // set up Serial library at 9600 bps\n  Serial.println(\"Adafruit Motorshield v2 - DC Motor test!\");\n\n  AFMS.begin();  // create with the default frequency 1.6KHz\n  //AFMS.begin(1000);  // OR with a different frequency, say 1KHz\n\n  // Set the speed to start, from 0 (off) to 255 (max speed)\n  myMotor-&gt;setSpeed(150);\n  myMotor-&gt;run(FORWARD);\n  // turn on motor\n  myMotor-&gt;run(RELEASE);\n\n  myMotor2-&gt;setSpeed(150);\n  myMotor2-&gt;run(FORWARD);\n  // turn on motor2\n  myMotor2-&gt;run(RELEASE);\n\n  myMotor3-&gt;setSpeed(150);\n  myMotor3-&gt;run(FORWARD);\n  // turn on motor3\n  myMotor3-&gt;run(RELEASE);\n\n  myMotor4-&gt;setSpeed(150);\n  myMotor4-&gt;run(FORWARD);\n  // turn on motor4\n  myMotor4-&gt;run(RELEASE);\n}\n\nvoid loop() {\n  uint8_t i;\n\n  Serial.print(\"tick\");\n\n  myMotor-&gt;run(FORWARD);\n  myMotor2-&gt;run(FORWARD);\n    myMotor3-&gt;run(FORWARD);\n    myMotor4-&gt;run(FORWARD);\n  for (i=0; i&lt;255; i++) {\n    myMotor-&gt;setSpeed(i);  \n    myMotor2-&gt;setSpeed(i);  \n    myMotor3-&gt;setSpeed(i);  \n    myMotor4-&gt;setSpeed(i);  \n    delay(10);\n  }\n  for (i=255; i!=0; i--) {\n    myMotor-&gt;setSpeed(i);  \n    myMotor2-&gt;setSpeed(i);  \n    myMotor3-&gt;setSpeed(i);  \n    myMotor4-&gt;setSpeed(i);  \n    delay(10);\n  }\n\n  Serial.print(\"tock\");\n\n  myMotor-&gt;run(BACKWARD);\n  myMotor2-&gt;run(BACKWARD);\n  myMotor3-&gt;run(BACKWARD);\n  myMotor4-&gt;run(BACKWARD);\n  for (i=0; i&lt;255; i++) {\n    myMotor-&gt;setSpeed(i); \n    myMotor2-&gt;setSpeed(i);  \n    myMotor3-&gt;setSpeed(i);  \n    myMotor4-&gt;setSpeed(i);   \n    delay(10);\n  }\n  for (i=255; i!=0; i--) {\n    myMotor-&gt;setSpeed(i);  \n    myMotor2-&gt;setSpeed(i);  \n    myMotor3-&gt;setSpeed(i);  \n    myMotor4-&gt;setSpeed(i);  \n    delay(10);\n  }\n\n  Serial.print(\"tech\");\n  myMotor-&gt;run(RELEASE);\n  myMotor2-&gt;run(RELEASE);\n  myMotor3-&gt;run(RELEASE);\n  myMotor4-&gt;run(RELEASE);\n  delay(1000);\n}\n</code></pre> </li> </ol> </li> <li> <p>Stepper control</p> <ol> <li> <p>Open the 4 Channel I2C Motor Shield-V1.1-Sample\\servo\\servo.ino program and download it to the Arduino.</p> </li> <li> <p>Connect the 9G servo to the J3 and J4 ports on the 4 Channel I2C Motor Shield-V1.1 board respectively, and observe the phenomenon, as shown in the figure: </p> </li> <li> <p>Both interfaces observe the stepping motor's forward and reverse rotation, then the drive is normal.</p> <pre><code>#include &lt;Servo.h&gt;  \nServo myservo;  // create servo object to control a servo \n              // a maximum of eight servo objects can be created \nServo myservo1;               \n\nint pos = 0;    // variable to store the servo position \n\nvoid setup() \n{ \n  myservo.attach(9);  // attaches the servo on pin 9 to the servo object \n  myservo1.attach(8);\n} \n\nvoid loop() \n{ \n  for(pos = 0; pos &lt; 180; pos += 1)   // goes from 0 degrees to 180 degrees \n  {                             // in steps of 1 degree \n    myservo.write(pos);            // tell servo to go to position in variable 'pos' \n    myservo1.write(pos);  \n    delay(15);                    // waits 15ms for the servo to reach the position \n  } \n  for(pos = 180; pos&gt;=1; pos-=1)     // goes from 180 degrees to 0 degrees \n  {                                \n    myservo.write(pos);            // tell servo to go to position in variable 'pos' \n    myservo1.write(pos); \n    delay(15);                    // waits 15ms for the servo to reach the position \n  } \n}\n</code></pre> </li> </ol> </li> </ol>"},{"location":"Products/Shield/4-channel-i2c-motor-shield-v11.html#resource","title":"Resource","text":"<ul> <li>4_Channel_I2C_Motor_Shield-V1.1-Example.zip </li> <li>4_Channel_I2C_Motor_Shield-V1.1-SCH&amp;PCB.zip </li> </ul>"},{"location":"Products/Shield/8-channel-el-shield.html","title":"8-Channel EL Shield","text":""},{"location":"Products/Shield/8-channel-el-shield.html#description","title":"Description","text":"<p>EL wire is flexible plastic cord that glows brightly when high-voltage AC is applied to it. It\u2019s available in numerous colors with cool, and requires very little current, but it can be difficult to work with because of the high-voltage requirements. The Elecrow EL Shield enables you to implement up to 8 channels of EL wires or tapes in to your project and gives you solution to control the EL modules. With Arduino or Crowduino, You will be able to control 8 EL devices simultaneously and separately. The controlling method is as simple as controlling an LED. Driven by PWM, it can create a colorful and florid effect by controlling each EL wire according to your own programs. </p> <p>This Shield comes with 4 pics of EL wire adaptors to help you connect the standard EL wires to this Shield. Of course you can purchase more to control up to 8 channels. Please also notice that a 5V invertor is needed for this EL shield.Besides, there is also the 8-Channel EL Shield Kit which includes all the modules you need for a EL wire project.</p> <p>Model: AS0008EL</p> <p> </p>"},{"location":"Products/Shield/8-channel-el-shield.html#featrues","title":"Featrues","text":"<ul> <li>8 Channels, with Eight opto-isolated, zero-crossing control channels;</li> <li>Control EL as easy as turning a LED on and off;</li> <li>Compatible with 5V or 3.3V Arduinos</li> <li>Dimensions(mm):72.5(L)x66.0(W)x23.5(H)</li> </ul>"},{"location":"Products/Shield/8-channel-el-shield.html#pin-allocatior","title":"Pin Allocatior","text":"PIN EL Channel to Control D2 EL Channel A D3 EL Channel B D4 EL Channel C D5 EL Channel D D6 EL Channel E D7 EL Channel F D8 EL Channel G D9 EL Channel H"},{"location":"Products/Shield/8-channel-el-shield.html#usage","title":"Usage","text":""},{"location":"Products/Shield/8-channel-el-shield.html#1connect-the-el-wires-to-el-shield-via-the-adaptor","title":"1.Connect the EL wires to EL Shield via the Adaptor","text":"<p>As the standard EL wires or tapes use the connectors that can not be pluged into a PCBA, we provide the Special wire adaptors to help uses connect the EL modules to the EL Shiled. 4 pcs of adaptors are packaged in the EL Shield or EL Shield Kit. connect the EL wires to EL Shiled as below: </p>"},{"location":"Products/Shield/8-channel-el-shield.html#2connect-the-inverter-to-el-shield","title":"2.Connect the inverter to EL Shield","text":"<p>The EL modules needs a driver voltage more than 110V, AC. The Elecrow customized inverter can convert the 5V-DC input to AC,110~220V, can drive a max of 15m EL wires. connecthe the inverter to EL Shield as below:  Note that the input wire of the inverter is red/white, which need to be inserted into the DC_5V terminal of EL Shield, and the output wire(black) of the inverter need to be inserted into the AC&gt;110V terminal.</p>"},{"location":"Products/Shield/8-channel-el-shield.html#3programing-on-crowduino","title":"3.Programing on Crowduino","text":"<p>Plug the EL Shield on to Crowduino, then you can begin to programming the Crowduino to control EL wires. Progrmming to control the EL wires would be as easy as control a LED, you can use the digitalwrite() to control the EL wires on&amp;off, or the analogwrite() to generate PWM to control the lightness.</p> <pre><code>void setup(){\n for(int i = 2; i&lt;10; i++)\n { \n  pinMode(i, OUTPUT);\n }\n}\n\nvoid setEL(int ch) // set a certain EL on\n{ \n  for(int i = 2; i&lt;10; i++) // all on\n digitalWrite(i, HIGH);\n delay(1000);\n for(int i = 2; i&lt;10; i++) // all off\n digitalWrite(i, LOW);\n  for(int i = 2; i&lt;10; i++) // \n {\n  digitalWrite(i, HIGH);\n  delay(200);\n  digitalWrite(i, LOW);\n }\n } \n\nint count = 0; \n\nvoid loop()\n{ \n setEL(count%4 + 1);\n delay(200);\n if(count++ == 1000)\n { \n  count = 0;\n } \n}\n</code></pre>"},{"location":"Products/Shield/8-channel-el-shield.html#4power-on-to-start","title":"4.Power On to Start","text":"<p>After uploading the sketch to Crowduino, Power the Crowduino&amp;Arduino with a 6.5~9 V DC supply via the DC jack, to enable the EL wires blink </p>"},{"location":"Products/Shield/8-channel-el-shield.html#resource","title":"Resource","text":"<ul> <li>MOC3063 Datasheet</li> <li>Z0103MN Datasheet</li> <li>LM317 Datasheet </li> </ul>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html","title":"Arduino Motor/Stepper/Servo Shield","text":""},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#description","title":"Description","text":"<p>This Adruino compatible motor Driver shield is a full-featured products that it can be used to drive 2 DC motor or two 4-wire stepper and two 5v \u2019hoppy\u2019 servo. It drive the DC motor and stepper with the L293D,and it drive the servo with arduino\u2019s pin9 and pin10.  </p> <p>Model: MCS02930M </p> <p></p>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#features","title":"Features","text":"<ul> <li>Be able to drive 4 DC motor and 2 \u2018hoppy\u2019 Servo</li> <li>Be able to drive 2 stepper and 2 \u2018hoppy\u2019 Servo</li> <li>The logic control voltage Vss: 4.5~5.5V</li> <li>Motor Supply Voltage: Vss ~ 15V</li> <li>Reduced control pins needed through 8-stage serial shift registers</li> <li>Drive part of the operating current Io: 1.2A</li> </ul>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#specification","title":"Specification","text":"Items Min Typical Max Unit Control voltage 4.5 5 5.5 v Driver voltage 6 9 15 v Output Current / / 1.2 A Dimension cm Weight g"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#interface","title":"Interface","text":""},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#usage","title":"Usage","text":""},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#first-install-the-arduino-library","title":"First Install the Arduino Library","text":"<p>Before you can use the Motor shield, you must install the AF_Motor Arduino library - this will instruct the Arduino how to talk to the Adafruit Motor shield, and it isn't optional!</p> <p>1.First, download library</p> <p>2.Uncompress the ZIP file onto your desktop</p> <p>3.Rename the uncompressed folder AFMotor</p> <p>4.Check that inside AFMotor is AFMotor.cpp and AFMotor.h files. If not, check the steps above</p> <p>5.Place the AFMotor folder into your arduinosketchfolder/libraries folder. For Windows, this will probably be something like MY Documents/Arduino/libraries for Mac it will be something like Documents/arduino/libraries. If this is the first time you are installing a library, you'll need to create the libraries folder. Make sure to call it libraries exactly, no caps, no other name.</p> <p>6.Check that inside the libraries folder there is the AFMotor folder, and inside AFMotor is AFMotor.cpp AFMotor.h and some other files</p> <p>7.Quit and restart the IDE. You should now have a submenu called File-&gt;Examples-&gt;AFMotor-&gt;MotorParty</p>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#powering-your-dc-motors-voltage-and-current-requirements","title":"Powering your DC motors, voltage and current requirements","text":"<p>Motors need a lot of energy, especially cheap motors since they're less efficient. The first important thing to figure out what voltage the motor is going to use. If you're lucky your motor came with some sort of specifications. Some small hobby motors are only intended to run at 1.5V, but its just as common to have 6-12V motors. The motor controllers on this shield are designed to run from 4.5V to 25V.</p> <p>MOST 1.5-3V MOTORS WILL NOT WORK</p> <p>Current requirements: The second thing to figure out is how much current your motor will need. The motor driver chips that come with the kit are designed to provide up to 600 mA per motor, with 1.2A peak current. Note that once you head towards 1A you'll probably want to put a heatsink on the motor driver, otherwise you will get thermal failure, possibly burning out the chip.</p> <p>On using the SN754410: Some people use the SN754410 motor driver chip because it is pin-compatible, has output diodes and can provide 1A per motor, 2A peak. After careful reading of the datasheet and discussion with TI tech support and power engineers it appears that the output diodes were designed for ESD protection only and that using them as kickback-protection is a hack and not guaranteed for performance. For that reason the kit does not come with the SN754410 and instead uses the L293D with integrated kickback-protection diodes. If you're willing to risk it, and need the extra currrent, feel free to buy SN754410's and replace the provided chips.</p> <p>Need more power? Buy another set of L293D drivers and solder them right on top of the ones on the board (piggyback). Voila, double the current capability! You can solder 2 more chips on top before it probably isnt going to get you much benefit</p> <p>You can't run motors off of a 9V battery so don't even waste your time/batteries! Use a big Lead Acid or NiMH battery pack. Its also very much suggested that you set up two power supplies (split supply) one for the Arduino and one for the motors. 99% of 'weird motor problems' are due to noise on the power line from sharing power supplies and/or not having a powerful enough supply!</p>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#how-to-set-up-the-arduino-shield-for-powering-motors","title":"How to set up the Arduino + Shield for powering motors","text":"<p>Servos are powered off of the same regulated 5V that the Arduino uses. This is OK for the small hobby servos suggested. If you want something beefier, cut the trace going to + on the servo connectors and wire up your own 5-6V supply!</p> <p>The DC motors are powered off of a 'high voltage supply' and NOT the regulated 5V. Don't connect the motor power supply to the 5V line. This is a very very very bad idea unless you are sure you know what you're doing!</p> <p>There are two places you can get your motor 'high voltage supply' from. One is the DC jack on the Arduino board and the other is the 2-terminal block on the shield that is labeled EXT_PWR. The DC Jack on the Arduino has a protection diode so you won't be able to mess things up too bad if you plug in the wrong kind of power. However the EXT_PWR terminals on the shield do not have a protection diode (for a fairly good reason). Be utterly careful not to plug it in backwards or you will destroy the motor shield and/or your Arduino!</p>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#hardware-installation","title":"Hardware Installation","text":""},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#servos","title":"Servos","text":"<p>Hobby servos are the easiest way to get going with motor control. They have a 3-pin 0.1\" female header connection with +5V, ground and signal inputs. The motor shield simply brings out the 16bit PWM output lines to 2 3-pin headers so that its easy to plug in and go. They can take a lot of power so a 9V battery wont last more than a few minutes!</p> <p>The nice thing about using the onboard PWM is that its very precise and goes about its business in the background. You can use the built in Servo library</p> <p>Using the servos is easy, please read the official Arduino documentation for how to use them and see the example Servo sketches in the IDE</p>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#dc-motors","title":"DC Motors","text":"<p>DC motors are used for all sort of robotic projects. The motor shield can drive up to 4 DC motors bi-directionally. That means they can be driven forwards and backwards. The speed can also be varied at 0.5% increments using the high-quality built in PWM. This means the speed is very smooth and won't vary!</p> <p>Note that the H-bridge chip is not really meant for driving loads over 0.6A or that peak over 1.2A so this is for small motors. Check the datasheet for information about the motor to verify its OK.</p> <p>To connect a motor, simply solder two wires to the terminals and then connect them to either the M1, M2, M3, or M4. Then follow these steps in your sketch</p> <p>1. Make sure you include &lt;AFMotor.h&gt;</p> <p>2. Create the AF_DCMotor object with AF_DCMotor(motor#, frequency), to setup the motor H-bridge and latches. The constructor takes two arguments. The first is which port the motor is connected to, 1, 2, 3 or 4. frequency is how fast the speed controlling signal is. For motors 1 and 2 you can choose MOTOR12_64KHZ, MOTOR12_8KHZ, MOTOR12_2KHZ, or MOTOR12_1KHZ. A high speed like 64KHz wont be audible but a low speed like 1KHz will use less power. Motors 3 &amp; 4 are only possible to run at 1KHz and will ignore any setting given</p> <p>3. Then you can set the speed of the motor using setSpeed(speed) where the speed ranges from 0 (stopped) to 255 (full speed). You can set the speed whenever you want.</p> <p>4. To run the motor, call run(direction) where direction is FORWARD, BACKWARD or RELEASE. Of course, the Arduino doesn't actually know if the motor is 'forward' or 'backward', so if you want to change which way it thinks is forward, simply swap the two wires from the motor to the shield.</p> <pre><code>#include &lt;AFMotor.h&gt;\n\nAF_DCMotor motor(2, MOTOR12_64KHZ); // create motor #2, 64KHz pwm\n/*or defined like this\nAF_DCMotor motor(2);*/\n\nvoid setup() {\n  Serial.begin(9600);           // set up Serial library at 9600 bps\n  Serial.println(\"Motor test!\");\n\n  motor.setSpeed(200);     // set the speed to 200/255\n}\n\nvoid loop() {\n  Serial.print(\"tick\");\n\n  motor.run(FORWARD);      // turn it on going forward\n  delay(1000);\n\n  Serial.print(\"tock\");\n  motor.run(BACKWARD);     // the other way\n  delay(1000);\n\n  Serial.print(\"tack\");\n  motor.run(RELEASE);      // stopped\n  delay(1000);\n}\n</code></pre>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#steppers","title":"Steppers","text":"<p>Stepper motors are great for (semi-)precise control, perfect for many robot and CNC projects. This motor shield supports up to 2 stepper motors. The library works identically for bi-polar and uni-polar motors</p> <p>For unipolar motors: to connect up the stepper, first figure out which pins connected to which coil, and which pins are the center taps. If its a 5-wire motor then there will be 1 that is the center tap for both coils. Theres plenty of tutorials online on how to reverse engineer the coils pinout. The center taps should both be connected together to the GND terminal on the motor shield output block. then coil 1 should connect to one motor port (say M1 or M3) and coil 2 should connect to the other motor port (M2 or M4).</p> <p>For bipolar motors: its just like unipolar motors except theres no 5<sup>th</sup> wire to connect to ground. The code is exactly the same.</p> <p>Running a stepper is a little more intricate than running a DC motor but its still very easy</p> <p>1. Make sure you include &lt;AFMotor.h&gt;</p> <p>2. Create the stepper motor object with AF_Stepper(steps, stepper#) to setup the motor H-bridge and latches. Steps indicates how many steps per revolution the motor has. a 7.5degree/step motor has 360/7.5 = 48 steps. Stepper# is which port it is connected to. If you're using M1 and M2, its port 1. If you're using M3 and M4 its port 2</p> <p>3. Set the speed of the motor using setSpeed(rpm) where rpm is how many revolutions per minute you want the stepper to turn.</p> <p>4. Then every time you want the motor to move, call the step(#steps, direction, steptype) procedure. #steps is how many steps you'd like it to take. direction is either FORWARD or BACKWARD and the step type is SINGLE, DOUBLE. INTERLEAVE or MICROSTEP. \"Single\" means single-coil activation, \"double\" means 2 coils are activated at once (for higher torque) and \"interleave\" means that it alternates between single and double to get twice the resolution (but of course its half the speed). \"Microstepping\" is a method where the coils are PWM'd to create smooth motion between steps. Theres tons of information about the pros and cons of these different stepping methods in the resources page. You can use whichever stepping method you want, changing it \"on the fly\" to as you may want minimum power, more torque, or more precision.</p> <p>5. By default, the motor will 'hold' the position after its done stepping. If you want to release all the coils, so that it can spin freely, call release()</p> <p>6. The stepping commands are 'blocking' and will return once the steps have finished. If someone wants to be awesome and write a version of the library that does background stepping that would be cool! :)</p> <pre><code>#include &lt;AFMotor.h&gt;\n\n\nAF_Stepper motor(48, 2);\n\n\nvoid setup() {\n  Serial.begin(9600);           // set up Serial library at 9600 bps\n  Serial.println(\"Stepper test!\");\n\n  motor.setSpeed(10);  // 10 rpm   \n\n  motor.step(100, FORWARD, SINGLE); \n  motor.release();\n  delay(1000);\n}\n\nvoid loop() {\n  motor.step(100, FORWARD, SINGLE); \n  motor.step(100, BACKWARD, SINGLE); \n\n  motor.step(100, FORWARD, DOUBLE); \n  motor.step(100, BACKWARD, DOUBLE);\n\n  motor.step(100, FORWARD, INTERLEAVE); \n  motor.step(100, BACKWARD, INTERLEAVE); \n\n  motor.step(100, FORWARD, MICROSTEP); \n  motor.step(100, BACKWARD, MICROSTEP); \n}\n</code></pre> <p>If you want two stepper motors to step at once you'll need to write something like this:</p> <pre><code>void doublestep (int steps, int direction, int style) {\n  while (steps--) {\n    motor1.step(1, direction, style); \n    motor2.step(1, direction, style); \n  }\n}\n</code></pre>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#faq","title":"FAQ","text":"<p>Please list your question here:</p>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#additional-idea","title":"Additional Idea","text":"<p>The Additional Idea is the place to write your project ideas about this product, or other usages you've found. Or you can write them on Projects page.</p>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#resources","title":"Resources","text":"<ul> <li>Library for arduino1.0</li> <li>Library for arduino0022</li> <li>L293D datasheet</li> <li>Wikipedia has tons of information on steppers</li> <li>Jones on stepper motor types</li> <li>Jason on reverse engineering the stepper wire pinouts</li> </ul>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#how-to-buy","title":"How to buy","text":"<p>Click here to buy.</p>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#see-also","title":"See Also","text":"<p>Other related products and resources.</p>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#licensing","title":"Licensing","text":"<p>This documentation is licensed under the Creative Commons Attribution-ShareAlike License 3.0 Source code and libraries are</p> <p>licensed under GPL/LGPL, see source code files for details.</p>"},{"location":"Products/Shield/arduino-motorstepperservo-shield.html#external-links","title":"External Links","text":"<p>Links to external webpages which provide more application ideas, documents/datasheet or software libraries</p>"},{"location":"Products/Shield/avr-isp-shield.html","title":"AVR ISP Shield","text":""},{"location":"Products/Shield/avr-isp-shield.html#introduction","title":"Introduction","text":"<p>Did you know your Arduino can burn bootloaderds onto Atmega chips, turning them into Arduino compatible microcontrollers. It required a breadboard and a whole mess of jumper wires but we've just made it a ton easier on you with the AVR ISP Shield! It is very easy to use. Just following the Arduino tutorial, You can turn your Atmega chips to Arduino compatible microcontrollers or change the bootloader of the Arduino boards. Such as you can turn the Crowduino to a Arduino UNO board.</p> <p>Model: ACS26020S </p> <p></p>"},{"location":"Products/Shield/avr-isp-shield.html#features","title":"Features","text":"<p>Dimensions(mm):60.0(L)x53.5(W)x34.0(H)</p>"},{"location":"Products/Shield/avr-isp-shield.html#usage","title":"Usage","text":"<p>1.Plug AVR ISP Shield onto the Arduino/Crowduino. Connect the board to PC using USB cable.</p> <p></p> <p>2.Upload the ArduinoISP firmware (in Examples) to your Arduino board.(File&gt;examples&gt;ArduinoISP)</p> <p></p> <p>3.Select the items in the Tools &gt; Board and Serial Port menus that correspond to the board you are using as the programmer (not the board being programmed).</p> <p> </p> <p>4.Upload the ArduinoISP sketch.</p> <p></p> <p>5.Plug the atmega328P-PU IC into the IC holder of the AVR ISP shield. please be careful about the direction of the atmega328 Or Wire your Arduino board to the target as shown in the diagram below.</p> <p> </p> <p>7.Select the item in the Tools &gt; Board menu that corresponds to the board on which you want to burn the bootloader (not the board that you're using as the programmer). See the board descriptions on the environment page for details. For example:  Burn the bootloader to the Arduino UNO.</p> <p></p> <p>Burn the bootloader to the Crowduino Leonardo.</p> <p></p> <p>8.Use the Burn Bootloader &gt; Arduino as ISP command.</p> <p> </p> <p>9.When burning the bootloader, you will see the LED(PROG) on AVR ISP Shield is blinking, and it will put out when completing the burn. </p> <p> </p>"},{"location":"Products/Shield/avr-isp-shield.html#resources","title":"Resources","text":"<ul> <li>Schematic</li> <li>ArduinoISP Tutorial</li> </ul>"},{"location":"Products/Shield/binocular-stereo-vision-expansion-board-for-raspberry-pi.html","title":"Binocular Stereo Vision Expansion Board for Raspberry Pi","text":""},{"location":"Products/Shield/binocular-stereo-vision-expansion-board-for-raspberry-pi.html#introduction","title":"Introduction","text":"<p>This binocular stereo vision expansion board is specially designed for Raspberry Pi Compute Module, compatible with CM3 / CM3 Lite / CM3+ / CM3+ Lite. Small in size but powerful in function. It features three CSI camera ports that can be connected by camera with different viewing angles or baseline value. It is flexible to build different Raspberry Pi stereo vision projects such as binocular parallax ranging, facial recognition, vivo detection, VR video recording and so on. Also, it has some common used ports like DSI and USB, it is convenient to be connected to LCD display and burning mirror directly. Moreover, it has peripheral interfaces like 24PIN HDMI and 36PIN GPIO are also supported through the FPC connector.</p> <p>Model: RPA20901S</p> <p></p>"},{"location":"Products/Shield/binocular-stereo-vision-expansion-board-for-raspberry-pi.html#features","title":"Features","text":"<ul> <li>Comes with three camera ports</li> <li>DSI port allows directly connecting with DSI display</li> <li>With USB connector, convenient for burning mirror</li> <li>36PIN GPIO connector for extending UART port and Raspberry Pi GPIO</li> <li>24PIN HDMI extended connector for connecting with HDMI display</li> <li>10PIN GPIO/I2C extended connector for connecting ICM20948 IMU fill light board</li> <li>Integrates DS1307 RTC chip and comes with CR1220 battery holder</li> <li>Comes with acrylic mounting plate and tripod adapter</li> <li>Compatible with Raspberry Pi Compute Module CM3 / CM3 Lite / CM3+ / CM3+ Lite compatibly</li> </ul>"},{"location":"Products/Shield/binocular-stereo-vision-expansion-board-for-raspberry-pi.html#usager","title":"Usager","text":"<ul> <li> <p>1. Burn image</p> </li> <li> <p>1.1 Flash the image to Compute Module 3/Compute Module 3+</p> </li> </ul> <p>If you are using Raspberry Pi Compute Module 3 or Compute Module 3+. For these computing modules with eMMC, you need to burn the image to the eMMC on the computing module when using them, otherwise they cannot be used.</p> <p>The steps to burn to eMMC are as follows:</p> <p>1) Run RPiboot_Setup software on the computer and install the Raspberry Pi USB driver. It is recommended to turn off the anti-virus software before installation. After the installation is successful, there will be a rpiboot.exe software in the start folder, as shown in the following figure:</p> <p></p> <p>2) Switch the USB SLAVE ENABLE switch on the STEREO expansion board to the EN end</p> <p>3) Connect the computing module (computing module with eMMC)</p> <p>4) Connect the USB interface on the STEREO expansion board to the PC via a USB cable</p> <p>5) At this time, open the software rpiboot.exe with administrator authority , and the PC will automatically recognize the eMMC in the computing module as a U disk.</p> <p>6) Run Win32DiskImager-burn Record the image software , select the image, and burn the image to the eMMC.</p> <p>Note: If the image has been burned before, you can use the Panasonic_SDFormatter-SD card formatting software to format it before burning.</p> <p>7) After programming is complete, disconnect the USB cable. After disconnecting the power supply, reconnect the power supply to the PWR interface of the STEREO expansion board to start the system from eMMC.</p> <ul> <li>Note</li> <li> <p>During the programming process, the PC should not read and write other USB devices to avoid conflicts;</p> </li> <li> <p>The official image provided by Raspberry Pi, the default account is: pi and the password is: Raspberry.</p> </li> <li> <p>Since the eMMC of CM3 is only 4G (the latest CM3+ has expanded the capacity of eMMC and can support normal Raspberry Pi mirroring), the size of the burned image cannot exceed 4G. Therefore, if you burn Raspbian, you can only use the Lite version of the mirror. If you want a GUI. You can install the GUI by running the following command after the installation is complete:</p> </li> </ul> <pre><code>sudo apt - get update\nsudo apt - get install raspberrypi - ui - mods\n</code></pre> <p>If you can\u2019t program normally with the STEREO expansion board, please try the following steps:</p> <ul> <li> <p>Use WIN10 system to burn, most customers feedback that WIN7 or linux system is unstable.</p> </li> <li> <p>Make sure your CM3/CM3+ version is normal, there will be an additional IC on the back of eMMC. Only the eMMC version can be burned in the current way. For those without eMMC, please refer to \"Flashing Image to Compute Module 3 Lite or Compute Module 3+ Lite\".</p> </li> </ul> <p></p> <ul> <li> <p>Note that the PWR interface needs to be connected to a 5V power adapter.</p> </li> <li> <p>Replace a USB data cable.</p> </li> <li> <p>Replace the USB interface of a PC.</p> </li> <li> <p>Try to restart the PC.</p> </li> <li> <p>Try to unplug and plug CM3/CM3+ again.</p> </li> <li> <p>Try to burn on another computer.</p> </li> <li> <p>1.2 Flash the image to Compute Module 3 Lite or Compute Module 3+ Lite</p> </li> </ul> <p>The operation of flashing the image to Lite is:</p> <p>1) Download the image that seems to be flashing.</p> <p>2) Insert the TF card with a card reader into the computer. The minimum requirement for the TF card is 8G (16G or 32G is recommended).</p> <p>3) Open Win32DiskImager-burning image software, and select the image burning prepared in step 1. (Same as burning the Raspberry Pi image)</p> <p>4) After the burning is successful, insert the TF card into the TF card slot of the STEREO expansion board and power on.</p> <ul> <li>2. Connect to DSI screen</li> </ul> <p>The DSI screen model used in this experiment is: 4.3inch DSI LCD, or the Raspberry Pi screen provided by the Raspberry Pi Foundation</p> <p>1) Make sure to operate under power off</p> <p>2) Connect the 15Pin FPC cable to the DISP1 interface of the STEREO expansion board and the DSI screen</p> <p>3) Connect power</p> <p>4) Wait a few seconds before the screen starts</p> <ul> <li>Note:</li> </ul> <p>If you use the official image, you need to copy dt-blob.bin to the /boot directory to use it normally</p> <p>Device tree source file and its binary file</p> <p></p> <ul> <li>3. Connect HDMI screen</li> </ul> <p>The HDMI screen model used in this experiment is: 7 inch HDMI screen: ESP01215E</p> <p>1) Remove the DSI screen, connect the HDMI adapter board to the HDMI interface of STEREO</p> <p>2) Connect the HDMI screen, (if the HDMI screen Connect with the DSI screen, then the Raspberry Pi will only drive the DSI screen)</p> <p>3) Change the config.txt file in the TF card to modify the resolution. For the screen model used this time, 7inch HDMI LCD (H) (with case) , Need to add the following statement at the end of config.txt:</p> <pre><code>max_usb_current = 1\n  hdmi_force_hotplug = 1 \n  config_hdmi_boost = 10\n  hdmi_group = 2 \n  hdmi_mode = 87 \n  hdmi_cvt 1024 600 60 6 0 0 0\n</code></pre> <p>4) After the change, restart the Raspberry Pi to drive the HDMI screen.</p> <ul> <li>4. Connect CSI camera</li> </ul> <p>4.1 Test the Raspberry Pi camera</p> <p>The method to test the Raspberry Pi camera is:</p> <p>1) Make sure that the mirror is downloaded from the Micro Snow Encyclopedia, the device tree is configured for the mirror, and the two cameras can be driven by commands without modification.</p> <p>2)Connect the camera to the CAM0 and CAM1 interfaces. The CSI camera model used in this experiment is: IMX219-77 Camera.</p> <p>3)After connecting, power on, after power on, you can check the camera effect:</p> <p>View the first camera screen connected:</p> <pre><code>sudo raspivid - t 0 - cs 0\n</code></pre> <p>View the second camera screen connected:</p> <pre><code>sudo raspivid - t 0 - cs 1\n</code></pre> <p>The -cs parameter indicates the number of cameras that are connected, but the camera number indicated by the -cs parameter is not exactly the same as the silkscreen of the board and the shell (the parameter -cs indicates the number of cameras that are connected, if only it is connected If a camera is connected to the CAM1 interface, check that the -cs parameter of the camera command is 0 to indicate the 0<sup>th</sup> camera connected).</p> <p>4.2 Source image, modify the device tree to drive the camera</p> <p>If you use the image provided by us, the device tree has already been configured. This step can be skipped directly. If you are using a brand new image provided by the official, you need to reconfigure the device tree.</p> <p>1)Run raspi-config, select Interfacing Options-&gt;Camera-&gt;Yes-&gt;Finish-Yes, reboot the system, and turn on enable camera.</p> <p>2)The device tree file download official, the Raspberry Pi Foundation device tree referral link , Raspberry Pi Foundation device tree download 1 link  , download link 2</p> <p>3)After downloading the device tree file, next, you need to modify the device tree file. The specific device tree is modified as follows:</p> <p></p> <p></p> <p>Namely: Compared with the official device tree file, the specific modification is: the LDE and SHUTDOWN of Camera0 are changed from the original 4,5 pins to 32,33 pins.</p> <p>4\uff09After modifying the device tree file, compile the device tree file, the compilation method is as follows:</p> <pre><code>dtc - I dts - O dtb - o dt - blob . bin dt - blob - disp1 - cam2 . dts\n</code></pre> <p>5\uff09After compilation, a dt-blob.bin file will be generated. Just copy (replace) this file directly to the boot directory.</p> <p>6\uff09Restart, you can test the dual camera with the following command:</p> <pre><code>sudo raspivid - t 0 - cs 0 \nsudo raspivid - t 0 - cs 1\n</code></pre> <p>How to use CAM3 interface The CAM3 interface and the CAM1 interface are switched through the GPIO38 pin. If the GPIO38 interface is set to high level, the CS1 interface calls the camera of the CAM3 interface. If the GPIO38 interface is set to low level, the CS1 interface calls the camera of the CAM1 interface.</p> <p>7) Run the following program</p> <pre><code>cd ~ /CM_STEREO_BOARD\nsudo chmod +x CAM3_CAM1_Switch.sh\n./ CAM3_CAM1_Swtich . Sh 1\n</code></pre> <p>/CAM3_CAM1_Switch.sh 1 Switch to use CAM3 interface</p> <p>8) Run the camera command test after switching</p> <pre><code>sudo raspivid - t 0 - cs 1\n</code></pre> <ul> <li>5. Test ICM20948</li> </ul> <p>1) First download the sample program</p> <pre><code>HTTP wget\u00a0: //www.waveshare.net/w/upload/d/d8/CM_STEREO_BOARD.zip\nunzip CM_STEREO_BOARD . zip\n</code></pre> <p>2) Connect the ICM20948 fill light board to the STEREO expansion board through a 10pin cable</p> <p>3)Turn on the I2C interface</p> <pre><code>sudo raspi - config\n</code></pre> <p>Select Interfacing Options -&gt; I2C -&gt; Yes-&gt;OK</p> <p>4) Check the I2c address</p> <pre><code>i2cdetect - y 1\n</code></pre> <p></p> <p>Two addresses of 68 69 can be detected, indicating that the module is connected normally Where 68 is the address of the RTC, 69 is the address of the ICM20948 chip</p> <p>5) Run the following command to test ICM20948</p> <pre><code>cd ~ /CM_STEREO_BOARD/ 10Dof - D_Demo /\nsudo make\nsudo ./ 10Dof - D\n</code></pre> <p>After running the program, the terminal interface will print the information of the ICM20948 chip</p> <p></p> <p>Ctrl+c can close the program</p> <ul> <li>6. Test RTC</li> </ul> <p>1)The STEREO expansion board has a RTC spare battery holder, you can connect to the CR1220 button battery, the battery needs to be purchased separately</p> <p>2)Modify the rc.local file</p> <pre><code>Nano sudo / etc / rc . local\n</code></pre> <p>Add the following statement to the front of exit0</p> <pre><code>sudo modprobe i2c - dev &amp;\nsudo modprobe i2c - bcm2708 &amp;\necho \"ds1307 0x68\" | sudo tee / sys / class / i2c - adapter / i2c - 1 / new_device &amp;\n</code></pre> <p></p> <p>3) Reboot the system</p> <pre><code>sudo reboot\n</code></pre> <p>4) After restarting, check the I2c address again, and you will find that the original address 68 has become UU, which is normal</p> <p>5)Read RTC time</p> <pre><code>sudo hwclock \u2013 r\n</code></pre> <p>After the command is executed, the current network time will be printed out. If the time is not correct, set the time zone in the system and test again.</p> <p>6)You can also write the RTC time into the system</p> <pre><code>sudo hwclock \u2013 s\n</code></pre> <ul> <li>7. Test fill light and buttons</li> </ul> <p>On the ICM20948 board, there are two fill lights onboard, one is white fill light and the other is infrared fill light. Here we combine the buttons on the STEREO board to test the fill light function</p> <p>1)Run command</p> <pre><code>cd ~ /CM_STEREO_BOARD/\nPython KEY_LED sudo . Py\n</code></pre> <p>After successfully running the program, the infrared fill light will light up, press the button to switch between the infrared fill light and the white fill light Note that the brightness of the white fill light is relatively high. When testing, cover it to avoid direct exposure to the eyes.</p> <p>Ctrl+C can terminate the program.</p> <ul> <li>8. Test the serial port expansion board</li> </ul> <p>1)Connect the serial port expansion board to the STEREO board through the 36PIN cable</p> <p>2)Connect the USB port on the serial port expansion board to the computer with a USB cable</p> <p>3)The Raspberry Pi system enables the serial port debugging interface function</p> <pre><code>sudo raspi \u2013 config\n</code></pre> <p>Select Interfacing Options -&gt; Serial -&gt; Yes -&gt; No -&gt; OK</p> <p>4)Restart the system, then open the putty software on the computer and use the serial port to log in to the Raspberry Pi</p>"},{"location":"Products/Shield/bluetooth-shield-v10.html","title":"Bluetooth Shield v1.0","text":""},{"location":"Products/Shield/bluetooth-shield-v10.html#description","title":"Description","text":"<p>The Bluetooth Shield integrates a Serial Bluetooth module. It can be easily used with Arduino /Crowduino for transparent wireless serial communication. You can choose two pins from Arduino D0 to D7 as Software Serial Ports to communicate with Bluetooth Shield (D0 and D1 is Hardware Serial Port). It also expand five analog IOs that you can use it to connect other devices.</p> <p>Model: MCS01108S</p> <p></p>"},{"location":"Products/Shield/bluetooth-shield-v10.html#features","title":"Features","text":"<ul> <li>Crowduino/Arduino compatible.</li> <li>Standard Shield designed that you can use it easily.</li> <li>Up to10m communication distance in house without obstacle</li> <li>UART interface (TTL) with programmable baud rate (SPP firmware installed)</li> <li>Default baud rate: 38400, data bits: 8, stop bit: 1, Parity: No parity</li> <li>Default PINCODE:\u201d0000\u201d</li> <li>A full set of configuration commands</li> <li>On board PCB antenna</li> <li>FCC ID certificated</li> </ul>"},{"location":"Products/Shield/bluetooth-shield-v10.html#application-idea","title":"Application Idea","text":"<p>1. Communicate with two Bluetooth Shield.  2. Use your Android phone to control the Arduino car. 3. Communicate with your computer.  </p>"},{"location":"Products/Shield/bluetooth-shield-v10.html#specification","title":"Specification","text":"Items Min Typical Max Unit Voltage 2.8 3.3 3.5 v Current 3 / 100 mA Communication Distance(in house) / / 10 m Protocol Bluetooth V2.0 with SPP firmware / Interface Uart Serial Port(TTL) / Supported Baudrate 9600, 19200, 38400, 57600, 115200, 230400, 460800 bps ESD contact discharge \u00b14 KV ESD air discharge \u00b18 / Dimensions 47.3(L)x55.0(W)x23.5(H) mm Net Weight g"},{"location":"Products/Shield/bluetooth-shield-v10.html#interface","title":"Interface","text":""},{"location":"Products/Shield/bluetooth-shield-v10.html#usage","title":"Usage","text":""},{"location":"Products/Shield/bluetooth-shield-v10.html#communicating-between-two-bluetooth-shield","title":"Communicating between two Bluetooth Shield","text":"<p> This demo will show you how to communicate between two Arduino/Crowduino through Bluetooth Shield.For the special applications, you may need to write the code by yourself.</p> <ul> <li>Download the Arduino Library for the shield, and unzip it into the path of Arduino Libraries. This library includes two sketch, one for Master and the other for Slave. Make sure Software Serial Library is included as well.</li> </ul> <p></p> <ul> <li>Upload the sketch Master.ino and Slave.ino to two separate Arduino/Crowduino.</li> <li>Open two Serial Terminals on your PC, with the setting of 38400, 8, 1, N. Open the two Com Port of Arduino/Crowduino.</li> <li>Plug the Bluetooth Shields to the Master board and the Slave Board, and reset the two boards.</li> </ul> <p>Then you will see the red and green LED on the board are flashing in interval indicting they are inquiring for each other. After a while only the green led is flashing one time per second indicating that they are connected. There's also some information printed on the two terminal as following.</p> <p></p> <ul> <li>The connection is successful now, and you can type any character on the Serial Terminal and send to each .</li> </ul>"},{"location":"Products/Shield/bluetooth-shield-v10.html#connecting-bluetooth-shield-to-android-phone","title":"Connecting Bluetooth Shield to Android Phone","text":"<p>This demo will show you how to connect Bluetooth Shield to Android Phone. Here we test on HTC Legend with Android 2.2.For the special applications, you may need to write the code by yourself.</p> <ul> <li>Download the Arduino Library for the shield, and unzip it into the path of Arduino Libraries. This library includes two sketch, one for Master and the other for Salve. Make sure Serial Library is included as well.</li> <li>Plug the Bluetooth Shield onto the Arduino/Crowduino, and upload the Slave.ino to the board.Open the Serial Terminal with setting of 9600, 8, 1, N.</li> </ul> <p></p> <ul> <li> <p>Download an Serial Terminal for Android to the phone. Install the apk(Bluetooth SPP).</p> </li> <li> <p>Enable the bluetooth function and scan for devices. You will find the CrowBTSlave device.</p> </li> <li> <p>Select and pair with the \"CrowBTSlave\", input the PIN code 0000, choose OK.</p> </li> </ul> <p></p> <ul> <li> <p>Now let's open the Bluetooth SPP on Android. It illustrates Press [search] key to find Bluetooth-enabled device.and there will be a list of devices found shown the phone.</p> </li> <li> <p>Select \"CrowBTSlave\", and press connect key, wait a second, the connection will be established. And you can receive and send any character through this terminal.</p> </li> </ul> <p> </p> <ul> <li>Notice:you can also send data to your phone.</li> </ul>"},{"location":"Products/Shield/bluetooth-shield-v10.html#resource","title":"Resource","text":"<ul> <li>Schematic in PDF</li> <li>SoftwareSerial library</li> <li>Bluetooth - module Datasheet</li> <li>Bluetooth Software instruction</li> </ul>"},{"location":"Products/Shield/bluetooth-shield-v10.html#how-to-buy","title":"How to buy","text":"<p>You can visit here to purchase it.</p>"},{"location":"Products/Shield/breakout-board-for-microbit-io-expansion-board.html","title":"Breakout Board for micro:bit IO Expansion Board","text":""},{"location":"Products/Shield/breakout-board-for-microbit-io-expansion-board.html#introduction","title":"Introduction","text":"<p>Microbit expansion board is an IO port expansion board that supports micro:bit. It can draw out all resources on the micro:bit and also has its own buzzer. Not only can it be connected to the P0 pin through a jumper cap, but it can also be released through the jumper cap. The small and unique size is very suitable for various small projects of micro:bit.</p> <p>Model: DTS02018B</p> <p></p>"},{"location":"Products/Shield/breakout-board-for-microbit-io-expansion-board.html#features","title":"Features","text":"<ul> <li>All IO ports are led out</li> <li>Comes with buzzer</li> <li>With LEGO compatible latch holes</li> <li>3PN interface distinguished by yellow, red and black</li> </ul>"},{"location":"Products/Shield/breakout-board-for-microbit-io-expansion-board.html#usage","title":"Usage","text":"<p>For use with micro:bit, the connection is as shown below:</p> <p></p> <p>Then log in to the makecode website https://makecode.microbit.org/ and click on New Project.</p> <p></p>"},{"location":"Products/Shield/breakout-board-for-microbit-io-expansion-board.html#example-1-digital-output","title":"Example 1 digital output","text":"<p>1. Connect the positive and negative poles of the power supply and the IO port</p> <p></p> <p>2. Write a light program.</p> <p></p> <p>3. Running result</p> <p> </p>"},{"location":"Products/Shield/breakout-board-for-microbit-io-expansion-board.html#example-2-i2c-mode","title":"Example 2 I2C mode","text":"<p>1. Add the i2c program module to makecode. Here we take oled as an example. Click \"Extensions\", enter OLED in the search box, and select the \"oled-ssd1306\" module.</p> <p></p> <p></p> <p>2. Connection module I2C interface</p> <p></p> <p>3. Write a program to display \"Micro:bit\"</p> <p></p> <p>4. Run and check the display effect</p> <p></p>"},{"location":"Products/Shield/can-bus-shield.html","title":"CAN-BUS Shield","text":""},{"location":"Products/Shield/can-bus-shield.html#introduction","title":"Introduction","text":"<p>CAN-BUS is a common industrial bus because of its long travel distance, medium communication speed and high reliability. It is widely used as the automotive diagnostic bus, and also commonly used on modern machine tools. This CAN-Bus shield gives the Arduino CAN-Bus capability, It uses the Microchip MCP2515 CAN controller with MCP2551 CAN transceiver, the CAN connection is via a standard 9-way sub-D for use with OBD-II cable, ideal for automotive CAN application. The shield also has a Micro SD card holder, which helps you store the diagnostic information in the SD card directly, making this shield ideal for data logging application.</p> <p>Model: AS54887CAN </p>"},{"location":"Products/Shield/can-bus-shield.html#features","title":"Features","text":"<ul> <li>Arduino Mega and Leonardo compatible</li> <li>Implements CAN V2.0B at up to 1 Mb/s</li> <li>SPI Interface up to 10 MHz</li> <li>Standard (11 bit) and extended (29 bit) data and remote frames</li> <li>Two receive buffers with prioritized message storage</li> <li>Industrial standard 9 pin sub-D connector</li> <li>Two LED indicators</li> <li>SD card holder for information storage</li> <li>Dimensions(mm):74.3(L)x53.6(W)x23.5(H)</li> </ul>"},{"location":"Products/Shield/can-bus-shield.html#usage","title":"Usage","text":""},{"location":"Products/Shield/can-bus-shield.html#hardware-installation","title":"Hardware Installation","text":"<p>Plug the CAN-BUS Shield onto the Arduino. And then connect the Crowduino to PC with USB cable. </p>"},{"location":"Products/Shield/can-bus-shield.html#upload-the-program","title":"Upload the program","text":"<p>1. Download the CAN-BUS Source code file for Arduino 1.0 and release it in the libraries file in the Arduino-1.0 program.: ..\\arduino-1.0\\libraries.</p> <p>If the folder name include \"-master\", just remove it.</p> <p>2. Open the Arduino-1.0, and you will find 8 examples: receive_check ,send and receive_interrupt and so on. Here we'll use send and receive_check, open it then you should get two programming windows now.</p> <p>  2.1 Send data:</p> <pre><code>// demo: CAN-BUS Shield, send data\n#include &lt;mcp_can.h&gt;\n#include &lt;SPI.h&gt;\n\n// the cs pin of the version after v1.1 is default to D9\n// v0.9b and v1.0 is default D10\nconst int SPI_CS_PIN = 9;\n\nMCP_CAN CAN(SPI_CS_PIN);                                    // Set CS pin\n\nvoid setup()\n{\n    Serial.begin(115200);\n\nSTART_INIT:\n\n    if(CAN_OK == CAN.begin(CAN_500KBPS))                   // init can bus\u00a0: baudrate = 500k\n    {\n        Serial.println(\"CAN BUS Shield init ok!\");\n    }\n    else\n    {\n        Serial.println(\"CAN BUS Shield init fail\");\n        Serial.println(\"Init CAN BUS Shield again\");\n        delay(100);\n        goto START_INIT;\n    }\n}\n\nunsigned char stmp[8] = {0, 1, 2, 3, 4, 5, 6, 7};\nvoid loop()\n{\n    // send data:  id = 0x00, standrad frame, data len = 8, stmp: data buf\n    CAN.sendMsgBuf(0x00, 0, 8, stmp);\n    delay(100);                       // send data per 100ms\n}\n</code></pre> <p>2.2 Receive data</p> <pre><code>// demo: CAN-BUS Shield, receive data with check mode\n// send data coming to fast, such as less than 10ms, you can use this way\n\n\n#include &lt;SPI.h&gt;\n#include \"mcp_can.h\"\n\n\n// the cs pin of the version after v1.1 is default to D9\n// v0.9b and v1.0 is default D10\nconst int SPI_CS_PIN = 9;\n\nMCP_CAN CAN(SPI_CS_PIN);                                    // Set CS pin\n\nvoid setup()\n{\n    Serial.begin(115200);\n\nSTART_INIT:\n\n    if(CAN_OK == CAN.begin(CAN_500KBPS))                   // init can bus\u00a0: baudrate = 500k\n    {\n        Serial.println(\"CAN BUS Shield init ok!\");\n    }\n    else\n    {\n        Serial.println(\"CAN BUS Shield init fail\");\n        Serial.println(\"Init CAN BUS Shield again\");\n        delay(100);\n        goto START_INIT;\n    }\n}\n\n\nvoid loop()\n{\n    unsigned char len = 0;\n    unsigned char buf[8];\n\n    if(CAN_MSGAVAIL == CAN.checkReceive())            // check if data coming\n    {\n        CAN.readMsgBuf(&amp;len, buf);    // read data,  len: data length, buf: data buf\n\n        unsigned char canId = CAN.getCanId();\n\n        Serial.println(\"-----------------------------\");\n        Serial.println(\"get data from ID: \");\n        Serial.println(canId);\n\n        for(int i = 0; i&lt;len; i++)    // print the data\n        {\n            Serial.print(buf[i]);\n            Serial.print(\"\\t\");\n        }\n        Serial.println();\n    }\n}\n</code></pre> <p>3. Upload two examples to two boards separately. Choose the board via the path: Tools --&gt;Serial Port--&gt;COMX. Note down which board is assigned as a \"send\" node and which board is assigned as a \"receive\" node.</p> <p>4. Open the \"Serial Monitor\" on the \"receive\" COM, you will get message sent from the \"send\" node. Here we have the preset message \"0 1 2 3 4 5 6 7\" showing in the following picture.</p> <p></p>"},{"location":"Products/Shield/can-bus-shield.html#reference","title":"Reference","text":""},{"location":"Products/Shield/can-bus-shield.html#1-set-the-baudrate","title":"1. Set the BaudRate","text":"<p>This function is used to initialize the baudrate of the CAN Bus system.</p> <p>The available baudrates are listed as follws:</p> <p>CAN_5KBPS, CAN_10KBPS, CAN_20KBPS, CAN_40KBPS, CAN_50KBPS, CAN_80KBPS, CAN_100KBPS, CAN_125KBPS, CAN_200KBPS, CAN_250KBPS, CAN_500KBPS and CAN_1000KBPS</p>"},{"location":"Products/Shield/can-bus-shield.html#2-set-receive-mask-and-filter","title":"2. Set Receive Mask and Filter","text":"<p>There are 2 receive mask registers and 5 filter registers on the controller chip that guarantee you get data from the target device. They are useful especially in a large network consisting of numerous nodes.</p> <p>We provide two functions for you to utilize these mask and filter registers. They are:</p> <p>init_Mask(unsigned char num, unsigned char ext, unsigned char ulData); &amp; init_Filt(unsigned char num, unsigned char ext, unsigned char ulData);</p> <p>\"num\" represents which register to use. You can fill 0 or 1 for mask and 0 to 5 for filter.</p> <p>\"ext\" represents the status of the frame. 0 means it's a mask or filter for a standard frame. 1 means it's for a extended frame.</p> <p>\"ulData\" represents the content of the mask of filter.</p>"},{"location":"Products/Shield/can-bus-shield.html#3-check-receive","title":"3. Check Receive","text":"<p>The MCP2515 can operate in either a polled mode, where the software checks for a received frame, or using additional pins to signal that a frame has been received or transmit completed. Use the following function to poll for received frames.</p> <p>INT8U MCP_CAN::checkReceive(void);</p> <p>The function will return 1 if a frame arrives, and 0 if nothing arrives.</p>"},{"location":"Products/Shield/can-bus-shield.html#4-get-can-id","title":"4. Get CAN ID","text":"<p>When some data arrive, you can use the following function to get the CAN ID of the \"send\" node.</p> <p>INT32U MCP_CAN::getCanId(void)</p>"},{"location":"Products/Shield/can-bus-shield.html#5-send-data","title":"5. Send Data","text":"<p>CAN.sendMsgBuf(INT8U id, INT8U ext, INT8U len, data_buf);</p> <p>is a function to send data onto the bus. In which:</p> <p>\"id\" represents where the data come from.</p> <p>\"ext\" represents the status of the frame. '0' means standard frame. '1' means extended frame.</p> <p>\"len\" represents the length of this frame.</p> <p>\"data_buf\" is the content of this message.</p> <p>For example, In the 'send' example, we have:</p> <pre><code>unsigned char stmp[8] = {0, 1, 2, 3, 4, 5, 6, 7};\n\nCAN.sendMsgBuf(0x00, 0, 8, stmp); //send out the message 'stmp' to the bus and tell other devices this is a standard frame from 0x00.\n</code></pre>"},{"location":"Products/Shield/can-bus-shield.html#6-receive-data","title":"6. Receive Data","text":"<p>The following function is used to receive data on the 'receive' node:</p> <p>CAN.readMsgBuf(unsigned char len, unsigned char buf);</p> <p>In conditions that masks and filters have been set. This function can only get frames that meet the requirements of masks and filters.</p> <p>\"len\" represents the data length.</p> <p>\"buf\" is where you store the data.</p>"},{"location":"Products/Shield/can-bus-shield.html#resources","title":"Resources","text":"<ul> <li>CAN-BUS Source code file for Arduino 1.0</li> <li>MCP2551 datasheet</li> <li>MCP2515 datasheet</li> </ul>"},{"location":"Products/Shield/capacitive-touch-shield.html","title":"Capacitive Touch Shield","text":""},{"location":"Products/Shield/capacitive-touch-shield.html#introduction","title":"Introduction","text":"<p>The MPR121 is a capacitive touch sensor controller that makes it very easy to integrate capacitive touch sensing into your project. It communicates via I2C, and works by measuring the capacitance of twelve electrode points. When an object comes close to the electrode connector, the measured capacitance changes. This signals the MPR121 that something has touched a 'button'. This Capacitive Touch Shield has 9 build-on capacitive touch pads, and the other 3 electrode for further usage. With this shield you can have a total of 12 touch sensitive buttons. . Compares to other touch shield that using digital pins, this shield uses less pins, which allows more pins left for other usage.</p> <p>Model: AS00121CTH </p>"},{"location":"Products/Shield/capacitive-touch-shield.html#features","title":"Features","text":"<ul> <li>12 Channels totally</li> <li>Build-On 9 keypad, 3 reserved pins for external usage</li> <li>Power status indicator</li> <li>I2C Communication, use less Arduino pins</li> <li>Dimensions(mm):60.0(L)x53.5(W)x2.8(H)</li> </ul>"},{"location":"Products/Shield/capacitive-touch-shield.html#basic-knowledge","title":"Basic Knowledge","text":"<ul> <li>please skit over this prograph if you do not interested on this, it do not your usage on this capacitive Touch Shield</li> </ul>"},{"location":"Products/Shield/capacitive-touch-shield.html#how-to-sense-the-touch","title":"How to Sense the \"Touch\"","text":"<p>The MPR121 measures the capacitance changes that between the pins and \"ground\" to detect the human touch. The complete capacitance measurement system is composed by sensing electrode pads connected to MPR121 sensing inputs, and the MPR121 communicating with the host processor via I2C bus and interrupt output .</p> <p>The capacitance measured on each sensing channel is the total capacitance to ground which can be the combination of background parasitic capacitance to ground(Cb) and finger touch induced capacitance to ground(Cx). The MPR121 uses a constant DC charge current scheme for capacitance measurement. Each channel is charged and then discharged completely to ground periodically to measure the capacitance. All the channels are measured sequentially, when one channel is in the charge/discharge and measurement period the other channels are shorted to ground.</p> <p>The amount of charge(Q)applied is programmable by setting the charge current(I), And the charge time(T). Once the electrode is charged, the peak voltage(V)at the end of chage is measured by internal 10 bit ADC. This voltage V is reverse proportional to the capatance(C)on the sensing channel.</p> <pre><code> &lt;i&gt;&lt;b&gt;C = Q/V = (I*T)/V&lt;/b&gt;&lt;/i&gt;\n</code></pre> <p>That is, If charge the outside cap with a some value of current(I) and time(T), and get the voltage(V), We can get the value of captance, using this way.</p>"},{"location":"Products/Shield/capacitive-touch-shield.html#how-the-mpr121-measures-the-capacitance-and-calibrate","title":"How the mpr121 measures the capacitance and calibrate","text":"<p>The ADC raw data outputs run through 3 levels of digital filtering to filter out the high frequency and low frequency noise encountered. The first level filter is a simple running average filter, the second level filter result is 10bit and stored in the output data registers as the immediate capacitance of each sensing input, the third level filter result is an even lower frequency content of signal change using the second level filter output, mainly used as the baseline value representing the capacitance variation over the long term and slow environment change such as atmospheric moisture and dirt for touch detection. </p> <p> <p>Touch and release is determined by comparing the immediate capacitance deviation that is the electrode second level filtered output data deviation to the baseline value. If the deviation passed the setting threshold, then a touch or release status is detected and reported in the status register. The touch and release threshold are independent and individually programmable for each electrode, providing hysteresis and electrode independence. Debounce setting can be used for further noise filtering to provide glitch free touch and release detection.</p></p> <p></p>"},{"location":"Products/Shield/capacitive-touch-shield.html#usage","title":"Usage","text":"<p>1.Hardware connection All the header pins are not soldered, so you can solder them by yourself to use it as Arduino \u201cShield\u201d, or just solder the necessary pins(Power/GND/I2C/IRQ) to make this board more easy to implement anywhere. There are 9 pads on the touch shield, the pad name connect with the MPR121 with :</p> <pre><code>&lt;i&gt;&lt;b&gt;Pad Name&lt;---&gt; MPR121 Pin&lt;/b&gt;&lt;/i&gt;\n\u00a0\u00a0\u00a0\u00a01&lt;---&gt;ELE8\n\u00a0\u00a0\u00a0\u00a02&lt;---&gt;ELE5\n\u00a0\u00a0\u00a0\u00a03&lt;---&gt;ELE2\n\u00a0\u00a0\u00a0\u00a04&lt;---&gt;ELE7\n\u00a0\u00a0\u00a0\u00a05&lt;---&gt;ELE4\n\u00a0\u00a0\u00a0\u00a06&lt;---&gt;ELE1\n\u00a0\u00a0\u00a0\u00a07&lt;---&gt;ELE6\n\u00a0\u00a0\u00a0\u00a08&lt;---&gt;ELE3\n\u00a0\u00a0\u00a0\u00a09&lt;---&gt;ELE0\n</code></pre> <p>And the ELE9~11 can be use for external usage. you can use any mental material you\u2019ve chosen to use as your electrode.   </p> <p>The Touch Shield uses I2C to communicate with controller. An IRQ(D2) was used to report the controller there is a \"Touch\" happened.  2.Download the Touch Shield demo code 3.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries. 4.Open the code directly by the path:File -&gt; Example -&gt;Touch_Shield_Example.  </p> <pre><code>#include \"mpr121.h\"\n#include \"i2c.h\"\n\n// 11 max digits used\n#define DIGITS 11 \n\n// Match key inputs with electrode numbers\n#define ONE 8\n#define TWO 5\n#define THREE 2\n#define FOUR 7\n#define FIVE 4\n#define SIX 1\n#define SEVEN 6\n#define EIGHT 3\n#define NINE 0\n\n//extras (not used)\n#define ELE9 9\n#define ELE10 10\n#define ELE11 11\n\n//interupt pin\nint irqpin = 2;  // D2\n\nvoid setup()\n{\n  //make sure the interrupt pin is an input and pulled high\n  pinMode(irqpin, INPUT);\n  digitalWrite(irqpin, HIGH);\n\n  //configure serial out\n  Serial.begin(9600);\n\n  //output on ADC4 (PC4, SDA)\n  DDRC |= 0b00010011;\n  // Pull-ups on I2C Bus\n  PORTC = 0b00110000; \n  // initalize I2C bus. Wiring lib not used. \n  i2cInit();\n\n  delay(100);\n  // initialize mpr121\n  mpr121QuickConfig();\n\n  // Create and interrupt to trigger when a button\n  // is hit, the IRQ pin goes low, and the function getNumber is run. \n  attachInterrupt(0,getNumber,LOW);\n\n  // prints 'Ready...' when you can start hitting numbers\n  Serial.println(\"Ready...\");\n}\n\nvoid loop()\n{\n  //You can put additional code here. The interrupt will run in the backgound. \n}\n\nvoid getNumber()\n{\n  int i = 0;\n  int touchNumber = 0;\n  uint16_t touchstatus;\n  char digits[DIGITS];\n\n  touchstatus = mpr121Read(0x01) &lt;&lt; 8;\n  touchstatus |= mpr121Read(0x00);\n\n  for (int j=0; j&lt;12; j++)  // Check how many electrodes were pressed\n  {\n    if ((touchstatus &amp; (1&lt;&lt;j)))\n      touchNumber++;\n  }\n\n  if (touchNumber == 1)\n  {\n    if (touchstatus &amp; (1&lt;&lt;SEVEN))\n      digits[i] = '7';\n    else if (touchstatus &amp; (1&lt;&lt;FOUR))\n      digits[i] = '4';\n    else if (touchstatus &amp; (1&lt;&lt;ONE))\n      digits[i] = '1';\n    else if (touchstatus &amp; (1&lt;&lt;EIGHT))\n      digits[i] = '8';\n    else if (touchstatus &amp; (1&lt;&lt;FIVE))\n      digits[i] = '5';\n    else if (touchstatus &amp; (1&lt;&lt;TWO))\n      digits[i] = '2';\n    else if (touchstatus &amp; (1&lt;&lt;NINE))\n      digits[i] = '9';\n    else if (touchstatus &amp; (1&lt;&lt;SIX))\n      digits[i] = '6';\n    else if (touchstatus &amp; (1&lt;&lt;THREE))\n      digits[i] = '3';\n\n    Serial.print(digits[i]);\n    i++;\n  }\n  //do nothing if more than one button is pressed\n  else if (touchNumber == 0)\n    ;\n  else\n    ;\n}\n</code></pre> <p>5.Uplaod the code, then touch the pad on the shield, you will see outputs as below:  6.If you want to use the extern 3 pins, add the follows codes in the if (touchNumber == 1) function in the loop()</p> <pre><code>   else if (touchstatus &amp; (1 &lt;&lt; ELE9))\n{\n  digits = 'A';\n}\nelse if (touchstatus &amp; (1 &lt;&lt; ELE10))\n{\n digits = 'B';\n}\nelse if (touchstatus &amp; (1 &lt;&lt; ELE11))\n{\n digits = 'C';\n}\n</code></pre> <p>If your IRQ was used for other modules and you do not want to use the IRQ, you can also inquery the toush status with about 100ms interval, you can take a reference of Touch Shield with no IRQ.zip</p>"},{"location":"Products/Shield/capacitive-touch-shield.html#resources","title":"Resources","text":"<ul> <li>Touch Shield demo code</li> </ul>"},{"location":"Products/Shield/cc3000-wifi-shield.html","title":"CC3000 WiFi Shield","text":""},{"location":"Products/Shield/cc3000-wifi-shield.html#introduction","title":"Introduction","text":"<p>This is a shield for the CC3000 WiFi Module. The CC3000 from TI (Texas Instruments) is a self-contained wireless network processor that makes incorporating internet connectivity into your project simple. Instead of the more standard UART communication method, the CC3000 module utilizes an SPI interface allowing you, the user, to control the flow of data as you please. What makes the CC3000 unique is its ability to associate to a WiFi access point using a cell phone app in the Texas Instruments process called SmartConfig.</p> <p>Model: (Discontinued) </p>"},{"location":"Products/Shield/cc3000-wifi-shield.html#features","title":"Features","text":"<ol> <li>Arduino, Crowduino, Seeeduino, Arduino Mega and Crowduino Mega compatible</li> <li>Support SD card 2GB and 4GB</li> <li>Wireless network processor <ul> <li>IEEE 802.11 b/g ( 2.4GHz)</li> <li>Embedded IPv4 TCP/IP stack</li> </ul> </li> <li>Best-in-class radio performance <ul> <li>TX power: +18.0 dBm at 11 Mbps, CCK</li> <li>RX sensitivity: \u201388 dBm, 8% PER, 11 Mbps</li> </ul> </li> <li>Works with low MIPS and low-cost MCUs with compact memory footprint <ul> <li>Small code size (Flash and RAM) required for MCU</li> </ul> </li> <li>FCC, IC, CE and TELEC certified reference design with a chip antenna</li> <li>Integrated crystal and power management</li> <li>Small form factor <ul> <li>16.3 mm \u00d7 13.5 mm \u00d7 2 mm</li> </ul> </li> <li>Operating temperature: \u201320\u00b0C to 70\u00b0C</li> <li>SmartConfig technology enables simple Wi-Fi configuration using a smartphone, tablet or PC</li> <li>Proven Wi-Fi interoperability; based on TI\u2019s seventh generation of proven Wi-Fi solutions</li> <li>Complete platform solution including user and porting guides, API guide, sample applications, and support community</li> </ol>"},{"location":"Products/Shield/cc3000-wifi-shield.html#specifications","title":"Specifications","text":"<p>CC3000 Specifications</p> CC3000's Characteristics Standards 802.11 b/g, BSS Station Wi-Fi Security Modes WEP, WPA/WPA2 (AES and TKIP \u2013 Personal) Embedded Wi-Fi TCP/IP stack (IPv4 \u2013 DHCP client, DNS, mDNS, ARP), Wi-Fi driver, security supplicant, Auto-calibrated radio Required Code size As low as 5KB Flash &amp; 360B RAM Host Interface SPI at 16MHz Power Modes Active Mode (92mA typ RX current), Shutdown Mode (&lt;5uA) Power Supply 2.9V \u2013 4.8V I/O Voltage 1.8V \u2013 3.6V Connections 4 Sockets (UDP or TCP) Throughput (TCP) ~4 Mbps***Note** This was measured for CC3000, when combined with MSP430FR5739 Headless Configuration SmartConfig\u2122 Technology"},{"location":"Products/Shield/cc3000-wifi-shield.html#usage","title":"Usage","text":""},{"location":"Products/Shield/cc3000-wifi-shield.html#hardware-installation","title":"Hardware Installation","text":"<p>Assemble these parts together like the picture below. and mount the shield onto your Arduino/Crowduino.</p>"},{"location":"Products/Shield/cc3000-wifi-shield.html#software-programming","title":"Software Programming","text":"<p>1.First you have to make sure that Arduino1.0 has already been installed on your computer. 2.Download the CC3000 WiFi Shield library here CC3000_Library.zip and unzip it into the libraries file of Arduino via this path: ..\\arduino-1.0\\libraries 3.Open the code directly by the path:File -&gt; Example -&gt;CC3000_Library-&gt;buildtest.</p> <pre><code>#include &lt;Adafruit_CC3000.h&gt;\n#include &lt;ccspi.h&gt;\n#include &lt;SPI.h&gt;\n#include &lt;string.h&gt;\n#include \"utility/debug.h\"\n\n// These are the interrupt and control pins\n#define ADAFRUIT_CC3000_IRQ   3  // MUST be an interrupt pin!\n// These can be any two pins\n#define ADAFRUIT_CC3000_VBAT  5\n#define ADAFRUIT_CC3000_CS    10\n// Use hardware SPI for the remaining pins\n// On an UNO, SCK = 13, MISO = 12, and MOSI = 11\nAdafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS, ADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT,\n                                         SPI_CLOCK_DIVIDER); // you can change this clock speed but DI\n\n#define WLAN_SSID       \"myNetwork\"        // cannot be longer than 32 characters!\n#define WLAN_PASS       \"myPassword\"\n// Security can be WLAN_SEC_UNSEC, WLAN_SEC_WEP, WLAN_SEC_WPA or WLAN_SEC_WPA2\n#define WLAN_SECURITY   WLAN_SEC_WPA2\n\n\n\n/**************************************************************************/\n/*!\n    @brief  Sets up the HW and the CC3000 module (called automatically\n            on startup)\n*/\n/**************************************************************************/\nvoid setup(void)\n{\n  Serial.begin(115200);\n  Serial.println(F(\"Hello, CC3000!\\n\")); \n\n  displayDriverMode();\n  Serial.print(\"Free RAM: \"); Serial.println(getFreeRam(), DEC);\n\n  /* Initialise the module */\n  Serial.println(F(\"\\nInitialising the CC3000 ...\"));\n  if (!cc3000.begin())\n  {\n    Serial.println(F(\"Unable to initialise the CC3000! Check your wiring?\"));\n    while(1);\n  }\n\n  /* Optional: Update the Mac Address to a known value */\n/*\n  uint8_t macAddress[6] = { 0x08, 0x00, 0x28, 0x01, 0x79, 0xB7 };\n   if (!cc3000.setMacAddress(macAddress))\n   {\n     Serial.println(F(\"Failed trying to update the MAC address\"));\n     while(1);\n   }\n*/\n\n  uint16_t firmware = checkFirmwareVersion();\n  if (firmware &lt; 0x113) {\n    Serial.println(F(\"Wrong firmware version!\"));\n    for(;;);\n  } \n\n  displayMACAddress();\n\n  /* Optional: Get the SSID list (not available in 'tiny' mode) */\n#ifndef CC3000_TINY_DRIVER\n  listSSIDResults();\n#endif\n\n  /* Delete any old connection data on the module */\n  Serial.println(F(\"\\nDeleting old connection profiles\"));\n  if (!cc3000.deleteProfiles()) {\n    Serial.println(F(\"Failed!\"));\n    while(1);\n  }\n\n  /* Optional: Set a static IP address instead of using DHCP.\n     Note that the setStaticIPAddress function will save its state\n     in the CC3000's internal non-volatile memory and the details\n     will be used the next time the CC3000 connects to a network.\n     This means you only need to call the function once and the\n     CC3000 will remember the connection details.  To switch back\n     to using DHCP, call the setDHCP() function (again only needs\n     to be called once).\n  */\n  /*\n  uint32_t ipAddress = cc3000.IP2U32(192, 168, 1, 19);\n  uint32_t netMask = cc3000.IP2U32(255, 255, 255, 0);\n  uint32_t defaultGateway = cc3000.IP2U32(192, 168, 1, 1);\n  uint32_t dns = cc3000.IP2U32(8, 8, 4, 4);\n  if (!cc3000.setStaticIPAddress(ipAddress, netMask, defaultGateway, dns)) {\n    Serial.println(F(\"Failed to set static IP!\"));\n    while(1);\n  }\n  */\n  /* Optional: Revert back from static IP addres to use DHCP.\n     See note for setStaticIPAddress above, this only needs to be\n     called once and will be remembered afterwards by the CC3000.\n  */\n  /*\n  if (!cc3000.setDHCP()) {\n    Serial.println(F(\"Failed to set DHCP!\"));\n    while(1);\n  }\n  */\n\n  /* Attempt to connect to an access point */\n  char *ssid = WLAN_SSID;             /* Max 32 chars */\n  Serial.print(F(\"\\nAttempting to connect to \")); Serial.println(ssid);\n\n  /* NOTE: Secure connections are not available in 'Tiny' mode!\n     By default connectToAP will retry indefinitely, however you can pass an\n     optional maximum number of retries (greater than zero) as the fourth parameter.\n\n     ALSO NOTE: By default connectToAP will retry forever until it can connect to\n     the access point.  This means if the access point doesn't exist the call\n     will _never_ return!  You can however put in an optional maximum retry count\n     by passing a 4th parameter to the connectToAP function below.  This should\n     be a number of retries to make before giving up, for example 5 would retry\n     5 times and then fail if a connection couldn't be made.\n  */\n  if (!cc3000.connectToAP(WLAN_SSID, WLAN_PASS, WLAN_SECURITY)) {\n    Serial.println(F(\"Failed!\"));\n    while(1);\n  }\n\n  Serial.println(F(\"Connected!\"));\n\n  /* Wait for DHCP to complete */\n  Serial.println(F(\"Request DHCP\"));\n  while (!cc3000.checkDHCP())\n  {\n    delay(100); // ToDo: Insert a DHCP timeout!\n  }  \n\n  /* Display the IP address DNS, Gateway, etc. */  \n  while (! displayConnectionDetails()) {\n    delay(1000);\n  }\n\n#ifndef CC3000_TINY_DRIVER\n  /* Try looking up www.adafruit.com */\n  uint32_t ip = 0;\n  Serial.print(F(\"www.adafruit.com -&gt; \"));\n  while  (ip  ==  0)  {\n    if  (!  cc3000.getHostByName(\"www.adafruit.com\", &amp;ip))  {\n      Serial.println(F(\"Couldn't resolve!\"));\n    }\n    delay(500);\n  }  \n  cc3000.printIPdotsRev(ip);\n\n  /* Do a quick ping test on adafruit.com */  \n  Serial.print(F(\"\\n\\rPinging \")); cc3000.printIPdotsRev(ip); Serial.print(\"...\");  \n  uint8_t replies = cc3000.ping(ip, 5);\n  Serial.print(replies); Serial.println(F(\" replies\"));\n  if (replies)\n    Serial.println(F(\"Ping successful!\"));\n#endif\n\n  /* You need to make sure to clean up after yourself or the CC3000 can freak out */\n  /* the next time you try to connect ... */\n  Serial.println(F(\"\\n\\nClosing the connection\"));\n  cc3000.disconnect();\n}\n\nvoid loop(void)\n{\n  delay(1000);\n}\n\n/**************************************************************************/\n/*!\n    @brief  Displays the driver mode (tiny of normal), and the buffer\n            size if tiny mode is not being used\n\n    @note   The buffer size and driver mode are defined in cc3000_common.h\n*/\n/**************************************************************************/\nvoid displayDriverMode(void)\n{\n  #ifdef CC3000_TINY_DRIVER\n    Serial.println(F(\"CC3000 is configure in 'Tiny' mode\"));\n  #else\n    Serial.print(F(\"RX Buffer\u00a0: \"));\n    Serial.print(CC3000_RX_BUFFER_SIZE);\n    Serial.println(F(\" bytes\"));\n    Serial.print(F(\"TX Buffer\u00a0: \"));\n    Serial.print(CC3000_TX_BUFFER_SIZE);\n    Serial.println(F(\" bytes\"));\n  #endif\n}\n\n/**************************************************************************/\n/*!\n    @brief  Tries to read the CC3000's internal firmware patch ID\n*/\n/**************************************************************************/\nuint16_t checkFirmwareVersion(void)\n{\n  uint8_t major, minor;\n  uint16_t version;\n\n#ifndef CC3000_TINY_DRIVER  \n  if(!cc3000.getFirmwareVersion(&amp;major, &amp;minor))\n  {\n    Serial.println(F(\"Unable to retrieve the firmware version!\\r\\n\"));\n    version = 0;\n  }\n  else\n  {\n    Serial.print(F(\"Firmware V.\u00a0: \"));\n    Serial.print(major); Serial.print(F(\".\")); Serial.println(minor);\n    version = major; version &lt;&lt;= 8; version |= minor;\n  }\n#endif\n  return version;\n}\n\n/**************************************************************************/\n/*!\n    @brief  Tries to read the 6-byte MAC address of the CC3000 module\n*/\n/**************************************************************************/\nvoid displayMACAddress(void)\n{\n  uint8_t macAddress[6];\n\n  if(!cc3000.getMacAddress(macAddress))\n  {\n    Serial.println(F(\"Unable to retrieve MAC Address!\\r\\n\"));\n  }\n  else\n  {\n    Serial.print(F(\"MAC Address\u00a0: \"));\n    cc3000.printHex((byte*)&amp;macAddress, 6);\n  }\n}\n\n\n/**************************************************************************/\n/*!\n    @brief  Tries to read the IP address and other connection details\n*/\n/**************************************************************************/\nbool displayConnectionDetails(void)\n{\n  uint32_t ipAddress, netmask, gateway, dhcpserv, dnsserv;\n\n  if(!cc3000.getIPAddress(&amp;ipAddress, &amp;netmask, &amp;gateway, &amp;dhcpserv, &amp;dnsserv))\n  {\n    Serial.println(F(\"Unable to retrieve the IP Address!\\r\\n\"));\n    return false;\n  }\n  else\n  {\n    Serial.print(F(\"\\nIP Addr: \")); cc3000.printIPdotsRev(ipAddress);\n    Serial.print(F(\"\\nNetmask: \")); cc3000.printIPdotsRev(netmask);\n    Serial.print(F(\"\\nGateway: \")); cc3000.printIPdotsRev(gateway);\n    Serial.print(F(\"\\nDHCPsrv: \")); cc3000.printIPdotsRev(dhcpserv);\n    Serial.print(F(\"\\nDNSserv: \")); cc3000.printIPdotsRev(dnsserv);\n    Serial.println();\n    return true;\n  }\n}\n\n/**************************************************************************/\n/*!\n    @brief  Begins an SSID scan and prints out all the visible networks\n*/\n/**************************************************************************/\n\nvoid listSSIDResults(void)\n{\n  uint32_t index;\n  uint8_t valid, rssi, sec;\n  char ssidname[33]; \n\n  if (!cc3000.startSSIDscan(&amp;index)) {\n    Serial.println(F(\"SSID scan failed!\"));\n    return;\n  }\n\n  Serial.print(F(\"Networks found: \")); Serial.println(index);\n  Serial.println(F(\"================================================\"));\n\n  while (index) {\n    index--;\n\n    valid = cc3000.getNextSSID(&amp;rssi, &amp;sec, ssidname);\n\n    Serial.print(F(\"SSID Name    : \")); Serial.print(ssidname);\n    Serial.println();\n    Serial.print(F(\"RSSI         : \"));\n    Serial.println(rssi);\n    Serial.print(F(\"Security Mode: \"));\n    Serial.println(sec);\n    Serial.println();\n  }\n  Serial.println(F(\"================================================\"));\n\n  cc3000.stopSSIDscan();\n}\n</code></pre> <p>4.Before you run the sketch, edit it to replace the dummy SSID and password with your own:</p> <pre><code> #define WLAN_SSID       \"yourNetwork\"        // cannot be longer than 32 characters!\n #define WLAN_PASS       \"yourPassword\"\n</code></pre> <p>If you're using WEP, the password should look like this:</p> <pre><code>const char WLAN_PASS[] = {0x1A, 0x2B, 0x3C, 0x4D, 0x5E, 0x00}; \n</code></pre> <p>Since it's a collection of bytes not 'passphrase' style key Also, make sure that the right wireless security scheme is selected (unsecured, WEP, WPA, or WPA2) Copy Code</p> <p>// Security can be WLAN_SEC_UNSEC, WLAN_SEC_WEP, WLAN_SEC_WPA or WLAN_SEC_WPA2</p> <pre><code>#define WLAN_SECURITY   WLAN_SEC_WPA2\n</code></pre> <p>5.Here's a sample of the Serial Monitor output of buildtest. You should see something similar:  </p>"},{"location":"Products/Shield/cc3000-wifi-shield.html#resource","title":"Resource","text":"<ul> <li>CC3000 Library</li> <li>More usage</li> <li>File:CC3000 Module.pdf</li> </ul>"},{"location":"Products/Shield/currentvoltagepower-monitor-hat-for-raspberry-pi.html","title":"Current/Voltage/Power Monitor HAT for Raspberry Pi","text":""},{"location":"Products/Shield/currentvoltagepower-monitor-hat-for-raspberry-pi.html#introduction","title":"Introduction","text":"<p>This is current and power monitor HAT designed for Raspberry Pi. Support 4-channel, it is easy to monitor current, voltage, and power consumption, voltage across the sampling resistor via the I2C or SMBus interface.</p> <p>Model: RPA20901S</p> <p></p> <p></p>"},{"location":"Products/Shield/currentvoltagepower-monitor-hat-for-raspberry-pi.html#features","title":"Features","text":"<ul> <li>Standard Raspberry Pi 40PIN GPIO extension header, suitable for all Raspberry Pi boards</li> <li>Support 4-channel detection, can communicate through I2C/SMBus interface</li> <li>Onboard 0.1\u03a9 1\uff05 sampling resistor, allows measuring bi-directional current up to 3.2A</li> <li>Embedded 12-bit ADC, supports multiple successive converting, 0~26V voltage measuring range</li> <li>The output measurement power can be directly calculated through the additional multiplication register</li> <li>I2C control pins for connecting with other main boards easily</li> </ul>"},{"location":"Products/Shield/currentvoltagepower-monitor-hat-for-raspberry-pi.html#specification","title":"Specification","text":"<ul> <li>Operating voltage: 3.3V/5V</li> <li>Control interface: I2C/SMBus</li> <li>Sampling resistor: 0.1\u03a9 1%</li> <li>Voltage range: 0~26V</li> <li>Current range: \u00b13.2A</li> <li>Resolution: 0.8mA (\u00b13.2A range) OR 0.1mA (\u00b1400mA range)</li> <li>Dimensions: 65mm \u00d7 30mm</li> <li>Mounting hole size: 3.0mm</li> </ul>"},{"location":"Products/Shield/currentvoltagepower-monitor-hat-for-raspberry-pi.html#interface-description","title":"Interface Description","text":"<p>The module can measure the current and voltage of four channels, which correspond to (IN1+ IN1-), (IN2+ IN2-), (IN3+ IN3-) and (IN4+ IN4-) respectively. INx+ and INx- represent the input and output of the current respectively. The module obtains the magnitude of the current flowing by measuring the differential voltage of the sampling resistor connected in series with INx+ and INx-. The module can test bidirectional current, and all input and output connections can be reversed.</p> <p>Note: In addition, it should be noted that measuring different power supplies needs to be connected to the GND common ground, otherwise the bus voltage cannot be measured, only the differential voltage and current can be measured.</p>"},{"location":"Products/Shield/currentvoltagepower-monitor-hat-for-raspberry-pi.html#usage","title":"Usage","text":"<p>Use with Raspberry Pi</p> <p>1. Open the I2C interface</p> <p>1) Execute in the terminal:</p> <pre><code>sudo raspi-config\nSelect Interfacing Options -&gt; I2C -&gt; yes to start the i2C kernel driver\n</code></pre> <p></p> <p>Then restart the Raspberry Pi:</p> <pre><code>sudo reboot\n</code></pre> <p>2. When using the Raspberry Pi to demonstrate this routine, you only need to insert the module into the Raspberry Pi header, or connect it to the Raspberry Pi\u2019s I2C interface via a Dupont cable, connect VCC to 3.3V and enter the following command to run the program.</p> <pre><code>sudo pip3 install adafruit-circuitpython-ina219\nsudo apt-get install p7zip\nwget http://www.waveshare.net/w/upload/6/69/Current-Power_Monitor_HAT_Code.7z\n7zr x Current-Power_Monitor_HAT_Code.7z -r -o./Current-Power_Monitor_HAT\ncd Current-Power_Monitor_HAT/RaspberryPi\npython3 ina219.py\n</code></pre> <p>After the program runs, the bus voltage, sampling resistor differential voltage, input voltage, power, current and other values \u200b\u200bwill be output.</p>"},{"location":"Products/Shield/dual-channel-h-bridge-motor-shield.html","title":"Dual Channel H-Bridge Motor Shield","text":""},{"location":"Products/Shield/dual-channel-h-bridge-motor-shield.html#description","title":"Description","text":"<p>The Dual Channel H-Bridge Motor Shield is composed of 2 discrete MOSFET H-bridge, designed to drive two DC motor with max current 8A. It is made up of 8 N-channel MOSFET IRF3205S and 4 pcs of half bridge motor controller IR2104, to build 2 H-bridge. With this shield and the Arduino board, users can control and drive motors with a max current 8A@ 22V. The universal 7.4~11.1V lipo battery that are popular used in the remote car and model airplane can be applied as well.</p> <p>The H-Bridge Motor Shield can be controlled by simply applying logic 0 or 1 to the direction pins for that motor and a PWM signal to the speed pin. In this way, speed and direction of two separate motors can be controlled independently. Note that the PWM signal on the P_1 and P_2 can be 0~99%, but 100% high signal (logic 1) not works because of the motor controller IR2104 boost circuit.</p> <p>Model: ACS70028DH</p> <p> </p> <p></p>"},{"location":"Products/Shield/dual-channel-h-bridge-motor-shield.html#features","title":"Features","text":"<ul> <li>Uses the IRF3205S MOSFET, which support max current up to 110A</li> <li>Uses Half bridge motor controller IR2104, to avoid H-bridge shortage.</li> <li>2 Channels</li> </ul>"},{"location":"Products/Shield/dual-channel-h-bridge-motor-shield.html#specifications","title":"Specifications","text":"Item Min Typical Max Unit Logic Control Voltage 4.5 5 5.5 V Motor Supply Voltage 6 / 22 V Output Voltage 0 / Vinput -1 V Output Current( For Each Channel) / / 8000 mA Output Duty range 0%~99% / Dimension 77.0(L)x55.0(W)x23.5(H) mm"},{"location":"Products/Shield/dual-channel-h-bridge-motor-shield.html#h-bridge-introduction","title":"H-Bridge Introduction","text":""},{"location":"Products/Shield/dual-channel-h-bridge-motor-shield.html#what-is-h-bridge","title":"What is H-Bridge?","text":"<p>H Bridge configuration is commonly used in electrical applications where the load needs to be driven in either direction. Sometimes it is called a \"full bridge\", the H-bridge is so named because it has four switching elements at the \"corners\" of the H and the motor forms the cross bar. The basic bridge is shown in the figure to the right. A typical H-Bridge structure is shown below:  The current flows through the load M \u2013 Motor in one direction when S1 and S4 switches are closed and current flows in the other direction when S2 and S3 switches are closed. Controller these switches on/off would be surly control the current directly, thus to control the motor rotation. As you see, 4 switches would be needed for a H-bridge, that is way you can see 8 Mosfet on the elecrow dual channel h-bridge motor shield.</p>"},{"location":"Products/Shield/dual-channel-h-bridge-motor-shield.html#why-h-bridge-shield-but-not-driver-ic-solution-such-as-l298","title":"Why H-Bridge Shield But Not Driver IC Solution Such As L298?","text":"<p>Actually, there are many Integrated motor driver IC such L298 that maybe easy to use and cheaper, but if your application need larger drive current, for example, 5A current to drive quad-rotor, using discrete device to build H-bridge would be a better solution, they support larger current with lower heat dissipation and higher switching speed. The popular used motor driver IC L298P or L298N can only support a max current of 2A, with terrible heat dissipation that may burn you, but this Elecrow Dual Channel h-bridge Motor Shield would support a minimum of current 8A, with a little heat dissipation, the peak current can be even to 15A.</p> <p>Actually, if i have a more powerful power resource to test this shield, i believe it would supply a larger driver current.</p>"},{"location":"Products/Shield/dual-channel-h-bridge-motor-shield.html#interface-function","title":"Interface Function","text":"<p>Motor Supply Voltage: ------&gt; External Power supply for the Motor Shield, Could be 6~22V depending on the motor you used  Power Indicator: ------&gt; LED indicator for the external power supply. H-Bridge Driver: ------&gt; 8 High-power MOSFET to build H-Bridge. Motor_1&amp;2 Connector: ------&gt; Connect your motors here, the H-Bridge motor shield can drive 2 motors simultaneously, of course it can also drive a 4-wire stepper. Motor Control Pins: ------&gt; Arduino pins used to control the motor direction&amp;speed as belows:  </p> Motor Pin Name Arduino pin Description Motor_1 1A D4 D4=0,D5=1 -&gt; clockwise;<p>D4=1,D5=0 -&gt; anticlockwise;</p> 1B D5 P_1 D9 Motor_1 speed control, duty can be 0%~99% Motor_2 2A D7 D7=0,D8=1 -&gt; clockwise;       <p>D7=1,D8=0 -&gt; anticlockwise;</p> 2B D8 P_2 D10 Motor_2 speed control, duty can be 0%~99% Motor_1 and Motor_2 EN D6 Motor Shield Output Enable, Should be set to \"1\" while working"},{"location":"Products/Shield/dual-channel-h-bridge-motor-shield.html#usage","title":"Usage","text":"<p>The Dual-Channel H-Bridge Motor Shield is easy to use, plug on the motor shield onto Croduino, connect your motors to motor shield via the motor_1 and motor_2 connect, and then connect the Crowduino to PC via USB.  And then, connect the the power supply for motors, via the power supply screws. Important, be careful about the polarity of the power supply as the wrong connection may destroy the motor controller especilly when using high voltage power supply.  The Arduino control the 2 motors as belows:</p> <pre><code>void setup() {                \n // Motor_1 controll pin initiate;\n pinMode(4, OUTPUT);     \n pinMode(5, OUTPUT);    \n pinMode(9, OUTPUT); // Speed control\n\n // Motor_2 controll pin initiate;\n pinMode(7, OUTPUT);     \n pinMode(8, OUTPUT);    \n pinMode(10, OUTPUT);  // Speed control\n\n //Enable the Motor Shield output;  \n pinMode(6, OUTPUT); \n digitalWrite(6, HIGH);  \n}\nvoid loop() {\n\n   analogWrite(9,230);    // set the motor_1 speed\u00a0;\n   digitalWrite(4, HIGH);   \n   digitalWrite(5, LOW);  // Set the rotation of motor_1\n\n   analogWrite(10,50);    // set the motor_2 speed\u00a0;\n   digitalWrite(7, HIGH);  \n   digitalWrite(8, LOW);  // Set the rotation of motor_2\n\n  delay(5000);               // wait for a 5 seconds\n  // And we change the motor speed and  rotation direction\n    analogWrite(9,100);    // set the motor_1 speed to 100\u00a0;\n   digitalWrite(4, LOW);   \n   digitalWrite(5, HIGH);  // Set the rotation of motor_1\n\n   analogWrite(10,150);    // set the motor_2 speed to 150\n   digitalWrite(7, LOW);  \n   digitalWrite(8, HIGH);  // Set the rotation of motor_2\n   delay(5000)\u00a0;              // wait for a 5 seconds\n}\n</code></pre>"},{"location":"Products/Shield/dual-channel-h-bridge-motor-shield.html#resources","title":"Resources","text":"<ul> <li>Dual Channel H-Bridge Motor Shield in PDF </li> <li>Purchase link Dual Channel H-Bridge Motor Shield (8A 22V)</li> </ul>"},{"location":"Products/Shield/ehternet-shield.html","title":"Ehternet Shield","text":""},{"location":"Products/Shield/ehternet-shield.html#description","title":"Description","text":"<p>The Ethernet Shield connects your Arduino device to the internet in mere minutes. Just plug this module onto your Arduino board, connect it to your network with an RJ45 cable (not included) and follow a few simple instructions to start controlling your world through the internet.</p> <p>The Ethernet controller of this Ethernet Shield is W5200. it is twice the buffer size of W5100 and support for up to eight simultaneous TCP/UDP connections. There is an onboard micro-SD card slot, which can be used to store files for serving over the network. Thanks to a lowered RJ45 pot, you can flexibly add most shields on top of this Ethernet Shield.</p> <p>Model: ACS52001S</p> <p></p>"},{"location":"Products/Shield/ehternet-shield.html#features","title":"Features","text":"<ul> <li>Standard Shield that Arduino, Mega, Crowduino Compatible</li> <li>High speed Ethernet controller W5200 with internal 32K buffer</li> <li>With Micro SD card for storing large amounts of data.</li> <li>Connection with Arduino on SPI port</li> <li>Support up to eight simultaneous TCP/UDP connections</li> <li>Lowered RJ45 Ethernet jack</li> <li>long wire-wrap headers extend through the shield</li> </ul>"},{"location":"Products/Shield/ehternet-shield.html#specification","title":"Specification","text":"Item  Min  Typical  Max  Unit Voltage 3.5 5.0 5.5 VDC Current 120 210 350 mA  Supported SD Micro SD card(More than 2G is not guaranteed) /  Supported Connection TCP/UDP /  Dimension  53.4X68.7 mm  Weight  22.3 g"},{"location":"Products/Shield/ehternet-shield.html#interface","title":"Interface","text":"<p>Hardware Configuration</p> <p>RJ45: Ethernet Port;</p> <p>IC HX1198: 10/100BASE-T signal port;</p> <p>IC W5200: a hardwired TCP/IP Ethernet Controller;</p> <p>U3: IC CJ117, low dropout linear regulator;</p> <p>U6: IC 74VHC125PW, quad buffer;</p> <p>Reset KEY: Reset Ethernet shield and Arduino when pressed;</p> <p>SD card: support Micro SD card in FAT16 or FAT32; maximum storage is 2GB.</p> <p>Pins usage on Arduino</p> <p>D4: SD card chip select</p> <p>D10: W5200 Chip Select</p> <p>D11: SPI MOSI</p> <p>D12: SPI MISO</p> <p>D13: SPI SCK</p> <p>Notice:</p> <p>Both W5200 and SD card communicate with Arduino via SPI bus. Pin 10 and pin 4 are chip select pins for W5200 and SD slot. They cannot be used as general I/O.  Connect the PWDN pin to GND or VCC to control it be in Power Down Mode. If you can't run the the Ethernet. please connect thw PWDN pin to GND and have a try again.</p>"},{"location":"Products/Shield/ehternet-shield.html#usage","title":"Usage","text":"<p>We are going to build a simple web server that answer request from a client and store the readings from A0 through A5 to SD card.</p> <p>Step 1: Hookup</p> <p>1. Mount Ethernet Shield v1.0 to your Arduino;</p> <p>2. Connect the shield to your computer or a network hub or a router using a standard Ethernet cable;</p> <p>3. Connect Arduino to PC via USB cable;</p> <p>4. Insert a SD card to the SD card slot.</p> <p>Step 2: Upload the program</p> <p>1. Download the library\uff1aEthernet_Shield_W5200 Library.</p> <p>2. Unzip and put it in the libraries file of Arduino IDE by the path: ..\\arduino-1.0.1\\libraries.</p> <p>3. Restart the Arduino IDE.</p> <p>4. Open the example \"WebServerWithSD\" via the path: File --&gt; Examples --&gt; EthernetV1_0 --&gt; WebServerWithSD. This example shows you how to build up a simple web server that displays the readings of anolog A0 through A5 when requested. After that, store those readings into SD card.</p> <p>Note**:</p> <p>This new library covers all functions included in the buildin Ethernet library of Arduino IDE. You can use other examples in the same way as that in the preceding Ethernet library.</p> <p>5. Upload the program to Arduino. If you do no how to upload code, please click here.</p> <p></p> <p>In this code ,we have defined pin 4 as SD card chip select port and pin 10 as W5200 chip select port.</p> <p>Firstly it will send a link to this client if there has a client request access this server.Then send the value of each analog input pin to the network.</p> <p>Finally you can view each analog pin by open SD Card file.</p> <p>Step 3: Results</p> <p>Open a web browser and enter the IP address of your controller. It's dependent on your local network but used to be 192.168.168.178. Then you should find the readings of A0 through A5 popping up as shown below.</p> <p></p> <p>To check what's going on to the SD card, open the serial monitor. You can use the built-in serial monitor of Arduino IDE or a serial monitor tool as us. After opening a serial monitor, you can read the content of file \"test.txt\" which we created to store the readings of analog pins.</p> <p></p> <p>Notice: 1\uff09 Make sure the Ethernet Shield and your computer are in the same local network. 2\uff09 Once the code has been successfully uploaded, it's fine to disconnect the board from your computer and apply independent power to it, leaving it run alone.</p>"},{"location":"Products/Shield/ehternet-shield.html#resource","title":"Resource","text":"<ul> <li> <p>Ethernet_Shield_W5200 Library</p> </li> <li> <p>SD Library</p> </li> <li> <p>W5200 Datasheet.pdf</p> </li> <li> <p>Ethernet Shield v1.0 Schematic.pdf</p> </li> <li> <p>Ethernet Shield v1.1 eagle file.zip</p> </li> <li> <p>Ethernet shield 1.2 eagle file.zip</p> </li> </ul>"},{"location":"Products/Shield/em-shield.html","title":"EM  SDshield","text":""},{"location":"Products/Shield/em-shield.html#introduction","title":"Introduction","text":"<p>Energy Monitor Shield is an Arduino-compatible expansion card designed for building energy monitoring system with LCD screen and an interface for connecting the wireless transceiver nRF24L01 +.</p> <p>Model: (Discontinued)</p> <p></p>"},{"location":"Products/Shield/em-shield.html#feature","title":"Feature","text":"<ul> <li>Connect up to three sensors AC (30-100A).</li> <li>Support for LCD Screen Nokia LCD5110</li> <li>Turn off the LCD backlight with a jumper</li> <li>Two buttons to control (operate one analog pin)</li> <li>Interface to connect the transceiver to 2.4G nRF24L01 +</li> <li>GROVE-compatible connector: I2C</li> <li>Fully compatible with Ethernet Shield (Wiznet 5100 + SD)</li> </ul>"},{"location":"Products/Shield/em-shield.html#layout-and-schematics","title":"Layout and schematics","text":"<p>The left side of EM Shield are three connectors for current sensors, right - connector for LCD-screen.</p> <p>Jumper JP1 is used to enable / disable real-backlight LCD-screen.</p> <p>In the upper right corner - I2C-connector.</p> <p>On the right are two buttons (labeled S1 and S2).</p> <p>In the center of the board (just to the right LCD-screen) - connector for nRF24L01 +.</p>"},{"location":"Products/Shield/em-shield.html#basic-functionality","title":"Basic functionality","text":"<p>In the basic version (without using Ethernet Shield) may organize monitoring of energy consumption in three different circuits using current sensors.</p> <p>Information about the current level of consumption can be displayed on the LCD screen.</p> <p>Device Management can be organized using two buttons on the Shield.</p> <p>The obtained data can be transmitted by the transceiver nRF24L01 +.</p>"},{"location":"Products/Shield/em-shield.html#expansion-capabilities","title":"Expansion Capabilities","text":"<p>Additionally EM Shield can connect any device using i2c Grove-compatible connector (sensors, displays, etc.). EM Shield was designed to be fully compatible with the Ethernet Shield (Wiznet 5100 + SD) - so you can use these two Schild together to create even more advanced device monitoring electricity (logging on SD-card and presenting data on a web page).</p>"},{"location":"Products/Shield/em-shield.html#interfaces","title":"Interfaces","text":"<ul> <li>A0, A1, A2 - involved for connecting sensors AC</li> <li>A4 (SDA), A5 (SCL) - displayed on the connector \"I2C\" (the other two pin connector - VCC and GND for sensor supply)</li> <li>Interface for connecting RF-module nRF24L01+: <ul> <li>D11 - MOSI</li> <li>D12 - MISO</li> <li>D13 - SCK</li> <li>D8 - RF_CE</li> <li>D7 - RF_CSN</li> <li>D2 - RF_IRQ</li> </ul> </li> <li>Interface for connecting LCD5110: <ul> <li>D11 - MOSI</li> <li>D13 - SCK</li> <li>D5 - LCD_D/C</li> <li>D6 - LCD_RST</li> <li>D3 - LCD_CS</li> </ul> </li> <li>A3 - Buttons</li> </ul>"},{"location":"Products/Shield/em-shield.html#libraries","title":"Libraries","text":""},{"location":"Products/Shield/em-shield.html#necessary-libraries","title":"Necessary libraries","text":"<p>To use EM Shield requires the following libraries:</p> <ul> <li>Working with the transceiver nRF24L01+ - RF24</li> <li>Using the display LCD 51110 (supporting SPI) - LCD5110_Graph_SPI</li> <li>Work with current sensors - EmonLib</li> </ul> <p>Requires the libraries that are used when working RF24 and LCD-display:</p> <ul> <li>SPI</li> </ul>"},{"location":"Products/Shield/em-shield.html#features-using-libraries","title":"Features using libraries","text":"<p>Library has used examples of them just to understand how they work.</p> <p>Initialization RF-module as follows:</p> <pre><code>...\n\n//RF24 radio(CE,CSN);\nRF24 radio(7,8);\n\n...\n</code></pre> <p>Initialize LCD-display is as follows:</p> <pre><code>...\n\n//LCD5110 myGLCD(DC,RST,CS);\nLCD5110 myGLCD(5,6,3);\n\n...\n</code></pre>"},{"location":"Products/Shield/em-shield.html#usage","title":"Usage","text":"<p>1.Hardware connection Plug the EM Shield into the Arduino/Crowduino  2.Download the library File:LCD5110 Library 3.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries. 4.Open the code directly by the path:File -&gt; Example -&gt;LCD5110_Graph_SPI-&gt;LCD5110_Graph_Demo.</p> <pre><code>#include &lt;SPI.h&gt;\n#include &lt;LCD5110_Graph_SPI.h&gt;\n\nLCD5110 myGLCD(5,6,3);\n\nextern unsigned char SmallFont[];\nextern unsigned char TinyFont[];\nextern uint8_t arduino_logo[];\nextern uint8_t The_End[];\nextern uint8_t pacman1[];\nextern uint8_t pacman2[];\nextern uint8_t pacman3[];\nextern uint8_t pill[];\n\nfloat y;\nuint8_t* bm;\nint pacy;\n\nvoid setup()\n{\n  myGLCD.InitLCD();\n  myGLCD.setFont(SmallFont);\n  randomSeed(analogRead(7));\n}\n\nvoid loop()\n{\n  myGLCD.clrScr();\n  myGLCD.drawBitmap(0, 0, arduino_logo, 84, 48);\n  myGLCD.update();\n\n  delay(2000);\n\n  myGLCD.clrScr();\n  myGLCD.print(\"LCD5110_Graph\", CENTER, 0);\n  myGLCD.print(\"DEMO\", CENTER, 20);\n  myGLCD.drawRect(28, 18, 56, 28);\n  for (int i=0; i&lt;6; i++)\n  {\n    myGLCD.drawLine(57, 18+(i*2), 83-(i*3), 18+(i*2));\n    myGLCD.drawLine((i*3), 28-(i*2), 28, 28-(i*2));\n  }\n  myGLCD.setFont(TinyFont);\n  myGLCD.print(\"(C)2013 by\", CENTER, 36);\n  myGLCD.print(\"Henning Karlsen\", CENTER, 42);\n  myGLCD.update();\n\n  delay(5000);\n\n  myGLCD.clrScr();\n  for (int i=0; i&lt;48; i+=2)\n  {\n    myGLCD.drawLine(0, i, 83, 47-i);\n    myGLCD.update();\n  }\n  for (int i=83; i&gt;=0; i-=2)\n  {\n    myGLCD.drawLine(i, 0, 83-i, 47);\n    myGLCD.update();\n  }\n\n  delay(2000);\n\n  myGLCD.clrScr();\n  myGLCD.drawRect(0, 0, 83, 47);\n  for (int i=0; i&lt;48; i+=4)\n  {\n    myGLCD.drawLine(0, i, i*1.75, 47);\n    myGLCD.update();\n  }\n  for (int i=0; i&lt;48; i+=4)\n  {\n    myGLCD.drawLine(83, 47-i, 83-(i*1.75), 0);\n    myGLCD.update();\n  }\n\n  delay(2000);\n\n  myGLCD.clrScr();\n  for (int i=0; i&lt;8; i++)\n  {\n    myGLCD.drawRoundRect(i*3, i*3, 83-(i*3), 47-(i*3));\n    myGLCD.update();\n  }\n\n  delay(2000);\n\n  myGLCD.clrScr();\n  for (int i=0; i&lt;17; i++)\n  {\n    myGLCD.drawCircle(41, 23, i*3);\n    myGLCD.update();\n  }\n\n  delay(2000);\n\n  myGLCD.clrScr();\n  myGLCD.drawRect(0, 0, 83, 47);\n  myGLCD.drawLine(0, 23, 84, 23);\n  myGLCD.drawLine(41, 0, 41, 47);\n  for (int c=0; c&lt;4; c++)\n  {\n    for (int i=0; i&lt;84; i++)\n    {\n      y=i*0.017453292519943295769236907684886;\n      myGLCD.invPixel(i, (sin(y*6)*20)+23);\n      myGLCD.update();\n      delay(20);\n    }\n  }\n\n  delay(2000);\n\n  for (int pc=0; pc&lt;3; pc++)\n  {\n    pacy=random(0, 28);\n\n    for (int i=-20; i&lt;84; i++)\n    {\n      myGLCD.clrScr();\n      for (int p=4; p&gt;((i+20)/20); p--)\n        myGLCD.drawBitmap(p*20-8, pacy+7, pill, 5, 5);\n      switch(((i+20)/3)\u00a0% 4)\n      {\n        case 0: bm=pacman1;\n                break;\n        case 1: bm=pacman2;\n                break;\n        case 2: bm=pacman3;\n                break;\n        case 3: bm=pacman2;\n                break;\n      }\n      myGLCD.drawBitmap(i, pacy, bm, 20, 20);\n      myGLCD.update();\n      delay(25);\n    }\n  }\n\n  for (int i=0; i&lt;25; i++)\n  {\n    myGLCD.clrScr();\n    myGLCD.drawBitmap(0, i-24, The_End, 84, 24);\n    myGLCD.update();\n    delay(100);\n  }\n  myGLCD.setFont(SmallFont);\n  myGLCD.print(\"Runtime (ms):\", CENTER, 32);\n  myGLCD.printNumI(millis(), CENTER, 40);\n  myGLCD.update();\n  for (int i=0; i&lt;5; i++)\n  {\n    myGLCD.invert(true);\n    delay(1000);\n    myGLCD.invert(false);\n    delay(1000);\n  }\n}\n</code></pre> <p>5.You can see some information display on the LCD. </p>"},{"location":"Products/Shield/em-shield.html#version-tracker","title":"Version Tracker","text":"Revision Description Release 0.9 Prototype 10.09.2013 0.9b Not produced 20.10.2013 1.0 Public version 01.04.2014"},{"location":"Products/Shield/em-shield.html#questions-and-answers","title":"Questions and Answers","text":"<ul> <li>Blog EM Shield RU</li> <li>Ask a question by e-mail support@devicter.ru</li> </ul>"},{"location":"Products/Shield/em-shield.html#how-to-buy","title":"How to buy","text":"<p>This product can be purchased: China (shipping worldwide)  Seeed store  Russia  Devicter store</p>"},{"location":"Products/Shield/em-shield.html#licensing","title":"Licensing","text":"<p>This documentation is licensed under the Creative Commons Attribution-ShareAlike License 3.0 Source code and libraries are</p> <p>licensed under GPL/LGPL, see source code files for details.</p>"},{"location":"Products/Shield/gprsgsm-shield-v10.html","title":"GPRS/GSM Shield v1.0","text":""},{"location":"Products/Shield/gprsgsm-shield-v10.html#introduction","title":"Introduction","text":"<p>The GPRS/GSM Shield provides you a way to use the GSM cell phone network to receive data from a remote location. The shield allows you to achieve this via any of the three methods:</p> <ul> <li>Short Message Service</li> <li>Audio</li> <li>GPRS Service</li> </ul> <p>The GPRS/GSM Shield is compatible with all boards which have the same form factor (and pinout) as a standard Arduino Board. The GPRS/GSM Shield is configured and controlled via its UART using simple AT commands. Based on the SIM900 module from SIMCOM, it is like a cell phone. Besides the communications features, the GPRS/GSM Shield has 6 GPIOs, 2 PWMs and an ADC.</p> <p>Model: (Discontinued) </p>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#features","title":"Features","text":"<ul> <li>Quad-Band 850 / 900/ 1800 / 1900 MHz - would work on GSM networks in all countries across the world.</li> <li>GPRS multi-slot class 10/8</li> <li>GPRS mobile station class B</li> <li>Compliant to GSM phase 2/2+<ul> <li>Class 4 (2 W @ 850 / 900 MHz)</li> <li>Class 1 (1 W @ 1800 / 1900MHz)</li> </ul> </li> <li>Control via AT commands - Standard Commands: GSM 07.07 &amp; 07.05 | Enhanced Commands: SIMCOM AT Commands.</li> <li>Short Message Service - so that you can send and receive small amounts of data over the network (ASCII or raw hexadecimal).</li> <li>Embedded TCP/UDP stack - allows you to upload data to a web server.</li> <li>RTC supported.</li> <li>Selectable serial port.</li> <li>2 in 1 headsetjack</li> <li>Low power consumption - 1.5mA(sleep mode)</li> <li>Industrial Temperature Range - -40\u00b0C to +85\u00b0C</li> </ul>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#application-ideas","title":"Application Ideas","text":"<ul> <li>M2M (Machine 2 Machine) Applicatoions - To transfer control data using SMS or GPRS between two machines located at two different factories.</li> <li>Remote control of appliances - Send SMS while you are at your office to turn on or off your washing machine at home.</li> <li>Remote Weather station or a Wireless Sensor Network - Mate it with [Crowduino v1.0|Crowduino v1.0] and create a sensor node capable of transferring sensor data (like from a weather station - temperature, humidity etc.) to a web server (like pachube.com).</li> <li>Vehicle Tracking System - Couple the GPRS Shield with an Arduino and GPS module and install it in your car and publish your location live on the internet. Can be used as a automotive burglar alarm.</li> </ul>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#cautions","title":"Cautions","text":"<ul> <li>Make sure your SIM card is unlocked.</li> <li>The product is provided as is without an insulating enclosure. Please observe ESD precautions specially in dry (low humidity) weather.</li> <li>The factory default setting for the GPRS Shield UART is 19200 bps 8-N-1. (Can be changed using AT commands).</li> </ul>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#specifications","title":"Specifications","text":"<p>For SIM900's Specifications, please refer this PDF file: SIM900_SPEC.pdf</p>  Item  Min  Typical  Max  Unit  Voltage 4.8 5.0 5.2 VDC  Current / 50 450 mA  Dimensions(with antenna)  79.0(L)x55.0(W)x23.5(H) mm  Net Weight  47\u00b12 g"},{"location":"Products/Shield/gprsgsm-shield-v10.html#interface-function","title":"Interface Function","text":"<p>Power select - select the power supply for GPRS shield(external power or 5v of arduino) Power jack - connected to external 4.8~5VDC power supply Antenna interface - connected to external antenna Serial port select - select either software serial port or hareware serial port to be connected to GPRS Shield Hardware Serial - D0/D1 of Arduino/Crowduino/Seeeduino Software serial - D7/D8 of Arduino/Crowduino/Seeeduino only Status LED - tell whether the power of SIM900 is on Net light - tell the status about SIM900 linking to the net UART of SIM900 - UART pins breakout of SIM900 Microphone - to answer the phone call  Speaker - to answer the phone call GPIO,PWM and ADC of SIM900 - GPIO,PWM and ADC pins breakout of SIM900 Power key - power up and down for SIM900  </p>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#pins-usage-on-arduino","title":"Pins usage on Arduino","text":"<p>D0 - Unused if you select hardware serial port to communicate with GPRS Shield D1 - Unused if you select hardware serial port to communicate with GPRS Shield D2 - Unused D3 - Unused D4 - Unused D5 - Unused D6 - Unused D7 - Used if you select software serial port to communicate with GPRS Shield D8 - Used if you select software serial port to communicate with GPRS Shield D9 - Used for software control the power up or down of the SIM900 D10 - Unused D11 - Unused D12 - Unused D13 - Unused D14(A0) - Unused D15(A1) - Unused D16(A2) - Unused D17(A3) - Unused D18(A4) - Unused D19(A5) - Unused  </p>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#light-status","title":"Light Status","text":"LED Status Function Power-on indicator(Green) Off Power of GPRS Shield is off On Power of GPRS Shield is on Status Indicator(Red) Off Power off On Power on Net indicator(Green) Off SIM900 is not working 64ms On/800ms Off SIM900 does not find the network 64ms On/3000ms Off SIM900 finds the network 64ms On/300ms Off GPRS communication"},{"location":"Products/Shield/gprsgsm-shield-v10.html#usage","title":"Usage","text":""},{"location":"Products/Shield/gprsgsm-shield-v10.html#hardware-installation","title":"Hardware installation","text":"<ul> <li>Insert an unlocked SIM card to SIM Card Holder - 6 Pin Holder for SIM Cards. Both 1.8 volts and 3.0 volts SIM Cards are supported by SIM900 - the SIM card voltage type is automatically detected.</li> </ul> <ul> <li>Make sure the antenna pad buckled properly - A miniature coaxial RF connector is present on the GPRS Shield board to connect with a GSM Antenna. The connector present on the GPRS Shield is called a U.FL connecto. The GSM Antenna supplied with the GPRS Shield has an SMA connector (and not an RP-SMA connector) on it. A patch cord is also supplied with the GPRS Shield to interface the antenna to the board. The connection topology is shown in the diagram below:</li> </ul> <ul> <li>Assemble the GSM antenna</li> </ul> <ul> <li>Power supply for GPRS shield - Select power source with the switch on board, you can select the 5V power supply from arduino or exteral power.Select the 5V source from Arduino as the following picture:</li> </ul> <ul> <li>Turn on the GPRS shield--There is two ways to turn on the GPRS Shield.</li> </ul> <p>1. Turn on through Hardware. Press the the 'POWERKEY' for few seconds until Power-on indicator(Green) is on.</p> <p></p> <p>2. Turn on through Software. If the JP is soldered,run the following code, the GPRS will POWER on or POWER off.</p> <pre><code>void power_ON_Down()\n\npinMode(9, OUTPUT); \ndigitalWrite(9,LOW);\ndelay(1000);\ndigitalWrite(9,HIGH);\ndelay(2000);\ndigitalWrite(9,LOW);\ndelay(3000);\n</code></pre> <ul> <li>Serial Port(UART) Communication</li> </ul> <p>The GPRS Shield is used UART protocol to communicate with an Arduino/Arduino clone; Users can use jumpers to connect (RX,TX) of the shield to either Software Serial(D8,D7) or Hardware Serial(D1,D0) of the Arduino.Detailed information is showed as the following picture:</p> <p></p> <p>Selectalbe GPRS Shield Communication Port Note:</p> <ul> <li>Users can use \"AT+IPR=?\" command to see supported baudrate, it will response a list of supported baudrate. <li>Users can use \"AT+IPR=x\"\u009d(\"x\" is value of supported baudrate) to set a fixed baud rate and save the configuration to non-volatile flash memory.</li> <li> <p>When users select Software Serial to communicate, SoftwareSerial Library library should be install in arduino'\u02dcs libraries.</p> </li> <li> <p>Plug to Arduino UNO R3 - The GPRS Shield, like any other well designed shield, is stackable as shown in the photo below.</p> </li> <p></p>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#power-down-the-gprs-shield","title":"Power Down the GPRS Shield","text":"<p>The GPRS Shield can be turned off by following ways:</p> <ul> <li>1, Normal power down procedure: Turn off the GPRS shield by using Hardware Triger; Press the ON/OFF Button about two seconds.</li> </ul> <p>The power down scenarios illustrates as following figure:</p> <p></p> <p>Figure of Timing of turning off GPRS Shield using Hardware Triger </p> <ul> <li>2, Normal power down procedure: If JP is soldered, then give Digital Pin 9 of the Arduino(act as Software Triger) a Turn off Impulse can turn off the GPRS Shield. The power down scenarios illustrates as following figure:</li> </ul> <p></p> <p>Figure of Timing of turning off GPRS Shield using Software Triger The following code is power down subroutine for Arduino if using software triger:</p> <pre><code>void powerDown()\n{\npinMode(9, OUTPUT); \ndigitalWrite(9,LOW);\ndelay(1000);\ndigitalWrite(9,HIGH);\ndelay(2000);\ndigitalWrite(9,LOW);\ndelay(3000);\n}\n</code></pre> <ul> <li>3, Normal power down procedure: Turn off the GPRS shield by sending AT command \"AT+CPOWD=1\" to SIM900 module.</li> </ul> <p>When GPRS Shield power dowm in Normal power down procedure, the procedure lets the SIM900 log off from the network and allows the software to enter into a secure state and save data before completely disconnecting the power supply. Before the completion of the power down procedure the SIM900 will send out result code:</p> <p>NORMAL POWER DOWN</p> <ul> <li>4, Over-voltage or Under-voltage Automatic Power Down: SIM900 will constantly monitor the voltage applied on the VBAT.</li> </ul> <p>\u2460If the voltage \u2264 3.3V, the following URC will be presented:</p> <p>UNDER-VOLTAGE WARNNING</p> <p>\u2461If the voltage \u2265 4.7V, the following URC will be presented:</p> <p>OVER-VOLTAGE WARNNING</p> <p>\u2462The uncritical voltage range is 3.2V to 4.8V. If the voltage &gt; 4.8V or &lt; 3.2V, SIM900 will be automatic power down soon. If the voltage &lt; 3.2V, the following URC will be presented:</p> <p>UNDER-VOLTAGE POWER DOWN</p> <p>\u2463If the voltage &gt; 4.8V, the following URC will be presented:</p> <p>OVER-VOLTAGE POWER DOWN</p> <ul> <li>5, Over-temperature or Under-temperature Automatic Power Down: SIM900 will constantly monitor the temperature of the module.</li> </ul> <p>\u2460If the temperature &gt; 80\u2103, the following URC will be presented:</p> <p>+CMTE:1</p> <p>\u2461If the temperature &lt; -30\u2103, the following URC will be presented:</p> <p>+CMTE:-1</p> <p>\u2462The uncritical temperature range is -40\u2103 to +85\u2103. If the temperature &gt; +85\u2103 or &lt; -40\u2103, the module will be automatic power down soon. If the temperature &gt; +85\u2103, the following URC will be presented:</p> <p>+CMTE:2</p> <p>\u2463If the temperature &lt; -40\u2103, the following URC will be presented:</p> <p>+CMTE:-2</p> <p>When the GPRS Shield encounters POWER DOWN scenario, the AT commands can not be executed. The SIM900 logs off from network and enters the POWER DOWN mode, only the RTC is still active. POWER DOWN can also be indicated by STATUS LED(Blue), which is off in this mode.</p> <p>Note: <ul> <li>To monitor the temperature, users can use the \u201cAT+CMTE\u201d command to read the temperature when GPRS Shield is powered on.</li> <li>To monitor the supply voltage, users can use the \u201cAT+CBC\u201d command which includes a parameter: voltage value(in mV) when GPRS Shield is powered on.</li> </ul>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#upload-sketch-to-arduino","title":"Upload Sketch to Arduino","text":"<p>Data Stream among Computer, Arduino and GPRS Shield The following sketch configures Arduino/Arduino clone as serial link between PC and the GPRS Shield(Jumpers on SWserial side). PC would need a serial terminal software to communicate with it - Window's built-in HyperTerminal, Arduino IDE's Serial Monitor, Serial Terminals(sscom32) or Bray++ Terminal.</p> <p>After uploading the sketch to the Arduino board, press the ON/OFF button on the GPRS Shield to turn it on; Now you can see what you get on the serial terminal and the status of the three indicator LEDs, then communicate with your Shield.</p> <pre><code>//Serial Relay - Arduino will patch a \n//serial link between the computer and the GPRS Shield\n//at 19200 bps 8-N-1\n//Computer is connected to Hardware UART\n//GPRS Shield is connected to the Software UART \n\n#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial GSMSerial(7, 8);\n\nvoid setup()\n{\nGSMSerial.begin(19200);               // the GPRS/GSM baud rate   \nSerial.begin(19200);                 // the GPRS/GSM baud rate   \n}\n\nvoid loop()\n{\nif(Serial.available())\n\nGSMSerial.print((char)Serial.read());\n\nelse  if(GSMSerial.available())\n\nSerial.print((char)GSMSerial.read());\n}\n</code></pre> <p>Note: <ul> <li>The \"AT\" or \"at\" prefix must be set at the beginning of each Command line. To terminate a Command line enter &lt;CR&gt;.</li> </ul>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#examples","title":"Examples","text":""},{"location":"Products/Shield/gprsgsm-shield-v10.html#sending-sms-using-software-uart","title":"Sending SMS: using Software UART","text":"<pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\nvoid setup()\n{\nmySerial.begin(19200);  //Default serial port setting for the GPRS modem is 19200bps 8-N-1\nmySerial.print(\"\\r\");\ndelay(1000);                    //Wait for a second while the modem sends an \"OK\"\nmySerial.print(\"AT+CMGF=1\\r\");    //Because we want to send the SMS in text mode\ndelay(1000);\n\n//mySerial.print(\"AT+CSCA=\\\"+919032055002\\\"\\r\");  //Setting for the SMS Message center number,  \n//delay(1000);                                  //uncomment only if required and replace with\n//the message center number obtained from\n//your GSM service provider.\n//Note that when specifying a tring of characters\n// \" is entered as \\\"\n\nmySerial.print(\"AT+CMGS=\\\"+9184460xxxx\\\"\\r\");    //Start accepting the text for the message\n//to be sent to the number specified.\n//Replace this number with the target mobile number.\ndelay(1000);\nmySerial.print(\"Hello,Elecrow!\\r\");   //The text for the message\ndelay(1000);\nmySerial.write(0x1A);  //Equivalent to sending Ctrl+Z \n}\n\nvoid loop()\n{\n//We just want to send the SMS only once, so there is nothing in this loop.\n//If we put the code for SMS here, it will be sent again and again and cost us a lot.\n}\n</code></pre>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#making-a-call-using-software-uart","title":"Making a call: using Software UART","text":"<pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\nvoid setup()\n{\nmySerial.begin(19200);               // the GPRS baud rate   \nSerial.begin(19200);               // the GPRS baud rate   \ndelay(2000);\nmySerial.println(\"ATDxxxxxxxxx;\"); // xxxxxxxxx is the number you want to dial.  \n\nif(mySerial.available())\n\nSerial.print((unsigned char)mySerial.read());\n\n\ndelay(10000); \ndelay(10000); \n\nmySerial.println(\"ATH\"); //End the call.\nif(mySerial.available())\n\nSerial.print((unsigned char)mySerial.read());\n}\n\n\nvoid loop()\n{\n//Do nothing\n}\n</code></pre>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#using-at-commands-to-control-gpio-and-pwm-pins","title":"Using AT Commands to Control GPIO and PWM pins","text":"<p>Note: GPIOs,PWMs and ADC of the SIM900 module are all 2V8 logic.</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\nvoid setup()\n{\nmySerial.begin(19200);               // the GPRS baud rate   \nSerial.begin(19200);               // the GPRS baud rate   \ndelay(2000);\n}\n\nvoid loop()\n{\nmySerial.println(\"AT+SPWM=1,63,100\");// set PWM 1 PIN\nmySerial.println(\"AT+SPWM=2,63,50\");// set PWM 2 PIN\n\nmySerial.println(\"AT+SGPIO=0,1,1,1\");// set GPIO 1 PIN to 1\nmySerial.println(\"AT+SGPIO=0,12,1,1\");\ndelay(1000);  \n\nmySerial.println(\"AT+SGPIO=0,1,1,0\");// set GPIO 1 PIN to 0\nmySerial.println(\"AT+SGPIO=0,12,1,0\");\ndelay(1000);    \n}\n</code></pre>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#a-simple-source-code-example","title":"A Simple Source Code Example","text":"<p>The demo code below is for the Xduino to send SMS message/dial a voice call/submit a http request to a website and upload datas to the pachube. It has been tested on Arduino Duemilanove but will work on any compatible variant, plesse note that this sketch uses the sorfware UART of ATmega328P. please follow the following steps for running this sketch.</p> <ol> <li>With the GPRS Shield removed, download this sketch into your Arduino.</li> <li>Disconnect the Xduino from USB port to remove power source.</li> <li>Set the Serial Port jumpers on the GPRS Shield in SWserial position, to use the Soft Serial port of Arduino.</li> <li>Connect the antenna to the GPRS Shield and insert the SIM Card.</li> <li>Mount the GPRS Shield on Arduino.</li> <li>Connect the Arduino to the computer by USB, and fire up your favorite serial terminal software on computer, choose the COM port for Arduino, set it to operate at 19200 8-N-1.</li> <li>Type command in the terminal to execute different function, threr are 4 functions in the demo: <ol> <li>If you input 't', the demo will send a SMS message to another cellphone which you set(you need set the number in the code);</li> <li>If you input 'd', the program will dial a call to the other cellphone that you set(it is also need you set in the code );</li> <li>If you input 'h', it will submit a http request to a web that you want to access(it need you set the web adress in the code), it will return a string from the website if it goes correctly;</li> <li>If you input 's', it will upload the datas to the pachube(for detail you can refer to the explanation in the code). I strongly recommend you input 'h' before input 's', because uploading datas to the pachube need do some setting, after execute the function of submit a http request, the setting will be set.</li> </ol> </li> <li>If the program returns error in the terminal after you typed the command, don't worry, just try input the command again.</li> </ol> <pre><code>/*Note: this code is a demo for how to using gprs shield to send sms message, dial a voice call and \nsend a http request to the website, upload data to pachube.com by TCP connection,\n\nThe microcontrollers Digital Pin 7 and hence allow unhindered\ncommunication with GPRS Shield using SoftSerial Library. \nIDE: Arduino 1.0 or later\nReplace the following items in the code:\n1.Phone number, don't forget add the country code\n2.Replace the Access Point Name\n3. Replace the Pachube API Key with your personal ones assigned\nto your account at cosm.com\n*/\n\n\n#include &lt;SoftwareSerial.h&gt;\n#include &lt;String.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\nvoid setup()\n{\nmySerial.begin(19200);               // the GPRS baud rate   \nSerial.begin(19200);    // the GPRS baud rate \ndelay(500);\n}\n\nvoid loop()\n{\n//after start up the program, you can using terminal to connect the serial of gprs shield,\n//if you input 't' in the terminal, the program will execute  GetSignalQuality(),it will show the signal quality,\n//if you input 't' in the terminal, the program will execute SendTextMessage(), it will show how to send a sms message,\n//if input 'd' in the terminal, it will execute DialVoiceCall(), etc.\n\nif (Serial.available())\nswitch(Serial.read())\n\ncase 'q':\nGetSignalQuality();\nbreak;\ncase 't':\nSendTextMessage();\nbreak;\ncase 'd':\nDialVoiceCall();\nbreak;\ncase 'h':\nSubmitHttpRequest();\nbreak;\ncase 's':\nSend2Pachube();\nbreak;\n\nif (mySerial.available())\nSerial.write(mySerial.read());\n}\n///GetSignalQuality()\n///get the signal quality of GSM model.\nvoid GetSignalQuality()\n{\nmySerial.println(\"AT+CSQ\");  //get the signal Quality\ndelay(100);\nint k=0;\nwhile(mySerial.available()!=0)\n\nSigQ[k]=mySerial.read();  \nSerial.write(SigQ[k]);\nk+=1;\n}\n\n\n///SendTextMessage()\n///this function is to send a sms message\nvoid SendTextMessage()\n{\nmySerial.print(\"AT+CMGF=1\\r\");    //Because we want to send the SMS in text mode\ndelay(100);\nmySerial.println(\"AT + CMGS = \\\"+86138xxxxx615\\\"\");//send sms message, be careful need to add a country code before the cellphone number\ndelay(100);\nmySerial.println(\"A test message!\");//the content of the message\ndelay(100);\nmySerial.println((char)26);//the ASCII code of the ctrl+z is 26\ndelay(100);\nmySerial.println();\n}\n\n///DialVoiceCall\n///this function is to dial a voice call\nvoid DialVoiceCall()\n{\nmySerial.println(\"ATD + +86138xxxxx615;\");//dial the number\ndelay(100);\nmySerial.println();\n}\n\n///SubmitHttpRequest()\n///this function is submit a http request\n///attention:the time of delay is very important, it must be set enough \nvoid SubmitHttpRequest()\n{\nmySerial.println(\"AT+CSQ\");\ndelay(100);\n\nShowSerialData();// this code is to show the data from gprs shield, in order to easily see the process of how the gprs shield submit a http request, and the following is for this purpose too.\n\nmySerial.println(\"AT+CGATT?\");\ndelay(100);\n\nShowSerialData();\n\nmySerial.println(\"AT+SAPBR=3,1,\\\"CONTYPE\\\",\\\"GPRS\\\"\");//setting the SAPBR, the connection type is using gprs\ndelay(1000);\n\nShowSerialData();\n\nmySerial.println(\"AT+SAPBR=3,1,\\\"APN\\\",\\\"CMNET\\\"\");//setting the APN, the second need you fill in your local apn server\ndelay(4000);\n\nShowSerialData();\n\nmySerial.println(\"AT+SAPBR=1,1\");//setting the SAPBR, for detail you can refer to the AT command mamual\ndelay(2000);\n\nShowSerialData();\n\nmySerial.println(\"AT+HTTPINIT\"); //init the HTTP request\n\ndelay(2000); \nShowSerialData();\n\nmySerial.println(\"AT+HTTPPARA=\\\"URL\\\",\\\"www.google.com.hk\\\"\");// setting the httppara, the second parameter is the website you want to access\ndelay(1000);\n\nShowSerialData();\n\nmySerial.println(\"AT+HTTPACTION=0\");//submit the request \ndelay(10000);//the delay is very important, the delay time is base on the return from the website, if the return datas are very large, the time required longer.\n//while(!mySerial.available());\n\nShowSerialData();\n\nmySerial.println(\"AT+HTTPREAD\");// read the data from the website you access\ndelay(300);\n\nShowSerialData();\n\nmySerial.println(\"\");\ndelay(100);\n}\n\n///send2Pachube()///\n///this function is to send the sensor data to the pachube, you can see the new value in the pachube after execute this function///\nvoid Send2Pachube()\n{\nmySerial.println(\"AT+CGATT?\");\ndelay(100);\n\nShowSerialData();\n\nmySerial.println(\"AT+CSTT=\\\"CMNET\\\"\");//start task and setting the APN,\ndelay(1000);\n\nShowSerialData();\n\nmySerial.println(\"AT+CIICR\");//bring up wireless connection\ndelay(300);\n\nShowSerialData();\n\nmySerial.println(\"AT+CIFSR\");//get local IP adress\ndelay(2000);\n\nShowSerialData();\n\nmySerial.println(\"AT+CIPSPRT=0\");\ndelay(3000);\n\nShowSerialData();\n\nmySerial.println(\"AT+CIPSTART=\\\"tcp\\\",\\\"api.cosm.com\\\",\\\"8081\\\"\");//start up the connection\ndelay(2000);\n\nShowSerialData();\n\nmySerial.println(\"AT+CIPSEND\");//begin send data to remote server\ndelay(4000);\nShowSerialData();\nString humidity = \"1031\";//these 4 line code are imitate the real sensor data, because the demo did't add other sensor, so using 4 string variable to replace.\nString moisture = \"1242\";//you can replace these four variable to the real sensor data in your project\nString temperature = \"30\";//\nString barometer = \"60.56\";//\nmySerial.print(\"\\\"method\\\": \\\"put\\\",\\\"resource\\\": \\\"/feeds/43634/\\\",\\\"params\\\"\");//here is the feed you apply from pachube\ndelay(500);\nShowSerialData();\nmySerial.print(\": ,\\\"headers\\\": \\\"X-PachubeApiKey\\\":\");//in here, you should replace your pachubeapikey\ndelay(500);\nShowSerialData();\nmySerial.print(\" \\\"_cXwr5LE8qW4a296O-cDwOUvfddFer5pGmaRigPsiO0\");//pachubeapikey\ndelay(500);\nShowSerialData();\nmySerial.print(\"jEB9OjK-W6vej56j9ItaSlIac-hgbQjxExuveD95yc8BttXc\");//pachubeapikey\ndelay(500);\nShowSerialData();\nmySerial.print(\"Z7_seZqLVjeCOmNbEXUva45t6FL8AxOcuNSsQS\\\",\\\"body\\\":\");\ndelay(500);\nShowSerialData();\nmySerial.print(\" \\\"version\\\": \\\"1.0.0\\\",\\\"datastreams\\\": \");\ndelay(500);\nShowSerialData();\nmySerial.println(\"[\\\"id\\\": \\\"01\\\",\\\"current_value\\\": \\\"\" + barometer + \"\\\",\");\ndelay(500);\nShowSerialData();\nmySerial.println(\"\\\"id\\\": \\\"02\\\",\\\"current_value\\\": \\\"\" + humidity + \"\\\",\");\ndelay(500);\nShowSerialData();\nmySerial.println(\"\\\"id\\\": \\\"03\\\",\\\"current_value\\\": \\\"\" + moisture + \"\\\",\");\ndelay(500);\nShowSerialData();\nmySerial.println(\"\\\"id\\\": \\\"04\\\",\\\"current_value\\\": \\\"\" + temperature + \"\\\"],\\\"token\\\": \\\"lee\\\"\");\n\n\ndelay(500);\nShowSerialData();\n\nmySerial.println((char)26);//sending\ndelay(5000);//waitting for reply, important! the time is base on the condition of internet \nmySerial.println();\n\nShowSerialData();\n\nmySerial.println(\"AT+CIPCLOSE\");//close the connection\ndelay(100);\nShowSerialData();\n\n}\nvoid ShowSerialData()\n{\nwhile(mySerial.available()!=0)\nSerial.write(mySerial.read());\n}\n</code></pre>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#using-sms-to-control-an-led-status","title":"Using Sms to Control an LED Status","text":"<p>This example is controbuted by MChobby, for more information please visit: https://wiki.mchobby.be/index.php?title=SmsCommand</p> <p>Send a SMS message \"on\" or \"off\" from your cellphone to the GPRS Shield to control the Digital Pin 13(LED) Status.</p> <ul> <li>The default Buffer of Rx in SoftwareSerial.h is 32/64, you may experience some data lose while the returns of SIM900 are many(Receiving SMS/TCPIP), you can try to change the Buffer of Rx in SoftwareSerial.h into <p>#define _SS_MAX_RX_BUFF 128 // RX buffer size</p> <pre><code>// send SMS \"on\", if will turn on the LED\n// send SMS \"off\", if will turn off the LED\n#include &lt;SoftwareSerial.h&gt;\nSoftwareSerial mySerial(7, 8);\nString msg = String(\"\");\nint SmsContentFlag = 0;\nint ledPin = 13;\nvoid setup()\n{\n  mySerial.begin(19200);               // the GPRS baud rate   \n  Serial.begin(19200);                 // the GPRS baud rate\n\n  // Initialize la PIN\n  pinMode( ledPin, OUTPUT ); \n  digitalWrite( ledPin, LOW ); \n  GprsTextModeSMS();\n}\n\nvoid loop()\n{\n    char SerialInByte;\n    if(Serial.available())\n    {\n       mySerial.print((unsigned char)Serial.read());\n    }  \n    else if(mySerial.available())\n    {\n        char SerialInByte;\n        SerialInByte = (unsigned char)mySerial.read();\n        Serial.print( SerialInByte );\n        if( SerialInByte == 13 )\n        {\n          ProcessGprsMsg();\n         }\n         if( SerialInByte == 10 ){\n            // EN: Skip Line feed\n         }\n         else {\n           // EN: store the current character in the message string buffer\n           msg += String(SerialInByte);\n         }\n     }   \n}\n\n// EN: Make action based on the content of the SMS. \n//     Notice than SMS content is the result of the processing of several GPRS shield messages.\n\nvoid ProcessSms( String sms )\n{\n  Serial.print( \"ProcessSms for [\" );\n  Serial.print( sms );\n  Serial.println( \"]\" );\n\n  if( sms.indexOf(\"on\") &gt;= 0 ){\n    digitalWrite( ledPin, HIGH );\n    Serial.println( \"LED IS ON\" );\n    return;\n  }\n  if( sms.indexOf(\"off\") &gt;= 0 ){\n    digitalWrite( ledPin, LOW );\n    Serial.println( \"LED IS OFF\" );\n    return;\n  }\n}\n\n// EN: Request Text Mode for SMS messaging\n\nvoid GprsTextModeSMS(){\n  mySerial.println( \"AT+CMGF=1\" );\n}\n\nvoid GprsReadSmsStore( String SmsStorePos ){\n  // Serial.print( \"GprsReadSmsStore for storePos \" );\n  // Serial.println( SmsStorePos ); \n  mySerial.print( \"AT+CMGR=\" );\n  mySerial.println( SmsStorePos );\n}\n\n// EN: Clear the GPRS shield message buffer\n\nvoid ClearGprsMsg(){\n  msg = \"\";\n}\n\n// EN: interpret the GPRS shield message and act appropiately\n\nvoid ProcessGprsMsg() \n{\n    Serial.println(\"\");\n    Serial.print( \"GPRS Message: [\" );\n    Serial.print( msg );\n    Serial.println( \"]\" );\n    if( msg.indexOf( \"Call Ready\" ) &gt;= 0 )\n   {\n       Serial.println( \"*** GPRS Shield registered on Mobile Network ***\" );\n       GprsTextModeSMS();\n   }\n\n  // EN: unsolicited message received when getting a SMS message\n  // FR: Message non sollicit\u00e9 quand un SMS arrive\n  if( msg.indexOf( \"+CMTI\" ) &gt;= 0 )\n  {\n     Serial.println( \"*** SMS Received ***\" );\n     // EN: Look for the coma in the full message (+CMTI: \"SM\",6)\n     //     In the sample, the SMS is stored at position 6\n     int iPos = msg.indexOf( \",\" );\n     String SmsStorePos = msg.substring( iPos+1 );\n     Serial.print( \"SMS stored at \" );\n     Serial.println( SmsStorePos );\n\n     // EN: Ask to read the SMS store\n     GprsReadSmsStore( SmsStorePos );\n  }\n\n  // EN: SMS store readed through UART (result of GprsReadSmsStore request)  \n  if( msg.indexOf( \"+CMGR:\" ) &gt;= 0 )\n  {\n    // EN: Next message will contains the BODY of SMS\n    SmsContentFlag = 1;\n    // EN: Following lines are essentiel to not clear the flag!\n    ClearGprsMsg();\n    return;\n  }\n\n  // EN: +CMGR message just before indicate that the following GRPS Shield message \n  //     (this message) will contains the SMS body\n\n  if( SmsContentFlag == 1 )\n  {\n    Serial.println( \"*** SMS MESSAGE CONTENT ***\" );\n    Serial.println( msg );\n    Serial.println( \"*** END OF SMS MESSAGE ***\" );\n    ProcessSms( msg );\n  }\n\n  ClearGprsMsg();\n  // EN: Always clear the flag\n  SmsContentFlag = 0; \n}\n</code></pre>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#softwareserial-library-notes","title":"SoftwareSerial library Notes","text":"<p>With Arduino 1.0 you should be able to use the SoftwareSerial library included with the distribution (instead of NewSoftSerial). However, you must be aware that the buffer reserved for incoming messages are hardcoded to 64 bytes in the library header, \"SoftwareSerial.h\":</p> <pre><code>#define _SS_MAX_RX_BUFF 64 // RX buffer size\n</code></pre> <p>This means that if the GPRS module responds with more data than that, you are likely to loose it with a buffer overflow! For instance, reading out an SMS from the module with \"AT+CMGR=xx\" (xx is the message index), you might not even see the message part because the preceding header information (like telephone number and time) takes up a lot of space. The fix seems to be to manually change _SS_MAX_RX_BUFF to a higher value (but reasonable so you don't use all you precious memory!)</p> <p>The Softwareserial library has the following limitations (taken from arduino page) If using multiple software serial ports, only one can receive data at a time. http://arduino.cc/hu/Reference/SoftwareSerialThis means that if you try to add another serial device ie grove serial LCD you may get communication errors unless you craft your code carefully.</p>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#faq","title":"FAQ","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Shield/gprsgsm-shield-v10.html#resources","title":"Resources","text":"<ul> <li>Remote control via GPRS/GSM SMS on instructables.</li> <li>AT Command Tester applicaiton is an online tool for testing AT commands and other module functionalities such as data call, voice call,HTTP, network registration, SMS, Phonebook, signal quality, SIM interface, device info etc. AT Command Tester can be used with 2G Modules (GPRS/EDGE/1x) or 3G Modules (HSDPA/HSPA/EVDO) or 4G modules (LTE)</li> <li>AT Commands v1.00 &amp; AT Commands v1.03 &amp; Hardware Design - SIM900 Documentation</li> <li>SIM900 firmware and tool(firmware:1137B08SIM900M64_ST) for firmware upgrade</li> <li>firmware:1137B09SIM900M64_ST</li> <li>SIM900datasheeet</li> <li>Schematic of GPRS/GSM Shield</li> <li>GPRS/GSM Shield eagle files</li> </ul>"},{"location":"Products/Shield/gps-shield.html","title":"GPS Shield","text":""},{"location":"Products/Shield/gps-shield.html#description","title":"Description","text":"<p>The GPS Shield is base on the ublox's NEO-6M receiver module , and the footprints is compatible with Arduino/MEGA boards. The regular GPS pins (RX, TX) can be connected to D0-D7 of Arduino. Support software SerialPort and Micro SD card interface.</p> <p>It's very easy using. You just need read SerialPort and then will get the GPS data. It also could use with GPRS Shield(click here to know how to use GPRS). So you can send GPS data to phone by SMS, then you can get the position of the GPS Shield.</p> <p>The GPS Shield module interfaces to the customer\u00e2\u20ac\u2122s application via one serial port, which uses CMOS voltage levels. support 3.3V / 5V IO operating. That's means 100% all Arduino main board compatible.</p> <p>Model: MCS01107S </p>"},{"location":"Products/Shield/gps-shield.html#features","title":"Features","text":"<ul> <li>With standard Shield interface\u00ef\u00bc\u0152it is compatible to all arduino main board.</li> <li>With Micro SD interface</li> <li>3.3v and 5v logical voltage compatible</li> <li>Active antenna design with high receive sensitivity, compatible normal antenna</li> <li>Extremely fast time to first fix at low signal level</li> <li>Operation temperature: -40c\u201e\u0192 ~ +85c</li> </ul>"},{"location":"Products/Shield/gps-shield.html#specifications","title":"Specifications","text":"<p>NEO-6M-0-001</p>"},{"location":"Products/Shield/gps-shield.html#interface-function","title":"Interface function","text":""},{"location":"Products/Shield/gps-shield.html#usage","title":"Usage","text":""},{"location":"Products/Shield/gps-shield.html#application-1-print-the-gps-data-with-serial-port","title":"Application 1: Print the GPS data with serial port","text":"<p>This example simply prints the output of the frames received by the GPS module to the serial port of an arduino. first, connect the UART_RX to PD3, UART_TX to PD2. second, upload the following demo code to Arduino or Crowduino.</p> <pre><code>//at 9600 bps 8-N-1\n//Computer is connected to Arduino/Crowduino\n//SoftSerial Shield is connected to the Software UART:D2&amp;D3 \n\n#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial SoftSerial(6, 7);\nunsigned char buffer[256]; // buffer array for data recieve over serial port\nint count=0;     // counter for buffer array \nvoid setup()\n{\n  SoftSerial.begin(9600);               // the SoftSerial baud rate   \n  Serial.begin(9600);             // the Serial port of Arduino baud rate.\n\n}\n\nvoid loop()\n{\n  if (SoftSerial.available())              // if date is comming from softwareserial port ==&gt; data is comming from SoftSerial shield\n  {\n    while(SoftSerial.available())          // reading data into char array \n    {\n      buffer[count++]=SoftSerial.read();     // writing data into array\n      if(count == 256)break;\n  }\n    Serial.write(buffer,count);            // if no data transmission ends, write buffer to hardware serial port\n    clearBufferArray();              // call clearBufferArray function to clear the storaged data from the array\n    count = 0;                       // set counter of while loop to zero\n\n\n  }\n  if (Serial.available())            // if data is available on hardwareserial port ==&gt; data is comming from PC or notebook\n    SoftSerial.write(Serial.read());       // write it to the SoftSerial shield\n}\nvoid clearBufferArray()              // function to clear buffer array\n{\n  for (int i=0; i&lt;count;i++)\n    { buffer[i]=NULL;}                  // clear all index of array with command NULL\n}\n</code></pre> <p>Third, Open the serial monitor, select the serial rate as 9600. you will get the data return from the GPS modual. </p>"},{"location":"Products/Shield/gps-shield.html#application-2-use-the-u-center-software-to-locate-your-place","title":"Application 2: Use the u-center software to Locate your place","text":"<p>1. Down load the U-center software. you can also go to the U-blox office website to download this software. And install it. 2. Upload the demo code in Application 1 to Arduino. 3. Open U-center, choose the serial port and set the serial rate as 9600. After a while, you will get the location of the GPS shield. </p>"},{"location":"Products/Shield/gps-shield.html#see-also","title":"See Also","text":"<ul> <li>GSM/GPRS wiki</li> <li>SD card shield wiki</li> </ul>"},{"location":"Products/Shield/gps-shield.html#faq","title":"FAQ","text":"<p>Please feel free to connect with techsupport@elecrow.com. We will list the normal question here and do our best to solve your problem.</p>"},{"location":"Products/Shield/gps-shield.html#resouce","title":"Resouce","text":"<ul> <li>Schematic of GPS Shield </li> <li>Gerber file&amp; eagle file of GPS Shield </li> <li>Test software U-centersetup-7.0.2.1 </li> <li>SD library for Arduino1.0. </li> <li>SdFat for Arduino1.0</li> <li>SoftwareSerial library for arduino1.0 </li> </ul>"},{"location":"Products/Shield/imx219-83-stereo-camera.html","title":"IMX219-83 Stereo Camera","text":""},{"location":"Products/Shield/imx219-83-stereo-camera.html#introduction","title":"Introduction","text":"<p>This is a 3D stereo camera module which features dual IMX219 cameras onboard, 8Megapixels on each camera. It is suitable for AI vision applications like depth vision and stereo vision. Also, you can experience better quality video capture from this camera and build more demanding projects! The module supports Jetson Nano and NVIDIA Jetson Xavier NX, as well as Raspberry Pi CM3/CM3+ expansion boards like Compute Module IO Board Plus, Compute Module POE Board, etc.</p> <p>Model: RPA20902A</p> <p></p>"},{"location":"Products/Shield/imx219-83-stereo-camera.html#specification","title":"Specification","text":"<ul> <li>POE input voltage: 37V ~ 57V DC</li> <li>POE output voltage: 5V 2.5A DC</li> <li>Network standard: 802.3af PoE</li> <li>OLED control interface: I2C</li> <li>OLED size: 0.91 inches</li> <li>OLED resolution: 128\u00d732</li> <li>OLED driver chip: SSD1306</li> <li>OLED resolution: 65.0x56.5mm</li> <li>OLED display color: white</li> <li>OLED viewing angle: greater than 160\u00b0</li> <li>GPIO expansion interface: I2C</li> <li>GPIO expansion chip: PCF8574</li> </ul>"},{"location":"Products/Shield/imx219-83-stereo-camera.html#usager","title":"Usager","text":"<ul> <li>1.Hardware connection</li> </ul> <p>1)Insert the two camera cables with the metal surface facing the heat sink into the camera interface on the Jetson Nano development kit 2)Start Jetson Nano</p> <p></p> <ul> <li>2.Test camera</li> </ul> <p>1) Open the terminal (press Ctrl+ALT+T on the keyboard to open the terminal), enter the following command to see if the device is recognized normally.</p> <pre><code>ls / dev / video *\n</code></pre> <p>It is normal if video0 and video1 appear</p> <p>2) Test video0</p> <pre><code>DISPLAY=:0.0 gst-launch-1.0 nvarguscamerasrc sensor-id=0\u00a0! 'video/x-raw(memory:NVMM), width=3280, height=2464, format=(string)NV12, framerate=(fraction)20/1'\u00a0! nvoverlaysink -e\n</code></pre> <p>3) Test video1</p> <pre><code>DISPLAY=:0.0 gst-launch-1.0 nvarguscamerasrc sensor-id=1\u00a0! 'video/x-raw(memory:NVMM), width=3280, height=2464, format=(string)NV12, framerate=(fraction)20/1'\u00a0! nvoverlaysink -e\n</code></pre> <p>If the camera shooting effect is reddish, you can follow the steps below: 1) Download the camera-override.isp file and unzip it to a specific folder</p> <pre><code>wget http://www.waveshare.net/w/upload/e/eb/Camera_overrides.tar.gz\ntar zxvf Camera_overrides.tar.gz \nsudo cp camera_overrides.isp /var/nvidia/nvcam/settings/\n</code></pre> <p>2) Installation files:</p> <pre><code>sudo chmod 664 /var/nvidia/nvcam/settings/camera_overrides.isp\nsudo chown root:root /var/nvidia/nvcam/settings/camera_overrides.isp\n</code></pre> <ul> <li>Note</li> </ul> <p>1) The 12 of NV12 is a number instead of a letter. 2) The test screen is output to the HDMI or DP screen, so you must first connect the screen to Jetson Nano when testing. 3) To test the sensor, connect the SDA and SCL pins of the camera to pins 3 and 5 of Jetson Nano, respectively 4)Open the terminal, download the sample program, and test</p> <pre><code>wget http://www.waveshare.net/w/upload/a/a4/D219-9dof.tar.gz\ntar zxvf D219-9dof.tar.gz\ncd D219-9dof/07-icm20948-demo\nmake\n./ ICM20948 \u2013 Demo\n</code></pre> <p>Try rotating the camera to see the output value change.</p>"},{"location":"Products/Shield/joystick-shield.html","title":"Joystick Shield","text":""},{"location":"Products/Shield/joystick-shield.html#introduction","title":"Introduction","text":"<p>The Joystick Shield enable your Arduino with a joystick! The shield sits on top of your Arduino and turns it into a simple controller. Five momentary push buttons (4+ joystick select button) and a two-axis thumb joystick gives your Arduino functionality on the level of old Nintendo controllers.  This shield is a great piece of uer interface board, it is perfect for gaming and navigating through menu quickly. It has headers for LCDs and RF modules , to communicating and displays easily.</p> <p>Model: ACS77312JS</p> <p></p>"},{"location":"Products/Shield/joystick-shield.html#features","title":"Features","text":"<p>Dimensions(mm):86.5(L)x53.0(W)x40.0(H)</p>"},{"location":"Products/Shield/joystick-shield.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Joystick Game</li> <li>Greedy Freak</li> </ul>"},{"location":"Products/Shield/joystick-shield.html#pin-definition-and-rating","title":"Pin definition and Rating","text":""},{"location":"Products/Shield/joystick-shield.html#key-button-define","title":"KEY Button Define","text":"Pin # KEY D0(RX) 0 NULL D1(TX) 1 NULL D2 2 KEY A D3 3 KEY B D4 4 KEY C D5 5 KEY D D6 6 KEY E D7 7 KEY F D8 8 KEY Down"},{"location":"Products/Shield/joystick-shield.html#nokoia-5110-lcd","title":"Nokoia 5110 LCD","text":"Pin # KEY D9 9 SCLK D10 10 CSN D11 11 D/C D12 12 RST D13 13 SCE"},{"location":"Products/Shield/joystick-shield.html#nrf24l01","title":"nRF24L01","text":"Pin # KEY D9 9 SCE D10 10 CSN D11 11 SCK D12 12 MOSI D13 13 MISO"},{"location":"Products/Shield/joystick-shield.html#usage","title":"Usage","text":""},{"location":"Products/Shield/joystick-shield.html#hardware-installation","title":"Hardware Installation","text":"<p>Plug JoyStick shield onto the Arduino/Crowduino. Connect the board to PC using USB cable. </p>"},{"location":"Products/Shield/joystick-shield.html#programming","title":"Programming","text":"<p>1.Copy the demo code to your sketch, then upload to Arduino or Crowduino board.</p> <pre><code>int FirstShotX , FirstShotY;\nvoid setup()\n{\n    for(int i=2; i&lt;9; i++)\n   {\n    pinMode(i, INPUT);\n    digitalWrite(i, 1);\n    }\n    Serial.begin(9600);\n    FirstShotX = 0;\n    FirstShotY = 0;\n}\nvoid loop()\n{\n    int i, someInt, flag = 0;\n    for(i=2; i&lt;9; i++)\n    {\n        someInt = digitalRead(i);\n        if(someInt == 0)\n        {\n             flag =1;\n             break;\n         }\n     }\n     if(flag == 1)\n     {\n          switch(i)\n          {\n              case 2: Serial.println(\"--------&gt; Button A\"); break;\n              case 3: Serial.println(\"--------&gt; Button B\"); break;\n              case 4: Serial.println(\"--------&gt; Button C\"); break;\n              case 5: Serial.println(\"--------&gt; Button D\"); break;\n              case 6: Serial.println(\"--------&gt; Button E\"); break;\n              case 7: Serial.println(\"--------&gt; Button F\"); break;\n              case 8: Serial.println(\"--------&gt; Button KEY\"); break;\n              default: break;\n           }\n           flag=0;\n        }\n       int sensorValue = analogRead(A0);\n       if(FirstShotX == 0)\n       {\n            FirstShotX = sensorValue;\n            Serial.print(\"FirstShotX = \");\n            Serial.println(FirstShotX);\n       }\n       Serial.print(\"X = \");\n       Serial.println(sensorValue - FirstShotX);\n       sensorValue = analogRead(A1);\n       if(FirstShotY == 0)\n       {\n             FirstShotY = sensorValue;\n             Serial.print(\"FirstShotY = \");\n             Serial.println(FirstShotY);\n        }\n         Serial.print(\"Y = \");\n         Serial.println(sensorValue - FirstShotY);\n         delay(200);\n}\n</code></pre> <p>2.Open the serial monitor. Control the JoyStich Shield,you should see some data from you control. </p>"},{"location":"Products/Shield/joystick-shield.html#resources","title":"Resources","text":"<ul> <li>Joystick Shield demo code</li> <li>Joystick Shield other usage</li> </ul>"},{"location":"Products/Shield/lcd-keypad-shield.html","title":"LCD Keypad Shield","text":""},{"location":"Products/Shield/lcd-keypad-shield.html#description","title":"Description","text":"<p>The LCD Keypad Shield is arduino compactible boards,to provide a user-friendly interface that allows users to display what they want to and make selections etc. it consists of a 1602 white character blue backlight LCD. The keypad consists of 5 keys \u2014 select, up, right, down and left. To save the digital IO pins, the keypad interface uses only one ADC channel(AD0). The key value is read through a 5 stage voltage divider.</p> <p>Model: MCS01602M</p> <p></p> <p></p>"},{"location":"Products/Shield/lcd-keypad-shield.html#featrues","title":"Featrues","text":"<ul> <li>The keypad interface uses only one ADC channel.</li> <li>Can control the contrast of LCD through the potentiometer.</li> <li>Can shows the words as you like.</li> <li>Dimensions(mm):80.0(L)x56.6(W)x20.0(H)</li> </ul>"},{"location":"Products/Shield/lcd-keypad-shield.html#pin-allocatior","title":"Pin Allocatior","text":"PIN FUNCTION Analog 0 Button (select, up, right, down and left) Digital 4 DB4 Digital 5 DB5 Digital 6 DB6 Digital 7 DB7 Digital 8 RS (Data or Signal Display Selection) Digital 9 Enable Digital 10 Backlit Control"},{"location":"Products/Shield/lcd-keypad-shield.html#usage","title":"Usage","text":"<ul> <li>How to control the Keypad and make selects</li> </ul> <p>The following sample code is to introduce how to use this model.it shows what key you pressed down and the system time. 1.Hardware connection Plug it into the Arduino/Crowduino.  2.Download the File:LiquidCrystal library.  3.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries. 4.Copy and paste code below to a new Arduino sketch.  </p> <pre><code>/*\n * Created by \n * Ark Bramwell, July 2010\n * Modified by keen \n * Date: 05/05/2017\n * Function: this program will test the LCD panel and the buttons\n */ \n//Sample using LiquidCrystal library\n#include &lt;LiquidCrystal.h&gt;\n\n// select the pins used on the LCD panel\nLiquidCrystal lcd(8, 9, 4, 5, 6, 7);\n\n// define some values used by the panel and buttons\nint lcd_key     = 0;\nint adc_key_in  = 0;\n#define btnRIGHT  0\n#define btnUP     1\n#define btnDOWN   2\n#define btnLEFT   3\n#define btnSELECT 4\n#define btnNONE   5\n\n// read the buttons\nint read_LCD_buttons()\n{\n adc_key_in = analogRead(0);      // read the value from the sensor \n // my buttons when read are centered at these valies: 0, 144, 329, 504, 741\n // we add approx 50 to those values and check to see if we are close\n if (adc_key_in &gt; 1500) return btnNONE; // We make this the 1st option for speed reasons since it will be the most likely result\n if (adc_key_in &lt; 50)   return btnRIGHT;  \n if (adc_key_in &lt; 195)  return btnUP; \n if (adc_key_in &lt; 380)  return btnDOWN; \n if (adc_key_in &lt; 500)  return btnLEFT; \n if (adc_key_in &lt; 700)  return btnSELECT;   \n return btnNONE;  // when all others fail, return this...\n}\n\nvoid setup()\n{\n lcd.begin(16, 2);              // start the library\n lcd.setCursor(0,0);\n lcd.print(\"Push the buttons\"); // print a simple message\n}\n\nvoid loop()\n{\n lcd.setCursor(9,1);            // move cursor to second line \"1\" and 9 spaces over\n lcd.print(millis()/1000);      // display seconds elapsed since power-up\n\n\n lcd.setCursor(0,1);            // move to the begining of the second line\n lcd_key = read_LCD_buttons();  // read the buttons\n\n switch (lcd_key)               // depending on which button was pushed, we perform an action\n {\n   case btnRIGHT:\n     {\n     lcd.print(\"RIGHT \");\n     break;\n     }\n   case btnLEFT:\n     {\n     lcd.print(\"LEFT   \");\n     break;\n     }\n   case btnUP:\n     {\n     lcd.print(\"UP    \");\n     break;\n     }\n   case btnDOWN:\n     {\n     lcd.print(\"DOWN  \");\n     break;\n     }\n   case btnSELECT:\n     {\n     lcd.print(\"SELECT\");\n     break;\n     }\n     case btnNONE:\n     {\n     lcd.print(\"NONE  \");\n     break;\n     }\n }\n }\n</code></pre> <p>5.Upload the code,the LCD will display the button which you press. </p>"},{"location":"Products/Shield/lcd-keypad-shield.html#resource","title":"Resource","text":"<ul> <li>Library files: LiquidCrystal</li> <li>LCD datesheet :LCD1602.PDF</li> <li>Schematic of LCD keypad Shield</li> </ul>"},{"location":"Products/Shield/lcd-keypad-shield.html#how-to-buy","title":"How to buy","text":"<p>Click here to buy LCD Keypad Shield ,or other products you like.</p>"},{"location":"Products/Shield/lipower-shield-v11.html","title":"Lipower Shield v1.1","text":""},{"location":"Products/Shield/lipower-shield-v11.html#introduction","title":"Introduction","text":"<p>You may need this item if you want to power your Arduino with a 3.7V LiPo battery to make it become a portable device. It made up of a \u201cpower cell\u201d and \u201cfuel gauge\u201d, it allows you to connect a 3.7V single cell Lithium polymer battery which it will boost up to 5V and connect to the Arduino board\u2019s 5V pin. The on-board MAX17043G+U IC is connected to the I2C lines (A4 and A5) so that your project can monitor it\u2019s own power supply. The configurable alert interrupt pin on the MAX17043G+U IC is broken out to D2 which will activate when the LiPo gets to 32% or lower. The charging circuit is configured to charge the LiPo at 500mA and there is a mini-USB port on the shield which allows you to charge the battery from a USB power source.</p> <p>Model: ACS33721L </p>"},{"location":"Products/Shield/lipower-shield-v11.html#features","title":"Features","text":"<ul> <li>Power monitoring</li> <li>Compatible with 3.7V LiPo battery</li> </ul>"},{"location":"Products/Shield/lipower-shield-v11.html#specifications","title":"Specifications","text":"Item Min Typical Max Unit Output Voltage 4.8 5.0 5.2 VDC Current 2 - 800 mA Dimensions(with antenna) 77.0(L)x55.0(W)x23.5(H) mm Net Weight 20\u00b12 g"},{"location":"Products/Shield/lipower-shield-v11.html#interface-function","title":"Interface Function","text":"<p> Mini USB port - Supply power for battery charge circuit.  Battery charge port - you can connect the 3.7v lipower battery to it Switch - Switch to control battery charging and discharging 5v out put - power out put  </p>"},{"location":"Products/Shield/lipower-shield-v11.html#usage","title":"Usage","text":"<p>Charge battery: you need a mini usb cable, connect it to 5V power\uff0cand switch pull to \u201cCHG\"\uff0cthe red led will be light up and shows that it chageing battery now. </p> <p>Supply power for Arduino Switch pull to \"ON\" and put the lipower shield onto the Arduino, it will work independently. </p>"},{"location":"Products/Shield/lipower-shield-v11.html#monitor-the-battery-power-with-arduino","title":"Monitor the battery power with Arduino","text":"<p>The on-board MAX17043G+U IC is connected to the I2C lines (A4 and A5) so that your project can monitor it\u2019s own power supply. The configurable alert interrupt pin on the MAX17043G+U IC is broken out to D2 which will activate when the LiPo gets to 32% or lower.  First you need to connect the Arduino to computer and upload the power detecting demo to it, and then pull the switch into the \"ON\" side. </p> <p>Then open your serial monitor and set the baud rate at 9600, observe the output.</p> <p></p>"},{"location":"Products/Shield/lipower-shield-v11.html#how-to-buy","title":"How to buy","text":"<p>You can click here to buy LiPower Shield.</p>"},{"location":"Products/Shield/lipower-shield-v11.html#resources","title":"Resources","text":"<ul> <li>Power detection program</li> <li>Eagle files</li> <li>MAX17043G+U</li> <li>MCP738312</li> </ul>"},{"location":"Products/Shield/mbits.html","title":"Mbits","text":""},{"location":"Products/Shield/mbits.html#introduction","title":"Introduction","text":"<p>Mbits is a pocket-sized microcontroller has lots of features the same as Microbit V2. Mbits is an ESP32-WROVER-B based educational hardware suitable for kids to learn how to program and experience hot topics such as IoT and AI.</p> <p>Model: MIB26580B</p> <p></p>"},{"location":"Products/Shield/mbits.html#features","title":"Features","text":"<ul> <li>Pocket-sized microcontroller designed</li> <li>Wireless connectivity with built-in 2.4GHz micro:bit radio and BLE Bluetooth 4.2</li> <li>Onboard MEMS microphone, speaker, 25 RGB LEDs</li> <li>Onboard accelerometer for motion sensing applications</li> <li>Notched edge connector for easier connections</li> <li>Dedicated I2C bus for peripherals</li> <li>Two programmable buttons</li> <li>Supports graphical programming (Lestscode, based on Scratch3.0), Arduino IDE and Micro Python</li> </ul>"},{"location":"Products/Shield/mbits.html#pin-map","title":"Pin Map","text":"Mbits1.1_ESP32 Mbits1.2_ESP32 The Definition Edge Connector V1.1 <p>The Definition Edge Connector V1.2  </p> Pin Name Analog Function1 Analog Function2 Function1 Function2 Function3 Power P3 ADC2_CH4 GPIO13 PWM P0 ADC2_CH9 DAC_2 GPIO26 PWM P4 ADC2_CH7 GPIO27 PWM P5 ADC1_CH0 GPIO36 PWM P6 GPIO5 PWM P7 ADC2_CH5 GPIO12 PWM P1 ADC1_CH4 GPIO32 PWM P8 ADC2_CH0 GPIO4 PWM P9 ADC1_CH6 GPIO34 PWM P10 ADC2_CH6 GPIO14 PWM P11 ADC1_CH3 GPIO39 PWM P12 ADC2_CH3 GPIO15 PWM P2 ADC2_CH8 DAC_1 GPIO25 PWM P13 GPIO18 SPI_SCK PWM P14 GPIO19 SCI_MISO PWM P15 GPIO23 SPI_MOSI PWM P16 ADC2_CH2 GPIO2 PWM 3v3 3.3V 3v3 3.3V 3v3 3.3V P19 GPIO21 I2C_SCL PWM P20 GPIO22 I2C_SDA PWM GND GROUND GND GROUND GND GROUND"},{"location":"Products/Shield/mbits.html#use-on-letscode","title":"Use on Letscode","text":""},{"location":"Products/Shield/mbits.html#install-the-letscode","title":"Install the Letscode","text":"<p>Part 1: Setting up the programming environment</p> <p>1\uff1aDownload the Letscode installation package and install it on your computer.</p> <p>2\uff1aAfter successful installation, open the Letscode software, click \"Add Extension\" in the lower left corner, find the \"Mbits\" board type and select.</p> <p> </p> <p>3\uff1aEnter the programming interface, you can drag the programming block to program, when the program is written, click the \"port\" in the upper left corner to select the port of the Mbits board;</p> <p></p> <p>4\uff1aClick the \"Upload Code\" button in the upper right corner, upload the code, and wait for the upload to succeed.</p> <p>Part 2: Some examples</p> <p>1.MPU6050 example</p> <p>The reference code is as follows:</p> <p></p> <p>After the code is uploaded successfully, the coordinate value of X will be displayed on the RGB dot matrix screen;</p>"},{"location":"Products/Shield/mbits.html#use-with-mbits-3-axis-digital-accelerometer","title":"Use with Mbits-3-Axis Digital Accelerometer","text":"<p>Description</p> <p>This is a high resolution digital accelerometer on Mbits. The module agile enough to detect single and double taps. It's ideal for motion detection, Gesture detection as well as robotics. Default Address = 0x68\u3002</p> <p>Usage</p> <p>Here we show how to read the raw data from the accelerometer.</p> <p>1.Connect the data cable to the communication port of Mbits.</p> <p>2.Open the software and upload the following program to Mbits.</p> <p>\u2460 Letscode Mode</p> <p></p> <p>\u2461 Code Mode</p> <pre><code>// Language ArduinoC\n#include &lt;MPU6050_tockn.h&gt;\n#include &lt;Wire.h&gt;\n\nMPU6050 mpu6050(Wire);\n\n\nvoid setup() {\n  Serial.begin(115200);\n  Wire.begin(22,21);\n  mpu6050.begin();\n  mpu6050.calcGyroOffsets(true);\n}\n\nvoid loop() {\n  mpu6050.update();\n  Serial.println(String(\"x\u7684\u503c\uff1a\") + String((mpu6050.getAccX())));\n  Serial.println(String(\"y\u7684\u503c\uff1a\") + String((mpu6050.getAccY())));\n  Serial.println(String(\"z\u7684\u503c\uff1a\") + String((mpu6050.getAccZ())));\n  delay(1000);\n}\n</code></pre> <p>3.After the upload is successful,You can observe the data through the serial monitor.</p> <p></p>"},{"location":"Products/Shield/mbits.html#use-with-mbits-button","title":"Use with Mbits-Button","text":"<p>Description There are two buttons on the Mbits, called button_A and button_B.</p> <p>Usage</p> <p>The following sketch demonstrates a simple application of the module. 1.Connect the data cable to the communication port of Mbits.</p> <p>2.Open the software and upload the following program to Mbits.</p> <p>\u2460 Letscode Mode</p> <p></p> <p>\u2461 Code Mode</p> <pre><code>// Language ArduinoC\n#include &lt;FastLED.h&gt;\n#include \"Dots5x5font.h\"\n#define NUM_ROWS 5\n#define NUM_COLUMNS 5\n#define NUM_LEDS (NUM_ROWS * NUM_COLUMNS)\n#define LED_PIN 13\n#define LED_TYPE WS2812B\n#define COLOR_ORDER GRB\n#include &lt;Button.h&gt;\n\nCRGBArray&lt;NUM_LEDS&gt; leds;\nuint8_t max_bright =10;\nCRGB myRGBcolor_r32m(255, 0, 0);\nconst uint8_t maxBitmap_r32m[]= {\n  B11111,B11111,B11111,B11111,B11111\n};\nCRGB myRGBcolor_rzbc(0, 255, 93);\nconst uint8_t maxBitmap_rzbc[]= {\n  B11111,B11111,B11111,B11111,B11111\n};\n\nvoid Display(const byte dat[],CRGB myRGBcolor){\n  for (int c = 0; c &lt; 5; c++){\n    for (int r = 0; r &lt; 5; r++){\n      if (bitRead(dat[c], r)){\n        leds[c * 5 + 4-r] = myRGBcolor;\n      }\n      FastLED.show();\n      delay(5);\n    }\n  }\n}\n\nvoid setup() {\n  FastLED.addLeds&lt;LED_TYPE, LED_PIN, COLOR_ORDER&gt;(leds, NUM_LEDS);\n  FastLED.setBrightness(max_bright);\n}\n\nvoid loop() {\n  if (buttonA.isPressed() &amp;&amp; !buttonB.isPressed()) {\n    Display(maxBitmap_r32m,myRGBcolor_r32m);\n  }\n  if (buttonB.isPressed() &amp;&amp; !buttonA.isPressed()) {\n    Display(maxBitmap_rzbc,myRGBcolor_rzbc);\n  }\n  if (buttonAB.isPressed()) {\n    FastLED.clear();\n  }\n}\n</code></pre> <p>3.After the upload is successful, you can see When the button a is pressed, the matrix will be red, when the button B is pressed, the matrix will be green, and when the buttons a and B are pressed at the same time, the matrix will not be displayed.</p>"},{"location":"Products/Shield/mbits.html#use-with-mbits-buzzer","title":"Use with Mbits-Buzzer","text":"<p>Description This is the buzzer module on Mbits, You can use it to play simple tunes. At present, the buzzer can only play one tone.</p> <p>Usage The following sketch demonstrates a simple application of the module.</p> <p>1.Connect the data cable to the communication port of Mbits.</p> <p>2.Open the software and upload the following program to Mbits.</p> <p>\u2460 Letscode Mode</p> <p></p> <p>\u2461 Code Mode</p> <pre><code>// Language ArduinoC\n#include &lt;Tone32.h&gt;\n#define BUZZER_PIN 33\n#define BUZZER_CHANNEL 0\n\nvoid setup() {\n}\n\nvoid loop() {\n  tone(BUZZER_PIN, NOTE_C4, 500, BUZZER_CHANNEL);\n  tone(BUZZER_PIN, NOTE_D4, 500, BUZZER_CHANNEL);\n  tone(BUZZER_PIN, NOTE_E4, 500, BUZZER_CHANNEL);\n  tone(BUZZER_PIN, NOTE_F4, 500, BUZZER_CHANNEL);\n  tone(BUZZER_PIN, NOTE_G4, 500, BUZZER_CHANNEL);\n  tone(BUZZER_PIN, NOTE_A4, 500, BUZZER_CHANNEL);\n  tone(BUZZER_PIN, NOTE_B4, 500, BUZZER_CHANNEL);\n}\n</code></pre> <p>3.After the upload is successful, you can hear the buzzer on Mbits repeats the sound of seven notes of \u201cDo Re Mi FA So La Si\u201d.</p>"},{"location":"Products/Shield/mbits.html#use-with-mbits-microphone","title":"Use with Mbits-Microphone","text":"<p>Description This is the microphone module on Mbits, which is a low-power, omnidirectional microphone with an analog output. Normally, the analog value of the microphone varies from 1800 to 1900. When sound is detected, the analog value will decrease.</p> <p>Usage Here we show a simple application of the module.</p> <p>1.Connect the data cable to the communication port of Mbits.</p> <p>2.Open the software and upload the following program to Mbits.</p> <p>\u2460 Letscode Mode</p> <p></p> <p>\u2461 Code Mode</p> <pre><code>// Language ArduinoC\n#include &lt;FastLED.h&gt;\n#include \"Dots5x5font.h\"\n#define NUM_ROWS 5\n#define NUM_COLUMNS 5\n#define NUM_LEDS (NUM_ROWS * NUM_COLUMNS)\n#define LED_PIN 13\n#define LED_TYPE WS2812B\n#define COLOR_ORDER GRB\n\nCRGBArray&lt;NUM_LEDS&gt; leds;\nuint8_t max_bright =10;\nCRGB myRGBcolor_zyvx(255, 0, 0);\nconst uint8_t maxBitmap_zyvx[]= {\n  B00000,B11011,B00000,B10001,B01110\n};\nCRGB myRGBcolor_x6aa(16, 255, 0);\nconst uint8_t maxBitmap_x6aa[]= {\n  B00000,B11011,B00000,B10001,B01110\n};\n\nvoid Display(const byte dat[],CRGB myRGBcolor){\n  for (int c = 0; c &lt; 5; c++){\n    for (int r = 0; r &lt; 5; r++){\n      if (bitRead(dat[c], r)){\n        leds[c * 5 + 4-r] = myRGBcolor;\n      }\n      FastLED.show();\n      delay(5);\n    }\n  }\n}\n\nvoid setup() {\n  FastLED.addLeds&lt;LED_TYPE, LED_PIN, COLOR_ORDER&gt;(leds, NUM_LEDS);\n  FastLED.setBrightness(max_bright);\n}\n\nvoid loop() {\n  if ((analogRead(35)) &lt; 1700) {\n    Display(maxBitmap_zyvx,myRGBcolor_zyvx);\n  } else {\n    Display(maxBitmap_x6aa,myRGBcolor_x6aa);\n  }\n}\n</code></pre> <p>3.After the upload is successful, You can see that the matrix is normally green and briefly red after high fives.</p>"},{"location":"Products/Shield/mbits.html#use-with-mbits-rgb-matrix","title":"Use with Mbits-RGB Matrix","text":"<p>Description The RGB Matrix module is an 5*5 matrix display module composed of 25 rgb led lamp beads. It can respond to changes in input signals in monochrome, full-color, gradual, and horse racing modes, and can also display simple graphics.</p> <p>Usage The following sketch demonstrates several simple applications of the module.</p> <p>*Text display 1.Connect the data cable to the communication port of Mbits.</p> <p>2.Open the software and upload the following program to Mbits.</p> <p>\u2460 Letscode Mode</p> <p></p> <p>\u2461 Code Mode</p> <pre><code>// Language ArduinoC\n#include &lt;FastLED.h&gt;\n#include \"Dots5x5font.h\"\n#define NUM_ROWS 5\n#define NUM_COLUMNS 5\n#define NUM_LEDS (NUM_ROWS * NUM_COLUMNS)\n#define LED_PIN 13\n#define LED_TYPE WS2812B\n#define COLOR_ORDER GRB\n\nCRGBArray&lt;NUM_LEDS&gt; leds;\nuint8_t max_bright =10;\nCRGB myRGBcolor_adx5(255, 0, 0);\n\nvoid plotMatrixChar(CRGB (*matrix)[5], CRGB myRGBcolor, int x, char character, int width, int height){\n  int y = 0;\n  if (width &gt; 0 &amp;&amp; height &gt; 0){\n    int charIndex = (int)character - 32;\n    int xBitsToProcess = width;\n    for (int i = 0; i &lt; height; i++){\n      byte fontLine = FontData[charIndex][i];\n      for (int bitCount = 0; bitCount &lt; xBitsToProcess; bitCount++){\n        CRGB pixelColour = CRGB(0, 0, 0);\n        if (fontLine &amp; 0b10000000){\n          pixelColour = myRGBcolor;\n        }\n        fontLine = fontLine &lt;&lt; 1;\n        int xpos = x + bitCount;\n        int ypos = y + i;\n        if (xpos &lt; 0 || xpos &gt; 10 || ypos &lt; 0 || ypos &gt; 5);\n        else{\n          matrix[xpos][ypos] = pixelColour;\n        }\n      }\n    }\n  }\n}\nvoid ShowString(String sMessage){\n  CRGB matrixBackColor[10][5];\n  int mapLED[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,24};\n  int messageLength = sMessage.length();\n  for (int x = 0; x &lt; messageLength; x++){\n    char myChar = sMessage[x];\n    plotMatrixChar(matrixBackColor, myRGBcolor_adx5, 0 , myChar, 5, 5);\n    for (int sft = 0; sft &lt;= 5; sft++){\n      for (int x = 0; x &lt; NUM_COLUMNS; x++){\n        for (int y = 0; y &lt; 5; y++){\n          int stripIdx = mapLED[y * 5 + x];\n          if (x + sft &lt; 5){\n            leds[stripIdx] = matrixBackColor[x + sft][y];\n          }else{\n            leds[stripIdx] = CRGB(0, 0, 0);\n          }\n        }\n      }\n      FastLED.show();\n      if (sft == 0){\n        FastLED.delay(200);\n      }else{\n        FastLED.delay(30);\n      }\n    }\n  }\n}\n\nvoid setup() {\n  FastLED.addLeds&lt;LED_TYPE, LED_PIN, COLOR_ORDER&gt;(leds, NUM_LEDS);\n  FastLED.setBrightness(max_bright);\n}\n\nvoid loop() {\n  ShowString(\"Letscode\");\n}\n</code></pre> <p>3.After the upload is successful, you can see several letters of \u201cletscode\u201d are displayed quickly.</p> <p>*DIY Images</p> <p>1.Connect the data cable to the communication port of Mbits . 2.Open the software and upload the following program to Mbits.</p> <p>\u2460 Letscode Mode</p> <p></p> <p>\u2461 Code Mode</p> <pre><code>// Language ArduinoC\n#include &lt;FastLED.h&gt;\n#include \"Dots5x5font.h\"\n#define NUM_ROWS 5\n#define NUM_COLUMNS 5\n#define NUM_LEDS (NUM_ROWS * NUM_COLUMNS)\n#define LED_PIN 13\n#define LED_TYPE WS2812B\n#define COLOR_ORDER GRB\n\nCRGBArray&lt;NUM_LEDS&gt; leds;\nuint8_t max_bright =10;\nCRGB myRGBcolor_uh2h(255, 0, 0);\nconst uint8_t maxBitmap_uh2h[]= {\n  B00100,B01110,B11111,B10001,B11111\n};\n\nvoid Display(const byte dat[],CRGB myRGBcolor){\n  for (int c = 0; c &lt; 5; c++){\n    for (int r = 0; r &lt; 5; r++){\n      if (bitRead(dat[c], r)){\n        leds[c * 5 + 4-r] = myRGBcolor;\n      }\n      FastLED.show();\n      delay(5);\n    }\n  }\n}\n\nvoid setup() {\n  FastLED.addLeds&lt;LED_TYPE, LED_PIN, COLOR_ORDER&gt;(leds, NUM_LEDS);\n  FastLED.setBrightness(max_bright);\n}\n\nvoid loop() {\n  Display(maxBitmap_uh2h,myRGBcolor_uh2h);\n}\n</code></pre> <p>3.After the upload is successful, you can see the red windmill pattern in the center of the matrix.You can also change red to other colors.</p> <p>*Dynamic Image</p> <p>1.Connect the data cable to the communication port of Mbits.</p> <p>2.Open the software and upload the following program to Mbits.</p> <p>\u2460 Letscode Mode</p> <p></p> <p>\u2461 Code Mode</p> <pre><code>// Language ArduinoC\n#include &lt;FastLED.h&gt;\n#include \"Dots5x5font.h\"\n#define NUM_ROWS 5\n#define NUM_COLUMNS 5\n#define NUM_LEDS (NUM_ROWS * NUM_COLUMNS)\n#define LED_PIN 13\n#define LED_TYPE WS2812B\n#define COLOR_ORDER GRB\n\nCRGBArray&lt;NUM_LEDS&gt; leds;\nuint8_t max_bright =10;\nCRGB myRGBcolor_g00e(255, 0, 0);\nconst uint8_t maxBitmap_g00e[]= {\n  B10000,B10000,B10000,B10000,B10000\n};\nCRGB myRGBcolor_4m3g(250, 255, 0);\nconst uint8_t maxBitmap_4m3g[]= {\n  B01000,B01000,B01000,B01000,B01000\n};\nCRGB myRGBcolor_kqbq(0, 119, 255);\nconst uint8_t maxBitmap_kqbq[]= {\n  B00100,B00100,B00100,B00100,B00100\n};\nCRGB myRGBcolor_a8c4(0, 255, 119);\nconst uint8_t maxBitmap_a8c4[]= {\n  B00010,B00010,B00010,B00010,B00010\n};\nCRGB myRGBcolor_e6v8(199, 0, 255);\nconst uint8_t maxBitmap_e6v8[]= {\n  B00001,B00001,B00001,B00001,B00001\n};\n\nvoid Display(const byte dat[],CRGB myRGBcolor){\n  for (int c = 0; c &lt; 5; c++){\n    for (int r = 0; r &lt; 5; r++){\n      if (bitRead(dat[c], r)){\n        leds[c * 5 + 4-r] = myRGBcolor;\n      }\n      FastLED.show();\n      delay(5);\n    }\n  }\n}\n\nvoid setup() {\n  FastLED.addLeds&lt;LED_TYPE, LED_PIN, COLOR_ORDER&gt;(leds, NUM_LEDS);\n  FastLED.setBrightness(max_bright);\n}\n\nvoid loop() {\n  Display(maxBitmap_g00e,myRGBcolor_g00e);\n  delay(500);\n  Display(maxBitmap_4m3g,myRGBcolor_4m3g);\n  delay(500);\n  Display(maxBitmap_kqbq,myRGBcolor_kqbq);\n  delay(500);\n  Display(maxBitmap_a8c4,myRGBcolor_a8c4);\n  delay(500);\n  Display(maxBitmap_e6v8,myRGBcolor_e6v8);\n  delay(500);\n  FastLED.clear();\n}\n</code></pre> <p>3.After the upload is successful, you can see the center of the matrix from left to right showing red, yellow, blue, green and purple alternately.</p>"},{"location":"Products/Shield/mbits.html#use-with-mbits-temperature-sensor","title":"Use with Mbits-Temperature Sensor","text":"<p>Description This is the temperature sensor on Mbits, The module can detect the temperature of the surrounding environment in real-time. Normally, the temperature value detected by the temperature sensor is 31 degrees.</p> <p>Usage</p> <p>Here we show a simple application of the module.</p> <p>1.Connect the data cable to the communication port of Mbits.</p> <p>2.Open the software and upload the following program to Mbits.</p> <p>\u2460 Letscode Mode</p> <p></p> <p>\u2461 Code Mode</p> <pre><code>// Language ArduinoC\n#include&lt;Wire.h&gt;\n#include &lt;tmp75.h&gt;\n#include &lt;Tone32.h&gt;\n#define BUZZER_PIN 33\n#define BUZZER_CHANNEL 0\n\nTMP75 Tmp75Sensor;\n\nvoid setup() {\n  Wire.begin(22,21);\n  Tmp75Sensor.begin();\n}\n\nvoid loop() {\n  if ((Tmp75Sensor.readTemperature()) &gt; 35) {\n    tone(BUZZER_PIN, NOTE_C4, 500, BUZZER_CHANNEL);\n    tone(BUZZER_PIN, NOTE_D4, 500, BUZZER_CHANNEL);\n  } else {\n    noTone(BUZZER_PIN, BUZZER_CHANNEL);\n  }\n}\n</code></pre> <p>3.After the upload is successful,You can try to raise the temperature to 35 degrees, and you'll hear the buzzer making a beeping noise.</p>"},{"location":"Products/Shield/mbits.html#use-on-arduino","title":"Use on Arduino","text":"<ul> <li>Part 1. Setting up the programming environment</li> </ul> <p>1\uff1aDownload and install the latest version of Arduino IDE, Windows Installer from https://www.arduino.cc/en/software</p> <p>2\uff1aAdd ESP32 development board data in Arduino IDE</p> <p>a)ClickFile -&gt;Preferences-&gt;Additional boards manager URLs</p> <p>b)Add the following URLs: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json</p> <p>c)ClickTools -&gt;Board -&gt;Board Manager. Search for esp,find esp32, and click Install.</p> <p>d)Click\"Tools\"-&gt;\"Board\"-&gt;\"ESP32 Arduino\", select \"ESP32-Wrover Module\"; Click \"Port\", select the corresponding com port</p> <p></p> <ul> <li>Part 2: Some examples</li> </ul> <p>1.5*5 RGB dot matrix and buttons</p> <p>The 5*5RGB dot matrix is controlled by GPIO13, Button A is controlled by GPIO36, and Button B is controlled by GPIO39.</p> <p>a)Download RGB_Demo, firstly unzip RGB_Demo.zip, then unzip Button.zip, FastLED-master.zip, RGB_Font and RGB_Test.zip. </p> <p>b)Copy the following three library files (Button, FastLED-master, RGB_Font) to the libraries under the Arduino installation directory; </p> <p>c)Upload the following program (RGB_Test) to the Mbits board;</p> <pre><code> #include &lt;FastLED.h&gt;\n#include \"Dots5x5font.h\"\n#define NUM_ROWS 5\n#define NUM_COLUMNS 5\n#define NUM_LEDS (NUM_ROWS * NUM_COLUMNS)\n#define LED_PIN 13\n#define LED_TYPE WS2812B\n#define COLOR_ORDER GRB\n#include &lt;Button.h&gt;\n\nCRGBArray&lt;NUM_LEDS&gt; leds;\nuint8_t max_bright = 10;\nCRGB myRGBcolor_uijf(0, 255, 21);\nCRGB myRGBcolor_28dt(34, 0, 255);\n\nvoid plotMatrixChar(CRGB (*matrix)[5], CRGB myRGBcolor, int x, char character, int width, int height) {\n  int y = 0;\n  if (width &gt; 0 &amp;&amp; height &gt; 0) {\n    int charIndex = (int)character - 32;\n    int xBitsToProcess = width;\n    for (int i = 0; i &lt; height; i++) {\n      byte fontLine = FontData[charIndex][i];\n      for (int bitCount = 0; bitCount &lt; xBitsToProcess; bitCount++) {\n        CRGB pixelColour = CRGB(0, 0, 0);\n        if (fontLine &amp; 0b10000000) {\n          pixelColour = myRGBcolor;\n        }\n        fontLine = fontLine &lt;&lt; 1;\n        int xpos = x + bitCount;\n        int ypos = y + i;\n        if (xpos &lt; 0 || xpos &gt; 10 || ypos &lt; 0 || ypos &gt; 5);\n        else {\n          matrix[xpos][ypos] = pixelColour;\n        }\n      }\n    }\n  }\n}\n\nvoid ShowString(String sMessage,CRGB myRGBcolor) {\n  CRGB matrixBackColor[10][5];\n  int mapLED[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24};\n  int messageLength = sMessage.length();\n  for (int x = 0; x &lt; messageLength; x++) {\n    char myChar = sMessage[x];\n    plotMatrixChar(matrixBackColor, myRGBcolor, 0 , myChar, 5, 5);\n    for (int sft = 0; sft &lt;= 5; sft++) {\n      for (int x = 0; x &lt; NUM_COLUMNS; x++) {\n        for (int y = 0; y &lt; 5; y++) {\n          int stripIdx = mapLED[y * 5 + x];\n          if (x + sft &lt; 5) {\n            leds[stripIdx] = matrixBackColor[x + sft][y];\n          } else {\n            leds[stripIdx] = CRGB(0, 0, 0);\n          }\n        }\n      }\n      FastLED.show();\n      if (sft == 0) {\n        FastLED.delay(200);\n      } else {\n        FastLED.delay(30);\n      }\n    }\n  }\n}\n\n\nvoid setup() {\n  FastLED.addLeds&lt;LED_TYPE, LED_PIN, COLOR_ORDER&gt;(leds, NUM_LEDS);\n  FastLED.setBrightness(max_bright);\n}\n\nvoid loop() {\n  if (buttonA.isPressed() &amp;&amp; !buttonB.isPressed()) {\n    ShowString(\"welcome\",myRGBcolor_uijf);\n  }\n  if (buttonB.isPressed() &amp;&amp; !buttonA.isPressed()) {\n    ShowString(\"elecrow\",myRGBcolor_28dt);\n  }\n}\n</code></pre> <p>d)After the program is downloaded, press the Button A, the RGB dot matrix will scroll the words \"WELCOME\", and press the Button B to scroll the words \"ELECROW\";\uff1b</p> <p> </p> <p>2.Temperature sensor</p> <p>d)Copy the library files of TMP75 to the libraries directory under the Arduino installation directory;</p> <p>e)Click \"File\u2192Examples\u2192TMP75\u2192simpleTMP75.ino\" to open the corresponding program file and download it to the Mbits board;</p> <p>f)The sample code is as follows:\uff1a</p> <pre><code>#include&lt;Wire.h&gt;\n#include &lt;tmp75.h&gt;\n\n#define T_LOW 24.8\n#define T_HIGH 25.0125\n\nTMP75 mySensor; // mySensor at default i2c address\n\nvoid setup(){\n  Wire.begin(22,21); // initialize i2c library\n  Serial.begin(9600);\n  int error=mySensor.begin();\n  if (error) {\n    Serial.println(\"TMP75 not responding...\");\n    while(1);\n  }\n // ALERT pin should be low if temperature is above T_HIGH\n // and should return to high when temperature is below T_LOW\n mySensor.setHighLimit(T_HIGH);\n mySensor.setLowLimit(T_LOW);\n\n}\n\nvoid loop(){\n  float temp = mySensor.readTemperature();\n  Serial.print(\"Temp = \");\n  Serial.print(temp,4); // 4 decimals to see full 12 bits resolution\n  Serial.println(\" Celsius\");\n  delay(500);\n\n}\n</code></pre> <p>g)After the program is downloaded, open the serial port monitor, set the baud rate to 9600, and the serial port will print out the currently detected temperature value estimate, as shown in the figure:</p> <p></p> <p>3.Buzzer</p> <p>The passive buzzer is connected to the GPIO33 pin by default, and we can output PWM waves on this pin to drive the buzzer.</p> <p>The following code is an example of playing a song:</p> <pre><code>int speakerPin = 33; \n\nint length = 15; // the number of notes \nchar notes[] = \"ccggaagffeeddc \"; // a space represents a rest \nint beats[] = { 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 4 }; \nint tempo = 300; \n\nvoid playTone(int tone, int duration) { \n  for (long i = 0; i &lt; duration * 1000L; i += tone * 2) { \n    digitalWrite(speakerPin, HIGH); \n    delayMicroseconds(tone); \n    digitalWrite(speakerPin, LOW); \n    delayMicroseconds(tone); \n  } \n} \n\nvoid playNote(char note, int duration) { \n  char names[] = { 'c', 'd', 'e', 'f', 'g', 'a', 'b', 'C' }; \n  int tones[] = { 1915, 1700, 1519, 1432, 1275, 1136, 1014, 956 }; \n\n  // play the tone corresponding to the note name \n  for (int i = 0; i &lt; 8; i++) { \n    if (names[i] == note) { \n      playTone(tones[i], duration); \n    } \n  } \n} \n\nvoid setup() { \n  pinMode(speakerPin, OUTPUT); \n} \n\nvoid loop() { \n  for (int i = 0; i &lt; length; i++) { \n    if (notes[i] == ' ') { \n      delay(beats[i] * tempo); // rest \n    } else { \n      playNote(notes[i], beats[i] * tempo); \n    } \n\n    // pause between notes \n    delay(tempo / 2);  \n  } \n}\n</code></pre> <p>g)After the program is downloaded, open the serial port monitor, set the baud rate to 9600, and the serial port will print out the currently detected temperature value estimate, as shown in the figure:</p> <p>After the program is downloaded successfully, you can hear the beautiful tune.</p>"},{"location":"Products/Shield/mbits.html#resources","title":"Resources","text":"<p>Arduino program Mbits-V1.1-20210420-01.pdf Mbits-V1.2-20210713-01.pdf </p> <p>Please feel free to ask questions here. https://forum.elecrow.com/discussions</p>"},{"location":"Products/Shield/mini-solar-lipo-charger-v10.html","title":"Mini solar Lipo Charger v1.0","text":""},{"location":"Products/Shield/mini-solar-lipo-charger-v10.html#introduction","title":"Introduction","text":"<p>The solar/LiPo Charger is extremely affordable and easy to use. No programming is required. Plug it in and it works. The internal charger IC handles all the power flow between the various components. In case solar power is not sufficient, the microUSB port allows you to charge your lithium battery through USB. It can also be used to program your kit without detaching the LiPo Charger board.</p> <p>The solar/LiPo Charger board will Show red LED to alarm when the battery is low power, or it will show Green. The LiPo Charger board is the ideal green power solution for your outdoor sensor design. Attach the LiPo Charger board to your sensor board and it can run on solar power forever!</p> <p>It can be used to charge mobile phone.In addition, it also provide JST2.0 plug power output, It can provide 5V power for other peripherals.</p> <p>Model: CPC09141S</p> <p></p>"},{"location":"Products/Shield/mini-solar-lipo-charger-v10.html#featrues","title":"Featrues","text":"<ul> <li> <p>Maximum 1A load output</p> </li> <li> <p>Battery and Solar panel connector is JST 2.0</p> </li> <li> <p>The output ports are USB and JST2.0</p> </li> <li> <p>Stable 5V USB power supply regardless of source</p> </li> <li> <p>Charge/Recharge algorithms built into chip</p> </li> <li> <p>Charge Lithium Polymer Battery through solar power or USB</p> </li> <li> <p>Stable supply voltage through either lithium battery or USB</p> </li> <li> <p>One red alarm LED and one green status LED</p> </li> </ul>"},{"location":"Products/Shield/mini-solar-lipo-charger-v10.html#interface","title":"Interface","text":""},{"location":"Products/Shield/mini-solar-lipo-charger-v10.html#specifications","title":"Specifications","text":"<ul> <li> <p>Input voltage: 4.4V-6V</p> </li> <li> <p>Output voltage / current: 5V 500mA</p> </li> <li> <p>Operating temperature: -40 \u2103 -80 \u2103</p> </li> <li> <p>Weight\uff1a9g</p> </li> </ul>"},{"location":"Products/Shield/mini-solar-lipo-charger-v10.html#cautions","title":"Cautions","text":"<p> 1.Charge and discharge can not be greater than 1A, otherwise it will burn the components <p>2.Potential short circuit or electric shock, especially if device gets wet when placing out for solar power collection</p> <p>3.Board in the course of work slightly fever is a normal phenomenon </p>"},{"location":"Products/Shield/mini-solar-lipo-charger-v10.html#usge","title":"Usge","text":"<p>We provide directly usb 5v voltage power supply or solar panel power supply. Lipo battery port connected to the 3.7V lipo battery, if the battery is not full, red light, if the battery is full, green light, this time only a light. USB output port to connect the data cable and mobile phone to observe whether the phone can charge, unplug the USB5V can continue to charge the phone, the test passed. You can also through the 5V voltage output port access to other 5v power supply peripherals.</p>"},{"location":"Products/Shield/motor-shield-v10.html","title":"Motor Shield v1.0","text":""},{"location":"Products/Shield/motor-shield-v10.html#description","title":"Description","text":"<p>The Motor Shield is a platform for robotics and mechanical applications based on LM298N. It can be used to drive 2 DC motor or a 4-wire stepper. When controlling 2 DC motor, Only 4 control pins were needed, which makes this shield easier to control, and saves the control pins of controller. The Drive current can be up to 2A per motor output thanks to the heat sink added. you can measure the driver current with the added resistance, which would makes your control system more smart.</p> <p>Model: (Discontinued)</p> <p></p>"},{"location":"Products/Shield/motor-shield-v10.html#features","title":"Features","text":"<ul> <li>The logic control voltage: 4.5~5.5V</li> <li>Motor Supply Voltage: 6~ 15V</li> <li>Reduced control pins needed</li> <li>Measurement for driver current</li> <li>Drive part of the operating current Io: 2A</li> <li>Maximum power dissipation: 25W (T = 75 degree Celsius)</li> <li>Operating temperature: -25 degree Celsius ~ +130 degree Celsius</li> <li>Drive Type: Dual high-power H-bridge driver</li> </ul>"},{"location":"Products/Shield/motor-shield-v10.html#specification","title":"Specification","text":"Item Min Typical Max Unit Operating Voltage 4.5 5.0 5.5 VDC Drive Voltage 6 12 15 V Output Current / / 2 A Dimension cm Weight g"},{"location":"Products/Shield/motor-shield-v10.html#interface","title":"Interface","text":""},{"location":"Products/Shield/motor-shield-v10.html#usage","title":"Usage","text":""},{"location":"Products/Shield/motor-shield-v10.html#pin-routing","title":"Pin Routing","text":"<p>Plug the motor shield onto Arduino or Crowduino, the motor shield pins connects Arduino pins as below:</p> Pin Name Direction Connection to Arduino Description EA Input D9 Motor_1 enable pin EB Input D10 Motor_2 enable pin IN1 Input D8 Positive Controlling of Motor_1 IN2 Input D11 Negative Controlling of Motor_1 IN3 Input D12 Positive Controlling of Motor_2 IN4 Input D13 Negative Controlling of Motor_2 M1-, M1+ Output / Outputs to Motor_1 M2-, M2+ Output / Outputs to Motor_1"},{"location":"Products/Shield/motor-shield-v10.html#control-2dc-motors","title":"Control 2DC motors","text":"<p>With this motor shield, you can connect and control 2 DC motors simultaneously. There are 2 control modes you can select to control these motors.</p> <ul> <li>Derect_Mode:</li> </ul> <p>Set the selector on the shield to \"Derect_Mode\", in this mode, 6 Arduino pins are needed to control the 2 DC motors. D8/D9/D11 are for motor_1 controlling, and D10/D12/D13 are for the motor_2 controlling. In this mode, follows the logic between EA(B) and INx with motor motion:</p> EA(B) IN1(IN3) IN2(IN4) Motion of MotorA(B) 0 x x Stop 1 0 0 Stop 1 0 1 Clockwise 1 1 0 Anticlockwise 1 1 1 Stop <p>In this mode, 3 pins will be need to control each motor. 2 for rotate derection, and 1 for speed controlling.</p> <pre><code>const int pinI1=8;//I1\nconst int pinI2=11;//I2\nconst int speedpinA=9;//EA(PWM]\nconst int pinI3=12;//I3\nconst int pinI4=13;//I4\nconst int speedpinB=10;//EB(PWM]\nvoid setup()\n{\n    for(int i=0;i&lt;20;i++)\n    pinMode(i,OUTPUT); \n}\nvoid loop()\n{\n    Test_Load_Left();\n    delay(3000);\n    clean_Output();\ndelay(1000);\nTest_Load_Right();\n delay(3000);\n}\n\nvoid Test_Load_Left()\n{\n  digitalWrite(speedpinA,HIGH);// full PWM\n  digitalWrite(speedpinB,HIGH);\n  digitalWrite(pinI4,HIGH);\n  digitalWrite(pinI3,LOW);\n  digitalWrite(pinI2,HIGH);\n  digitalWrite(pinI1,LOW);\n}\nvoid Test_Load_Right()\n{\n  digitalWrite(speedpinA,HIGH);// full PWM 255\n  digitalWrite(speedpinB,HIGH);\n  digitalWrite(pinI1,HIGH);\n  digitalWrite(pinI2,LOW);\n  digitalWrite(pinI3,HIGH);\n  digitalWrite(pinI4,LOW);\n  }\nvoid clean_Output()\n{\n  digitalWrite(speedpinA,LOW);// full PWM 255\n  digitalWrite(speedpinB,LOW);\n}\n</code></pre> <ul> <li>Invert_Mode</li> </ul> <p>Obviously, I/O pins is so precious for Arduino board especily when you need to make a real project. So, Elecrow motor Shield add the functions to control the motors with less pins. In the \"Invert_Mode\", only 4 control pins are needed to control 2 DC motors, 2 pins for each motor. First, adjust the Control mode to Invert Mode, in this mode, D8/D9 are used to control motor 1, while D10/D12 are used to control motor The motor can be controlled by the corresponding control pins as the following table:</p> D8(/D12): Direction Control D9(/D10): Speed Control Motor1(/2) Action x L NO Action H H Forward(Full Speed) L H Backward(Full Speed) H or L PWM PWM Speed Control <p>In this mode, Just 4 pins are needed to control the motors:</p> <pre><code>void Test_Load_Left()\n{\n  digitalWrite(speedpinA,HIGH);// full PWM\n  digitalWrite(speedpinB,HIGH);\n  digitalWrite(pinI3,LOW);\n  digitalWrite(pinI1,LOW);\n}\nvoid Test_Load_Right()\n{\n  digitalWrite(speedpinA,HIGH);// full PWM 255\n  digitalWrite(speedpinB,HIGH);\n  digitalWrite(pinI1,HIGH);\n  digitalWrite(pinI3,HIGH);\n  }\n</code></pre> <p>The connected 2 motors would rotate with a changing speed for this program.</p>"},{"location":"Products/Shield/motor-shield-v10.html#stepper-control","title":"Stepper Control","text":"<p>Connect a 4-wire stepper motor to motor shield refer to [ULN2003]</p> <p>Note you need to adjust the control mode selector to Derect_mode to contol the stepper. There is a lib\uff1a Stepper.h in Arduino IDE, users can use this library to control 4-wire stepper as below program:</p> <pre><code>#include &lt;Stepper.h&gt;\nconst int stepsPerRevolution = 200;  // change this to fit the number of steps per revolution\n                                    // for your motor\n// initialize the stepper library on pins 8 through 13:\nStepper myStepper(stepsPerRevolution, 8,11,12,13);            \nvoid setup() {\n // set the speed at 60 rpm:\n myStepper.setSpeed(60);\n // initialize the serial port:\n Serial.begin(9600);\n pinMode(9,OUTPUT);\n pinMode(10,OUTPUT);\n digitalWrite(9,HIGH);\n digitalWrite(10,HIGH);\n}\nvoid loop() {\n // step one revolution  in one direction:\n  Serial.println(\"clockwise\");\n myStepper.step(stepsPerRevolution);\n delay(500);\n  // step one revolution in the other direction:\n Serial.println(\"counterclockwise\");\n myStepper.step(-stepsPerRevolution);\n delay(500); \n</code></pre> <p>} The connected stepper would rotate with a changing direction for this progam.</p>"},{"location":"Products/Shield/motor-shield-v10.html#drive-current-measurement","title":"Drive Current Measurement","text":"<p>The drive current of both channel can be measured by Arduino, which makes it smart in applications for auto monitoring. Two 0.5R Cement Power Resistors are added in this shield to achieve this. you can get the driver current for both channel with Arduino as following program:</p> <pre><code>int senA= A0;    // channel A current measurement\nint senB =A1;    // channel B current measurement\nint sensorValueA=0;\nint sensorValueB=0;\ndouble currentA=0;\ndouble currentB=0;\nvoid setup() {\n}\nvoid loop() {\n // read the value from the sensor:\n sensorValueA = analogRead(senA);  \n sensorValueB = analogRead(senB);  \n // canculate the driver current for both channel with: I=U/R\n currentA = sensorValueA/1024*5/0.5;\n currentB = sensorValueB/1024*5/0.5;\n delay(100);                  \n}\n</code></pre> <p>In this program, Arduino get the voltage on Resistors for each channel. And then convert the voltage to current with Ohm's law. The Drive Current measurement would be useful in applications such as tire locking monitoring.</p>"},{"location":"Products/Shield/motor-shield-v10.html#support","title":"Support","text":"<p>You can go to our website or contact with techsupport@elecrow.com.</p>"},{"location":"Products/Shield/motor-shield-v10.html#resources","title":"Resources","text":"<ul> <li>L298datasheet</li> <li>Motor Shield v1.0 Eagle files</li> <li>Stepper control library for Arduino</li> </ul>"},{"location":"Products/Shield/motor26stepper-shield.html","title":"Motor&Stepper SDshield","text":""},{"location":"Products/Shield/motor26stepper-shield.html#description","title":"Description","text":"<p>It would always a problem to drive motors for Arduino beginners. If you DIY your mobile platform, you will 2 DC motors at least, and control their speed&amp; direction of rotaton, because you will want your platform forward, turn back, turn left or right. Besides, motors always needs large current, so, you will need some modules to help you control the large current, with microtrller sucha Arduino. So, what you need in such application is a motor driver board. Elecrow has prepard such a Shield board for you. It is Arduino compatible, you can just plug it onto your Arduino or Crowduino to start your mobile application. Actually, We had release the Motor Shield one years ago, but today, i will introduce you the Motor$ Stepper Shield, which is the upgrade version of the previous Motor Shield.</p> <p>Model: (Discontinued) </p> <p>As the same as the Motor Shield, this Motor&amp; Stepper shield can be used to drive 2 DC motors or a 4-wire stepper, the max driver can be upto 2A. Contrast to the motor shield, the new generation Motor&amp; Stepper Shield has the follow advantage:   Stackable Design: The Motor&amp; Stepper Shield uses the L298P and lower heatsink, to make the Motor&amp; Stepper Shield stackable. Smaller Current Resistance: The Motor&amp; Stepper Shield uses smaller current resistance, which is 0.5 ohm, 5W. It can support 3A current at max, which meets the shield\u2019s specifications. Switch to power on/off: The switch helps to power on/off the Motor&amp; Stepper Shield, which make it more convenient in using, especially in your building&amp; debugging. Control Selector Removed: To avoid any confusion, especially for beginner, the control selector removed, need 3 Arduino Pins to control each motor. More Reliable layouts: To ensure the L298P works in best status, the PCB layout meets the max current 2A requirments. More LED Indicators: There are 8 LEDs to indicate the Power, RST, Speed, Directions, to help user get the detailed information of working status.</p>"},{"location":"Products/Shield/motor26stepper-shield.html#features","title":"Features","text":"<ul> <li>The logic control voltage: 4.5~5.5V</li> <li>Motor Supply Voltage: 6~ 15V</li> <li>Measurement for driver current</li> <li>Drive part of the operating current Io: 2A</li> <li>Maximum power dissipation: 25W (T = 75 degree Celsius)</li> <li>Operating temperature: -25 degree Celsius ~ +130 degree Celsius</li> <li>Drive Type: Dual high-power H-bridge driver</li> </ul>"},{"location":"Products/Shield/motor26stepper-shield.html#specification","title":"Specification","text":"Item Min Typical Max Unit Operating Voltage 4.5 5.0 5.5 VDC Drive Voltage 6 12 15 V Output Current / / 2 A Dimension 68.5(L)x55.0(W)x23.5(H) mm Weight g"},{"location":"Products/Shield/motor26stepper-shield.html#interface-function","title":"Interface Function","text":"<p> Motor Supply Voltage: ------&gt; External Power supply for the Motor Shield, Could be 6~22V depending on the motor you used  Power Indicator: ------&gt; LED indicator for the external power supply. H-Bridge Driver: ------&gt; 8 High-power MOSFET to build H-Bridge. Motor_1&amp;2 Connector: ------&gt; Connect your motors here, the H-Bridge motor shield can drive 2 motors simultaneously, of course it can also drive a 4-wire stepper. Motor Control Pins: ------&gt; Arduino pins used to control the motor direction&amp;speed as belows:  </p>"},{"location":"Products/Shield/motor26stepper-shield.html#usage","title":"Usage","text":""},{"location":"Products/Shield/motor26stepper-shield.html#pin-routing","title":"Pin Routing","text":"<p>Plug the motor shield onto Arduino or Crowduino, the motor shield pins connects Arduino pins as below:</p> Motor Pin Name Arduino pin Description Motor_1 IN1 D8 D8=0,D11=1 -&gt; clockwise;<p>D8=1,D11=0 -&gt; anticlockwise;</p> IN2 D11 ENA D9 Motor_1 speed control, duty can be 0%~100% Motor_2 IN3 D12 D12=0,D13=1 -&gt; clockwise;<p>D12=1,D13=0 -&gt; anticlockwise;</p> IN4 D13 ENB D10 Motor_2 speed control, duty can be 0%~100%"},{"location":"Products/Shield/motor26stepper-shield.html#heatsink","title":"Heatsink","text":"<p>There is a heatsink in the pack, if your drive current larger than 1A, you can adhere the heatsink on to the dirver IC L298P easily with the 3M glue at the bottom. </p>"},{"location":"Products/Shield/motor26stepper-shield.html#control-2dc-motors","title":"Control 2DC motors","text":"<p>With this Motor&amp;Stepper Shield, you can control 2 DC motors simultaneously. 6 Arduino pins are needed to control the 2 DC motors. D8/D9/D11 are for motor_1 controlling, and D10/D12/D13 are for the motor_2 controlling.  In this mode, 3 pins will be need to control each motor. 2 for rotate derection, and 1 for speed controlling.</p> <pre><code>const int pinI1=8;//I1\nconst int pinI2=11;//I2\nconst int speedpinA=9;//EA(PWM)to control the motor_1 speed\nconst int pinI3=12;//I3\nconst int pinI4=13;//I4\nconst int speedpinB=10;//EB(PWM]) to control the motor_2 speed\nvoid setup()\n{\n    for(int i=0;i&lt;20;i++)\n    pinMode(i,OUTPUT); //set to output\n}\nvoid loop()\n{\n    Test_Load_Left();\n    delay(3000);\n    clean_Output();\n    delay(1000);\n    Test_Load_Right();\n    delay(3000);\n}\n/*Set the motor1 clockwise and motor2 anticlockwise, with speed 150*/\nvoid Test_Load_Left()\n{\n  analogWrite(speedpinA,150);\n  analogWrite(speedpinB,150);\n  digitalWrite(pinI4,HIGH);\n  digitalWrite(pinI3,LOW);\n  digitalWrite(pinI2,HIGH);\n  digitalWrite(pinI1,LOW);\n}\n/*Set the motor1 clockwise and motor2 anticlockwise, with speed 100 */\nvoid Test_Load_Right()\n{\n  analogWrite(speedpinA,100);\n  analogWrite(speedpinB,100);\n  digitalWrite(pinI1,HIGH);\n  digitalWrite(pinI2,LOW);\n  digitalWrite(pinI3,HIGH);\n  digitalWrite(pinI4,LOW);\n  }\n\n/*Stop the motors */\nvoid clean_Output()\n{\n  digitalWrite(speedpinA,LOW);// full PWM 255\n  digitalWrite(speedpinB,LOW);\n}\n</code></pre>"},{"location":"Products/Shield/motor26stepper-shield.html#stepper-control","title":"Stepper Control","text":"<p>Connect a 4-wire stepper motor to motor shield refer to [ULN2003] There is a lib\uff1a Stepper.h in Arduino IDE, users can use this library to control 4-wire stepper as below program:</p> <pre><code>#include &lt;Stepper.h&gt;\nconst int stepsPerRevolution = 200;  // change this to fit the number of steps per revolution\n                                    // for your motor\n// initialize the stepper library on pins 8 through 13:\nStepper myStepper(stepsPerRevolution, 8,11,12,13);            \nvoid setup() {\n // set the speed at 60 rpm:\n myStepper.setSpeed(60);\n // initialize the serial port:\n Serial.begin(9600);\n pinMode(9,OUTPUT);\n pinMode(10,OUTPUT);\n digitalWrite(9,HIGH);\n digitalWrite(10,HIGH);\n}\nvoid loop() {\n // step one revolution  in one direction:\n  Serial.println(\"clockwise\");\n myStepper.step(stepsPerRevolution);\n delay(500);\n  // step one revolution in the other direction:\n Serial.println(\"counterclockwise\");\n myStepper.step(-stepsPerRevolution);\n delay(500); \n}\n</code></pre> <p>The connected stepper would rotate with a changing direction for this progam.</p>"},{"location":"Products/Shield/motor26stepper-shield.html#drive-current-measurement","title":"Drive Current Measurement","text":"<p>When using the shield to drive motors, sometimes you will want to get the actual drive current, for example, if the DC motors get locked by something, the drive current will get very large, maybe destroy the platform and DC motors. There are 2 current sample resistor on the motor shield, with resistance 0.5 ohm, with these resistor you can easily get the driver curernt.</p> <pre><code>void setup() {                \n  // initialize the direction control pins as an output.\n  pinMode(8, OUTPUT);    \n  pinMode(11, OUTPUT); \n  pinMode(12, OUTPUT); \n  pinMode(13, OUTPUT);  \n  // initialize the speed control pins as an output.\n  pinMode(9, OUTPUT);     \n  pinMode(10, OUTPUT);  \n\n  Serial.begin(9600); //initilize the serial port;\n}\n\nvoid loop() {\n\n    // Define the motor_1 direction;\n    digitalWrite(8, HIGH);   \n    digitalWrite(11, LOW); \n   //  Define the motor_1 speed;\n    //analogWrite(9,100);\n    digitalWrite(9, HIGH); \n\n    // Define the motor_1 direction;    \n    digitalWrite(12, HIGH); \n    digitalWrite(13, LOW); \n    //  Define the motor_1 speed;\n    //analogWrite(10,150);\n    digitalWrite(10, HIGH); \n\n    delay(1000); //wait for one second;\n    //Detect the drive current;\n\n    int sensor1= analogRead(A4);\n    int sensor2= analogRead(A5);\n    float motor1_current=(float)sensor1/1024*5/0.5;\n    float motor2_current=(float)sensor2/1024*5/0.5;\n    Serial.print(\"Drive current of motor_1 is: \");\n    Serial.println(motor1_current);\n    Serial.print(\"Drive current of motor_2 is: \");\n    Serial.println(motor2_current);\n    delay(4000);               // wait for 4 seconds\n}\n</code></pre> <p>  In this program, Arduino get the voltage on Resistors for each channel. And then convert the voltage to current with Ohm's law. The Drive Current measurement would be useful in applications such as tire locking monitoring. As you see, the Arduino measured current with the sample resistor is very close to the multimeter measured current.</p>"},{"location":"Products/Shield/nfc-shield.html","title":"NFC shield","text":""},{"location":"Products/Shield/nfc-shield.html#introduction","title":"Introduction","text":"<p>The NFC(Near Field Communications) Shield uses a highly integrated transceiver module PN532 which handles contactless communication at 13.56MHz. With the arduino library, you can read and write a 13.56MHz tag with this shield or implement point to point data exchange with two NFC Shields. This shield is designed to use SPI communication protocols. you can choose the PD9 or PD10 as SS pin. so it can be used compatible with more Arduino Shields which also uses the SPI communication protocal.</p> <p>Model: ACS53201S</p> <p></p>"},{"location":"Products/Shield/nfc-shield.html#features","title":"Features","text":"<ul> <li>Arduino Shield compatible. No soldering required.</li> <li>SPI interface. Hence, most Arduino pins are available for other applications.</li> <li>Built in PCB Antenna.</li> <li>Supports both 3.3V and 5V operation.</li> <li>Socket to connect other shields.</li> <li>Dimensions(mm):70.0(L)x53.7(W)x23.5(H)</li> </ul>"},{"location":"Products/Shield/nfc-shield.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Use as a RFID reader with Mifare One tags (ISO14443 Type-A) and cards (13.56Mhz).</li> <li>Build visiting card sharing system.</li> <li>Build attendance systems.</li> <li>Design authentication systems.</li> <li>Read Smart Posters.</li> <li>Securely exchange small data with other NFC devices</li> <li>And other endless possibility.</li> </ul>"},{"location":"Products/Shield/nfc-shield.html#interface","title":"Interface","text":""},{"location":"Products/Shield/nfc-shield.html#usage","title":"Usage","text":""},{"location":"Products/Shield/nfc-shield.html#hardware-installation","title":"Hardware Installation","text":"<ul> <li>Connect NFC Shield to Crowduino as shown below.</li> </ul> <ul> <li>Compile and upload the example sketch provided.</li> </ul>"},{"location":"Products/Shield/nfc-shield.html#programming","title":"Programming","text":"<p>Donwload the PN532_SPI Library For NFC Shield and install it to \\arduino\\libraries. you can either copy the folling codes into Arduino IDE or open Open the examples in the library to start. Demo 1\uff1aRead the complete memory of a MIFARE card 1. Open and upload the example readAllMemoryBlocks example as show below.</p> <p>This sketch reads the complete memory of a MIFARE Standard card using default authentication keys. The output gives typical memory layout of fresh MIFARE Standard card.</p> <p>2. Bring a Mifare Card near the NFC Antenna ON PCB.  </p> <p>Note: Blocks are classified as Manufacturer Block(read-only), Data Block (user/application writable area), and Sector Trailer(authentication and access bits for that sector)</p> <p>3.Open the serial monitor, you can see the score as shown below:  </p> <p>Demo 2: Write data to MIFARE Memory Block</p> <p>1. Open the example writeMifareMemory. This example writes a MIFARE memory block 0x08 of a new MIFARE 1K cards using default authentication keys .Read the Block Memory after complete writing data to MIFARE Memory Block.</p> <p>Note: Memory block 0 is readonly and contains manufacturer data. Do not write to Sector Trailer block unless you know what you are doing. Otherwise, the MIFARE card may be unusable in the future.</p> <p>2. Compile and upload the example.</p> <p>3. Bring a Mifare Card near the NFC Antenna.  4. Open the serial monitor, you can see the score as show below:  </p>"},{"location":"Products/Shield/nfc-shield.html#reference-code","title":"Reference code","text":"<p>The APIs make use of the commands to invoke the interfaces provided by PN532 firmware via SPI. All these commands are documented in PN532 User Manual. The following APIs are provided by PN532_SPI Library.</p> <p>boolean SAMConfig(void)</p> <p>This API invokes the SAMConfiguration command of PN532 and sets it to Normal Mode. SAM stands for Security Access Module (i.e the PN532 system). PN532 system can work in Normal mode, Virtual Card mode, Wired Card mode and Dual Card mode.</p> <p>Usage:</p> <pre><code>nfc.SAMConfig(); // Call this before any read/write operation\n</code></pre> <p>uint32_t readPassiveTargetID(uint8_t cardbaudrate)</p> <p>This method reads the Passive Target ID and returns it as a 32-bit number. At the moment only reading MIFARE ISO14443A cards/tags are supported. Hence use PN532_MIFARE_ISO14443A as parameter. Returns 32 bit card number</p> <p>Usage:</p> <pre><code>uint32_t cid;\n// look for MiFare type cards/tags\ncid = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A);\n</code></pre> <p>uint32_t authenticateBlock(uint8_t cardnumber, uint32_t cid, uint8_t blockaddress ,uint8_t authtype, uint8_t * keys)</p> <p>This method is used to authenticate a memory block with key before read/write operation. Returns true when successful.</p> <ul> <li>cardnumber can be 1 or 2</li> <li>cid is 32-bit Card ID</li> <li>blockaddress is block number (any number between 0 - 63 for MIFARE card)</li> <li>authtype is which key is to be used for authentication (either KEY_A or KEY_B)</li> <li>keys points to the byte-array holding 6 keys.</li> </ul> <p>Usage:</p> <pre><code>uint8_t keys[]= {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};  // default key of a fresh card\nnfc.authenticateBlock(1, id ,3,KEY_A,keys); ////authenticate block 3, id is 32-bit passive target id.\n</code></pre> <p>uint32_t readMemoryBlock(uint8_t cardnumber,uint8_t blockaddress, uint8_t * block)</p> <p>This method reads a memory block after authentication with the key. Returns true when successful.</p> <ul> <li>cardnumber can be 1 or 2</li> <li>blockaddress is block number (any number between 0 - 63 for MIFARE card) to read. Each block is 16bytes long in case of MIFARE Standard card.</li> <li>block points to buffer(byte-array)to hold 16 bytes of block-data.</li> </ul> <p>Usage:</p> <pre><code>uint8_t block[16];\nnfc.readMemoryBlock(1,3,block); //Read can be performed only when authentication was successful.\n</code></pre> <p>uint32_t writeMemoryBlock(uint8_t cardnumber,uint8_t blockaddress, uint8_t * block)</p> <p>This method writes data to a memory block after authentication with the key. Returns true when successful.</p> <ul> <li>cardnumber can be 1 or 2</li> <li>blockaddress is block number (any number between 0 - 63 for MIFARE card) to write. Each block is 16bytes long in case of MIFARE Standard card.</li> <li>block points to buffer(byte-array) which holds 16 bytes of block-data to write.Usage:</li> </ul> <pre><code>uint8_t writeBuffer[16];\n    for(uint8_t ii=0;ii&lt;16;ii++)\n     { \n       writeBuffer[ii]=ii; //Fill buffer with 0,1,2....F\n     }\nnfc.writeMemoryBlock(1,0x08,writeBuffer); //Write writeBuffer[] to block address 0x08. Read can be performed only when authentication was successful.\n</code></pre> <p>uint32_t PN532::configurePeerAsInitiator(uint8_t baudrate)</p> <p>This method implements a Peer to Peer Initiator. Returns true when successful.</p> <ul> <li>baudrate can be any number from 0-2. 0 for 106kbps or 1 for 201kbps or 2 for 424kbps. At the moment only 1 and 2 are supported.</li> </ul> <p>This feature is experimental and supports NFC Peer to Peer communication with other NFC shields. Interaction with mobile devices are not tested.</p> <p>Usage:</p> <pre><code>// Configure PN532 as Peer to Peer Initiator\nif( nfc.configurePeerAsInitiator(2) ) //if connection is error-free\n    {\n     //Your Send  Receive code here\n    }\n</code></pre> <p>uint32_t configurePeerAsTarget()</p> <p>This method implements a Peer to Peer Target. Returns true when successful.</p> <p>This feature is experimental and supports NFC Peer to Peer communication with other NFC shields. Interaction with mobile devices are not tested.</p> <p>Usage:</p> <pre><code>// Configure PN532 as Peer to Peer Target\nif(nfc.configurePeerAsTarget()) //if connection is error-free\n   {\n        //You code to trans-receive data\n   }\n</code></pre> <p>uint32_t initiatorTxRx(char *DataOut,char *DataIn)</p> <p>This method is used to transmit and receive data to and from target. This code is used by NFC Peer to Peer Initiator. Returns true when successful.</p> <ul> <li>DataOut is pointer and array of chars (16 bytes) transmit data.</li> <li>DataIn is pointer and array of chars (16 bytes) receive data.</li> </ul> <p>This feature is experimental and supports NFC Peer to Peer communication with other NFC shields. Interaction with mobile devices are not tested.</p> <p>Usage:</p> <pre><code>    // Configure PN532 as Peer to Peer Initiator in active mode\n    if( nfc.configurePeerAsInitiator(2) ) //if connection is error-free\n    {\n        //trans-receive data\n        if(nfc.initiatorTxRx(DataOut,DataIn))\n        {\n         Serial.print(\"Data Sent and Received: \");\n         Serial.println(DataIn);\n        }\n    }\n</code></pre> <p>uint32_t targetTxRx(char *DataOut,char *DataIn)</p> <p>This method is used to transmit and receive data to and from initiator. This code is used by NFC Peer to Peer Target to respond to Initiator. Returns true when successful.</p> <ul> <li>DataOut is pointer and array of chars (16 bytes) transmit data.</li> <li>DataIn is pointer and array of chars (16 bytes) receive data.</li> </ul> <p>Usage:</p> <pre><code>    // Configure PN532 as Peer to Peer Target\n    if(nfc.configurePeerAsTarget()) //if connection is error-free\n    {\n        //trans-receive data\n        if(nfc.targetTxRx(DataOut,DataIn))\n        {\n         Serial.print(\"Data Received: \");\n         Serial.println(DataIn);\n        }\n    }\n</code></pre>"},{"location":"Products/Shield/nfc-shield.html#resources","title":"Resources","text":"<ul> <li>PN532_SPI Library For NFC Shield</li> <li>NFC Shield - Schematic in PDF format</li> <li>PN532 Datasheet</li> <li>NFC Forum</li> </ul>"},{"location":"Products/Shield/pico-shield.html","title":"Pico Shield","text":""},{"location":"Products/Shield/pico-shield.html#description","title":"Description","text":"<p>Raspberry Pi Pico is a new popular low-cost, high-performance microcontroller board. This Pico board can be well integrated with Crowtail sensors. Without jumpers and breadboards, you can quickly build prototypes and projects, and explore the endless possibilities of Pico.</p> <p>Crowtail Shield for Pi Pico is a plug-and-play expansion board for Raspberry Pi Pico, integrating various Crowtail connectors, including 2*I2C, 3*Analog, 2*UART, 3*Digital ports, 1*BAT, SWD debug interface and SPI pin, 3.3v/5v selectable power switch. The shield board is a stackable add-on board. You can directly use the Pre-Soldered Pico and plug it into the shield board, connect the Crowtail series sensors, and start developing your new project. Learn more about the Crowtail series, click here. Get the Pico board together, click here.</p> <p>Model: Pico Shield</p> <p></p> <p></p>"},{"location":"Products/Shield/pico-shield.html#features","title":"Features","text":"<ul> <li>Analog Port: Include 3 analogs ports, A1, A2, A3</li> <li>Digital Port: Include 3 digital ports, D1, D2, D3</li> <li>UART Port: Include 2 UART port</li> <li>I2C Port: Include 2 I2C ports</li> <li>SPI Port: Provide one SPI port</li> <li>BAT Port: Provide one BAT port</li> <li>Power Switch: Provide 5V/3.3V selectable power switch</li> <li>Platform support: MicroPython &amp; Arduino</li> <li>Operating Temperature: -25\u2103 to +85\u2103</li> <li>Operating voltage: Input power \u2157 V</li> <li>Dimension: 65mm * 56mm</li> <li>Weight: 26g</li> </ul>"},{"location":"Products/Shield/pico-shield.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Shield/pico-shield.html#usage","title":"Usage","text":""},{"location":"Products/Shield/pico-shield.html#burn-firmware","title":"Burn Firmware","text":"<p>1. Use a MicroUSB cable to connect the USB interface of the Pico motherboard and the USB interface of the PC. If the Pico has not been burned into the firmware, a U disk will be generated (named: RPI-RP2); </p> <p>2. Enter the official website and follow the instructions to download and burn the firmware: https://www.raspberrypi.com/documentation/microcontrollers/micropython.html </p> <p>3. Operation instructions: Press and hold the BOOTSEL button, insert the USB cable connected to the Pico into the USB port of the computer, a new U disk folder will pop up on the computer, drag and drop the \u201cUF2\u201d file just downloaded to the folder, the Raspberry Pi Pico will restart automatically. In this way, the firmware burning is completed.</p> <p>2. If there is no USB flash drive, it may be that the firmware supporting MicroPython has been burned in. At this time, we can also delete the firmware and re-import the latest version.</p>"},{"location":"Products/Shield/pico-shield.html#software-download-and-installation","title":"Software Download and Installation","text":"<p>1. Enter Thonny's official website: https://thonny.org/. </p> <p>2. As shown in the figure, click to jump to the download interface, select and download the corresponding system version installation package. </p> <p>3. Open the installation package, select the installation path, and install Thonny software. </p> <p>4. After opening Thonny, click \"Tools\" -&gt; \"Options\" to open the setting window; then click \"Interpreter\", select \"Micropython (Raspberry Pi Pico)\" for the interpreter, and select the corresponding port for the port. </p> <p></p> <p></p>"},{"location":"Products/Shield/pico-shield.html#program-example","title":"Program Example","text":"<p>Example 1: Flashing Light Connect the LED to the D1 port. </p> <pre><code>from machine import Pin\nimport time\nled = Pin(20, Pin.OUT)\nif __name__ == '__main__':\n    while True:\n        led.value(1)   \n        time.sleep(0.1)\n        led.value(0)     \n        time.sleep(0.1)\ncleanup()\n</code></pre> <p>Example 2: Switch Light Connect the LED and the button to D1 port and D2 port respectively. </p> <pre><code>from machine import Pin\nfrom  utime  import sleep_ms\nbutton = Pin(18, Pin.IN, Pin.PULL_UP)\nled = Pin(20, Pin.OUT)\nState=0\nif __name__ == '__main__':\n    while True:\n        print(button.value())\n        if button.value() == 0:\n            if State==0: \n                led.value(1)\n                sleep_ms(100)\n                while button.value() == 0:\n                   State = 1\n            else:\n                led.value(0)\n                sleep_ms(100)\n                while button.value()== 0:\n                    State = 0\n</code></pre> <p>Example 3: Ultrasonic Ranging  Connect the ultrasonic ranging sensor to the D1 port. </p> <pre><code>from machine import Pin\nimport utime\ntrigger = Pin(20, Pin.OUT)\necho = Pin(21, Pin.IN)\ndef getDistance(trigger, echo):\n    trigger.low()\n    utime.sleep_us(2)\n    trigger.high()\n    utime.sleep_us(10)\n    trigger.low()\n    while echo.value() == 0:\n        start = utime.ticks_us()\n    while echo.value() == 1:\n        end = utime.ticks_us()\n    d = (end - start) * 0.0343 / 2 \n    return d\nif __name__ == '__main__':\n    while True:\n        distance = getDistance(trigger, echo)\n        print(\"distance\uff1a{:.2f} cm\".format(distance))\n        utime.sleep(0.1)\n</code></pre> <p>Example 4: Dimmer Connect the LED and the rotary angle sensor to D1 port and A1 port respectively. </p> <pre><code>from machine import Pin,ADC,PWM\nfrom time import sleep\nLed_pin = 20               \nPotentiometer_pin = 2\ndef setup():\n    global LED\n    global Pot_ADC    \n    LED = PWM(Pin(Led_pin))\n    LED.freq(2000)\n    Pot_ADC = ADC(Potentiometer_pin)\ndef loop():\n    while True:   \n        print ('Potentiometer Value:', Pot_ADC.read_u16())\n        Value = Pot_ADC.read_u16()  \n        LED.duty_u16(Value)    \n        sleep(0.2)               \nif __name__ == '__main__':\n    setup()    \n    loop()\n</code></pre> <p>Example 5: OLED Display</p> <ul> <li>Connect the OLED to the I2C2 port;</li> <li>Upload the \"ssd1306.py\" file to the Raspberry Pi Pico.</li> </ul> <p></p> <pre><code>from machine import Pin, I2C\nfrom ssd1306 import SSD1306_I2C\nimport time\nlist = [2022, 7, 4, 14, 42, 25]\nmon_max = [1,3,5,7,8,10,12]\nmon_min = [4,6,9,11]\ni2c=I2C(0,sda=Pin(8), scl=Pin(9), freq=400000)\noled = SSD1306_I2C(128, 64, i2c)\ndef set_time():\n    global text1\n    if list[5] &gt; 9:\n        if list[4] &gt; 9:\n            text1 = 'Time:%d:%d:%d'%(list[3],list[4],list[5])\n        else:\n            text1 = 'Time:%d:0%d:%d'%(list[3],list[4],list[5])           \n    else:\n        if list[4] &gt; 9:\n            text1 = 'Time:%d:%d:0%d'%(list[3],list[4],list[5])\n        else:\n            text1 = 'Time:%d:0%d:0%d'%(list[3],list[4],list[5])            \ndef set_date():\n    global text2\n    if list[2] &gt; 9:\n        if list[1] &gt; 9:\n            text2 = 'Date:%d.%d.%d'%(list[0],list[1],list[2])\n        else:\n            text2 = 'Date:%d.0%d.%d'%(list[0],list[1],list[2])           \n    else:\n        if list[1] &gt; 9:\n            text2 = 'Date:%d.%d.0%d'%(list[0],list[1],list[2])\n        else:\n            text2 = 'Date:%d.0%d.0%d'%(list[0],list[1],list[2])\ndef date_change():\n    list[2] = 1\n    list[1] += 1\n    if list[1] &gt; 12:\n        list[1] = 1\n        list[0] += 1        \ndef time_change():\n    list[5] += 1\n    if list[5] &gt; 59:\n        list[5] = 0\n        list[4] += 1\n        if list[4] &gt; 59:\n            list[4] = 0\n            list[3] += 1\n            if list[3] &gt; 23:\n                list[3] = 0\n                list[2] += 1\n                if list[1] in mon_max:\n                    if list[2] &gt; 31:\n                        date_change()\n                elif list[1] in mon_min:\n                    if list[2] &gt; 30:\n                        date_change()\n                elif list[1] == 2:\n                    if (list[0]\u00a0% 4 == 0 and list[0]\u00a0% 100\u00a0!= 0) or list[0]\u00a0% 400 == 0:\n                        if list[2] &gt; 29:\n                            date_change()\n                        elif list[2] &gt; 28:\n                            date_change()\nif __name__ == '__main__':\n    while True:\n        set_date()\n        oled.text(text2, 0, 0)\n        set_time()\n        oled.text(text1, 8, 12)\n        oled.show()\n        time_change()\n        time.sleep(1)\n        oled.fill(0)\n</code></pre> <p>Example 6: LCD Display</p> <ul> <li>Connect the I2C LCD to the I2C1 port;</li> <li>Upload the lcd_api.py and pico_i2c_adafruit_lcd.py file to the Raspberry Pi Pico.</li> </ul> <p></p> <pre><code>from machine import I2C, Pin\nimport utime\nfrom pico_i2c_adafruit_lcd import I2cLcd\nDEFAULT_I2C_ADDR = 0x20\nBUS = 1\nLCD_SDA = Pin(6, Pin.PULL_UP)\nLCD_SCL = Pin(7, Pin.PULL_UP)\ni2c = I2C(BUS, sda=LCD_SDA, scl=LCD_SCL, freq = 400000)\nlcd = I2cLcd(i2c, DEFAULT_I2C_ADDR, 2, 16)\nlcd.putstr(\"Elecrow 2013\")\nutime.sleep_ms(3000)\nlcd.clear()\ncount = 0\nif __name__ == \"__main__\":\n    while True:\n        lcd.move_to(0, 0)\n        lcd.putstr(\"Crowtail - Pico\")\n        utime.sleep_ms(1000)\n        lcd.clear()\n</code></pre> <p>Example 7: Bluetooth Control</p> <ul> <li>Connect the BLE module to the UART1 port;</li> <li>Download a Bluetooth serial port assistant on the mobile phone, turn on the mobile phone Bluetooth, search and connect the HMSoft device, and send characters.</li> </ul> <p></p> <pre><code>import machine\nimport utime\nuart = machine.UART(0, baudrate=115200, tx=machine.Pin(0), rx=machine.Pin(1))\nprint(uart)\nled = machine.Pin(25, machine.Pin.OUT)\nif __name__ == '__main__':\n    while True:\n        if uart.any() == True:\n            cmd = uart.read(1)\n            print(cmd)\n            if cmd == b'a':\n                led.value(1)\n            if cmd == b'b':\n                led.value(0)\n        utime.sleep(0.1)\n</code></pre>"},{"location":"Products/Shield/pico-shield.html#resources","title":"Resources","text":"<ul> <li>Pico_Shield_Code_v1.1</li> <li>Pico_Shield_eagle</li> </ul>"},{"location":"Products/Shield/pico-shield.html#support","title":"Support","text":"<p>If you have any problem about how to use it, you can connect to us at the bottom-right of bazzer or contact to techsupport@elecrow.com to get technology support.</p>"},{"location":"Products/Shield/power-over-internetpoe-hat-for-raspberry-pi.html","title":"Power over Internet(POE) Hat for Raspberry Pi","text":""},{"location":"Products/Shield/power-over-internetpoe-hat-for-raspberry-pi.html#introduction","title":"Introduction","text":"<p>Do you still worry about Raspberry Pi Zero access to various USB devices? So,it's your right choice. It is a USB Hub for RPI Zero, it has 4 USB extension interface and external battery. The 4 pogo pins on the back will connect the PP1, PP6, PP22 and PP23 testing pads on your Raspberry Pi Zero \u2013 no soldering required! You can also power PRI zero by USB cable or a chargeable battery. Only need a few studs can connect it with RPI Zero, it so convenient for saving a lot of wiring problems.</p> <p>Model: RPA20901S</p> <p></p>"},{"location":"Products/Shield/power-over-internetpoe-hat-for-raspberry-pi.html#features","title":"Features","text":"<ul> <li>Support PoE Power over Ethernet, support 802.3af PoE network standard</li> <li>Fully isolated switch mode power supply (SMPS)</li> <li>With 0.91\" OLED for monitoring processor temperature, IP address, and fan status in real-time.</li> <li>Support real-time temperature reading and intelligent cooling</li> <li>With cooling fan, allows auto running on powerup or programmable control configured by switch</li> <li>Integrates PCF8574, 8 channels of I/O ports can be expanded through I2C, which can directly control the fan</li> </ul>"},{"location":"Products/Shield/power-over-internetpoe-hat-for-raspberry-pi.html#specification","title":"Specification","text":"<ul> <li>POE input voltage: 37V ~ 57V DC</li> <li>POE output voltage: 5V 2.5A DC</li> <li>Network standard: 802.3af PoE</li> <li>OLED control interface: I2C</li> <li>OLED size: 0.91 inches</li> <li>OLED resolution: 128\u00d732</li> <li>OLED driver chip: SSD1306</li> <li>OLED resolution: 65.0x56.5mm</li> <li>OLED display color: white</li> <li>OLED viewing angle: greater than 160\u00b0</li> <li>GPIO expansion interface: I2C</li> <li>GPIO expansion chip: PCF8574</li> </ul>"},{"location":"Products/Shield/power-over-internetpoe-hat-for-raspberry-pi.html#usage","title":"Usage","text":"<p>Plug PoE_HAT(B) into the Raspberry Pi, as shown in the figure below.</p> <p></p> <ul> <li>Step 1. Install the necessary library</li> </ul> <p>1) Install BCM2835, open the Raspberry Pi terminal, and run the following command</p> <pre><code>HTTP wget\u00a0: //www.airspayce.com/mikem/bcm2835/bcm2835-1.60.tar.gz\nzxvf bcm2835 tar - 1.60 . tar . GZ\nbcm2835 cd - 1.60 /\nsudo ./ the configure\nsudo make &amp;&amp; sudo make check &amp;&amp; sudo make install\n</code></pre> <p>2) Update wiringPi to version 2.52</p> <pre><code>sudo apt - get install wiringpi\nHTTPS wget\u00a0: //project-downloads.drogon.net/wiringpi-latest.deb\nsudo dpkg - i wiringpi - latest . deb\ngpio - v\n#You will see gpio version: 2.52, indicating successful installation\n</code></pre> <p>3) Install Python library</p> <pre><code>#python2\nsudo apt - get update\nsudo apt - get install python - pip\nsudo pip install RPi . GPIO\n#python3\nsudo apt - get update\nsudo apt - get install python3 - pip\nsudo pip install RPi . GPIO\n</code></pre> <ul> <li>Step 2. Download the sample program</li> </ul> <pre><code>sudo apt - get install p7zip - full\nHTTP wget\u00a0: //www.waveshare.net/w/upload/b/b7/PoE_HAT_B_code.7z\n7z x PoE_HAT_B_code . 7z - r - o ./ PoE_HAT_B_code\n</code></pre> <ul> <li>Step3. Run the test routine</li> </ul> <p>1) C</p> <pre><code>cd PoE_HAT_B_code / c /\nmake clean \nmake\nsudo ./ main\n</code></pre> <p>2) Python</p> <pre><code>cd PoE_HAT_B_code / python /\nsudo python main . py\n</code></pre> <ul> <li>Set the fan start temperature</li> </ul> <pre><code>#C\nNano examples the sudo / main . C\n# POE_HAT_Display() The last parameter of the function sets the fan opening temperature\n\n#python \nNano examples sudo / main . Py\n# POE.POE_HAT_Display() Function parameter to set the fan opening temperature\n</code></pre> <ul> <li>Set boot up</li> </ul> <p>1) Before setting the startup, compile the routine first.</p> <pre><code>Nano sudo / etc / rc . local\n</code></pre> <p>2) Set boot up. Add sudo /home/pi/Fan_HAT/c/main &amp; before exit 0. Note that you must add \"&amp;\" to run in the background, otherwise the system may not start.</p> <pre><code>fi\nsudo / home / pi / PoE_HAT_B_code / c / main &amp;\nexit 0\n</code></pre>"},{"location":"Products/Shield/rainbow-shield.html","title":"Rainbow shield","text":""},{"location":"Products/Shield/rainbow-shield.html#description","title":"Description","text":"<p>This Rainbow Shield is used to drive the LEDs components, such as the 8x8 RGB squares or the seeed rainbow cubes. With the help of Arduino/Crowduino, this shield can driver a max of 192 single color LEDs, or 64 RGB LEDs. it uses two MY9221 chips, which is 12-channels (R/G/B x 4) constant current Adaptive Pulse Density Modulation(APDM), and with the professional multiplexed LED driver library and the related power supply circuit, you can easily control your LED squares to create your idea patterns.</p> <p>Model: (Discontinued)</p> <p></p>"},{"location":"Products/Shield/rainbow-shield.html#features","title":"Features","text":"<ul> <li>Provides 3 x 16 pin header for connecting multiplexed LEDs. Compatible with the 60mm or 40mm LED matrix.</li> <li>Constant current(20.8mA) LEDs driver.</li> <li>Can drive 8x8 RGB LED Matrix or 192 single LEDs</li> <li>Built in 5V / 1 Ampere voltage regulator.</li> <li>Driven directly By Arduino/Crowduino.</li> </ul>"},{"location":"Products/Shield/rainbow-shield.html#specification","title":"Specification","text":"<p>Dimensions(mm):60.0(L)x58.0(W)x17.3(H)</p> Item Min Typical Max Unit Operating Voltage 4.5 5 5.5 VDC Each Channel Curent 20.8 mA maximum of RGB LED 64 PCS VCC Circle 8 /"},{"location":"Products/Shield/rainbow-shield.html#interface","title":"Interface","text":""},{"location":"Products/Shield/rainbow-shield.html#usage","title":"Usage","text":""},{"location":"Products/Shield/rainbow-shield.html#hardware-installation-motors","title":"Hardware installation motors","text":"<p>Plug the rainbow shield to your arduino/crowduino. And then Connect the RGB square to rainbow shield, the 48mm square or 60mm square would be both OK: </p>"},{"location":"Products/Shield/rainbow-shield.html#programming","title":"Programming","text":"<p>Let us get start, with some simple example with RGB LED Square.First, download the Rainbow shield library and unzip this this library to your Arduino IDE:\\\\arduino\\libraries</p>"},{"location":"Products/Shield/rainbow-shield.html#example-1","title":"Example 1","text":"<p>1.Upload the example:drawChar.ino to your arduino/crowduino , about how to upload the codes to arduino, please refer to here</p> <pre><code>#include &lt;Rainbowduino.h&gt;\n\nvoid setup()\n{\n  Rb.init();\n}\nunsigned char x,y,z;\nvoid loop()\n{\n  for(int i= 0x20; i&lt;=0x7E; i++) //generates ASCII value of all printable characters\n  {\n     Rb.drawChar(i,0,1,random(0xFFFFFF)); \n     delay(500);\n     Rb.blankDisplay();\n  } \n}\n</code></pre> <p>2.In this example, the Rainbow Shild drives the RGB square display ASCII value from 0x20(Space) to 0x7E(~) and updates every 0.5 seconds. you can refer to Rainbowduino.cpp in the library to know more about the functions such as the drawChar()/blankDisplay(). </p>"},{"location":"Products/Shield/rainbow-shield.html#example-2","title":"Example 2","text":"<p>1.Upload some other examples, such as the shapes.ino:</p> <pre><code>#include &lt;Rainbowduino.h&gt;\n\nvoid setup()\n{\n  Rb.init();\n}\n\nunsigned char x,y,z;\n\nvoid loop()\n{\n\n     Rb.drawCircle(3, 4, 3, 0xFF0000); // draw a red circle of radius 3 at (3,4).\n     delay(1000);\n     Rb.blankDisplay();\n\n     Rb.fillCircle(3, 4, 2, 0x0000FF); // draw a filled blue circle of radius 2 at (3,4).\n     delay(1000);\n     Rb.blankDisplay();\n\n     Rb.drawLine(0, 0, 7, 7, 0x00FF00); // draw a line from (0,0) to (7,7).\n     delay(1000);\n     Rb.blankDisplay();\n\n     Rb.drawVerticalLine(0, 0, 7, random(0xFFFFFF)); // draw a vertical line from (0,0) of length 7 pixels\n     delay(1000);\n     Rb.blankDisplay();\n\n     Rb.drawHorizontalLine(0, 0, 7, random(0xFFFFFF)); // draw a horizontal line from (0,0) of length 7 pixels\n     delay(1000);\n     Rb.blankDisplay();\n\n     Rb.drawRectangle(0, 0, 4, 6, random(0xFFFFFF)); // draw a rectangle line from (0,0) of length 4 and width 6 pixels\n     delay(1000);\n     Rb.blankDisplay();\n\n     Rb.fillRectangle(0, 0, 7, 7, random(0xFFFFFF)); // draw a filled rectangle line from (0,0) of length and width 7 pixels\n     delay(1000);\n     Rb.blankDisplay();\n\n}\n</code></pre> <p>In this example, the Rainbow shiled drives the square to dispaly differenet sharps&amp;lines, with the function:drawLine()&amp;drawVerticalLine()&amp;drawRectangle()..., ready to draw your own pictures with these given functions? refer to the library source code: Rainbowduino.cpp! </p>"},{"location":"Products/Shield/rainbow-shield.html#support","title":"Support","text":"<p>If you have any problems,please contact with techsupport@elecrow.com.</p>"},{"location":"Products/Shield/rainbow-shield.html#resources","title":"Resources","text":"<ul> <li>File:RainbowShield eagle.zip</li> <li>File:RainbowShield lib.zip</li> </ul>"},{"location":"Products/Shield/relay-shield.html","title":"Relay Shield","text":""},{"location":"Products/Shield/relay-shield.html#introduction","title":"Introduction","text":"<p>The Relay Shield is an Arduino compatible smart module with 4 mechanical relays providing an easy way to control high voltage. The max switching power is 35VDC 70W for each channel. It can be directly controlled by Arduino/Crowduino through digital IOs with an external 6.5~12V DC supply. With the onboard 4 control keys,you can also control the high voltage without programming.</p> <p>Note: Take care the pins on the Shield should not touched the USB connector of Arduino UNO when they connected .</p> <p>Model: MCS01584R</p> <p></p>"},{"location":"Products/Shield/relay-shield.html#features","title":"Features","text":"<ul> <li>Arduino,Crowduino,Seeeduino,Arduino Mega compatible</li> <li>Automatic control and manual control</li> <li>4 mechanical relays with photo-coupled circuit</li> <li>Equipped with screw holes for easy installation</li> <li>Light weight</li> <li>Small form factor</li> <li>Native Arduino/Seeeduino compatibility</li> <li>Extendible</li> </ul>"},{"location":"Products/Shield/relay-shield.html#specification","title":"Specification","text":"Item Min Typical Max Unit Voltage 7 9 12 VDC Current 8 / 250 mA Switching Voltage / / 35 VDC Switching Current / / 2 A Frequency Response -1 / 1 dB Switching Power / / 70 W Relay Life 100,000 / / Cycle ESD contact discharge \u00b14 KV ESD air discharge \u00b18 / Dimension 75.0(L)x56.8(W)x23.5(H) mm Net Weight g"},{"location":"Products/Shield/relay-shield.html#cautions","title":"Cautions","text":"<ul> <li>Place 2 layers of electrical tape on the top of the Arduino's usb connector. This will prevent the relay shield from making contact. <li>Do not operate voltage more than 35V DC.</li> <li>Please be cautious while operating high voltage circuits! You may get hurt or hurt your appliances if used improperly. </li>"},{"location":"Products/Shield/relay-shield.html#interface-function","title":"Interface Function","text":"<p>4 groups of channels for High voltage connection Terminal 1: COM1- Common pin NC1- Normally Closed, in which case NC1 is connected with COM1 when D0 is set low and disconnected when D0 is high; NO1- Normally Open, in which case NO1 is disconnected with COM1 when D0 is set low and connected when D0 is high. Terminal 2-4 are similar to terminal 1, except that the control ports are D1-D3.  </p> <p>9V DC power supply connection The function of the Terminal and the Jack is the same since they are internally connected, and you can choose either of them in needs.</p> <p>IO controlling 4 on-board relays C0-C3 4pins could be connected directly with Arduino pin number of 7-4, so that four relays could be easily controlled by the Arduino. K1-K4 4keys could control the four relays without programming.</p>"},{"location":"Products/Shield/relay-shield.html#usage","title":"Usage","text":"<p>With Arduino/Crowduino Relay Shield could be directly controlled by Arduino or Crowduino.</p> <p></p> <p>Step1. Plug Relay Shield onto Arduino Duemilanove (or compatible) board; Step2. Supply 9v DC power to Arduino; Step3. Download the example code and run in Arduino IDE. If using Arduino via its USB connection for power, you must also provide 9v DC power to the Relay Shield or the relays won't switch. Relays 1-4 can be activated by setting Arduino ports 4-7 to output, and doing a digitalWrite(portNumber,HIGH). Use COMx and either NCx (normally closed) or NOx (normally opened) connections to switch power through to the controlled device.  example code</p> <pre><code>void setup()\n{\npinMode(4,OUTPUT);\npinMode(5,OUTPUT);\npinMode(6,OUTPUT);\npinMode(7,OUTPUT);\n}\nvoid loop()\n{\ndigitalWrite(4,HIGH);\ndigitalWrite(5,HIGH);\ndigitalWrite(6,HIGH);\ndigitalWrite(7,HIGH);\ndelay(1500);\ndigitalWrite(4,LOW);\ndigitalWrite(5,LOW);\ndigitalWrite(6,LOW);\ndigitalWrite(7,LOW);\ndelay(1500);\n}\n</code></pre> <p>After downloanding the above code to your Arduino, the relays, with the relative LED on relay shield ,will be switch on and off with a period of 3 seconds. you will hear some noice \"bang \u2026bang..\u201d when the relay works.</p> <p>You can also control the relays with the on-board keys, just have a try...</p>"},{"location":"Products/Shield/relay-shield.html#support","title":"Support","text":"<p>You can contact with techsupport@elecrow.com.</p>"},{"location":"Products/Shield/relay-shield.html#how-to-buy","title":"How to buy","text":"<p>You can click here to buy Relay Shield.</p>"},{"location":"Products/Shield/relay-shield.html#resources","title":"Resources","text":"<ul> <li>Relay Shield v1.0 Schematic</li> <li>Relay Shield demo code for Arduino</li> </ul>"},{"location":"Products/Shield/rtc-data-logger-shield-v11.html","title":"RTC Data Logger Shield v1.1","text":""},{"location":"Products/Shield/rtc-data-logger-shield-v11.html#introduction","title":"Introduction","text":"<p>The RTC Data Logger Shield v1.1 adds storage to your Arduino project. It supports SD, SDHC, or MicroSD TF cards. Use the on-board toggle switch to select the SD card type. The card supports use of one and only one format of SD card, either SD/SDHC, or MicroSD. Before using an SD or MicroSD card, please set the shields \"SELECT\" switch to the proper setting: toward the SD/SDHC slot, or the MicroSD slot.Also it with a RTC on-board,that make you project more perfect. The RTC Data Logger Shield v1.1 uses the SPI and IIC ports of Arduino. The shield is also stackable, so additional shields can go on top. The RTC Data Logger Shield v1.1 makes use of pin 4 as a chip select. Please be sure other stacked shields do not make use of that same pin.</p> <p>Model: ASC7503RTC </p> <p></p>"},{"location":"Products/Shield/rtc-data-logger-shield-v11.html#features","title":"Features","text":"<ul> <li>Arduino/Crowduino compatible(Do not compatible with Mega)</li> <li>SD card, Micro SD card and SDHC card supportable</li> <li>3.3v and 5v logical voltage compatible</li> <li>2.6~3.6v DC power supply</li> </ul>"},{"location":"Products/Shield/rtc-data-logger-shield-v11.html#specification","title":"Specification","text":"Item  Min  Typical  Max  Unit Voltage 2.7 3.3 3.6 V Current 0.159 40 200 mA Supported Card Type SD card(&lt;=2G); Micro SD card(&lt;=2G); SDHC card(&lt;=16G) / Dimension 68.5(L)x53.7(W)x23.5(H) mm Net Weight  22 g"},{"location":"Products/Shield/rtc-data-logger-shield-v11.html#interface-function","title":"Interface Function","text":"<p> D10 \u2013 Used for CS of SPI D11 \u2013 Used for MOSI of SPI D12 \u2013 Used for MISO of SPI D13 \u2013 Used for SCK of SPI  </p>"},{"location":"Products/Shield/rtc-data-logger-shield-v11.html#usage","title":"Usage","text":""},{"location":"Products/Shield/rtc-data-logger-shield-v11.html#hardware-installation","title":"Hardware Installation","text":"<p>Plug the RTC Data Logger Shield v1.1 onto the Arduino; Insert your SD card into the socket and make sure the card selector pointing to the right way (Standard card or micro).And then connect the Arduino to PC with USB cable.  Warning: Don't insert SD card and microSD card into the shield at the same time. </p>"},{"location":"Products/Shield/rtc-data-logger-shield-v11.html#upload-the-program","title":"Upload the program","text":"<p>1. Restart the Arduino IDE. Open \"CardInfo\"example via the path: File --&gt; Examples --&gt; SD --&gt; CardInfo.</p> <p>This example shows how use the utility libraries on which the SD library is based in order to get info about your SD card.Very useful for testing a card when</p> <p>you're not sure whether its working or not. There are also many other examples in this library, like \u201cReadWrite\u201d. You can always try them out.</p> <p></p> <p>There has a brief description to above code:</p> <p>First checks if the card is working. if not, there will output some reasons that may lead to this result.</p> <p>In the case of the SD card normal work, it will print the SD card type.Then print the type and size of the FAT-type volume.</p> <p>Finally, get the files information such as name, date and size in bytes that found on the card.</p> <p>2. Upload the code.</p> <p>3. View Results.You can see the follow image after Click the serial monitor.</p> <p></p> <p>4. If an error occurs, please recheck all the previous steps, and make sure the SD card is working. If none of that fixes the problem, try replacing the SD card.</p>"},{"location":"Products/Shield/rtc-data-logger-shield-v11.html#note","title":"Note","text":"<p>Arduino default code return SD size incorrectly if your SD card more than 4G. The following code can solve this issue.</p> <pre><code>/*\n  SD card test\n\n This example shows how use the utility libraries on which the'\n SD library is based in order to get info about your SD card.\n Very useful for testing a card when you're not sure whether its working or not.\n\n The circuit:\n  * SD card attached to SPI bus as follows:\n ** MOSI - pin 11 on Arduino Uno/Duemilanove/Diecimila\n ** MISO - pin 12 on Arduino Uno/Duemilanove/Diecimila\n ** CLK - pin 13 on Arduino Uno/Duemilanove/Diecimila\n ** CS - depends on your SD card shield or module.\n ** Pin 4 used here for consistency with other Arduino examples\n\n\n created  28 Mar 2011\n by Limor Fried\n modified 9 Apr 2012\n by Tom Igoe\n */\n// include the SD library:\n#include &lt;SPI.h&gt;\n#include &lt;SD.h&gt;\n\n// set up variables using the SD utility library functions:\nSd2Card card;\nSdVolume volume;\nSdFile root;\n\n// change this to match your SD shield or module;\n// Arduino Ethernet shield: pin 4\n// Adafruit SD shields and modules: pin 10\n// Sparkfun SD shield: pin 8\nconst int chipSelect = 4;\n\nvoid setup()\n{\n  // Open serial communications and wait for port to open:\n  Serial.begin(9600);\n  while (!Serial) {\n    ; // wait for serial port to connect. Needed for Leonardo only\n  }\n\n\n  Serial.print(\"\\nInitializing SD card...\");\n  // On the Ethernet Shield, CS is pin 4. It's set as an output by default.\n  // Note that even if it's not used as the CS pin, the hardware SS pin\n  // (10 on most Arduino boards, 53 on the Mega) must be left as an output\n  // or the SD library functions will not work.\n  pinMode(10, OUTPUT);     // change this to 53 on a mega\n\n\n  // we'll use the initialization code from the utility libraries\n  // since we're just testing if the card is working!\n  if (!card.init(SPI_HALF_SPEED, chipSelect)) {\n    Serial.println(\"initialization failed. Things to check:\");\n    Serial.println(\"* is a card is inserted?\");\n    Serial.println(\"* Is your wiring correct?\");\n    Serial.println(\"* did you change the chipSelect pin to match your shield or module?\");\n    return;\n  } else {\n    Serial.println(\"Wiring is correct and a card is present.\");\n  }\n\n  // print the type of card\n  Serial.print(\"\\nCard type: \");\n  switch (card.type()) {\n    case SD_CARD_TYPE_SD1:\n      Serial.println(\"SD1\");\n      break;\n    case SD_CARD_TYPE_SD2:\n      Serial.println(\"SD2\");\n      break;\n    case SD_CARD_TYPE_SDHC:\n      Serial.println(\"SDHC\");\n      break;\n    default:\n      Serial.println(\"Unknown\");\n  }\n\n  // Now we will try to open the 'volume'/'partition' - it should be FAT16 or FAT32\n  if (!volume.init(card)) {\n    Serial.println(\"Could not find FAT16/FAT32 partition.\\nMake sure you've formatted the card\");\n    return;\n  }\n\n\n  // print the type and size of the first FAT-type volume\n\n  uint64_t volumesize64;\n  uint32_t volumesize32;\n  Serial.print(\"\\nVolume type is FAT\");\n  Serial.println(volume.fatType(), DEC);\n  Serial.println();\n\n  volumesize64 = volume.blocksPerCluster();    // clusters are collections of blocks\n  volumesize64 *= volume.clusterCount();       // we'll have a lot of clusters\n  volumesize64 *= 512;                            // SD card blocks are always 512 bytes\n\n  Serial.print(\"Volume size (bytes): \");\n  printLLNumber(volumesize64, DEC);\n  Serial.println();\n\n  Serial.print(\"Volume size (Kbytes): \");\n  volumesize32 = volumesize64/1024;\n  Serial.println(volumesize32);\n\n  Serial.print(\"Volume size (Mbytes): \");\n  volumesize32 /= 1024;\n  Serial.println(volumesize32);\n  /*uint64_t volumesize;\n  Serial.print(\"\\nVolume type is FAT\");\n  Serial.println(volume.fatType(), DEC);\n  Serial.println();\n\n  volumesize = volume.blocksPerCluster();    // clusters are collections of blocks\n  volumesize *= volume.clusterCount();       // we'll have a lot of clusters\n  volumesize *= 512;                            // SD card blocks are always 512 bytes\n  Serial.print(\"Volume size (bytes): \");\n  Serial.println(volumesize,DEC);\n  Serial.print(\"Volume size (Kbytes): \");\n  volumesize /= 1024;\n  Serial.println(volumesize,DEC);\n  Serial.print(\"Volume size (Mbytes): \");\n  volumesize /= 1024;\n  Serial.println(volumesize,DEC);\n*/\n\n  Serial.println(\"\\nFiles found on the card (name, date and size in bytes): \");\n  root.openRoot(volume);\n\n  // list all files in the card with date and size\n  root.ls(LS_R | LS_DATE | LS_SIZE);\n}\n\n\nvoid loop(void) {\n\n}\nvoid printLLNumber(uint64_t n, uint8_t base)\n{\n  unsigned char buf[16 * sizeof(long)]; \n  unsigned int i = 0;\n\n  if (n == 0) \n  {\n    Serial.print((char)'0');\n    return;\n  }\n\n  while (n &gt; 0) \n  {\n    buf[i++] = n\u00a0% base;\n    n /= base;\n  }\n\n  for (; i &gt; 0; i--)\n    Serial.print((char) (buf[i - 1] &lt; 10\u00a0?\n      '0' + buf[i - 1]\u00a0:\n      'A' + buf[i - 1] - 10));\n}\n</code></pre>"},{"location":"Products/Shield/rtc-data-logger-shield-v11.html#the-usage-of-rtc","title":"The usage of RTC","text":"<p>1.Download the library File:RTC Library</p> <p>2.Unzip it into the libraries file of Arduino IDE by the path: ..\\arduino-1.0\\libraries.</p> <p>3.Open the code directly by the path:File -&gt; Example -&gt;RTC.</p> <pre><code>#include &lt;Wire.h&gt;\n#include \"RTClib.h\"\nRTC_DS1307 RTC;\nvoid setup () {\n   Serial.begin(9600);\n   Wire.begin();\n   RTC.begin();\n\n if (! RTC.isrunning()) {\n   Serial.println(\"RTC is NOT running!\");\n   // following line sets the RTC to the date &amp; time this sketch was compiled\n   RTC.adjust(DateTime(__DATE__, __TIME__));\n }\n}\nvoid loop () {\n   DateTime now = RTC.now();\n   Serial.print(now.year(), DEC);\n   Serial.print('/');\n   Serial.print(now.month(), DEC);\n   Serial.print('/');\n   Serial.print(now.day(), DEC);\n   Serial.print(' ');\n   Serial.print(now.hour(), DEC);\n   Serial.print(':');\n   Serial.print(now.minute(), DEC);\n   Serial.print(':');\n   Serial.print(now.second(), DEC);\n   Serial.println();\n   delay(1000);\n}\n</code></pre> <p>4.Upload the code,then open the serial monitor to see the result.</p> <p></p>"},{"location":"Products/Shield/rtc-data-logger-shield-v11.html#faq","title":"FAQ","text":"<ol> <li> <p>SD card can't be initialized .</p> </li> <li> <p>Please reformat SD card to FAT/FTA32 .If it still can't work ,suggest to download the SD Formatter and reformat SD card by this software.</p> </li> </ol>"},{"location":"Products/Shield/rtc-data-logger-shield-v11.html#resources","title":"Resources","text":"<ul> <li>RTC Data Logger Shield v1.1 eagle files</li> </ul>"},{"location":"Products/Shield/sim5360e-3g-shield.html","title":"SIM5360E 3G Shield","text":""},{"location":"Products/Shield/sim5360e-3g-shield.html#introduction","title":"Introduction","text":"<p>The SIM5360E series is Dual-Band HSPA+/WCDMA and Quad-Band GSM/GPRS/EDGE module solution in a SMT type which supports HSPA+ up to 14.4Mbps for downlink data transfer.supports 3G network and combines GPS technology for satellite navigation. Besides, it also supports A-GPS that available for indoor localization.and it also supports for eCALL. The module is controlled by AT command via UART and supports 3.3V and 5V logical level.</p> <p>Model: ARS04053S</p> <p></p> <p></p>"},{"location":"Products/Shield/sim5360e-3g-shield.html#features","title":"Features","text":"<ul> <li>Quad-band GSM/GPRS/EDGE 850/900/1800/1900MHz.</li> <li>HSPA+: Max. 14.4Mbps(DL), Max. 5.76Mbps(UL).</li> <li>WCDMA: Max. 384Kbps(DL), Max. 384Kbps(UL).</li> <li>GPRS multi-slot class 12, Max. 85.6Kbps(DL), Max. 85.6Kbps(UL).</li> <li>EDGE multi-slot class 12, Max. 236.8Kbps(DL), Max. 236.8Kbps(UL).</li> <li>GPRS mobile station class B.</li> <li>Controlled by AT Command (3GPP TS 27.007, 27.005 and SIMCOM enhanced AT Commands).</li> <li>Supports Real Time Clock.</li> <li>Supply voltage range 5V ~ 12V.</li> <li>Supports for eCALL.</li> <li>Integrated GPS/CNSS and supports A-GPS.</li> <li>Supports 3.0V to 5.0V logic level.</li> <li>Low power consumption, 1mA in sleep mode.</li> <li>Supports GPS NMEA protocol.</li> <li>Standard Micro SIM Card.</li> </ul>"},{"location":"Products/Shield/sim5360e-3g-shield.html#application-ideas","title":"Application Ideas","text":"<ul> <li>M2M (Machine 2 Machine) Applicatoions - To transfer control data using SMS or GPRS between two machines located at two different factories.</li> <li>Remote control of appliances - Send SMS while you are at your office to turn on or off your washing machine at home.</li> <li>Remote Weather station or a Wireless Sensor Network - Make it with [Crowduino v1.0|Crowduino v1.0] and create a sensor node capable of transferring sensor data (like from a weather station - temperature, humidity etc.) to a web server (like pachube.com).</li> <li>Vehicle Tracking System - Install GPRS+GSM+GPS Shield in your car and publish your location live on the internet. Can be used as a automotive burglar alarm.</li> </ul>"},{"location":"Products/Shield/sim5360e-3g-shield.html#cautions","title":"Cautions","text":"<ul> <li>Make sure your SIM card is unlocked. </li> <li>The product is provided as is without an insulating enclosure. Please observe ESD precautions specially in dry (low humidity) weather.</li> <li>The factory default setting for the GPRS Shield UART is autobaoding. It supports baud rate from 1200 bps to 115200bps. (Can be changed using AT commands). </li> </ul>"},{"location":"Products/Shield/sim5360e-3g-shield.html#specifications","title":"Specifications","text":"Item Min Typical Max Unit Voltage 4.8 5.0 12 VDC Current 2 - 500 mA Dimensions(with antenna) 76.5(L)x55.0(W)x23.5(H) mm Net Weight 47\u00b12 g"},{"location":"Products/Shield/sim5360e-3g-shield.html#interface-function","title":"Interface Function","text":"<p>Power supply - Vin connected to external 5~9VDC power supply Antenna interface - connected to external antenna Serial port select - select either software serial port or hareware serial port to be connected to GPRS+GSM+GPS Shield Shield Hardware Serial - D0/D1 of Arduino/Crowduino Software serial - D7/D8 of Arduino/Crowduino Status LED - tell whether the power of SIM5360E is on Net light - tell the status about SIM5360E linking to the net UART of SIM808 - UART pins breakout of SIM5360E Microphone - to answer the phone call Speaker - to answer the phone call Micro USB  - Upgrade the firmware Power key - power up and down for SIM5360E</p>"},{"location":"Products/Shield/sim5360e-3g-shield.html#pins-usage-on-arduino","title":"Pins usage on Arduino","text":"<p>D0 - Used if you select hardware serial port to communicate with GPRS+GSM+GPS Shield    D1 - Used if you select hardware serial port to communicate with GPRS+GSM+GPS Shield D2 - Unused D3 - Unused D4 - Unused D5 - Unused D6 - Unused D7 - Used if you select software serial port to communicate with GPRS+GSM+GPS Shield D8 - Used if you select software serial port to communicate with GPRS+GSM+GPS Shield D9 - Used for software control the power up or down of the SIM5360E D10 - Unused D11 - Unused D12 - Unused D13 - Unused D14(A0) - Unused D15(A1) - Unused D16(A2) - Unused D17(A3) - Unused D18(A4) - Unused D19(A5) - Unused  </p>"},{"location":"Products/Shield/sim5360e-3g-shield.html#usage","title":"Usage","text":""},{"location":"Products/Shield/sim5360e-3g-shield.html#hardware-installation","title":"Hardware installation","text":""},{"location":"Products/Shield/sim5360e-3g-shield.html#1insert-an-micro-sim-card-to-sim-card-holder","title":"1.Insert an Micro SIM card to SIM Card Holder","text":"<p>6 Pin Holder for SIM Cards. Both 1.8 volts and 3.0 volts SIM Cards are supported by SIM5360E - the SIM card voltage type is automatically detected. </p>"},{"location":"Products/Shield/sim5360e-3g-shield.html#2connect-the-antenna","title":"2.Connect the Antenna","text":"<p>A miniature coaxial RF connector is present on the SIM5360E 3G Shield board to connect with a MAIN_Antenna. The connector present on the SIM5360E 3G Shield is called a U.FL connecto.The GNSS_Antenna supplied with the GPRS Shield has an SMA connector (and not an RP-SMA connector) on it.The connection topology is shown in the diagram below: </p>"},{"location":"Products/Shield/sim5360e-3g-shield.html#3plug-to-arduinocrowduino","title":"3.Plug to Arduino/Crowduino","text":"<p>The GPRS+GSM+GPS Shield, like any other well designed shield, is stackable as shown in the photo below. </p>"},{"location":"Products/Shield/sim5360e-3g-shield.html#turn-on-the-sim5360e-3g-shield","title":"Turn on the SIM5360E 3G shield","text":"<p>There is two ways to turn on the SIM5360 3G Shield. 1. Turn on through Hardware. Press the the 'POWERKEY' for few seconds until Power-on indicator(Green) is on.   2. Turn on through Software. If the JP is soldered,run the following code, the SIM5360E will POWER on or POWER off.</p> <pre><code>int Powerkey = 9;\nvoid setup() {                \n  pinMode(Powerkey, OUTPUT);   // initialize the digital pin as an output.  \n  power();                     //power on the sim5360 or power down the sim5360\n}\nvoid loop() \n{\n\n}\n\nvoid power(void)\n{\n  digitalWrite(Powerkey, LOW); \n  delay(1000);               // wait for 1 second\n  digitalWrite(Powerkey, HIGH);\n}\n</code></pre>"},{"location":"Products/Shield/sim5360e-3g-shield.html#serial-portuart-communication","title":"Serial Port(UART) Communication","text":"<p>The SIM5360 3G Shield is used UART protocol to communicate with an Arduino/Arduino clone; Users can use jumpers to connect (RX,TX) of the shield to either Software Serial(D8,D7) or Hardware Serial(D1,D0) of the Arduino.Detailed information is showed as the following picture:</p> <p></p> <p>Selectalbe 3G Shield Communication Port</p>"},{"location":"Products/Shield/sim5360e-3g-shield.html#power-down-the-gprs-shield","title":"Power Down the GPRS Shield","text":"<p>The GPRS Shield can be turned off by following ways:</p> <ul> <li>1, Normal power down procedure: Turn off the GPRS shield by using Hardware Triger; Press the ON/OFF Button about one seconds.</li> </ul> <p>The power down scenarios illustrates as following figure:</p> <p></p> <p>Figure of Timing of turning off GPRS Shield using Hardware Triger The following code is power down subroutine for Arduino if using software triger:</p> <pre><code>int Powerkey = 9;\nvoid setup() {                \n  pinMode(Powerkey, OUTPUT);   // initialize the digital pin as an output.  \n  power();                     //power on the sim5360 or power down the sim5360\n}\nvoid loop() \n{\n\n}\n\nvoid power(void)\n{\n  digitalWrite(Powerkey, LOW); \n  delay(1000);               // wait for 1 second\n  digitalWrite(Powerkey, HIGH);\n}\n</code></pre> <ul> <li>2, Normal power down procedure: Turn off the GPRS shield by sending AT command \"AT+CPOF\" to SIM5360 module.</li> </ul> <p>When GPRS Shield power dowm in Normal power down procedure, the procedure lets the SIM5360 log off from the network and allows the software to enter into a secure state and save data before completely disconnecting the power supply. Before the completion of the power down procedure the SIM5360 will send out result code:</p> <p>NORMAL POWER DOWN</p> <ul> <li>3, Over-voltage or Under-voltage Power Down: The module software monitors VBAT voltage constantly.</li> </ul> <p>\u2460If the voltage \u2264 3.5V, the following URC will be reported:</p> <p>UNDER-VOLTAGE WARNNING</p> <p>\u2461If the voltage \u2265 4.3V, the following URC will be reported:</p> <p>OVER-VOLTAGE WARNNING</p> <p>\u2462If the voltage &lt; 3.4V, the following URC will be reported,and the module will be automativally powered down.</p> <p>UNDER-VOLTAGE POWER DOWN</p> <p>\u2463If the voltage &gt; 4.4V, the following URC will be reported,and the module will be automativally powered down.</p> <p>OVER-VOLTAGE POWER DOWN</p> <ul> <li>4, Over-temperature or Under-temperature Power Down: SIM5360 will constantly monitor the temperature of the module.</li> </ul> <p>\u2460If the temperature &gt; +80\u2103, the following URC will be reported:</p> <p>+CMTE:1</p> <p>\u2461If the temperature &lt; -30\u2103, the following URC will be reported:</p> <p>+CMTE:-1</p> <p>\u2462If the temperature &gt; +85\u2103, the following URC will be reported,and the module will be automativally powered down.</p> <p>+CMTE:2</p> <p>\u2463If the temperature &lt; -40\u2103, the following URC will be reported,and the module will be automativally powered down.</p> <p>+CMTE:-2</p> <p>When the GPRS Shield encounters POWER DOWN scenario, the AT commands can not be executed. The SIM5360 logs off from network and enters the POWER DOWN mode, only the RTC is still active. POWER DOWN can also be indicated by STATUS LED(Blue), which is off in this mode.</p> <p> Note: <ul> <li>To monitor the temperature, users can use the \u201cAT+CMTE\u201d command to read the temperature when GPRS Shield is powered on. </li> </ul>"},{"location":"Products/Shield/sim5360e-3g-shield.html#upload-sketch-to-arduino","title":"Upload Sketch to Arduino","text":"<p>Data Stream among Computer, Arduino and GPRS Shield The following sketch configures Arduino/Arduino clone as serial link between PC and the GPRS Shield(Jumpers on SWserial side). PC would need a serial terminal software to communicate with it - Window's built-in HyperTerminal, Arduino IDE's Serial Monitor, Serial Terminals(sscom32) or Bray++ Terminal.</p> <p>After uploading the sketch to the Arduino board, press the ON/OFF button on the GPRS Shield to turn it on; Now you can see what you get on the serial terminal and the status of the three indicator LEDs, then communicate with your Shield.</p> <pre><code>//Serial Relay - Arduino will patch a \n//serial link between the computer and the GPRS Shield\n//at 19200 bps 8-N-1\n//Computer is connected to Hardware UART\n//GPRS Shield is connected to the Software UART \n\n#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial GSMSerial(7, 8);\n\nvoid setup()\n{\nGSMSerial.begin(19200);               // the GPRS/GSM baud rate   \nSerial.begin(19200);                 // the GPRS/GSM baud rate   \n}\n\nvoid loop()\n{\nif(Serial.available())\n\nGSMSerial.print((char)Serial.read());\n\nelse  if(GSMSerial.available())\n\nSerial.print((char)GSMSerial.read());\n}\n</code></pre> <p></p> <p> Note: <ul> <li>The \"AT\" or \"at\" prefix must be set at the beginning of each Command line. To terminate a Command line enter &lt;CR&gt;. </li> </ul>"},{"location":"Products/Shield/sim5360e-3g-shield.html#set-baud-and-enable-charging-function","title":"Set Baud and Enable Charging Function","text":"<p>It is recommended to execute this process when first time to use the module. In the Serial Monitor columns of following tables, input of AT commands are in back, module returns values are in orange.</p> Serial Monitor Description AT  OK Send command \u201cAT\u201d to synchronize baud rate. Serial port of module is by default set at auto-baud mode, and in this mode, it will not output any indications when the module is on. AT+IPREX=19200 OK Set baud rate at 19200bps, supports baud rate from 0bps to 4000000bps. AT&amp;W OK Save the user setting to ME. AT+CPOF OK +SIMCARD: NOT AVAILABLE Power down the module. START +CPIN: READY OPL UPDATING PNN UPDATING SMS DONE CALL READY PB DONE Turn on the module again by the power button, it will response status about SMS and CALL. AT+CBC  +CBC: 0,75,3.810V   OK Inquire charging status and remaining battery capacity. AT+CSQ   +CSQ: 14,0   OK Inquire GSM signal quality."},{"location":"Products/Shield/sim5360e-3g-shield.html#examples","title":"Examples","text":""},{"location":"Products/Shield/sim5360e-3g-shield.html#sending-sms-using-software-uart","title":"Sending SMS: using Software UART","text":"<pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7,8); //\n#define DEBUG true\n\nvoid setup()\n {  \n  mySerial.begin(19200);    // the GPRS baud rate  \n  Serial.begin(19200);    // the GPRS baud rate \n  sendData(\"AT+CMGF=1\",2000,DEBUG);//Because we want to send the SMS in text mode\n  delay(100);\n  sendData(\"AT+CMGS=\\\"+8613xxxxxxxx\\\"\",2000,DEBUG);//send sms message, be careful need to add a country code before the cellphone number\n  delay(100);\n  sendData(\"Hello,Elecrow!\",2000,DEBUG);//the content of the message\n  delay(100);\n  mySerial.println((char)26);//the ASCII code of the ctrl+z is 26\n  delay(100);\n }\n\nvoid sendData(String command, const int timeout, boolean debug)\n{\n    String response = \"\";    \n    mySerial.println(command); \n    long int time = millis();\n    while( (time+timeout) &gt; millis())\n    {\n      while(mySerial.available())\n      {       \n        char c = mySerial.read(); \n        response+=c;\n      }  \n    }    \n    if(debug)\n    {\n      Serial.print(response);\n    }    \n    return response;\n}\n\n void loop()\n{\n if(mySerial.available())\n      {\n          char SerialInByte;\n          SerialInByte = (unsigned char)mySerial.read();\n          Serial.print( SerialInByte );\n      }\n}\n</code></pre> <p>The result of sending SMS.</p> <p></p>"},{"location":"Products/Shield/sim5360e-3g-shield.html#making-a-call-using-software-uart","title":"Making a call: using Software UART","text":"<pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n#define DEBUG true\nvoid setup()\n{\nmySerial.begin(19200);               // the GPRS baud rate   \nSerial.begin(19200);               // the GPRS baud rate   \nsendData(\"ATDxxxxxxxxx;\",2000,DEBUG); // xxxxxxxxx is the number you want to dial.  \n\n\ndelay(10000); \ndelay(10000); \n\nsendData(\"ATH\",2000,DEBUG); //End the call.\n\n}\n\nvoid sendData(String command, const int timeout, boolean debug)\n{\n    String response = \"\";    \n    mySerial.println(command); \n    long int time = millis();\n    while( (time+timeout) &gt; millis())\n    {\n      while(mySerial.available())\n      {       \n        char c = mySerial.read(); \n        response+=c;\n      }  \n    }    \n    if(debug)\n    {\n      Serial.print(response);\n    }    \n    return response;\n}\n\nvoid loop()\n{\nif(mySerial.available())\n      {\n          char SerialInByte;\n          SerialInByte = (unsigned char)mySerial.read();\n          Serial.print( SerialInByte );\n      }\n}\n</code></pre> <p>The result of making a call.</p> <p></p>"},{"location":"Products/Shield/sim5360e-3g-shield.html#a-simple-source-code-example","title":"A Simple Source Code Example","text":"<p>The demo code below is for the Xduino to send SMS message/show message/delete message/dial a voice call . It has been tested on Arduino Duemilanove but will work on any compatible variant, plesse note that this sketch uses the sorfware UART of ATmega328P. please follow the following steps for running this sketch.</p> <ol> <li>With the 3G Shield removed, download this sketch into your Arduino.</li> <li>Disconnect the Xduino from USB port to remove power source.</li> <li>Set the Serial Port jumpers on the 3G Shield in SWserial position, to use the Soft Serial port of Arduino.</li> <li>Connect the antenna to the 3G Shield and insert the SIM Card.</li> <li>Mount the 3G Shield on Arduino.</li> <li>Connect the Arduino to the computer by USB, and fire up your favorite serial terminal software on computer, choose the COM port for Arduino, set it to operate at 19200 8-N-1.</li> <li>Type command in the terminal to execute different function, threr are 5 functions in the demo: <ol> <li>If you input 'Q' in the terminal, the program will execute GetSignalQuality(),it will show the signal quality,</li> <li>If you input 'T', the demo will send a SMS message to another cellphone which you set(you need set the number in the code);</li> <li>If you input 'S', the demo will listing all SMS message ;</li> <li>If you input 'E', the demo will delete a SMS message ;</li> <li>If you input 'D', the program will dial a call to the other cellphone that you set(it is also need you set in the code );</li> </ol> </li> <li>If the program returns error in the terminal after you typed the command, don't worry, just try input the command again.</li> </ol> <pre><code>/*Note: this code is a demo for how to using 3G shield to send sms message, show message,delete message, dial a voice call.\n\nThe microcontrollers Digital Pin 7 and hence allow unhindered\ncommunication with 3G Shield using SoftSerial Library. \nIDE: Arduino 1.0 or later\nReplace the following items in the code:\n1.Phone number, don't forget add the country code\n2.Replace the Access Point Name\n3. Replace the Pachube API Key with your personal ones assigned\nto your account at cosm.com\n*/\n\n\n#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7,8); //\n#define DEBUG true\n\n\n//String SigQ[20];\nchar SigQ[20];\nint value = 576;\n\nvoid setup()\n{\n\n  mySerial.begin(19200);    // the GPRS baud rate  \n  Serial.begin(19200);    // the GPRS baud rate \n\n}\n\n\nvoid loop()\n{\n  if (Serial.available())     // This statement is never TRUE when receiving SMS\n  switch(Serial.read())\n  {\n    case 'Q':\n    GetSignalQuality();\n    break;\n    case 'T':\n    SendTextMessage();\n    break;\n    case 'S':\n    ShowSMS();\n    break;\n    case 'E':\n    DeleteSMS();\n    break;\n    case 'D':\n    DialVoiceCall();\n    break;\n\n  }\n if(mySerial.available())\n      {\n          char SerialInByte;\n          SerialInByte = (unsigned char)mySerial.read();\n          Serial.print( SerialInByte );\n      }\n\n}\n///GetSignalQuality()\n///get the signal quality of GSM model.\n\nvoid GetSignalQuality(){\n  String response = \"\";\n  long int time = millis();    \n    Serial.println(\"Getting the sinal quality...\");\n    mySerial.println(\"AT+CSQ\"); \n    delay(5);   \n    while( (time+1000) &gt; millis()){\n      while(mySerial.available()){       \n        response += char(mySerial.read());\n      }  \n    }    \n     Serial.print(response); \n     Serial.println(\"Tips:+CSQ: XX,QQ\u00a0: It means the Signal Quality poorly when the XX is less than 16!\");\n}\n\n\n///SendTextMessage()\n///this function is to send a sms message\nvoid SendTextMessage()\n{\n  //message 1\n  sendData(\"AT+CMGF=1\",2000,DEBUG);//Because we want to send the SMS in text mode\n  delay(100);\n  sendData(\"AT+CMGS=\\\"+8613117913785\\\"\",2000,DEBUG);//send sms message, be careful need to add a country code before the cellphone number\n  delay(100);\n  sendData(\"HELLO!\",2000,DEBUG);//the content of the message\n  delay(100);\n  mySerial.println((char)26);//the ASCII code of the ctrl+z is 26\n  delay(5000);\n}\n\n\n///ShowSMS()\n///this function is to show sms message\nvoid ShowSMS(){\n  sendData(\"AT+CMGF=1\",2000,DEBUG);\n  sendData(\"AT+CPMS=\\\"SM\\\",\\\"SM\\\",\\\"SM\\\"\",1000,DEBUG);\n  sendData(\"AT+CNMI=2,1\",1000,DEBUG);        \n  Serial.println(\"*** Show all SMS message ***\");\n  sendData(\"AT+CMGL=\\\"ALL\\\"\",5000,DEBUG);\n  Serial.println(\"***         END          ***\");\n}\n\n///DeleteSMS()\n///this function is to delete sms message\nvoid DeleteSMS(){\n  sendData(\"AT+CMGF=1\",2000,DEBUG);\n  Serial.println(\"*** Delete SMS message ***\");\n  sendData(\"AT+CMGD=0\",5000,DEBUG);\n  Serial.println(\"***         END            ***\");\n}\n\n///DialVoiceCall\n///this function is to dial a voice call\nvoid DialVoiceCall()\n{\nsendData(\"ATD13117913785;\",2000,DEBUG); // xxxxxxxxx is the number you want to dial.  \ndelay(10000);\ndelay(10000);\n}\n\nvoid sendData(String command, const int timeout, boolean debug)\n{\n    String response = \"\";    \n    mySerial.println(command); \n    long int time = millis();\n    while( (time+timeout) &gt; millis())\n    {\n      while(mySerial.available())\n      {       \n        char c = mySerial.read(); \n        response+=c;\n      }  \n    }    \n    if(debug)\n    {\n      Serial.print(response);\n    }    \n    return response;\n}\n</code></pre>"},{"location":"Products/Shield/sim5360e-3g-shield.html#using-sms-to-control-an-led-status","title":"Using Sms to Control an LED Status","text":"<p>This example is controbuted by MChobby, for more information please visit: http://mchobby.be/wiki/index.php?title=SmsCommand</p> <p>Send a SMS message \"on\" or \"off\" from your cellphone to the 3G Shield to control the Digital Pin 13(LED) Status.</p> <ul> <li>The default Buffer of Rx in SoftwareSerial.h is 32/64, you may experience some data lose while the returns of SIM5360E are many(Receiving SMS/TCPIP), you can try to change the Buffer of Rx in SoftwareSerial.h into <p>#define _SS_MAX_RX_BUFF 128 // RX buffer size </p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\n// EN: String buffer for the GPRS shield message\n\nString msg = String(\"\");\n// EN: Set to 1 when the next GPRS shield message will contains the SMS message\n\nint SmsContentFlag = 0;\n\n// EN: Pin of the LED to turn ON and OFF depending on the received message\n\nint ledPin = 13;\n\n// EN: Code PIN of the SIM card (if applied)\n\n//String SIM_PIN_CODE = String( \"XXXX\" );\n\nvoid setup()\n{\n  mySerial.begin(19200);               // the GPRS baud rate   \n  Serial.begin(19200);                 // the GPRS baud rate\n\n  // Initialize la PIN\n  pinMode( ledPin, OUTPUT ); \n  digitalWrite( ledPin, LOW ); \n}\n\nvoid loop()\n{\n    char SerialInByte;\n\n    if(Serial.available())\n    {\n       mySerial.print((unsigned char)Serial.read());\n     }  \n    else  if(mySerial.available())\n    {\n        char SerialInByte;\n        SerialInByte = (unsigned char)mySerial.read();\n\n        // EN: Relay to Arduino IDE Monitor\n\n        Serial.print( SerialInByte );\n\n        // -------------------------------------------------------------------\n        // EN: Program also listen to the GPRS shield message.\n\n        // -------------------------------------------------------------------\n\n        // EN: If the message ends with &lt;CR&gt; then process the message\n\n        if( SerialInByte == 13 ){\n          // EN: Store the char into the message buffer\n\n         ProcessGprsMsg();\n         }\n         if( SerialInByte == 10 ){\n            // EN: Skip Line feed\n\n         }\n         else {\n           // EN: store the current character in the message string buffer\n\n           msg += String(SerialInByte);\n         }\n     }   \n}\n\n// EN: Make action based on the content of the SMS. \n//     Notice than SMS content is the result of the processing of several GPRS shield messages.\n\nvoid ProcessSms( String sms ){\n  Serial.print( \"ProcessSms for [\" );\n  Serial.print( sms );\n  Serial.println( \"]\" );\n\n\n  if( sms.indexOf(\"on\") &gt;= 0 ){\n    digitalWrite( ledPin, HIGH );\n    Serial.println( \"LED IS ON\" );\n    return;\n  }\n  if( sms.indexOf(\"off\") &gt;= 0 ){\n    digitalWrite( ledPin, LOW );\n    Serial.println( \"LED IS OFF\" );\n    return;\n  }\n}\n\n// EN: Send the SIM PIN Code to the GPRS shield\n\n//void GprsSendPinCode(){\n//  if( SIM_PIN_CODE.indexOf(\"XXXX\")&gt;=0 ){\n//    Serial.println( \"*** OUPS! you did not have provided a PIN CODE for your SIM CARD. ***\" );\n//    Serial.println( \"*** Please, define the SIM_PIN_CODE variable . ***\" );\n//    return;\n// }\n//  mySerial.print(\"AT+CPIN=\");\n// mySerial.println( SIM_PIN_CODE );\n\n\n// EN: Request Text Mode for SMS messaging\n\nvoid GprsTextModeSMS(){\n  mySerial.println( \"AT+CMGF=1\" );\n  mySerial.println( \"AT+CPMS=SM,SM,SM\" );\n  mySerial.println( \"AT+CNMI=2,1\" );\n}\n\nvoid GprsReadSmsStore( String SmsStorePos ){\n  // Serial.print( \"GprsReadSmsStore for storePos \" );\n  // Serial.println( SmsStorePos ); \n  mySerial.print( \"AT+CMGR=\" );\n  mySerial.println( SmsStorePos );\n}\n\n// EN: Clear the GPRS shield message buffer\n\nvoid ClearGprsMsg(){\n  msg = \"\";\n}\n\n// EN: interpret the GPRS shield message and act appropiately\n\nvoid ProcessGprsMsg() {\n  Serial.println(\"\");\n  Serial.print( \"GPRS Message: [\" );\n  Serial.print( msg );\n  Serial.println( \"]\" );\n\n//  if( msg.indexOf( \"+CPIN: SIM PIN\" ) &gt;= 0 ){\n//     Serial.println( \"*** NEED FOR SIM PIN CODE ***\" );\n //    Serial.println( \"PIN CODE *** WILL BE SEND NOW\" );\n //    GprsSendPinCode();\n//  }\n\n  if( msg.indexOf( \"Call Ready\" ) &gt;= 0 ){\n     Serial.println( \"*** GPRS Shield registered on Mobile Network ***\" );\n     GprsTextModeSMS();\n  }\n\n  // EN: unsolicited message received when getting a SMS message\n  // FR: Message non sollicit\u00e9 quand un SMS arrive\n  if( msg.indexOf( \"+CMTI\" ) &gt;= 0 ){\n     Serial.println( \"*** SMS Received ***\" );\n     // EN: Look for the coma in the full message (+CMTI: \"SM\",6)\n     //     In the sample, the SMS is stored at position 6\n     int iPos = msg.indexOf( \",\" );\n     String SmsStorePos = msg.substring( iPos+1 );\n     Serial.print( \"SMS stored at \" );\n     Serial.println( SmsStorePos );\n\n     // EN: Ask to read the SMS store\n     GprsReadSmsStore( SmsStorePos );\n  }\n\n  // EN: SMS store readed through UART (result of GprsReadSmsStore request)  \n  if( msg.indexOf( \"+CMGR:\" ) &gt;= 0 ){\n    // EN: Next message will contains the BODY of SMS\n    SmsContentFlag = 1;\n    // EN: Following lines are essentiel to not clear the flag!\n    ClearGprsMsg();\n    return;\n  }\n\n  // EN: +CMGR message just before indicate that the following GRPS Shield message \n  //     (this message) will contains the SMS body\n\n  if( SmsContentFlag == 1 ){\n    Serial.println( \"*** SMS MESSAGE CONTENT ***\" );\n    Serial.println( msg );\n    Serial.println( \"*** END OF SMS MESSAGE ***\" );\n    ProcessSms( msg );\n  }\n\n  ClearGprsMsg();\n  // EN: Always clear the flag\n\n  SmsContentFlag = 0; \n}\n</code></pre>"},{"location":"Products/Shield/sim5360e-3g-shield.html#the-usage-of-gps-function","title":"The usage of GPS Function","text":""},{"location":"Products/Shield/sim5360e-3g-shield.html#at-commands-examples","title":"AT Commands Examples","text":"Demonstration Syntax Expect Result Start GPS session AT+CGPS=1,1 (or AT+CGPS=1) OK Stop GPS session AT+CGPS=0,1 (or AT+CGPS=0) OK Get GPS fixed position information AT+CGPSINFO +CGPSINFO:3113.343286,N,12121.234064,E,250311,072809.0,44.1,0.0,0  OK Set URC reporting every 2(0-255)GPS fix AT+CGPSINFO=2 OK Set AGPS transport security AT+CGPSSSL=0 OK Configure NMEA sentence type AT+CGPSNMEA\uff1d511 OK Delete the GPS information AT+CGPSDEL OK <p>More information you can refer the SIM5360_GPS_Application_Note_V0.02.</p>"},{"location":"Products/Shield/sim5360e-3g-shield.html#demo-code-of-get-the-gps-information","title":"Demo code of get the GPS information:","text":"<pre><code>/*\n * Created by Island\n * Modified by keen \n * Date: 17/03/2017\n */\n#include &lt;SoftwareSerial.h&gt;\n#define DEBUG true\nSoftwareSerial mySerial(7,8); \n\nvoid setup(){\n  Serial.begin(19200);\n  mySerial.begin(19200); \n  getgps();\n}\n\nvoid loop(){\n   sendData( \"AT+CGPSINFO\",1000,DEBUG);   \n}\n\nvoid getgps(void){\n   sendData( \"AT+CGPS=1,1\",1000,DEBUG); \n   sendData( \"AT+CGPSINFO=0\",1000,DEBUG); \n}\n\nvoid sendData(String command, const int timeout, boolean debug){\n    String response = \"\";    \n    mySerial.println(command); \n    delay(5);\n    if(debug){\n    long int time = millis();   \n    while( (time+timeout) &gt; millis()){\n      while(mySerial.available()){       \n        response += char(mySerial.read());\n      }  \n    }    \n      Serial.print(response);\n    }    \n}\n</code></pre> <p>The result of get the GPS information.</p> <p></p>"},{"location":"Products/Shield/sim5360e-3g-shield.html#the-usage-of-ecall-function","title":"The usage of ECALL Function","text":""},{"location":"Products/Shield/sim5360e-3g-shield.html#at-comands-examples","title":"AT Comands Examples","text":"AT comands Description AT+CECALLFMT set MSD packing format (this command must set to 1 for Europe ecall test) AT+CECALLCFG Configure vehicle information AT+CECALLPOS Set longitude and latitude AT+CECALLTIME Set time stamp AT+ CMSDMESSAGEID Set the message identifier of msd data AT+CMSDOIDDATA Set the optional additional data AT+CMSDCONTROL Set the control data in Minimum set of data (MSD) AT+CMSD input hex Minimum set of data(MSD) AT+CECALLTOUT Set T5, T6, T7 timeout value AT+CECALLS Make an ecall and send the MSD information once automatically AT+CECALLE Hang up ecall"},{"location":"Products/Shield/sim5360e-3g-shield.html#demo-codeusing-software-uart","title":"Demo code\uff1ausing Software UART","text":"<pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n#define DEBUG true\n\n\nvoid setup()\n{\n  mySerial.begin(19200);               // the GPRS baud rate   \n  Serial.begin(19200);               // the GPRS baud rate   \n  sendData(\"AT+CECALLFMT=1\",2000,DEBUG);    //Set MSD packing format\n  sendData(\"AT+CECALLCFG=5,18,8,\\\"WMJVDSVDSYA012345\\\",14,10,-10,20,-20\",2000,DEBUG);     //Configure vehicle information\n  sendData(\"AT+CECALLPOS=\\\"121.354138\\\",\\\"31.221938\\\"\",2000,DEBUG);     //Set longitude and latitude\n  sendData(\"AT+CECALLTIME=1,2011,10,20,15,30,30\",2000,DEBUG);          //Set time stamp\n  sendData(\"AT+CMSDCONTROL=1,1,1\",2000,DEBUG);                        //Set the control data in Minimum set of data (MSD)\n  sendData(\"AT+CMSDMESSAGEID=1\",2000,DEBUG);                         //Set the initiatory message identifier of msd\n  sendData(\"AT+CECALLTOUT=\\\"T5\\\",4000\",2000,DEBUG);             //Set T5, T6, T7 timeout value\n  sendData(\"AT+CMSDOIDDATA=\\\"1.2.125\\\",\\\"30304646\\\"\",2000,DEBUG);  //Set the optional additional data\n  sendData(\"AT+CECALLS=13xxxxxxxxx,0\",2000,DEBUG);   //Make an eCall, xxxxxxxxx is the number you want to dial.   \n  delay(40000); \n  delay(40000); \n  sendData(\"AT+CECALLE\",2000,DEBUG); //Hang up eCall.\n\n}\n\n\nvoid sendData(String command, const int timeout, boolean debug)\n{\n    String response = \"\";    \n    mySerial.println(command); \n    long int time = millis();\n    while( (time+timeout) &gt; millis())\n    {\n      while(mySerial.available())\n      {       \n        char c = mySerial.read(); \n        response+=c;\n      }  \n    }    \n    if(debug)\n    {\n      Serial.print(response);\n    }    \n    return response;\n}\n\n\nvoid loop()\n{\nif(mySerial.available())\n      {\n          char SerialInByte;\n          SerialInByte = (unsigned char)mySerial.read();\n          Serial.print( SerialInByte );\n      }\n}\n</code></pre>"},{"location":"Products/Shield/sim5360e-3g-shield.html#faq","title":"FAQ","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Shield/sim5360e-3g-shield.html#how-to-buy","title":"How to buy","text":""},{"location":"Products/Shield/sim5360e-3g-shield.html#resources","title":"Resources","text":"<ul> <li>SIM5360E Design files</li> <li>SIM5360_GPS_Application_Note_V0.02</li> <li>SIMCOM_SIM5360_ATC_EN_V0.16 </li> </ul>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html","title":"SIM808 GPRS/GSM+GPS Shield v1.0","text":""},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#introduction","title":"Introduction","text":"<p>SIM808 module is a GSM and GPS two-in-one function module. It is based on the latest GSM/GPS module SIM808 from SIMCOM, supports GSM/GPRS Quad-Band network and combines GPS technology for satellite navigation.It has high GPS receive sensitivity with 22 tracking and 66 acquisition receiver channels. Besides, it also supports A-GPS that available for indoor localization.</p> <p>The module is controlled by AT command via UART and supports 3.3V and 5V logical level.</p> <p>Model: ACS80801S </p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#features","title":"Features","text":"<ul> <li>Quad-band 850/900/1800/1900MHz</li> <li>GPRS multi-slot class12 connectivity: max. 85.6kbps(down-load/up-load)</li> <li>GPRS mobile station class B</li> <li>Controlled by AT Command (3GPP TS 27.007, 27.005 and SIMCOM enhanced AT Commands)</li> <li>Supports Real Time Clock</li> <li>Supply voltage range 5V ~ 12V</li> <li>Integrated GPS/CNSS and supports A-GPS</li> <li>Supports 3.0V to 5.0V logic level</li> <li>Low power consumption, 1mA in sleep mode</li> <li>Supports GPS NMEA protocol</li> <li>Standard Micro SIM Card</li> </ul>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#application-ideas","title":"Application Ideas","text":"<ul> <li>M2M (Machine 2 Machine) Applicatoions - To transfer control data using SMS or GPRS between two machines located at two different factories.</li> <li>Remote control of appliances - Send SMS while you are at your office to turn on or off your washing machine at home.</li> <li>Remote Weather station or a Wireless Sensor Network - Make it with [Crowduino v1.0|Crowduino v1.0] and create a sensor node capable of transferring sensor data (like from a weather station - temperature, humidity etc.) to a web server (like pachube.com).</li> <li>Vehicle Tracking System - Install GPRS+GSM+GPS Shield in your car and publish your location live on the internet. Can be used as a automotive burglar alarm.</li> </ul>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#cautions","title":"Cautions","text":"<ul> <li>Make sure your SIM card is unlocked.</li> <li>The product is provided as is without an insulating enclosure. Please observe ESD precautions specially in dry (low humidity) weather.</li> <li>The factory default setting for the GPRS Shield UART is autobaoding. It supports baud rate from 1200 bps to 115200bps. (Can be changed using AT commands).</li> </ul>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#specifications","title":"Specifications","text":"Item  Min  Typical  Max  Unit  Voltage 4.8 5.0 12 VDC  Current 2 - 500 mA  Dimension(with antenna)  76.0(L)x55.0(W)x23.5(H) mm  Net Weight  47\u00b12 g"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#interface-function","title":"Interface Function","text":"<p> Power supply - Vin connected to external 5~9VDC power supply Antenna interface - connected to external antenna Serial port select - select either software serial port or hareware serial port to be connected to GPRS+GSM+GPS Shield Shield Hardware Serial - D0/D1 of Arduino/Crowduino Software serial - D7/D8 of Arduino/Crowduino Status LED - tell whether the power of SIM808 is on Net light - tell the status about SIM808 linking to the net 1PPS - tell the status about SIM808 get the location UART of SIM808 - UART pins breakout of SIM808 Microphone - to answer the phone call Speaker - to answer the phone call GPIO,PWM and ADC of SIM808 - GPIO,PWM and ADC pins breakout of SIM808 Power key - power up and down for SIM808  </p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#pins-usage-on-arduino","title":"Pins usage on Arduino","text":"<p>D0 - Unused if you select hardware serial port to communicate with GPRS+GSM+GPS Shield D1 - Unused if you select hardware serial port to communicate with GPRS+GSM+GPS Shield D2 - Unused D3 - Unused D4 - Unused D5 - Unused D6 - Unused D7 - Used if you select software serial port to communicate with GPRS+GSM+GPS Shield D8 - Used if you select software serial port to communicate with GPRS+GSM+GPS Shield D9 - Used for software control the power up or down of the SIM808 D10 - Unused D11 - Unused D12 - Unused D13 - Unused D14(A0) - Unused D15(A1) - Unused D16(A2) - Unused D17(A3) - Unused D18(A4) - Unused D19(A5) - Unused  </p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#usage","title":"Usage","text":""},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#hardware-installation","title":"Hardware installation","text":""},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#1insert-an-micro-sim-card-to-sim-card-holder","title":"1.Insert an Micro SIM card to SIM Card Holder","text":"<p>6 Pin Holder for SIM Cards. Both 1.8 volts and 3.0 volts SIM Cards are supported by SIM808 - the SIM card voltage type is automatically detected. </p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#2connect-the-antenna","title":"2.Connect the Antenna","text":"<p>A miniature coaxial RF connector is present on the SIM808 GPRS/GSM+GPS Shield board to connect with a GSM Antenna. The connector present on the SIM808 GPRS/GSM+GPS Shield is called a U.FL connecto.The GSM Antenna supplied with the GPRS Shield has an SMA connector (and not an RP-SMA connector) on it.The connection topology is shown in the diagram below: </p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#3plug-to-arduinocrowduino","title":"3.Plug to Arduino/Crowduino","text":"<p>The GPRS+GSM+GPS Shield, like any other well designed shield, is stackable as shown in the photo below. </p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#turn-on-the-sim808-gprsgsmgps-shield","title":"Turn on the SIM808 GPRS/GSM+GPS shield","text":"<p>There is two ways to turn on the SIM808 GPRS/GSM+GPS Shield. 1. Turn on through Hardware. Press the the 'POWERKEY' for few seconds until Power-on indicator(Green) is on.  2. Turn on through Software. If the JP is soldered,run the following code, the SIM808 will POWER on or POWER off.</p> <pre><code>int Powerkey = 9;\nvoid setup() {                \n  pinMode(Powerkey, OUTPUT);   // initialize the digital pin as an output.  \n  power();                     //power on the sim808 or power down the sim808\n}\nvoid loop() \n{\n\n}\n\nvoid power(void)\n{\n  digitalWrite(Powerkey, LOW); \n  delay(1000);               // wait for 1 second\n  digitalWrite(Powerkey, HIGH);\n}\n</code></pre>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#serial-portuart-communication","title":"Serial Port(UART) Communication","text":"<p>The SIM808 GPRS/GSM+GPS Shield is used UART protocol to communicate with an Arduino/Arduino clone; Users can use jumpers to connect (RX,TX) of the shield to either Software Serial(D8,D7) or Hardware Serial(D1,D0) of the Arduino.Detailed information is showed as the following picture:</p> <p></p> <p>Selectalbe GPRS+GSM+GPS Shield Communication Port</p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#power-down-the-gprs-shield","title":"Power Down the GPRS Shield","text":"<p>The GPRS Shield can be turned off by following ways:</p> <ul> <li>1, Normal power down procedure: Turn off the GPRS shield by using Hardware Triger; Press the ON/OFF Button about one seconds.</li> </ul> <p>The power down scenarios illustrates as following figure:</p> <p></p> <p>Figure of Timing of turning off GPRS Shield using Hardware Triger</p> <ul> <li>2, Normal power down procedure: If JP is soldered, then give Digital Pin 9 of the Arduino(act as Software Triger) a Turn off Impulse can turn off the GPRS Shield. The power down scenarios illustrates as following figure:</li> </ul> <p></p> <p>Figure of Timing of turning off GPRS Shield using Software Triger</p> <p>The following code is power down subroutine for Arduino if using software triger:</p> <pre><code>int Powerkey = 9;\nvoid setup() {                \n  pinMode(Powerkey, OUTPUT);   // initialize the digital pin as an output.  \n  power();                     //power on the sim808 or power down the sim808\n}\nvoid loop() \n{\n\n}\n\nvoid power(void)\n{\n  digitalWrite(Powerkey, LOW); \n  delay(1000);               // wait for 1 second\n  digitalWrite(Powerkey, HIGH);\n}\n</code></pre> <ul> <li>3, Normal power down procedure: Turn off the GPRS shield by sending AT command \"AT+CPOWD=1\" to SIM808 module.</li> </ul> <p>When GPRS Shield power dowm in Normal power down procedure, the procedure lets the SIM808 log off from the network and allows the software to enter into a secure state and save data before completely disconnecting the power supply. Before the completion of the power down procedure the SIM808 will send out result code:</p> <p>NORMAL POWER DOWN</p> <ul> <li>4, Over-voltage or Under-voltage Power Down: The module software monitors VBAT voltage constantly.</li> </ul> <p>\u2460If the voltage \u2264 3.5V, the following URC will be reported:</p> <p>UNDER-VOLTAGE WARNNING</p> <p>\u2461If the voltage \u2265 4.3V, the following URC will be reported:</p> <p>OVER-VOLTAGE WARNNING</p> <p>\u2462If the voltage &lt; 3.4V, the following URC will be reported,and the module will be automativally powered down.</p> <p>UNDER-VOLTAGE POWER DOWN</p> <p>\u2463If the voltage &gt; 4.4V, the following URC will be reported,and the module will be automativally powered down.</p> <p>OVER-VOLTAGE POWER DOWN</p> <ul> <li>5, Over-temperature or Under-temperature Power Down: SIM900 will constantly monitor the temperature of the module.</li> </ul> <p>\u2460If the temperature &gt; +80\u2103, the following URC will be reported:</p> <p>+CMTE:1</p> <p>\u2461If the temperature &lt; -30\u2103, the following URC will be reported:</p> <p>+CMTE:-1</p> <p>\u2462If the temperature &gt; +85\u2103, the following URC will be reported,and the module will be automativally powered down.</p> <p>+CMTE:2</p> <p>\u2463If the temperature &lt; -40\u2103, the following URC will be reported,and the module will be automativally powered down.</p> <p>+CMTE:-2</p> <p>When the GPRS Shield encounters POWER DOWN scenario, the AT commands can not be executed. The SIM808 logs off from network and enters the POWER DOWN mode, only the RTC is still active. POWER DOWN can also be indicated by STATUS LED(Blue), which is off in this mode.</p> <p>Note:</p> <p>To monitor the temperature, users can use the \u201cAT+CMTE\u201d command to read the temperature when GPRS Shield is powered on.</p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#upload-sketch-to-arduino","title":"Upload Sketch to Arduino","text":"<p>Data Stream among Computer, Arduino and GPRS Shield</p> <p>The following sketch configures Arduino/Arduino clone as serial link between PC and the GPRS Shield(Jumpers on SWserial side). PC would need a serial terminal software to communicate with it - Window's built-in HyperTerminal, Arduino IDE's Serial Monitor, Serial Terminals(sscom32) or Bray++ Terminal.</p> <p>After uploading the sketch to the Arduino board, press the ON/OFF button on the GPRS Shield to turn it on; Now you can see what you get on the serial terminal and the status of the three indicator LEDs, then communicate with your Shield.</p> <pre><code>//Serial Relay - Arduino will patch a \n//serial link between the computer and the GPRS Shield\n//at 19200 bps 8-N-1\n//Computer is connected to Hardware UART\n//GPRS Shield is connected to the Software UART \n\n#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial GSMSerial(7, 8);\n\nvoid setup()\n{\nGSMSerial.begin(19200);               // the GPRS/GSM baud rate   \nSerial.begin(19200);                 // the GPRS/GSM baud rate   \n}\n\nvoid loop()\n{\nif(Serial.available())\n\nGSMSerial.print((char)Serial.read());\n\nelse  if(GSMSerial.available())\n\nSerial.print((char)GSMSerial.read());\n}\n</code></pre> <p> </p> <p>Note:</p> <p>The \"AT\" or \"at\" prefix must be set at the beginning of each Command line. To terminate a Command line enter ."},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#set-baud-and-enable-charging-function","title":"Set Baud and Enable Charging Function","text":"<p>It is recommended to execute this process when first time to use the module. In the Serial Monitor columns of following tables, input of AT commands are in back, module returns values are in orange.</p> Serial Monitor Description AT OK Send command \u201cAT\u201d to synchronize baud rate. Serial port of module is by default set at auto-baud mode, and in this mode, it will not output any indications when the module is on. AT+IPR=9600 OK Set baud rate at 9600bps, supports baud rate from 1200bps to 115200bps. AT+ECHARGE=1 OK Send command \u201cAT+ECHARGE=1\u201d to enable battery charging function. By default the charging function is closed. AT&amp;W OK Save parameter setting. AT+CPOWD=1 NORMAL POWER DOWN Power down the module. RDY +CFUN: 1 GPS Ready +CPIN: READY Call Ready SMS Ready Turn on the module again by the power button, it will response status about GPS and GSM. AT+CBC +CBC: 1,96,4175 OK Inquire charging status and remaining battery capacity. AT+CSQ +CSQ: 14,0 OK Inquire GSM signal quality."},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#get-location-with-gps","title":"Get location with GPS","text":"Serial Monitor Description AT+CGPSPWR=1 OK Open GPS AT+CGPSSTATUS? +CGPSSTATUS: Location Not Fix OK Read GPS fix status, \u201cLocation Not Fix\u201d means that positioning is not successful. For the first time to start, it will take at least 30s. GPS must be tested by the window or outdoor. AT+CGPSSTATUS? +CGPSSTATUS: Location 3D Fix OK GPS has fixed with 3D status. AT+CGPSINF=0 +CGPSINF: 0,2234.931817,11357.122485, 92.461185,20141031041141.000, 88,12,0.000000,0.000000 Get the current GPS location information. Parameters formate: , , , , , , ,  AT+CGPSOUT=32 OK $GPRMC,043326.000,A, 2234.9414,N,11357.1187,E, 0.000,143.69,311014,,,A*50 Read NMEA $GPRMC data, of which, \u201c2234.9414 N, 11357.1187 E\u201d is the location coordinates. For more details about NMEA sentences, check this site. AT+CGPSRST=0 OK Reset GPS in Cold Start Mode. AT+CGPSRST=1 OK Reset GPS in Hot Start Mode. AT+CGPSPWR=0 OK Close GPS."},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#examples","title":"Examples","text":""},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#sending-sms-using-software-uart","title":"Sending SMS: using Software UART","text":"<pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\nvoid setup()\n{\nmySerial.begin(19200);  //Default serial port setting for the GPRS modem is 19200bps 8-N-1\nmySerial.print(\"\\r\");\ndelay(1000);                    //Wait for a second while the modem sends an \"OK\"\nmySerial.print(\"AT+CMGF=1\\r\");    //Because we want to send the SMS in text mode\ndelay(1000);\n\n//mySerial.print(\"AT+CSCA=\\\"+919032055002\\\"\\r\");  //Setting for the SMS Message center number,  \n//delay(1000);                                  //uncomment only if required and replace with\n//the message center number obtained from\n//your GSM service provider.\n//Note that when specifying a tring of characters\n// \" is entered as \\\"\n\nmySerial.print(\"AT+CMGS=\\\"+9184460xxxx\\\"\\r\");    //Start accepting the text for the message\n//to be sent to the number specified.\n//Replace this number with the target mobile number.\ndelay(1000);\nmySerial.print(\"Hello,Elecrow!\\r\");   //The text for the message\ndelay(1000);\nmySerial.write(0x1A);  //Equivalent to sending Ctrl+Z \n}\n\nvoid loop()\n{\n//We just want to send the SMS only once, so there is nothing in this loop.\n//If we put the code for SMS here, it will be sent again and again and cost us a lot.\n}\n</code></pre>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#making-a-call-using-software-uart","title":"Making a call: using Software UART","text":"<pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\nvoid setup()\n{\nmySerial.begin(19200);               // the GPRS baud rate   \nSerial.begin(19200);               // the GPRS baud rate   \ndelay(2000);\nmySerial.println(\"ATDxxxxxxxxx;\"); // xxxxxxxxx is the number you want to dial.  \n\nif(mySerial.available())\n\nSerial.print((unsigned char)mySerial.read());\n\n\ndelay(10000); \ndelay(10000); \n\nmySerial.println(\"ATH\"); //End the call.\nif(mySerial.available())\n\nSerial.print((unsigned char)mySerial.read());\n}\n\n\nvoid loop()\n{\n//Do nothing\n}\n</code></pre>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#using-at-commands-to-control-gpio-and-pwm-pins","title":"Using AT Commands to Control GPIO and PWM pins","text":"<p>Note: GPIOs,PWMs and ADC of the SIM808 module are all 2V8 logic.</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\nvoid setup()\n{\nmySerial.begin(19200);               // the GPRS baud rate   \ndelay(2000);\n}\n\nvoid loop()\n{\nmySerial.println(\"AT+SPWM=0,63,100\");// set PWM 1 PIN\n\nmySerial.println(\"AT+SGPIO=0,2,1,1\");// set GPIO 5 PIN to 1\nmySerial.println(\"AT+SGPIO=0,3,1,1\");// set GPIO 6 PIN to 1\ndelay(1000);  \n\nmySerial.println(\"AT+SGPIO=0,2,1,0\");// set GPIO 5 PIN to 0\nmySerial.println(\"AT+SGPIO=0,3,1,0\");// set GPIO 6 PIN to 0\ndelay(1000);    \n}\n</code></pre>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#a-simple-source-code-example","title":"A Simple Source Code Example","text":"<p>The demo code below is for the Xduino to send SMS message/dial a voice call/submit a http request to a website and upload datas to the pachube. It has been tested on Arduino Duemilanove but will work on any compatible variant, plesse note that this sketch uses the sorfware UART of ATmega328P. please follow the following steps for running this sketch.</p> <ol> <li>With the GPRS Shield removed, download this sketch into your Arduino.</li> <li>Disconnect the Xduino from USB port to remove power source.</li> <li>Set the Serial Port jumpers on the GPRS Shield in SWserial position, to use the Soft Serial port of Arduino.</li> <li>Connect the antenna to the GPRS Shield and insert the SIM Card.</li> <li>Mount the GPRS Shield on Arduino.</li> <li>Connect the Arduino to the computer by USB, and fire up your favorite serial terminal software on computer, choose the COM port for Arduino, set it to operate at 19200 8-N-1.</li> <li>Type command in the terminal to execute different function, threr are 4 functions in the demo:</li> <li>If you input 't', the demo will send a SMS message to another cellphone which you set(you need set the number in the code);</li> <li>If you input 'd', the program will dial a call to the other cellphone that you set(it is also need you set in the code );</li> <li>If you input 'h', it will submit a http request to a web that you want to access(it need you set the web adress in the code), it will return a string from the website if it goes correctly;</li> <li>If you input 's', it will upload the datas to the pachube(for detail you can refer to the explanation in the code). I strongly recommend you input 'h' before input 's', because uploading datas to the pachube need do some setting, after execute the function of submit a http request, the setting will be set.</li> <li>If the program returns error in the terminal after you typed the command, don't worry, just try input the command again.</li> </ol> <pre><code>/*Note: this code is a demo for how to using gprs shield to send sms message, dial a voice call and \nsend a http request to the website, upload data to pachube.com by TCP connection,\n\nThe microcontrollers Digital Pin 7 and hence allow unhindered\ncommunication with GPRS Shield using SoftSerial Library. \nIDE: Arduino 1.0 or later\nReplace the following items in the code:\n1.Phone number, don't forget add the country code\n2.Replace the Access Point Name\n3. Replace the Pachube API Key with your personal ones assigned\nto your account at cosm.com\n*/\n\n\n#include &lt;SoftwareSerial.h&gt;\n#include &lt;String.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\nvoid setup()\n{\nmySerial.begin(19200);               // the GPRS baud rate   \nSerial.begin(19200);    // the GPRS baud rate \ndelay(500);\n}\n\nvoid loop()\n{\n//after start up the program, you can using terminal to connect the serial of gprs shield,\n//if you input 'q' in the terminal, the program will execute  GetSignalQuality(),it will show the signal quality,\n//if you input 't' in the terminal, the program will execute SendTextMessage(), it will show how to send a sms message,\n//if input 'd' in the terminal, it will execute DialVoiceCall(), etc.\n\nif (Serial.available())\nswitch(Serial.read())\n\ncase 'q':\nGetSignalQuality();\nbreak;\ncase 't':\nSendTextMessage();\nbreak;\ncase 'd':\nDialVoiceCall();\nbreak;\ncase 'h':\nSubmitHttpRequest();\nbreak;\ncase 's':\nSend2Pachube();\nbreak;\n\nif (mySerial.available())\nSerial.write(mySerial.read());\n}\n///GetSignalQuality()\n///get the signal quality of GSM model.\nvoid GetSignalQuality()\n{\nmySerial.println(\"AT+CSQ\");  //get the signal Quality\ndelay(100);\nint k=0;\nwhile(mySerial.available()!=0)\n\nSigQ[k]=mySerial.read();  \nSerial.write(SigQ[k]);\nk+=1;\n}\n\n\n///SendTextMessage()\n///this function is to send a sms message\nvoid SendTextMessage()\n{\nmySerial.print(\"AT+CMGF=1\\r\");    //Because we want to send the SMS in text mode\ndelay(100);\nmySerial.println(\"AT + CMGS = \\\"+86138xxxxx615\\\"\");//send sms message, be careful need to add a country code before the cellphone number\ndelay(100);\nmySerial.println(\"A test message!\");//the content of the message\ndelay(100);\nmySerial.println((char)26);//the ASCII code of the ctrl+z is 26\ndelay(100);\nmySerial.println();\n}\n\n///DialVoiceCall\n///this function is to dial a voice call\nvoid DialVoiceCall()\n{\nmySerial.println(\"ATD + +86138xxxxx615;\");//dial the number\ndelay(100);\nmySerial.println();\n}\n\n///SubmitHttpRequest()\n///this function is submit a http request\n///attention:the time of delay is very important, it must be set enough \nvoid SubmitHttpRequest()\n{\nmySerial.println(\"AT+CSQ\");\ndelay(100);\n\nShowSerialData();// this code is to show the data from gprs shield, in order to easily see the process of how the gprs shield submit a http request, and the following is for this purpose too.\n\nmySerial.println(\"AT+CGATT?\");\ndelay(100);\n\nShowSerialData();\n\nmySerial.println(\"AT+SAPBR=3,1,\\\"CONTYPE\\\",\\\"GPRS\\\"\");//setting the SAPBR, the connection type is using gprs\ndelay(1000);\n\nShowSerialData();\n\nmySerial.println(\"AT+SAPBR=3,1,\\\"APN\\\",\\\"CMNET\\\"\");//setting the APN, the second need you fill in your local apn server\ndelay(4000);\n\nShowSerialData();\n\nmySerial.println(\"AT+SAPBR=1,1\");//setting the SAPBR, for detail you can refer to the AT command mamual\ndelay(2000);\n\nShowSerialData();\n\nmySerial.println(\"AT+HTTPINIT\"); //init the HTTP request\n\ndelay(2000); \nShowSerialData();\n\nmySerial.println(\"AT+HTTPPARA=\\\"URL\\\",\\\"www.google.com.hk\\\"\");// setting the httppara, the second parameter is the website you want to access\ndelay(1000);\n\nShowSerialData();\n\nmySerial.println(\"AT+HTTPACTION=0\");//submit the request \ndelay(10000);//the delay is very important, the delay time is base on the return from the website, if the return datas are very large, the time required longer.\n//while(!mySerial.available());\n\nShowSerialData();\n\nmySerial.println(\"AT+HTTPREAD\");// read the data from the website you access\ndelay(300);\n\nShowSerialData();\n\nmySerial.println(\"\");\ndelay(100);\n}\n\n///send2Pachube()///\n///this function is to send the sensor data to the pachube, you can see the new value in the pachube after execute this function///\nvoid Send2Pachube()\n{\nmySerial.println(\"AT+CGATT?\");\ndelay(100);\n\nShowSerialData();\n\nmySerial.println(\"AT+CSTT=\\\"CMNET\\\"\");//start task and setting the APN,\ndelay(1000);\n\nShowSerialData();\n\nmySerial.println(\"AT+CIICR\");//bring up wireless connection\ndelay(300);\n\nShowSerialData();\n\nmySerial.println(\"AT+CIFSR\");//get local IP adress\ndelay(2000);\n\nShowSerialData();\n\nmySerial.println(\"AT+CIPSPRT=0\");\ndelay(3000);\n\nShowSerialData();\n\nmySerial.println(\"AT+CIPSTART=\\\"tcp\\\",\\\"api.cosm.com\\\",\\\"8081\\\"\");//start up the connection\ndelay(2000);\n\nShowSerialData();\n\nmySerial.println(\"AT+CIPSEND\");//begin send data to remote server\ndelay(4000);\nShowSerialData();\nString humidity = \"1031\";//these 4 line code are imitate the real sensor data, because the demo did't add other sensor, so using 4 string variable to replace.\nString moisture = \"1242\";//you can replace these four variable to the real sensor data in your project\nString temperature = \"30\";//\nString barometer = \"60.56\";//\nmySerial.print(\"\\\"method\\\": \\\"put\\\",\\\"resource\\\": \\\"/feeds/43634/\\\",\\\"params\\\"\");//here is the feed you apply from pachube\ndelay(500);\nShowSerialData();\nmySerial.print(\": ,\\\"headers\\\": \\\"X-PachubeApiKey\\\":\");//in here, you should replace your pachubeapikey\ndelay(500);\nShowSerialData();\nmySerial.print(\" \\\"_cXwr5LE8qW4a296O-cDwOUvfddFer5pGmaRigPsiO0\");//pachubeapikey\ndelay(500);\nShowSerialData();\nmySerial.print(\"jEB9OjK-W6vej56j9ItaSlIac-hgbQjxExuveD95yc8BttXc\");//pachubeapikey\ndelay(500);\nShowSerialData();\nmySerial.print(\"Z7_seZqLVjeCOmNbEXUva45t6FL8AxOcuNSsQS\\\",\\\"body\\\":\");\ndelay(500);\nShowSerialData();\nmySerial.print(\" \\\"version\\\": \\\"1.0.0\\\",\\\"datastreams\\\": \");\ndelay(500);\nShowSerialData();\nmySerial.println(\"[\\\"id\\\": \\\"01\\\",\\\"current_value\\\": \\\"\" + barometer + \"\\\",\");\ndelay(500);\nShowSerialData();\nmySerial.println(\"\\\"id\\\": \\\"02\\\",\\\"current_value\\\": \\\"\" + humidity + \"\\\",\");\ndelay(500);\nShowSerialData();\nmySerial.println(\"\\\"id\\\": \\\"03\\\",\\\"current_value\\\": \\\"\" + moisture + \"\\\",\");\ndelay(500);\nShowSerialData();\nmySerial.println(\"\\\"id\\\": \\\"04\\\",\\\"current_value\\\": \\\"\" + temperature + \"\\\"],\\\"token\\\": \\\"lee\\\"\");\n\n\ndelay(500);\nShowSerialData();\n\nmySerial.println((char)26);//sending\ndelay(5000);//waitting for reply, important! the time is base on the condition of internet \nmySerial.println();\n\nShowSerialData();\n\nmySerial.println(\"AT+CIPCLOSE\");//close the connection\ndelay(100);\nShowSerialData();\n\n}\nvoid ShowSerialData()\n{\nwhile(mySerial.available()!=0)\nSerial.write(mySerial.read());\n}\n</code></pre>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#using-sms-to-control-an-led-status","title":"Using Sms to Control an LED Status","text":"<p>This example is controbuted by MChobby, for more information please visit: http://mchobby.be/wiki/index.php?title=SmsCommand</p> <p>Send a SMS message \"on\" or \"off\" from your cellphone to the GPRS Shield to control the Digital Pin 13(LED) Status.</p> <p>The default Buffer of Rx in SoftwareSerial.h is 32/64, you may experience some data lose while the returns of SIM808 are many(Receiving SMS/TCPIP), you can try to change the Buffer of Rx in SoftwareSerial.h into #define _SS_MAX_RX_BUFF 128 // RX buffer size</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\n// EN: String buffer for the GPRS shield message\n\nString msg = String(\"\");\n// EN: Set to 1 when the next GPRS shield message will contains the SMS message\n\nint SmsContentFlag = 0;\n\n// EN: Pin of the LED to turn ON and OFF depending on the received message\n\nint ledPin = 13;\n\n// EN: Code PIN of the SIM card (if applied)\n\n//String SIM_PIN_CODE = String( \"XXXX\" );\n\nvoid setup()\n{\n  mySerial.begin(19200);               // the GPRS baud rate   \n  Serial.begin(19200);                 // the GPRS baud rate\n\n  // Initialize la PIN\n  pinMode( ledPin, OUTPUT ); \n  digitalWrite( ledPin, LOW ); \n}\n\nvoid loop()\n{\n    char SerialInByte;\n\n    if(Serial.available())\n    {\n       mySerial.print((unsigned char)Serial.read());\n     }  \n    else  if(mySerial.available())\n    {\n        char SerialInByte;\n        SerialInByte = (unsigned char)mySerial.read();\n\n        // EN: Relay to Arduino IDE Monitor\n\n        Serial.print( SerialInByte );\n\n        // -------------------------------------------------------------------\n        // EN: Program also listen to the GPRS shield message.\n\n        // -------------------------------------------------------------------\n\n        // EN: If the message ends with &lt;CR&gt; then process the message\n\n        if( SerialInByte == 13 ){\n          // EN: Store the char into the message buffer\n\n          ProcessGprsMsg();\n         }\n         if( SerialInByte == 10 ){\n            // EN: Skip Line feed\n\n         }\n         else {\n           // EN: store the current character in the message string buffer\n\n           msg += String(SerialInByte);\n         }\n     }   \n}\n\n// EN: Make action based on the content of the SMS. \n//     Notice than SMS content is the result of the processing of several GPRS shield messages.\n\nvoid ProcessSms( String sms ){\n  Serial.print( \"ProcessSms for [\" );\n  Serial.print( sms );\n  Serial.println( \"]\" );\n\n  if( sms.indexOf(\"on\") &gt;= 0 ){\n    digitalWrite( ledPin, HIGH );\n    Serial.println( \"LED IS ON\" );\n    return;\n  }\n  if( sms.indexOf(\"off\") &gt;= 0 ){\n    digitalWrite( ledPin, LOW );\n    Serial.println( \"LED IS OFF\" );\n    return;\n  }\n}\n\n// EN: Send the SIM PIN Code to the GPRS shield\n\n//void GprsSendPinCode(){\n//  if( SIM_PIN_CODE.indexOf(\"XXXX\")&gt;=0 ){\n//    Serial.println( \"*** OUPS! you did not have provided a PIN CODE for your SIM CARD. ***\" );\n//    Serial.println( \"*** Please, define the SIM_PIN_CODE variable . ***\" );\n//    return;\n// }\n//  mySerial.print(\"AT+CPIN=\");\n// mySerial.println( SIM_PIN_CODE );\n}\n\n// EN: Request Text Mode for SMS messaging\n\nvoid GprsTextModeSMS(){\n  mySerial.println( \"AT+CMGF=1\" );\n}\n\nvoid GprsReadSmsStore( String SmsStorePos ){\n  // Serial.print( \"GprsReadSmsStore for storePos \" );\n  // Serial.println( SmsStorePos ); \n  mySerial.print( \"AT+CMGR=\" );\n  mySerial.println( SmsStorePos );\n}\n\n// EN: Clear the GPRS shield message buffer\n\nvoid ClearGprsMsg(){\n  msg = \"\";\n}\n\n// EN: interpret the GPRS shield message and act appropiately\n\nvoid ProcessGprsMsg() {\n  Serial.println(\"\");\n  Serial.print( \"GPRS Message: [\" );\n  Serial.print( msg );\n  Serial.println( \"]\" );\n\n//  if( msg.indexOf( \"+CPIN: SIM PIN\" ) &gt;= 0 ){\n//     Serial.println( \"*** NEED FOR SIM PIN CODE ***\" );\n //    Serial.println( \"PIN CODE *** WILL BE SEND NOW\" );\n //    GprsSendPinCode();\n//  }\n\n  if( msg.indexOf( \"Call Ready\" ) &gt;= 0 ){\n     Serial.println( \"*** GPRS Shield registered on Mobile Network ***\" );\n     GprsTextModeSMS();\n  }\n\n  // EN: unsolicited message received when getting a SMS message\n  // FR: Message non sollicit\u00e9 quand un SMS arrive\n  if( msg.indexOf( \"+CMTI\" ) &gt;= 0 ){\n     Serial.println( \"*** SMS Received ***\" );\n     // EN: Look for the coma in the full message (+CMTI: \"SM\",6)\n     //     In the sample, the SMS is stored at position 6\n     int iPos = msg.indexOf( \",\" );\n     String SmsStorePos = msg.substring( iPos+1 );\n     Serial.print( \"SMS stored at \" );\n     Serial.println( SmsStorePos );\n\n     // EN: Ask to read the SMS store\n     GprsReadSmsStore( SmsStorePos );\n  }\n\n  // EN: SMS store readed through UART (result of GprsReadSmsStore request)  \n  if( msg.indexOf( \"+CMGR:\" ) &gt;= 0 ){\n    // EN: Next message will contains the BODY of SMS\n    SmsContentFlag = 1;\n    // EN: Following lines are essentiel to not clear the flag!\n    ClearGprsMsg();\n    return;\n  }\n\n  // EN: +CMGR message just before indicate that the following GRPS Shield message \n  //     (this message) will contains the SMS body\n\n  if( SmsContentFlag == 1 ){\n    Serial.println( \"*** SMS MESSAGE CONTENT ***\" );\n    Serial.println( msg );\n    Serial.println( \"*** END OF SMS MESSAGE ***\" );\n    ProcessSms( msg );\n  }\n\n  ClearGprsMsg();\n  // EN: Always clear the flag\n\n  SmsContentFlag = 0; \n}\n</code></pre>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#faq","title":"FAQ","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#how-to-buy","title":"How to buy","text":"<p>You can click here to buy SIM808 GPRS/GSM+GPS Shield v1.0 .</p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#resources","title":"Resources","text":""},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#about-sim808-sheild-v10","title":"About SIM808 sheild v1.0","text":"<ul> <li>SIM800_Series_AT_Command_Manual_V1.05 &amp; SIM808_Hardware Design_V1.00 - SIM808 Documentation</li> <li>SIM808 GPRS/GSM+GPS Shield v1.0 eagle files</li> </ul>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.0.html#about-sim808-gprsgsmgps-shield-v11","title":"About SIM808 GPRS/GSM+GPS Shield v1.1","text":"<ul> <li>SIM808_Hardware Design_V1.02</li> <li>SIM800 Series_AT Command Manual_V1.09</li> <li>SIM800 Series_GNSS_Application Note V1.00</li> </ul>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html","title":"SIM808 GPRS/GSM+GPS Shield v1.1","text":""},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#introduction","title":"Introduction","text":"<p>SIM808 module is a GSM/GPS/BT three-in-one function module. It is based on the latest GSM/GPS/BT module SIM808 from SIMCOM, supports GSM/GPRS Quad-Band network and combines GPS technology for satellite navigation.It has high GPS receive sensitivity with 22 tracking and 66 acquisition receiver channels. Besides, it supports A-GPS that available for indoor localization\uff0c and it also supports for Bluetooth 3.0.</p> <p>The module is controlled by AT command via UART and supports 3.3V and 5V logical level.</p> <p>Model: ACS80801S </p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#features","title":"Features","text":"<ul> <li>Quad-band 850/900/1800/1900MHz.</li> <li>GPRS multi-slot class12 connectivity: max. 85.6kbps(down-load/up-load).</li> <li>GPRS mobile station class B.</li> <li>Controlled by AT Command (3GPP TS 27.007, 27.005 and SIMCOM enhanced AT Commands).</li> <li>Supports Real Time Clock.</li> <li>Supply voltage range 5V ~ 12V.</li> <li>Supports for Bluetooth 4.0.</li> <li>Integrated GPS/CNSS and supports A-GPS.</li> <li>Supports 3.0V to 5.0V logic level.</li> <li>Low power consumption, 1mA in sleep mode.</li> <li>Supports GPS NMEA protocol.</li> <li>Standard Micro SIM Card.</li> </ul>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#application-ideas","title":"Application Ideas","text":"<ul> <li>M2M (Machine 2 Machine) Applicatoions - To transfer control data using SMS or GPRS between two machines located at two different factories.</li> <li>Remote control of appliances - Send SMS while you are at your office to turn on or off your washing machine at home.</li> <li>Remote Weather station or a Wireless Sensor Network - Make it with [Crowduino v1.0|Crowduino v1.0] and create a sensor node capable of transferring sensor data (like from a weather station - temperature, humidity etc.) to a web server (like pachube.com).</li> <li>Vehicle Tracking System - Install GPRS+GSM+GPS Shield in your car and publish your location live on the internet. Can be used as a automotive burglar alarm.</li> </ul>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#cautions","title":"Cautions","text":"<ul> <li>Make sure your SIM card is unlocked.</li> <li>The product is provided as is without an insulating enclosure. Please observe ESD precautions specially in dry (low humidity) weather.</li> <li>The factory default setting for the GPRS Shield UART is autobaoding. It supports baud rate from 1200 bps to 115200bps. (Can be changed using AT commands).</li> </ul>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#specifications","title":"Specifications","text":"Item  Min  Typical  Max  Unit  Voltage 4.8 5.0 12 VDC  Current 2 - 500 mA  Dimension(with antenna)  76.0(L)x55.0(W)x23.5(H) mm  Net Weight  47\u00b12 g"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#interface-function","title":"Interface Function","text":"<p> Power supply - Vin connected to external 5~9VDC power supply Antenna interface - connected to external antenna Serial port select - select either software serial port or hareware serial port to be connected to GPRS+GSM+GPS Shield Shield Hardware Serial - D0/D1 of Arduino/Crowduino Software serial - D7/D8 of Arduino/Crowduino Status LED - tell whether the power of SIM808 is on Net light - tell the status about SIM808 linking to the net 1PPS - tell the status about SIM808 get the location UART of SIM808 - UART pins breakout of SIM808 Microphone - to answer the phone call Speaker - to answer the phone call GPIO,PWM and ADC of SIM808 - GPIO,PWM and ADC pins breakout of SIM808 Power key - power up and down for SIM808  </p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#pins-usage-on-arduino","title":"Pins usage on Arduino","text":"<p>D0 - Unused if you select hardware serial port to communicate with GPRS+GSM+GPS Shield D1 - Unused if you select hardware serial port to communicate with GPRS+GSM+GPS Shield D2 - Unused D3 - Unused D4 - Unused D5 - Unused D6 - Unused D7 - Used if you select software serial port to communicate with GPRS+GSM+GPS Shield D8 - Used if you select software serial port to communicate with GPRS+GSM+GPS Shield D9 - Used for software control the power up or down of the SIM808 D10 - Unused D11 - Unused D12 - Unused D13 - Unused D14(A0) - Unused D15(A1) - Unused D16(A2) - Unused D17(A3) - Unused D18(A4) - Unused D19(A5) - Unused  </p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#usage","title":"Usage","text":""},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#hardware-installation","title":"Hardware installation","text":""},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#1insert-an-micro-sim-card-to-sim-card-holder","title":"1.Insert an Micro SIM card to SIM Card Holder","text":"<p>6 Pin Holder for SIM Cards. Both 1.8 volts and 3.0 volts SIM Cards are supported by SIM808 - the SIM card voltage type is automatically detected. </p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#2connect-the-antenna","title":"2.Connect the Antenna","text":"<p>A miniature coaxial RF connector is present on the SIM808 GPRS/GSM+GPS Shield board to connect with a GSM Antenna. The connector present on the SIM808 GPRS/GSM+GPS Shield is called a U.FL connecto.The GSM Antenna supplied with the GPRS Shield has an SMA connector (and not an RP-SMA connector) on it.The connection topology is shown in the diagram below: </p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#3plug-to-arduinocrowduino","title":"3.Plug to Arduino/Crowduino","text":"<p>The GPRS+GSM+GPS Shield, like any other well designed shield, is stackable as shown in the photo below. </p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#turn-on-the-sim808-gprsgsmgps-shield","title":"Turn on the SIM808 GPRS/GSM+GPS shield","text":"<p>There is two ways to turn on the SIM808 GPRS/GSM+GPS Shield. 1. Turn on through Hardware. Press the the 'POWERKEY' for few seconds until Power-on indicator(Green) is on.  2. Turn on through Software. If the JP is soldered,run the following code, the SIM808 will POWER on or POWER off.</p> <pre><code>int Powerkey = 9;\nvoid setup() {                \n  pinMode(Powerkey, OUTPUT);   // initialize the digital pin as an output.  \n  power();                     //power on the sim808 or power down the sim808\n}\nvoid loop() \n{\n\n}\n\nvoid power(void)\n{\n  digitalWrite(Powerkey, LOW); \n  delay(1000);               // wait for 1 second\n  digitalWrite(Powerkey, HIGH);\n}\n</code></pre>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#serial-portuart-communication","title":"Serial Port(UART) Communication","text":"<p>The SIM808 GPRS/GSM+GPS Shield is used UART protocol to communicate with an Arduino/Arduino clone; Users can use jumpers to connect (RX,TX) of the shield to either Software Serial(D8,D7) or Hardware Serial(D1,D0) of the Arduino.Detailed information is showed as the following picture:</p> <p></p> <p>Selectalbe GPRS+GSM+GPS Shield Communication Port</p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#power-down-the-gprs-shield","title":"Power Down the GPRS Shield","text":"<p>The GPRS Shield can be turned off by following ways:</p> <ul> <li>1, Normal power down procedure: Turn off the GPRS shield by using Hardware Triger; Press the ON/OFF Button about one seconds.</li> </ul> <p>The power down scenarios illustrates as following figure:</p> <p></p> <p>Figure of Timing of turning off GPRS Shield using Hardware Triger</p> <ul> <li>2, Normal power down procedure: If JP is soldered, then give Digital Pin 9 of the Arduino(act as Software Triger) a Turn off Impulse can turn off the GPRS Shield. The power down scenarios illustrates as following figure:</li> </ul> <p></p> <p>Figure of Timing of turning off GPRS Shield using Software Triger</p> <p>The following code is power down subroutine for Arduino if using software triger:</p> <pre><code>int Powerkey = 9;\nvoid setup() {                \n  pinMode(Powerkey, OUTPUT);   // initialize the digital pin as an output.  \n  power();                     //power on the sim808 or power down the sim808\n}\nvoid loop() \n{\n\n}\n\nvoid power(void)\n{\n  digitalWrite(Powerkey, LOW); \n  delay(1000);               // wait for 1 second\n  digitalWrite(Powerkey, HIGH);\n}\n</code></pre> <ul> <li>3, Normal power down procedure: Turn off the GPRS shield by sending AT command \"AT+CPOWD=1\" to SIM808 module.</li> </ul> <p>When GPRS Shield power dowm in Normal power down procedure, the procedure lets the SIM808 log off from the network and allows the software to enter into a secure state and save data before completely disconnecting the power supply. Before the completion of the power down procedure the SIM808 will send out result code:</p> <p>NORMAL POWER DOWN</p> <ul> <li>4, Over-voltage or Under-voltage Power Down: The module software monitors VBAT voltage constantly.</li> </ul> <p>\u2460If the voltage \u2264 3.5V, the following URC will be reported:</p> <p>UNDER-VOLTAGE WARNNING</p> <p>\u2461If the voltage \u2265 4.3V, the following URC will be reported:</p> <p>OVER-VOLTAGE WARNNING</p> <p>\u2462If the voltage &lt; 3.4V, the following URC will be reported,and the module will be automativally powered down.</p> <p>UNDER-VOLTAGE POWER DOWN</p> <p>\u2463If the voltage &gt; 4.4V, the following URC will be reported,and the module will be automativally powered down.</p> <p>OVER-VOLTAGE POWER DOWN</p> <ul> <li>5, Over-temperature or Under-temperature Power Down: SIM900 will constantly monitor the temperature of the module.</li> </ul> <p>\u2460If the temperature &gt; +80\u2103, the following URC will be reported:</p> <p>+CMTE:1</p> <p>\u2461If the temperature &lt; -30\u2103, the following URC will be reported:</p> <p>+CMTE:-1</p> <p>\u2462If the temperature &gt; +85\u2103, the following URC will be reported,and the module will be automativally powered down.</p> <p>+CMTE:2</p> <p>\u2463If the temperature &lt; -40\u2103, the following URC will be reported,and the module will be automativally powered down.</p> <p>+CMTE:-2</p> <p>When the GPRS Shield encounters POWER DOWN scenario, the AT commands can not be executed. The SIM808 logs off from network and enters the POWER DOWN mode, only the RTC is still active. POWER DOWN can also be indicated by STATUS LED(Blue), which is off in this mode.</p> <p>Note:</p> <p>To monitor the temperature, users can use the \u201cAT+CMTE\u201d command to read the temperature when GPRS Shield is powered on.</p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#upload-sketch-to-arduino","title":"Upload Sketch to Arduino","text":"<p>Data Stream among Computer, Arduino and GPRS Shield</p> <p>The following sketch configures Arduino/Arduino clone as serial link between PC and the GPRS Shield(Jumpers on SWserial side). PC would need a serial terminal software to communicate with it - Window's built-in HyperTerminal, Arduino IDE's Serial Monitor, Serial Terminals(sscom32) or Bray++ Terminal.</p> <p>After uploading the sketch to the Arduino board, press the ON/OFF button on the GPRS Shield to turn it on; Now you can see what you get on the serial terminal and the status of the three indicator LEDs, then communicate with your Shield.</p> <pre><code>//Serial Relay - Arduino will patch a \n//serial link between the computer and the GPRS Shield\n//at 19200 bps 8-N-1\n//Computer is connected to Hardware UART\n//GPRS Shield is connected to the Software UART \n\n#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial GSMSerial(7, 8);\n\nvoid setup()\n{\nGSMSerial.begin(19200);               // the GPRS/GSM baud rate   \nSerial.begin(19200);                 // the GPRS/GSM baud rate   \n}\n\nvoid loop()\n{\nif(Serial.available())\n\nGSMSerial.print((char)Serial.read());\n\nelse  if(GSMSerial.available())\n\nSerial.print((char)GSMSerial.read());\n}\n</code></pre> <p> </p> <p>Note:</p> <p>The \"AT\" or \"at\" prefix must be set at the beginning of each Command line. To terminate a Command line enter ."},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#set-baud-and-enable-charging-function","title":"Set Baud and Enable Charging Function","text":"<p>It is recommended to execute this process when first time to use the module. In the Serial Monitor columns of following tables, input of AT commands are in back, module returns values are in orange.</p> Serial Monitor Description AT OK Send command \u201cAT\u201d to synchronize baud rate. Serial port of module is by default set at auto-baud mode, and in this mode, it will not output any indications when the module is on. AT+IPR=9600 OK Set baud rate at 9600bps, supports baud rate from 1200bps to 115200bps. AT+ECHARGE=1 OK Send command \u201cAT+ECHARGE=1\u201d to enable battery charging function. By default the charging function is closed. AT&amp;W OK Save parameter setting. AT+CPOWD=1 NORMAL POWER DOWN Power down the module. RDY +CFUN: 1 GPS Ready +CPIN: READY Call Ready SMS Ready Turn on the module again by the power button, it will response status about GPS and GSM. AT+CBC +CBC: 1,96,4175 OK Inquire charging status and remaining battery capacity. AT+CSQ +CSQ: 14,0 OK Inquire GSM signal quality."},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#get-location-with-gps","title":"Get location with GPS","text":"Serial Monitor Description AT+CGPSPWR=1 OK Open GPS AT+CGPSSTATUS? +CGPSSTATUS: Location Not Fix OK Read GPS fix status, \u201cLocation Not Fix\u201d means that positioning is not successful. For the first time to start, it will take at least 30s. GPS must be tested by the window or outdoor. AT+CGPSSTATUS? +CGPSSTATUS: Location 3D Fix OK GPS has fixed with 3D status. AT+CGPSINF=0 +CGPSINF: 0,2234.931817,11357.122485, 92.461185,20141031041141.000, 88,12,0.000000,0.000000 Get the current GPS location information. Parameters formate: , , , , , , ,  AT+CGPSOUT=32 OK $GPRMC,043326.000,A, 2234.9414,N,11357.1187,E, 0.000,143.69,311014,,,A*50 Read NMEA $GPRMC data, of which, \u201c2234.9414 N, 11357.1187 E\u201d is the location coordinates. For more details about NMEA sentences, check this site. AT+CGPSRST=0 OK Reset GPS in Cold Start Mode. AT+CGPSRST=1 OK Reset GPS in Hot Start Mode. AT+CGPSPWR=0 OK Close GPS."},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#gnss-at-command","title":"GNSS AT Command","text":"AT Command Description AT+CGNSPWR GNSS power conntrol AT+CGNSSEQ Define the last NMEA sentence that paresed AT+CGNSINF GNSS navigation information parsed from NMEA sentences AT+CGNSURC GNSS navigation, GEO-fences and speed alarm URC report AT+CGNSCMD Send command to GNSS AT+CGNSTST Send data received from GNSS to AT UART <p>More information you can refer the SIM800 Series_GNSS_Application Note V1.00.</p>"},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#examples","title":"Examples","text":""},{"location":"Products/Shield/sim808-gprsgsm%2Bgps-shield-v1.1.html#sending-sms-using-software-uart","title":"Sending SMS: using Software UART","text":"<pre><code>#include &lt;SoftwareSerial.h&gt;\n\nSoftwareSerial mySerial(7, 8);\n\nvoid setup()\n{\nmySerial.begin(19200);  //Default serial port setting for the GPRS modem is 19200bps 8-N-1\nmySerial.print(\"\\r\");\ndelay(1000);                    //Wait for a second while the modem sends an \"OK\"\nmySerial.print(\"AT+CMGF=1\\r\");    //Because we want to send the SMS in text mode\ndelay(1000);\n\n//mySerial.print(\"AT+CSCA=\\\"+919032055002\\\"\\r\");  //Setting for the SMS Message center number,  \n//delay(1000);                                  //uncomment only if required and replace with\n//the message center number obtained from\n//your GSM service provider.\n//Note that when specifying a tring of characters\n// \" is entered as \\\"\n\nmySerial.print(\"AT+CMGS=\\\"+9184460xxxx\\\"\\r\");    //Start accepting the text for the message\n//to be sent to the number specified.\n//Replace this number with the target mobile number.\ndelay(1000);\nmySerial.print(\"Hello,Elecrow!\\r\");   //The text for the message\ndelay(1000);\nmySerial.write(0x1A);  //Equivalent to sending Ctrl+Z \n}\n\nvoid loop()\n{\n//We just want to send the SMS only once, so there is nothing in this loop.\n//If we put the code for SMS here, it will be sent again and again and cost us a lot.\n}\n</code></pre>"},{"location":"Products/Shield/sim808-gprsgsm2bgps-shield.html","title":"SIM808 GPRS/GSM+GPS Shield","text":"SIM808 GPRS/GSM+GPS Shield v1.0 SIM808 GPRS/GSM+GPS Shield v1.1"},{"location":"Products/Shield/solderless-protoboard-for-raspberry-pi-v10.html","title":"Solderless Protoboard for raspberry pi v1.0","text":""},{"location":"Products/Shield/solderless-protoboard-for-raspberry-pi-v10.html#introduction","title":"Introduction","text":"<p>This a solderless protoboard for raspberry pi,it have a printed circuit board and a single 2*20 GPIO header for raspberry pi to put your Perma-Proto on top of you Raspberry Pi. This version also comes with a 24C32 I2C EEPROM soldered on and connected to the EEDAT/EECLK lines. Nearly every pin you could want to connect to the pin are drawn out(Except for #26). You can easily insert the components on the breadboard and connect to raspberry pi to do a variety of interesting experiments.</p> <p>Model: (Discontinued)</p> <p></p>"},{"location":"Products/Shield/solderless-protoboard-for-raspberry-pi-v10.html#features","title":"Features","text":"<p>1.Compatible with all kinds of the Raspberry Pi.</p> <p>2.24C256 I2C EEPROM.</p> <p>3.Attaching chips, resistors, LED, potentiometers and more.</p> <p>4.Strips for +3V, +5V and Ground connections to the Raspberry Pi.</p> <p>5.2*20 GPIO header.</p> <p></p>"},{"location":"Products/Shield/solderless-protoboard-for-raspberry-pi-v10.html#usage","title":"Usage","text":"<p>It's very convenient to use this solderless protoboard. You just need to connect it to raspberry Pi, then you can do a variety of experiments on the protoboard.</p> <p></p> <p>If you want to program in the EEPROM to make a self-identifying setup using this protoboard, you can refer to GitHub platform https://github.com/raspberrypi/hats to learn more.</p>"},{"location":"Products/Shield/solderless-protoboard-for-raspberry-pi-v10.html#resource","title":"resource","text":"<ul> <li>Solderless_Protoboard_for_raspberry_pi_v1.0 eagle files</li> </ul>"},{"location":"Products/Shield/speech-interaction-board-for-raspberry-pi.html","title":"Speech Interaction board for Raspberry Pi","text":""},{"location":"Products/Shield/speech-interaction-board-for-raspberry-pi.html#introduction","title":"Introduction","text":"<p>Speech Interaction board for Raspberry Pi is a dual-microphone expansion board for Raspberry Pi designed for AI and voice applications. This means that you can build a more powerful and flexible voice product that integrates Amazon Alexa Voice Service, Google Assistant, and so on. There are 2 microphones on both sides of the board for collecting sounds and it also provides 2 APA102 RGB LEDs, 1 User Button and 2 on-board crowtail interfaces for expanding your applications. What is more, 3.5mm Audio Jack or JST 2.0 Speaker Out are both available for audio output.</p> <p>Model:</p> <p></p>"},{"location":"Products/Shield/speech-interaction-board-for-raspberry-pi.html#features","title":"Features","text":"<ul> <li> <p>Raspberry Pi compatible(Support Raspberry Pi Zero and Zero W, Raspberry Pi B+, Raspberry Pi 2 B and Raspberry Pi 3 B)</p> </li> <li> <p>2 Microphones</p> </li> <li> <p>2 Crowtail Interfaces</p> </li> <li> <p>1 User Button</p> </li> <li> <p>3.5mm Audio Jack</p> </li> <li> <p>JST2.0 Speaker Out</p> </li> </ul>"},{"location":"Products/Shield/speech-interaction-board-for-raspberry-pi.html#specifications","title":"Specifications","text":"<ul> <li> <p>BUTTON: a User Button, connected to GPIO17</p> </li> <li> <p>MIC_Land MIC_R: 2 Microphones on both sides of the board</p> </li> <li> <p>RGB LED: 2 APA102 RGB LEDs, connected to SPI interface</p> </li> <li> <p>WM8960: a low power stereo codec</p> </li> <li> <p>Raspberry Pi 40-Pin Headers: support Raspberry Pi Zero, Raspberry Pi 1 B+, Raspberry Pi 2 B and Raspberry Pi 3 B</p> </li> <li> <p>I2C: crowtail I2C port, connected to I2C-1</p> </li> <li> <p>GPIO12: Crowtail digital port, connected to GPIO12 &amp; GPIO13</p> </li> <li> <p>JST 2.0 SPEAKER OUT: for connecting speaker with JST 2.0 connector</p> </li> <li> <p>3.5mm AUDIO JACK: for connecting headphone or speaker with 3.5mm Audio Plug</p> </li> </ul>"},{"location":"Products/Shield/speech-interaction-board-for-raspberry-pi.html#application","title":"Application","text":"<ul> <li> <p>Voice Interaction Application</p> </li> <li> <p>AI Assistant</p> </li> </ul>"},{"location":"Products/Shield/speech-interaction-board-for-raspberry-pi.html#user","title":"User","text":"<p>System configuration and driver installation</p> <p>Step 1. Insert the Speech Interaction Board for Raspberry Pi</p> <p>1)Insert the Speech Interaction Board for Raspberry Pi into the Raspberry Pi, making sure the pins are aligned when you insert the Raspberry Pi.</p> <p>Step 2. Burn system, login, change source</p> <p>Since the current Pi kernel does not currently support the WM8960 codec, we need to build it manually.</p> <p>1)Make sure you are running the latest Raspbian operating system (debian 9) on your Pi, you can use etcher for system burning. 2)You can connect Raspberry Pi with VNC or PUTTY, but please configure wifi before. 3)Before installing the driver, please switch the source to Tsinghua according to the following procedure.</p> <pre><code>sudo nano /etc/apt/sources.list\n</code></pre> <p>If you commented out the original file content with #, replace it with the following:</p> <pre><code>deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib \ndeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non- free contrib\n</code></pre> <p>Step 3. Download and install the driver Run the following command</p> <pre><code>sudo apt-get update \nsudo apt-get upgrade \ngit clone https://github.com/respeaker/seeed-voicecard.git \ncd seeed-voicecard      #Download the sound card driver \nsudo ./install.sh         #Install the sound card driver \nreboot                #Restart\n</code></pre> <p>Step 4. Check if the sound card name</p> <pre><code>aplay -l\n</code></pre> <pre><code>arecord -l\n</code></pre> <pre><code>pi @ raspberrypi: ~ / seeed-voicecard $ aplay -l \n**** List of PLAYBACK Hardware Devices **** \ncard 0: ALSA [bcm2835 ALSA], device 0: bcm2835 ALSA [bcm2835 ALSA] \n  Subdevices: 8/8 \n  Subdevice # 0: subdevice # 0 \n  Subdevice # 1: subdevice # 1 \n  Subdevice # 2: subdevice # 2 \n  Subdevice # 3: subdevice # 3 \n  Subdevice # 4: subdevice # 4 \n  Subdevice # 5: subdevice # 5 \n  Subdevice # 6: subdevice # 6 \n  Subdevice # 7: subdevice # 7 \ncard 0: ALSA [bcm2835 ALSA], device 1: bcm2835 ALSA [bcm2835 IEC958 / HDMI] \n  Subdevices: 1/1 \n  Subdevice # 0: subdevice # 0 \ncard 1: seeed2micvoicec [seeed-2mic-voicecard], device 0: bcm2835-i2s-wm8960-hifi wm8960-hifi-0 []\n  Subdevices: 1/1 \n  Subdevice # 0: subdevice # 0 \n\npi @ raspberrypi: ~ / seeed-voicecard $ arecord -l \n**** List of CAPTURE Hardware Devices **** \ncard 1: seeed2micvoicec [seeed-2mic-voicecard], device 0: bcm2835-i2s-wm8960-hifi wm8960-hifi-0 [] \n  Subdevices: 1/1 \n  Subdevice # 0: subdevice # 0 \npi @ raspberrypi: ~ / seeed-voicecard $\n</code></pre> <p>Recording playback</p> <p>Recording test You can use arecord recording and then aplayplay. (don't forget to plug in headphones or speakers).</p> <pre><code>arecord -f cd -Dhw:1 | aplay -Dhw:1\n</code></pre> <p></p> <p>The control example APA102 LED</p> <p>Each onboard APA102 LED has an additional driver chip that sets the color of the LED and then maintains that color until a new command is received.</p> <p>Please enable SPI before executing, the specific steps are as follows:</p> <pre><code>-Enter: `sudo raspi-config`;\n-Select \"Interfacing Options\";\n-Select \"SPI\";\n-Select \"Yes\"  \n-Select \"OK\"\n-Select \"Finish\"\n</code></pre> <p>After configuration, you can execute the following command line to run the led example</p> <pre><code>cd ~ /\ngit clone https://github.com/respeaker/mic_hat.git\nsudo pip install spidev                   #Install the spi driver\ncd mic_hat\npython pixels.py\n</code></pre> <p></p> <p>use user-defined button</p> <p>There is a user-defined button on the board, which is connected to GPIO17. We can call python and RPi.GPIO to read the status.</p> <pre><code>sudo pip install rpi.gpio          // install RPi.GPIO library\nnano button.py                // copy the following code in button.py\n</code></pre> <pre><code>import  RPi.GPIO  as  GPIO \nimport  time\n\nBUTTON  =  17\n\nGPIO . Setmode ( GPIO . BCM ) \nGPIO . Setup ( BUTTON ,  GPIO . IN )\n\nwhile  True\u00a0: \n    state  =  GPIO . input ( BUTTON ) \n    if  state\u00a0: \n        print ( \"off\" ) \n    else\u00a0: \n        print ( \"on\" ) \n    time . sleep ( 1 )\n</code></pre> <p>Save the code as button.py, then run it. It should display \"on\" when you press the button:</p> <pre><code>python button.py\noff\noff\non\non\noff\n</code></pre> <p></p> <p>What Raspberry Pi's interface had been occupyed by this board:</p> <p>I2C_SDA , I2C_SCL, I2S_CLK, I2S_LRCLK, I2S_ADC, I2S_DAC, GPIO17 , GPIO12, GPIO13, SPI_MOSI, SPI_SCLK,</p>"},{"location":"Products/Shield/uninterruptible-power-supply-ups-hat-for-raspberry-pi.html","title":"Uninterruptible Power Supply UPS HAT For Raspberry Pi","text":""},{"location":"Products/Shield/uninterruptible-power-supply-ups-hat-for-raspberry-pi.html#introduction","title":"Introduction","text":"<p>UPS HAT For Raspberry Pi, 5V Uninterruptible Power Supply, Multi Battery Protection Circuits</p> <p>Model: RPA20901S</p>"},{"location":"Products/Shield/uninterruptible-power-supply-ups-hat-for-raspberry-pi.html#features","title":"Features","text":"<ul> <li>Standard Raspberry Pi 40PIN GPIO extension header, supports Raspberry Pi series boards</li> <li>I2C bus communication, monitoring the batteries voltage, current, power, and remaining capacity in real-time</li> <li>Multi battery protection circuits: overcharge/discharge protection, over current protection, short circuit protection, and reverse protection, along with the equalizing charge feature, more safe and stable</li> <li>Onboard 5V regulator, up to 2.5A continuous output current</li> <li>5V USB output, convenient for powering other boards</li> <li>Batteries warning indicators, easy to check if the battery is connected correctly</li> </ul>"},{"location":"Products/Shield/uninterruptible-power-supply-ups-hat-for-raspberry-pi.html#specification","title":"Specification","text":"<ul> <li>Output voltage\uff1a5V</li> <li>Charger\uff1a8.4V 2A</li> <li>Control bus\uff1aI2C</li> <li>Battery supported\uff1a18650 Li battery (NOT included)</li> <li>Dimensions\uff1a56mm \u00d7 85mm</li> <li>Mounting hole\uff1a3.0mm</li> </ul>"},{"location":"Products/Shield/uninterruptible-power-supply-ups-hat-for-raspberry-pi.html#hardware","title":"Hardware","text":"<p>The 8.4V interface is the charge port. You can plug the 8.4V 2A charger provided for charging the batteries. The switched is the power switch, you can turn it into ON/OFF to turn on/off Jetson Nano Developer Kit WARNING LED are the indicators of batteries, they turn on if you reverse batteries.</p> <ul> <li>Note 1: Please check the WARNING LED when you mounting batteries, make sure that you set all the batteries in the correct way. You cannot charge batteries if you reverse them.</li> <li>Note 2: The board may not work when you mount the batteries for the first time, you need to charge batteries on board for a while to activate them.</li> <li>Note 3: Please use the charger provided, the module may be destroyed by other unsuitable power adapters/chargers.</li> </ul>"},{"location":"Products/Shield/uninterruptible-power-supply-ups-hat-for-raspberry-pi.html#usage","title":"Usage","text":"<p>You can just attach the UPS HAT on the 40PIN GPIO of Raspberry Pi or connect the i2c interface and to Raspberry Pi by wires. VCC should be connected to 3.3V Open a terminal and run the following commands:</p> <pre><code>sudo apt-get install p7zip\nwget https://www.waveshare.com/w/upload/d/d9/UPS_HAT.7z\n7zr x UPS_HAT.7z -r -o./UPS_HAT\ncd UPS_HAT\npython3 INA219.py\n</code></pre> <p>The terminal will print the IP address, battery voltage, current and the percentage of battery quantity, as well as the CPU, GPU and memory information after starting the server</p> <p></p> <p>Note: if the current value is negative, it means that the batteries are feeding the Raspberry Pi. If the current value is positive, it means that the batteries are charging.</p>"},{"location":"Products/Shield/uninterruptible-power-supply-ups-hat-for-raspberry-pi.html#resources","title":"Resources","text":""},{"location":"Products/Shield/usb-host-shield-for-arduino.html","title":"USB Host Shield for Arduino","text":""},{"location":"Products/Shield/usb-host-shield-for-arduino.html#introduction","title":"Introduction","text":"<p>USB Host Shield is an inexpensive development board designed to be used in embedded applications which require USB Host functionality. The board supports USB 2.0 full/low speed operation. Primary target platform is Arduino, however, it can also be used with any other micro equipped with SPI interface. This board\u2019s layout is now compatible with much more Arduino compatible boards - not only UNO and Duemilanove, but also big Mega and Mega 2560 work with Standard variant of this shield out of the box. Of course it is compatible with Crowduino, too.</p> <p>Model: ARS3421U</p> <p></p> <p></p>"},{"location":"Products/Shield/usb-host-shield-for-arduino.html#features","title":"Features","text":"<p>Arduino, Crowduino, Seeeduino, Arduino Mega and Crowduino Mega compatible</p> <p>SPI interface</p> <p>Power Supply:5V</p> <p>Dimensions(mm):55.5(L)x53.5(W)x23.5(H)</p>"},{"location":"Products/Shield/usb-host-shield-for-arduino.html#usage","title":"Usage","text":""},{"location":"Products/Shield/usb-host-shield-for-arduino.html#hardware-installation","title":"Hardware Installation","text":"<p>Assemble these parts together like the picture below. And mount the shield onto your Arduino/Crowduino. </p>"},{"location":"Products/Shield/usb-host-shield-for-arduino.html#software-programming","title":"Software Programming","text":"<p>1.First you have to make sure that Arduino1.6.6 has already been installed on your computer. 2.Download the USB Host Shield 2.0 library here USB_Host_Shield_2.0-master.zip and unzip it into the libraries file of Arduino via this path: ..\\arduino-1.6.6\\libraries 3.Open the code directly by the path:File -&gt; Example -&gt;USB_Host_Shield_2.0-&gt;HID-&gt;USBHIDBootMouse</p> <pre><code> #include &lt;hidboot.h&gt;\n #include &lt;usbhub.h&gt;\n\n // Satisfy the IDE, which needs to see the include statment in the ino too.\n #ifdef dobogusinclude\n #include &lt;spi4teensy3.h&gt;\n #include &lt;SPI.h&gt;\n #endif\n\n class MouseRptParser\u00a0: public MouseReportParser\n {\n protected:\n    void OnMouseMove    (MOUSEINFO *mi);\n    void OnLeftButtonUp (MOUSEINFO *mi);\n    void OnLeftButtonDown   (MOUSEINFO *mi);\n    void OnRightButtonUp    (MOUSEINFO *mi);\n    void OnRightButtonDown  (MOUSEINFO *mi);\n    void OnMiddleButtonUp   (MOUSEINFO *mi);\n    void OnMiddleButtonDown (MOUSEINFO *mi);\n };\n void MouseRptParser::OnMouseMove(MOUSEINFO *mi)\n {\n    Serial.print(\"dx=\");\n    Serial.print(mi-&gt;dX, DEC);\n    Serial.print(\" dy=\");\n    Serial.println(mi-&gt;dY, DEC);\n };\n void MouseRptParser::OnLeftButtonUp    (MOUSEINFO *mi)\n {\n    Serial.println(\"L Butt Up\");\n };\n void MouseRptParser::OnLeftButtonDown  (MOUSEINFO *mi)\n {\n    Serial.println(\"L Butt Dn\");\n };\n void MouseRptParser::OnRightButtonUp   (MOUSEINFO *mi)\n {\n    Serial.println(\"R Butt Up\");\n };\n void MouseRptParser::OnRightButtonDown (MOUSEINFO *mi)\n {\n    Serial.println(\"R Butt Dn\");\n };\n void MouseRptParser::OnMiddleButtonUp  (MOUSEINFO *mi)\n {\n    Serial.println(\"M Butt Up\");\n };\n void MouseRptParser::OnMiddleButtonDown    (MOUSEINFO *mi)\n {\n    Serial.println(\"M Butt Dn\");\n };\n\n USB     Usb;\n USBHub     Hub(&amp;Usb);\n HIDBoot&lt;HID_PROTOCOL_MOUSE&gt;    HidMouse(&amp;Usb);\n\n uint32_t next_time;\n\n MouseRptParser                               Prs;\n\n void setup()\n {\n    Serial.begin( 115200 );\n #if !defined(__MIPSEL__)\n    while (!Serial); // Wait for serial port to connect - used on Leonardo, Teensy and other boards with built-in USB CDC serial connection\n #endif\n    Serial.println(\"Start\");\n\n    if (Usb.Init() == -1)\n        Serial.println(\"OSC did not start.\");\n\n    delay( 200 );\n\n    next_time = millis() + 5000;\n\n    HidMouse.SetReportParser(0,(HIDReportParser*)&amp;Prs);\n }\n\n void loop()\n {\n  Usb.Task();\n }\n</code></pre> <p>4.Upload the Code.  5.Open the serial monitor. Control the mouse,you can see some information of the mouse.   </p>"},{"location":"Products/Shield/usb-host-shield-for-arduino.html#resources","title":"Resources","text":"<ul> <li>Arduino library and examples</li> <li>Eagle Files</li> <li>Manual</li> <li>Arduino USB Host Library Introduction</li> </ul>"},{"location":"Products/Shield/usb-hub26powermanager-for-rpi-zero-v10.html","title":"USB Hub&Powermanager for RPI Zero v1.0","text":""},{"location":"Products/Shield/usb-hub26powermanager-for-rpi-zero-v10.html#introduction","title":"Introduction","text":"<p>Do you still worry about Raspberry Pi Zero access to various USB devices? So,it's your right choice. It is a USB Hub for RPI Zero, it has 4 USB extension interface and external battery. The 4 pogo pins on the back will connect the PP1, PP6, PP22 and PP23 testing pads on your Raspberry Pi Zero \u2013 no soldering required! You can also power PRI zero by USB cable or a chargeable battery. Only need a few studs can connect it with RPI Zero, it so convenient for saving a lot of wiring problems.</p> <p>Model: CEF02096C</p> <p></p>"},{"location":"Products/Shield/usb-hub26powermanager-for-rpi-zero-v10.html#features","title":"Features","text":"<ul> <li> <p>1.Have 4 USB extension ports, Compatible with USB2.0/1.1 transmission.</p> </li> <li> <ol> <li>Power Mode: Bus-Power / Self-Power</li> </ol> </li> <li> <ol> <li>Working Voltage: 5V DC</li> </ol> </li> <li> <ol> <li>Operating Temperature: 0\u00b0C~70\u00b0C</li> </ol> </li> <li> <ol> <li>Storage Temperature: -20\u00b0C~80\u00b0C</li> </ol> </li> <li> <ol> <li>Humidity: 0~80%RH, non-condensing</li> </ol> </li> <li> <ol> <li>Dimensions(mm):65.5(L)x31.5(W)x14.5(H)</li> </ol> </li> </ul>"},{"location":"Products/Shield/usb-hub26powermanager-for-rpi-zero-v10.html#interface","title":"Interface","text":"<pre><code>&lt;a class=\"image\" href=\"#file\"&gt;&lt;img alt=\"USB124.jpg\" decoding=\"async\" height=\"382\" src=\"/images/thumb/f/fc/USB124.jpg/800px-USB124.jpg\" srcset=\"/images/thumb/f/fc/USB124.jpg/1200px-USB124.jpg 1.5x, /images/thumb/f/fc/USB124.jpg/1600px-USB124.jpg 2x\" width=\"800\"&gt;&lt;/img&gt;&lt;/a&gt;\n</code></pre>"},{"location":"Products/Shield/usb-hub26powermanager-for-rpi-zero-v10.html#usager","title":"Usager","text":"<p>To attach this USB hub to Raspberry Pi Zero, simply put them back-to-back together and place the plastic standoff between them, then use the plastic screws and nuts to firmly fix the 4 corners.</p> <p></p> <p>Please make sure to attach in the correct direction, so the 4 pogo pins on the USB hub can accurately contact to testing pads on the back of Raspberry Pi Zero.</p> <p>Now you can connect power supply to Raspberry Pi Zero, either micro USB port will do, then you will see both Raspberry Pi Zero and the USB hub are powered.</p>"},{"location":"Products/Shield/vs1053-mp3-shield.html","title":"VS1053 MP3 Shield","text":""},{"location":"Products/Shield/vs1053-mp3-shield.html#introduction","title":"Introduction","text":"<p>The VS1053 is a great MP3 decoder, it is capable of decoding Ogg Vorbis/MP3/AAC/WMA/MIDI audio and encoding IMA ADPCM and user-loadable Ogg Vorbis, can drive 30 ohm headphones with no additional power supply. This VS1053 MP3 Shield is designed based on VS1053B from VLSI. For the best headphone listening experience, the VS1053 includes EarSpeaker spatial processing which accurately simulates how a room with stereo loudspeakers would sound. In addition to being able to decode all major formats, VS1053 is capable of recording in Ogg Vobis files. With the SD card slot on the other side of the board, you can play mp3 files from SD card using this shield. It is easily to drop it in your project or make a mp3 player using your Arduino.</p> <p>Model: ASVS1053MP </p> <p></p>"},{"location":"Products/Shield/vs1053-mp3-shield.html#features","title":"Features","text":"<ul> <li>Can play a variety of music formats, support for OGG encoding real-time recording</li> <li>SPI interface, the control signal lines are led out</li> <li>A headphone and stereo output</li> <li>A microphone for recording</li> <li>A line_in input interface</li> <li>Power indicator</li> <li>3.3V and 2.8V of LDO chip AMS-1117 on board, provides up to 800mA current</li> <li>A single power supply: +5 VDC</li> <li>12.288 Mhz crystal</li> <li>SD card slot</li> </ul>"},{"location":"Products/Shield/vs1053-mp3-shield.html#decodes-formats","title":"Decodes formats","text":"<ul> <li>Ogg Vorbis</li> <li>MP3 = MPEG 1 &amp; 2 audio layer III (CBR+VBR+ABR)</li> <li>MP1 &amp; MP2 = MPEG 1 &amp; 2 audio layers I &amp; II optional</li> <li>MPEG4 / 2 AAC-LC(+PNS), HE-AAC v2 (Level 3) (SBR + PS)</li> <li>WMA4.0/4.1/\u215e/9 all profiles (5-384 kbps)</li> <li>FLAC lossless audio with software plugin (upto 24 bits, 48 kHz)</li> <li>WAV (PCM + IMA ADPCM)</li> <li>General MIDI 1 / SP-MIDI format 0</li> </ul>"},{"location":"Products/Shield/vs1053-mp3-shield.html#encodes-formats-from-micline","title":"Encodes formats from mic/line","text":"<ul> <li>Ogg Vorbis with software plugin</li> <li>IMA ADPCM</li> <li>16-bit PCM</li> </ul>"},{"location":"Products/Shield/vs1053-mp3-shield.html#usage","title":"Usage","text":"<p>1.Plug VS1053 MP3 Shield onto the Arduino/Crowduino. Connect the board to PC using USB cable.</p> <p></p> <p>2.After connecting your Arduino to the VS1053 MP3 Shield, insert the SD card which stores your mp3 files with the filename like \"track001.mp3\", \"track002.mp3\" and etc into the SD card slot.</p> <p>3.Download the MP3Shield Library Demo code and put them in the folder /Arduino1.0/libraries/.   4.Open the code directly by the path:File -&gt; Examples -&gt;SFEMP3Shield-&gt;Examples-&gt;MP3Shield_Library_Demo.</p> <pre><code>#include &lt;SPI.h&gt;\n\n//Add the SdFat Libraries\n#include &lt;SdFat.h&gt;\n#include &lt;SdFatUtil.h&gt;\n\n//and the MP3 Shield Library\n#include &lt;SFEMP3Shield.h&gt;\n\n// Below is not needed if interrupt driven. Safe to remove if not using.\n#if defined(USE_MP3_REFILL_MEANS) &amp;&amp; USE_MP3_REFILL_MEANS == USE_MP3_Timer1\n  #include &lt;TimerOne.h&gt;\n#elif defined(USE_MP3_REFILL_MEANS) &amp;&amp; USE_MP3_REFILL_MEANS == USE_MP3_SimpleTimer\n  #include &lt;SimpleTimer.h&gt;\n#endif\n\n/**\n * \\brief Object instancing the SdFat library.\n *\n * principal object for handling all SdCard functions.\n */\nSdFat sd;\n\n/**\n * \\brief Object instancing the SFEMP3Shield library.\n *\n * principal object for handling all the attributes, members and functions for the library.\n */\nSFEMP3Shield MP3player;\n\n//------------------------------------------------------------------------------\n/**\n * \\brief Setup the Arduino Chip's feature for our use.\n *\n * After Arduino's kernel has booted initialize basic features for this\n * application, such as Serial port and MP3player objects with .begin.\n * Along with displaying the Help Menu.\n *\n * \\note returned Error codes are typically passed up from MP3player.\n * Whicn in turns creates and initializes the SdCard objects.\n *\n * \\see\n * \\ref Error_Codes\n */\nvoid setup() {\n\n  uint8_t result; //result code from some function as to be tested at later time.\n\n  Serial.begin(115200);\n\n  Serial.print(F(\"F_CPU = \"));\n  Serial.println(F_CPU);\n  Serial.print(F(\"Free RAM = \")); // available in Version 1.0 F() bases the string to into Flash, to use less SRAM.\n  Serial.print(FreeRam(), DEC);  // FreeRam() is provided by SdFatUtil.h\n  Serial.println(F(\" Should be a base line of 1028, on ATmega328 when using INTx\"));\n\n\n  //Initialize the SdCard.\n  if(!sd.begin(SD_SEL, SPI_FULL_SPEED)) sd.initErrorHalt();\n  // depending upon your SdCard environment, SPI_HAVE_SPEED may work better.\n  if(!sd.chdir(\"/\")) sd.errorHalt(\"sd.chdir\");\n\n  //Initialize the MP3 Player Shield\n  result = MP3player.begin();\n  //check result, see readme for error codes.\n  if(result\u00a0!= 0) {\n    Serial.print(F(\"Error code: \"));\n    Serial.print(result);\n    Serial.println(F(\" when trying to start MP3 player\"));\n    if( result == 6 ) {\n      Serial.println(F(\"Warning: patch file not found, skipping.\")); // can be removed for space, if needed.\n      Serial.println(F(\"Use the \\\"d\\\" command to verify SdCard can be read\")); // can be removed for space, if needed.\n    }\n  }\n\n#if defined(__BIOFEEDBACK_MEGA__) // or other reasons, of your choosing.\n  // Typically not used by most shields, hence commented out.\n  Serial.println(F(\"Applying ADMixer patch.\"));\n  if(MP3player.ADMixerLoad(\"admxster.053\") == 0) {\n    Serial.println(F(\"Setting ADMixer Volume.\"));\n    MP3player.ADMixerVol(-3);\n  }\n#endif\n\n  help();\n}\n\n//------------------------------------------------------------------------------\n/**\n * \\brief Main Loop the Arduino Chip\n *\n * This is called at the end of Arduino kernel's main loop before recycling.\n * And is where the user's serial input of bytes are read and analyzed by\n * parsed_menu.\n *\n * Additionally, if the means of refilling is not interrupt based then the\n * MP3player object is serviced with the availaible function.\n *\n * \\note Actual examples of the libraries public functions are implemented in\n * the parse_menu() function.\n */\nvoid loop() {\n\n// Below is only needed if not interrupt driven. Safe to remove if not using.\n#if defined(USE_MP3_REFILL_MEANS) \\\n    &amp;&amp; ( (USE_MP3_REFILL_MEANS == USE_MP3_SimpleTimer) \\\n    ||   (USE_MP3_REFILL_MEANS == USE_MP3_Polled)      )\n\n  MP3player.available();\n#endif\n\n  if(Serial.available()) {\n    parse_menu(Serial.read()); // get command from serial input\n  }\n\n  delay(100);\n}\n\nuint32_t  millis_prv;\n\n//------------------------------------------------------------------------------\n/**\n * \\brief Decode the Menu.\n *\n * Parses through the characters of the users input, executing corresponding\n * MP3player library functions and features then displaying a brief menu and\n * prompting for next input command.\n */\nvoid parse_menu(byte key_command) {\n\n  uint8_t result; // result code from some function as to be tested at later time.\n\n  // Note these buffer may be desired to exist globably.\n  // but do take much space if only needed temporarily, hence they are here.\n  char title[30]; // buffer to contain the extract the Title from the current filehandles\n  char artist[30]; // buffer to contain the extract the artist name from the current filehandles\n  char album[30]; // buffer to contain the extract the album name from the current filehandles\n\n  Serial.print(F(\"Received command: \"));\n  Serial.write(key_command);\n  Serial.println(F(\" \"));\n\n  //if s, stop the current track\n  if(key_command == 's') {\n    Serial.println(F(\"Stopping\"));\n    MP3player.stopTrack();\n\n  //if 1-9, play corresponding track\n  } else if(key_command &gt;= '1' &amp;&amp; key_command &lt;= '9') {\n    //convert ascii numbers to real numbers\n    key_command = key_command - 48;\n\n#if USE_MULTIPLE_CARDS\n    sd.chvol(); // assign desired sdcard's volume.\n#endif\n    //tell the MP3 Shield to play a track\n    result = MP3player.playTrack(key_command);\n\n    //check result, see readme for error codes.\n    if(result\u00a0!= 0) {\n      Serial.print(F(\"Error code: \"));\n      Serial.print(result);\n      Serial.println(F(\" when trying to play track\"));\n    } else {\n\n      Serial.println(F(\"Playing:\"));\n\n      //we can get track info by using the following functions and arguments\n      //the functions will extract the requested information, and put it in the array we pass in\n      MP3player.trackTitle((char*)&amp;title);\n      MP3player.trackArtist((char*)&amp;artist);\n      MP3player.trackAlbum((char*)&amp;album);\n\n      //print out the arrays of track information\n      Serial.write((byte*)&amp;title, 30);\n      Serial.println();\n      Serial.print(F(\"by:  \"));\n      Serial.write((byte*)&amp;artist, 30);\n      Serial.println();\n      Serial.print(F(\"Album:  \"));\n      Serial.write((byte*)&amp;album, 30);\n      Serial.println();\n    }\n\n  //if +/- to change volume\n  } else if((key_command == '-') || (key_command == '+')) {\n    union twobyte mp3_vol; // create key_command existing variable that can be both word and double byte of left and right.\n    mp3_vol.word = MP3player.getVolume(); // returns a double uint8_t of Left and Right packed into int16_t\n\n    if(key_command == '-') { // note dB is negative\n      // assume equal balance and use byte[1] for math\n      if(mp3_vol.byte[1] &gt;= 254) { // range check\n        mp3_vol.byte[1] = 254;\n      } else {\n        mp3_vol.byte[1] += 2; // keep it simpler with whole dB's\n      }\n    } else {\n      if(mp3_vol.byte[1] &lt;= 2) { // range check\n        mp3_vol.byte[1] = 2;\n      } else {\n        mp3_vol.byte[1] -= 2;\n      }\n    }\n    // push byte[1] into both left and right assuming equal balance.\n    MP3player.setVolume(mp3_vol.byte[1], mp3_vol.byte[1]); // commit new volume\n    Serial.print(F(\"Volume changed to -\"));\n    Serial.print(mp3_vol.byte[1]&gt;&gt;1, 1);\n    Serial.println(F(\"[dB]\"));\n\n  //if &lt; or &gt; to change Play Speed\n  } else if((key_command == '&gt;') || (key_command == '&lt;')) {\n    uint16_t playspeed = MP3player.getPlaySpeed(); // create key_command existing variable\n    // note playspeed of Zero is equal to ONE, normal speed.\n    if(key_command == '&gt;') { // note dB is negative\n      // assume equal balance and use byte[1] for math\n      if(playspeed &gt;= 254) { // range check\n        playspeed = 5;\n      } else {\n        playspeed += 1; // keep it simpler with whole dB's\n      }\n    } else {\n      if(playspeed == 0) { // range check\n        playspeed = 0;\n      } else {\n        playspeed -= 1;\n      }\n    }\n    MP3player.setPlaySpeed(playspeed); // commit new playspeed\n    Serial.print(F(\"playspeed to \"));\n    Serial.println(playspeed, DEC);\n\n  /* Alterativly, you could call a track by it's file name by using playMP3(filename);\n  But you must stick to 8.1 filenames, only 8 characters long, and 3 for the extension */\n  } else if(key_command == 'f' || key_command == 'F') {\n    uint32_t offset = 0;\n    if (key_command == 'F') {\n      offset = 2000;\n    }\n\n    //create a string with the filename\n    char trackName[] = \"track001.mp3\";\n\n#if USE_MULTIPLE_CARDS\n    sd.chvol(); // assign desired sdcard's volume.\n#endif\n    //tell the MP3 Shield to play that file\n    result = MP3player.playMP3(trackName, offset);\n    //check result, see readme for error codes.\n    if(result\u00a0!= 0) {\n      Serial.print(F(\"Error code: \"));\n      Serial.print(result);\n      Serial.println(F(\" when trying to play track\"));\n    }\n\n  /* Display the file on the SdCard */\n  } else if(key_command == 'd') {\n    if(!MP3player.isPlaying()) {\n      // prevent root.ls when playing, something locks the dump. but keeps playing.\n      // yes, I have tried another unique instance with same results.\n      // something about SdFat and its 500byte cache.\n      Serial.println(F(\"Files found (name date time size):\"));\n      sd.ls(LS_R | LS_DATE | LS_SIZE);\n    } else {\n      Serial.println(F(\"Busy Playing Files, try again later.\"));\n    }\n\n  /* Get and Display the Audio Information */\n  } else if(key_command == 'i') {\n    MP3player.getAudioInfo();\n\n  } else if(key_command == 'p') {\n    if( MP3player.getState() == playback) {\n      MP3player.pauseMusic();\n      Serial.println(F(\"Pausing\"));\n    } else if( MP3player.getState() == paused_playback) {\n      MP3player.resumeMusic();\n      Serial.println(F(\"Resuming\"));\n    } else {\n      Serial.println(F(\"Not Playing!\"));\n    }\n\n  } else if(key_command == 't') {\n    int8_t teststate = MP3player.enableTestSineWave(126);\n    if(teststate == -1) {\n      Serial.println(F(\"Un-Available while playing music or chip in reset.\"));\n    } else if(teststate == 1) {\n      Serial.println(F(\"Enabling Test Sine Wave\"));\n    } else if(teststate == 2) {\n      MP3player.disableTestSineWave();\n      Serial.println(F(\"Disabling Test Sine Wave\"));\n    }\n\n  } else if(key_command == 'S') {\n    Serial.println(F(\"Current State of VS10xx is.\"));\n    Serial.print(F(\"isPlaying() = \"));\n    Serial.println(MP3player.isPlaying());\n\n    Serial.print(F(\"getState() = \"));\n    switch (MP3player.getState()) {\n    case uninitialized:\n      Serial.print(F(\"uninitialized\"));\n      break;\n    case initialized:\n      Serial.print(F(\"initialized\"));\n      break;\n    case deactivated:\n      Serial.print(F(\"deactivated\"));\n      break;\n    case loading:\n      Serial.print(F(\"loading\"));\n      break;\n    case ready:\n      Serial.print(F(\"ready\"));\n      break;\n    case playback:\n      Serial.print(F(\"playback\"));\n      break;\n    case paused_playback:\n      Serial.print(F(\"paused_playback\"));\n      break;\n    case testing_memory:\n      Serial.print(F(\"testing_memory\"));\n      break;\n    case testing_sinewave:\n      Serial.print(F(\"testing_sinewave\"));\n      break;\n    }\n    Serial.println();\n\n   } else if(key_command == 'b') {\n    Serial.println(F(\"Playing Static MIDI file.\"));\n    MP3player.SendSingleMIDInote();\n    Serial.println(F(\"Ended Static MIDI file.\"));\n\n#if !defined(__AVR_ATmega32U4__)\n  } else if(key_command == 'm') {\n      uint16_t teststate = MP3player.memoryTest();\n    if(teststate == -1) {\n      Serial.println(F(\"Un-Available while playing music or chip in reset.\"));\n    } else if(teststate == 2) {\n      teststate = MP3player.disableTestSineWave();\n      Serial.println(F(\"Un-Available while Sine Wave Test\"));\n    } else {\n      Serial.print(F(\"Memory Test Results = \"));\n      Serial.println(teststate, HEX);\n      Serial.println(F(\"Result should be 0x83FF.\"));\n      Serial.println(F(\"Reset is needed to recover to normal operation\"));\n    }\n\n  } else if(key_command == 'e') {\n    uint8_t earspeaker = MP3player.getEarSpeaker();\n    if(earspeaker &gt;= 3){\n      earspeaker = 0;\n    } else {\n      earspeaker++;\n    }\n    MP3player.setEarSpeaker(earspeaker); // commit new earspeaker\n    Serial.print(F(\"earspeaker to \"));\n    Serial.println(earspeaker, DEC);\n\n  } else if(key_command == 'r') {\n    MP3player.resumeMusic(2000);\n\n  } else if(key_command == 'R') {\n    MP3player.stopTrack();\n    MP3player.vs_init();\n    Serial.println(F(\"Reseting VS10xx chip\"));\n\n  } else if(key_command == 'g') {\n    int32_t offset_ms = 20000; // Note this is just an example, try your own number.\n    Serial.print(F(\"jumping to \"));\n    Serial.print(offset_ms, DEC);\n    Serial.println(F(\"[milliseconds]\"));\n    result = MP3player.skipTo(offset_ms);\n    if(result\u00a0!= 0) {\n      Serial.print(F(\"Error code: \"));\n      Serial.print(result);\n      Serial.println(F(\" when trying to skip track\"));\n    }\n\n  } else if(key_command == 'k') {\n    int32_t offset_ms = -1000; // Note this is just an example, try your own number.\n    Serial.print(F(\"moving = \"));\n    Serial.print(offset_ms, DEC);\n    Serial.println(F(\"[milliseconds]\"));\n    result = MP3player.skip(offset_ms);\n    if(result\u00a0!= 0) {\n      Serial.print(F(\"Error code: \"));\n      Serial.print(result);\n      Serial.println(F(\" when trying to skip track\"));\n    }\n\n  } else if(key_command == 'O') {\n    MP3player.end();\n    Serial.println(F(\"VS10xx placed into low power reset mode.\"));\n\n  } else if(key_command == 'o') {\n    MP3player.begin();\n    Serial.println(F(\"VS10xx restored from low power reset mode.\"));\n\n  } else if(key_command == 'D') {\n    uint16_t diff_state = MP3player.getDifferentialOutput();\n    Serial.print(F(\"Differential Mode \"));\n    if(diff_state == 0) {\n      MP3player.setDifferentialOutput(1);\n      Serial.println(F(\"Enabled.\"));\n    } else {\n      MP3player.setDifferentialOutput(0);\n      Serial.println(F(\"Disabled.\"));\n    }\n\n  } else if(key_command == 'V') {\n    MP3player.setVUmeter(1);\n    Serial.println(F(\"Use \\\"No line ending\\\"\"));\n    Serial.print(F(\"VU meter = \"));\n    Serial.println(MP3player.getVUmeter());\n    Serial.println(F(\"Hit Any key to stop.\"));\n\n    while(!Serial.available()) {\n      union twobyte vu;\n      vu.word = MP3player.getVUlevel();\n      Serial.print(F(\"VU: L = \"));\n      Serial.print(vu.byte[1]);\n      Serial.print(F(\" / R = \"));\n      Serial.print(vu.byte[0]);\n      Serial.println(\" dB\");\n      delay(1000);\n    }\n    Serial.read();\n\n    MP3player.setVUmeter(0);\n    Serial.print(F(\"VU meter = \"));\n    Serial.println(MP3player.getVUmeter());\n\n  } else if(key_command == 'T') {\n    uint16_t TrebleFrequency = MP3player.getTrebleFrequency();\n    Serial.print(F(\"Former TrebleFrequency = \"));\n    Serial.println(TrebleFrequency, DEC);\n    if (TrebleFrequency &gt;= 15000) { // Range is from 0 - 1500Hz\n      TrebleFrequency = 0;\n    } else {\n      TrebleFrequency += 1000;\n    }\n    MP3player.setTrebleFrequency(TrebleFrequency);\n    Serial.print(F(\"New TrebleFrequency = \"));\n    Serial.println(MP3player.getTrebleFrequency(), DEC);\n\n  } else if(key_command == 'E') {\n    int8_t TrebleAmplitude = MP3player.getTrebleAmplitude();\n    Serial.print(F(\"Former TrebleAmplitude = \"));\n    Serial.println(TrebleAmplitude, DEC);\n    if (TrebleAmplitude &gt;= 7) { // Range is from -8 - 7dB\n      TrebleAmplitude = -8;\n    } else {\n      TrebleAmplitude++;\n    }\n    MP3player.setTrebleAmplitude(TrebleAmplitude);\n    Serial.print(F(\"New TrebleAmplitude = \"));\n    Serial.println(MP3player.getTrebleAmplitude(), DEC);\n\n  } else if(key_command == 'B') {\n    uint16_t BassFrequency = MP3player.getBassFrequency();\n    Serial.print(F(\"Former BassFrequency = \"));\n    Serial.println(BassFrequency, DEC);\n    if (BassFrequency &gt;= 150) { // Range is from 20hz - 150hz\n      BassFrequency = 0;\n    } else {\n      BassFrequency += 10;\n    }\n    MP3player.setBassFrequency(BassFrequency);\n    Serial.print(F(\"New BassFrequency = \"));\n    Serial.println(MP3player.getBassFrequency(), DEC);\n\n  } else if(key_command == 'C') {\n    uint16_t BassAmplitude = MP3player.getBassAmplitude();\n    Serial.print(F(\"Former BassAmplitude = \"));\n    Serial.println(BassAmplitude, DEC);\n    if (BassAmplitude &gt;= 15) { // Range is from 0 - 15dB\n      BassAmplitude = 0;\n    } else {\n      BassAmplitude++;\n    }\n    MP3player.setBassAmplitude(BassAmplitude);\n    Serial.print(F(\"New BassAmplitude = \"));\n    Serial.println(MP3player.getBassAmplitude(), DEC);\n\n  } else if(key_command == 'M') {\n    uint16_t monostate = MP3player.getMonoMode();\n    Serial.print(F(\"Mono Mode \"));\n    if(monostate == 0) {\n      MP3player.setMonoMode(1);\n      Serial.println(F(\"Enabled.\"));\n    } else {\n      MP3player.setMonoMode(0);\n      Serial.println(F(\"Disabled.\"));\n    }\n#endif\n\n  } else if(key_command == 'h') {\n    help();\n  }\n\n  // print prompt after key stroke has been processed.\n  Serial.print(F(\"Time since last command: \"));  \n  Serial.println((float) (millis() -  millis_prv)/1000, 2);  \n  millis_prv = millis();\n  Serial.print(F(\"Enter s,1-9,+,-,&gt;,&lt;,f,F,d,i,p,t,S,b\"));\n#if !defined(__AVR_ATmega32U4__)\n  Serial.print(F(\",m,e,r,R,g,k,O,o,D,V,B,C,T,E,M:\"));\n#endif\n  Serial.println(F(\",h\u00a0:\"));\n}\n\n//------------------------------------------------------------------------------\n/**\n * \\brief Print Help Menu.\n *\n * Prints a full menu of the commands available along with descriptions.\n */\nvoid help() {\n  Serial.println(F(\"Arduino SFEMP3Shield Library Example:\"));\n  Serial.println(F(\" courtesy of Bill Porter &amp; Michael P. Flaga\"));\n  Serial.println(F(\"COMMANDS:\"));\n  Serial.println(F(\" [1-9] to play a track\"));\n  Serial.println(F(\" [f] play track001.mp3 by filename example\"));\n  Serial.println(F(\" [F] same as [f] but with initial skip of 2 second\"));\n  Serial.println(F(\" [s] to stop playing\"));\n  Serial.println(F(\" [d] display directory of SdCard\"));\n  Serial.println(F(\" [+ or -] to change volume\"));\n  Serial.println(F(\" [&gt; or &lt;] to increment or decrement play speed by 1 factor\"));\n  Serial.println(F(\" [i] retrieve current audio information (partial list)\"));\n  Serial.println(F(\" [p] to pause.\"));\n  Serial.println(F(\" [t] to toggle sine wave test\"));\n  Serial.println(F(\" [S] Show State of Device.\"));\n  Serial.println(F(\" [b] Play a MIDI File Beep\"));\n#if !defined(__AVR_ATmega32U4__)\n  Serial.println(F(\" [e] increment Spatial EarSpeaker, default is 0, wraps after 4\"));\n  Serial.println(F(\" [m] perform memory test. reset is needed after to recover.\"));\n  Serial.println(F(\" [M] Toggle between Mono and Stereo Output.\"));\n  Serial.println(F(\" [g] Skip to a predetermined offset of ms in current track.\"));\n  Serial.println(F(\" [k] Skip a predetermined number of ms in current track.\"));\n  Serial.println(F(\" [r] resumes play from 2s from begin of file\"));\n  Serial.println(F(\" [R] Resets and initializes VS10xx chip.\"));\n  Serial.println(F(\" [O] turns OFF the VS10xx into low power reset.\"));\n  Serial.println(F(\" [o] turns ON the VS10xx out of low power reset.\"));\n  Serial.println(F(\" [D] to toggle SM_DIFF between inphase and differential output\"));\n  Serial.println(F(\" [V] Enable VU meter Test.\"));\n  Serial.println(F(\" [B] Increament bass frequency by 10Hz\"));\n  Serial.println(F(\" [C] Increament bass amplitude by 1dB\"));\n  Serial.println(F(\" [T] Increament treble frequency by 1000Hz\"));\n  Serial.println(F(\" [E] Increament treble amplitude by 1dB\"));\n#endif\n  Serial.println(F(\" [h] this help\"));\n}\n</code></pre> <p>5.Upload the Code.   </p> <p>6.Open the serial monitor with the baudrate 115200, with the commands you can control it what you want. </p>"},{"location":"Products/Shield/vs1053-mp3-shield.html#resources","title":"Resources","text":"<ul> <li>MP3Shield Library Demo code</li> <li>Mp3 Shield Detailed Introduction</li> <li>vs1053 Datasheet</li> </ul>"},{"location":"Products/Shield/wifi-shield.html","title":"WiFi Shield","text":""},{"location":"Products/Shield/wifi-shield.html#description","title":"Description","text":"<p>This Wifi Shield utilizes a RN171 wifi module to provide your Arduino/Crowduino with serial Ethernet's function and adds storage to your arduino project . It features an independent antenna which can cover a wider range and transmit stronger signals. With supports for common TCP, UDP and FTP communication protocols, this Wifi Shield can meet needs of most wireless network projects, like smart home networks, robot controls or personal weather stations, etc. We prepared an easy and convenient command set for this shield so that you can use neat and concise code to run the function. If you use the wifi function, it takes two pins to hook your device up to 802.11b/g wireless networks. If you use the storage, it takes SPI and a select pin to access to the SD.</p> <p>Model\uff1aACS17101S</p> <p></p>"},{"location":"Products/Shield/wifi-shield.html#features","title":"Features","text":"<ul> <li>Arduino, Crowduino, Seeeduino, Arduino Mega and Crowduino Mega compatible</li> <li>Host Data Rate up to 1 Mbps for UART, 2 Mbps over SPI slave</li> <li>UART serial port of RN171 on the Shield can be connected to Arduino by jumpers</li> <li>SPI pin of RN171 is just breakout</li> <li>Support SD card 2GB and 4GB.</li> <li>Secure WiFi authentication WEP-128, WPA-PSK (TKIP), WPA2-PSK (AES)</li> <li>Built-in networking applications: DHCP client, DNS client, ARP, ICMP ping, FTP, TELNET, HTTP, UDP, TC</li> <li>Dimensions(mm):68.6(L)x55.0(W)x23.5(H)</li> </ul>"},{"location":"Products/Shield/wifi-shield.html#specification","title":"Specification","text":"Items Min Typical Max Unit Voltage 3.3 5 5.5 v Current 25 80 500 mA Transmit power 0-10 dBm Frequency 2402~2480 MHz Network rate 1-11 Mbps for 802.11b/6-54Mbps for 802.11g Supported Card Type SD card(&lt;=2G); Micro SD card(&lt;=2G);"},{"location":"Products/Shield/wifi-shield.html#interface","title":"Interface","text":""},{"location":"Products/Shield/wifi-shield.html#usage","title":"Usage","text":"<ul> <li>hardware Installation</li> </ul> <p>Assemble these parts together like the picture below. and mount the shield onto your Arduino/Crowduino. </p> <ul> <li>Software Programming</li> </ul> <p>First you have to make sure that Arduino1.0 has already been installed on your computer.</p> <p>  Download the wifishield library here Wifi Shield.zip and unzip it into the libraries file of Arduino via this path: ..\\arduino-1.0\\libraries Open a new sketch in Arduino-1.0, then copy the following code to your sketch.</p> <pre><code>#include \"Wifly.h\"\n#include &lt;SoftwareSerial.h&gt;\nWiflyClass Wifly(2,3);\nvoid setup()\n{\n  Serial.begin(9600);//use the hardware serial to communicate with the PC\n  Wifly.init();//Initialize the wifishield\n  Wifly.setConfig(\"SSID\",\"PASSWORD\");//here to set the ssid and password of the Router\n  Wifly.join(\"SSID\");\n  Wifly.checkAssociated();\n  while(!Wifly.connect(\"192.168.1.164\",\"90\"));//connect the remote service\n  Wifly.writeToSocket(\"Connected!\");\n}\nvoid loop()\n{\n  if(Wifly.canReadFromSocket())\n  {\n    Serial.print(Wifly.readFromSocket());\n  }\n  if(Serial.available())\n  {\n    Wifly.print((char)Serial.read());\n  }\n}\n</code></pre> <p>You need to do some modifications on this sketch according to your specific configuration.</p>"},{"location":"Products/Shield/wifi-shield.html#debug-through-computer","title":"Debug through computer","text":""},{"location":"Products/Shield/wifi-shield.html#resource","title":"Resource","text":"<p>Design files wifiShield library RN171 Datasheet If some function isn't included in the library, This User Manul may help.</p>"},{"location":"Products/Shield/wireless-sdshield.html","title":"Wireless SDshield","text":""},{"location":"Products/Shield/wireless-sdshield.html#description","title":"Description","text":"<p>The Wireless SD card shield allows an Arduino board to communicate wirelessly using a wireless module, and adds storage to your Arduino project. The XBee Shield is based on the Xbee modules from Digi,but can use any Bee module with the same footprint. It supports SD, SDHC, or MicroSD TF cards. Use the on-board toggle switch to select the SD card type. And when you want plug a sd card on it, you should select the switch to the right direction. About the wireless module, it only uses you two pins from PD0 to PD7. With two jump wire, you can select the wireless module to communicate with USB-to-serial converter or with the microcontroller. About the storage, It just uses the SPI ports of Arduino to transfer data with SD , and you can plug more other shield on it. When using the SD Library to access the card, Pin 10 is CS and cannot be used otherwise. SPI also relies on pins 11, 12, and 13 for communication.</p> <p>Model: (Discontinued)</p> <p></p>"},{"location":"Products/Shield/wireless-sdshield.html#features","title":"Features","text":"<ul> <li>Arduino , Seeeduino and Crowduino compatible</li> <li>XBee, Bluetooth Bee, RF Bee and other with the same footprint module compatible</li> <li>SD card, Micro SD card and SDHC card supportable</li> <li>3.3v and 5v logical voltage compatible</li> <li>2.6~3.6v DC power supply</li> </ul>"},{"location":"Products/Shield/wireless-sdshield.html#specification","title":"Specification","text":"Item Min Typical Max Unit Voltage 2.7 3.3 3.6 V Current 0.159 40 200 mA Supported Card Type SD card(&lt;=2G); Micro SD card(&lt;=2G); SDHC card(&lt;=16G) / Supported Card Type XBee, Bluetooth Bee, RF Bee, GPS Bee. / Dimension mm Net Weight g"},{"location":"Products/Shield/wireless-sdshield.html#interface-function","title":"Interface function","text":"<p>PD0~PD7 \u2013Can be used to communicate with USB-to-serial converter or with the microcontroller. D10 \u2013 Used for CS of SPI D11 \u2013 Used for MOSI of SP ID12 \u2013 Used for MISO of SPI D13 \u2013 Used for SCK of SPI</p>"},{"location":"Products/Shield/wireless-sdshield.html#usage","title":"Usage","text":""},{"location":"Products/Shield/wireless-sdshield.html#how-to-use-sd-card","title":"How to use SD card","text":""},{"location":"Products/Shield/wireless-sdshield.html#hardware-installation","title":"Hardware Installation","text":"<p>Plug the SD Card Shield onto the Arduino; Insert your SD card into the socket and make sure the card selector pointing to the right way (Standard card or micro).And then Connect the Arduinoto PC using USB cable.  Warning: Don't insert SD card and microSD card into the shield at the same time.</p>"},{"location":"Products/Shield/wireless-sdshield.html#software","title":"Software","text":"<p>Format the SD card as FAT16 or FAT32 if it is necessary. </p> <ol> <li>Download the SdFat for Arduino1.0 or SD for Arduino1.0.</li> <li>Uncompress this package and put it in Arduino-1.0 program: ..\\arduino-1.0\\libraries.</li> <li>Select the corresponding Arduino board, like Arduino UNO or Duemilanove or others, and the COM port you are using.</li> <li>Upload the sketch Sdinfo.The follow image is the result from the serial monitor. Of course you can upload other sketches.</li> </ol> <p></p> <ol> <li>If an error occurs, please recheck all the steps, and make sure the SD card is working. If none of that fixes the problem, try replacing the SD card.</li> </ol> <p>With that done, you can take a look at the other library examples for reading, writing. Enjoy!</p>"},{"location":"Products/Shield/wireless-sdshield.html#how-to-use-xbee-shield","title":"How to use XBee shield","text":"<p>Please visit our XBee Shield wiki</p>"},{"location":"Products/Shield/wireless-sdshield.html#faq","title":"FAQ","text":"<ol> <li> <p>SD card can't be initialized .</p> </li> <li> <p>Please reformat SD card to FAT/FTA32 .If it still can't work ,suggest to download the SD Formatter and reformat SD card by this software.</p> </li> </ol>"},{"location":"Products/Shield/wireless-sdshield.html#resource","title":"Resource","text":"<ul> <li>Wireless SD Shield Schematic in PDF</li> <li>SD library for Arduino1.0.</li> <li>SdFat for Arduino1.0</li> <li>SoftwareSerial library for arduino1.0</li> </ul>"},{"location":"Products/Shield/xbee-shield.html","title":"XBee shield","text":""},{"location":"Products/Shield/xbee-shield.html#description","title":"Description","text":"<p>XBee shield will make interfacing multiple Bee-style (XBee, GPS Bee, Bluetooth Bee and etc) easier than ever before.it has large proto area, customizable software serial port for easier prototyping.</p> <p>Model: (Discontinued)</p> <p></p>"},{"location":"Products/Shield/xbee-shield.html#features","title":"Features","text":"<ul> <li>3 indicator LED\uff08ON/Sleep, RSSI, ASSOC\uff09for XBee</li> <li>Full size with free drills</li> <li>Reset button for XBee and base board</li> <li>Provide maximal 500mA under 3.3V</li> <li>Full break out for XBee</li> <li>Full break out for the base board</li> <li>Standard Shield footprint</li> <li>Dimensions(mm):69.0(L)x54.5(W)x23.5(H)</li> </ul>"},{"location":"Products/Shield/xbee-shield.html#cautions","title":"Cautions","text":"<p>The warnings and wrong operations possible cause dangerous.</p>"},{"location":"Products/Shield/xbee-shield.html#interface-function","title":"Interface function","text":""},{"location":"Products/Shield/xbee-shield.html#usage","title":"Usage","text":"<p>1.Hardware connection Plug the Xbee into the XBee shield,then plug the XBee shield into Arduino/Crowduino. </p> <p>2.Two jumpers are required to connect Bee_TX, Bee_RX with Digital by using Bee like this:</p> <p></p> <p>Bee_TX, Bee_RX can be connected to PD0<sub>PD7(PD2</sub>PD7 is used as soft serial and PD0,PD1 is used as hardware serial.). This demo will show you how to communicate between two Arduino/Crowduino through Bluetooth Shield.For the special applications, you may need to write the code by yourself. 3.Download the Arduino Library for the shield, and unzip it into the path of Arduino Libraries. This library includes two sketch, one for Master and the other for Slave. Make sure Software Serial Library is included as well.</p> <p></p> <p>4.Upload the sketch Master.ino and Slave.ino to two separate Arduino/Crowduino. 4.1 Master  </p> <pre><code>/* Upload this sketch into Arduio and press reset*/\n#include &lt;SoftwareSerial.h&gt;   //Software Serial Port\n\n#define RxD 6\n#define TxD 7\n\nString retSymb = \"+RTINQ=\";//start symble when there's any return\nString slaveName = \";CrowBTSlave\";//Set the Slave name ,caution that ';'must be included\nint nameIndex = 0;\nint addrIndex = 0;\n\nString recvBuf;\nString slaveAddr;\n\nString connectCmd = \"\\r\\n+CONN=\";\n\nSoftwareSerial blueToothSerial(RxD,TxD);\n\nvoid setup() \n{ \n  Serial.begin(38400);\n  pinMode(RxD, INPUT);\n  pinMode(TxD, OUTPUT);\n  setupBlueToothConnection();\n  //wait 1s and flush the serial buffer\n  delay(1000);\n  Serial.flush();\n  blueToothSerial.flush();\n} \n\nvoid loop() \n{\n  char recvChar;\n  while(1){\n    if(blueToothSerial.available()){//check if there's any data sent from the remote bluetooth shield\n      recvChar = blueToothSerial.read();\n      Serial.print(recvChar);\n    }\n    if(Serial.available()){//check if there's any data sent from the local serial terminal, you can add the other applications here\n      recvChar  = Serial.read();\n      blueToothSerial.print(recvChar);\n    }   \n } \n} \n\nvoid setupBlueToothConnection()\n{\n  blueToothSerial.begin(38400); //Set BluetoothBee BaudRate to default baud rate 38400\n  blueToothSerial.print(\"\\r\\n+STWMOD=1\\r\\n\");//set the bluetooth work in master mode\n  blueToothSerial.print(\"\\r\\n+STNA=CrowBTMaster\\r\\n\");//set the bluetooth name as \"CrowBTMaster\"\n  blueToothSerial.print(\"\\r\\n+STPIN=0000\\r\\n\");//Set Master pincode\"0000\",it must be same as Slave pincode\n  blueToothSerial.print(\"\\r\\n+STAUTO=0\\r\\n\");// Auto-connection is forbidden here\n  delay(2000); // This delay is required.\n  blueToothSerial.flush();\n  blueToothSerial.print(\"\\r\\n+INQ=1\\r\\n\");//make the master inquire\n  Serial.println(\"Master is inquiring!\");\n  delay(2000); // This delay is required.\n\n  //find the target slave\n  char recvChar;\n  while(1){\n    if(blueToothSerial.available()){\n      recvChar = blueToothSerial.read();\n      recvBuf += recvChar;\n      nameIndex = recvBuf.indexOf(slaveName);//get the position of slave name\n      //nameIndex -= 1;//decrease the ';' in front of the slave name, to get the position of the end of the slave address\n      if ( nameIndex\u00a0!= -1 ){\n        //Serial.print(recvBuf);\n    addrIndex = (recvBuf.indexOf(retSymb,(nameIndex - retSymb.length()- 18) ) + retSymb.length());//get the start position of slave address         \n    slaveAddr = recvBuf.substring(addrIndex, nameIndex);//get the string of slave address           \n    break;\n      }\n    }\n  }\n  //form the full connection command\n  connectCmd += slaveAddr;\n  connectCmd += \"\\r\\n\";\n  int connectOK = 0;\n  Serial.print(\"Connecting to slave:\");\n  Serial.print(slaveAddr);\n  Serial.println(slaveName);\n  //connecting the slave till they are connected\n  do{\n    blueToothSerial.print(connectCmd);//send connection command\n    recvBuf = \"\";\n    while(1){\n      if(blueToothSerial.available()){\n        recvChar = blueToothSerial.read();\n    recvBuf += recvChar;\n    if(recvBuf.indexOf(\"CONNECT:OK\")\u00a0!= -1){\n          connectOK = 1;\n      Serial.println(\"Connected!\");\n      blueToothSerial.print(\"Connected!\");\n      break;\n    }else if(recvBuf.indexOf(\"CONNECT:FAIL\")\u00a0!= -1){\n      Serial.println(\"Connect again!\");\n      break;\n    }\n      }\n    }\n  }while(0 == connectOK);\n}\n</code></pre> <p>4.2 Slave</p> <pre><code>#include &lt;SoftwareSerial.h&gt;   //Software Serial Port\n#define RxD 6\n#define TxD 7\n\nSoftwareSerial blueToothSerial(RxD,TxD);\n\nvoid setup() \n{ \n  Serial.begin(38400);\n  pinMode(RxD, INPUT);\n  pinMode(TxD, OUTPUT);\n  setupBlueToothConnection(); \n} \n\nvoid loop() \n{ \n  char recvChar;\n  while(1){\n    if(blueToothSerial.available()){//check if there's any data sent from the remote bluetooth shield\n      recvChar = blueToothSerial.read();\n      Serial.print(recvChar);\n    }\n    if(Serial.available()){//check if there's any data sent from the local serial terminal, you can add the other applications here\n      recvChar  = Serial.read();\n      blueToothSerial.print(recvChar);\n    }\n  }\n} \n\nvoid setupBlueToothConnection()\n{\n  blueToothSerial.begin(38400); //Set BluetoothBee BaudRate to default baud rate 38400\n  blueToothSerial.print(\"\\r\\n+STWMOD=0\\r\\n\"); //set the bluetooth work in slave mode\n  blueToothSerial.print(\"\\r\\n+STNA=CrowBTSlave\\r\\n\"); //set the bluetooth name as \"CrowBTSlave\"\n  blueToothSerial.print(\"\\r\\n+STPIN=0000\\r\\n\");//Set SLAVE pincode\"0000\"\n  blueToothSerial.print(\"\\r\\n+STOAUT=1\\r\\n\"); // Permit Paired device to connect me\n  blueToothSerial.print(\"\\r\\n+STAUTO=0\\r\\n\"); // Auto-connection should be forbidden here\n  delay(2000); // This delay is required.\n  blueToothSerial.print(\"\\r\\n+INQ=1\\r\\n\"); //make the slave bluetooth inquirable \n  Serial.println(\"The slave bluetooth is inquirable!\");\n  delay(2000); // This delay is required.\n  blueToothSerial.flush();\n}\n</code></pre> <p>5.Open two Serial Terminals on your PC, with the setting of 38400, 8, 1, N. Open the two Com Port of Arduino/Crowduino.  Then you will see the red and green LED on the board are flashing in interval indicting they are inquiring for each other. After a while only the green led is flashing one time per second indicating that they are connected. There's also some information printed on the two terminal as following.</p> <p></p> <p>6.The connection is successful now, and you can type any character on the Serial Terminal and send to each .</p>"},{"location":"Products/Shield/xbee-shield.html#how-to-use-soft-serial-to-communicate-with-xbee","title":"How to use Soft Serial to communicate with Xbee","text":"<ol> <li>Download the SoftwareSerial library,</li> <li>Put it in Arduino IDE Libraries folder(arduino\\libraries);</li> </ol>"},{"location":"Products/Shield/xbee-shield.html#version","title":"Version","text":"v1.0 2012/11/07 Initial release"},{"location":"Products/Shield/xbee-shield.html#resource","title":"Resource","text":"<ul> <li>Schematic of XBee Shield</li> <li>SoftwareSerial library for arduino1.0</li> </ul>"},{"location":"Products/Shield/xbee-shield.html#faq","title":"FAQ","text":"<p>You can list your questions here or contact with our technology support email techsupport@elecrow.com.</p>"},{"location":"Products/Wireless/24g-wireless-nrf24l01.html","title":"2.4G Wireless nRF24L01","text":""},{"location":"Products/Wireless/24g-wireless-nrf24l01.html#description","title":"Description","text":"<p>This module uses the newest 2.4GHz transceiver from Nordic Semiconductor, the nRF24L01.This transceiver IC operates in the 2.4GHz band and has many new features! Take all the coolness of the nRF2401A and add some extra pipelines, buffers, and an auto-retransmit feature.</p> <p>Model:WRF24010R</p> <p></p>"},{"location":"Products/Wireless/24g-wireless-nrf24l01.html#features","title":"Features","text":"<ul> <li>Worldwide license-free 2.4GHz ISM band operation</li> <li>250kbps, 1Mbps and 2Mbps on-air data-rate options</li> <li>Enhanced ShockBurst?hardware protocol accelerator</li> <li>Ultra low power consumption?months to years of battery lifetime</li> </ul>"},{"location":"Products/Wireless/24g-wireless-nrf24l01.html#specification","title":"Specification","text":"<ul> <li>Power supply : 1.9~3.6V</li> <li>IO port working voltage : 0~3.3v / 5v</li> <li>Transmitting rate : +7dB</li> <li>Receiving sensitivity : -90dB</li> <li>Transmission range : 250m in open area</li> <li>Dimension : 15x29mm</li> </ul>"},{"location":"Products/Wireless/24g-wireless-nrf24l01.html#usage","title":"Usage","text":""},{"location":"Products/Wireless/24g-wireless-nrf24l01.html#with-arduino","title":"With Arduino","text":"<p>The nRF24L01 module can be controlled in many ways, one of which is Arduino or Crowduino. We tried and tested it, then made a demo. Let\u2019s see how it works with Arduino. 1.Hardware Connection. First of all, of course, you need two Arduino boards and at least two RF modules, one to transmit and the other to receive.  </p> <p> </p> <p>2.Download the code below into the TX Arduino (transmit) \u2014 This code will drive the nRF24L01 module to send out data form 0\u00d700 to 0xFF .</p> <pre><code>/** ******************************************************************\n**   SPI-compatible                                                 **\n**   CS -  to digital pin 8                                         **\n**   CSN - to digital pin 9   (SS pin)                              **\n**   IRQ - to digital pin 10  (IRQ pin)                             **\n**   MOSI - to digital pin 11 (MOSI pin)                            **\n**   MISO - to digital pin 12 (MISO pin)                            **\n**   CLK - to digital pin 13  (SCK pin)                             **\n*********************************************************************/\n\n#include &lt;SPI.h&gt;\n#include \"API.h\"\n#include \"nRF24L01.h\"\n\n//***************************************************\n#define TX_ADR_WIDTH    5   // 5 unsigned chars TX(RX) address width\n#define TX_PLOAD_WIDTH  32  // 32 unsigned chars TX payload\n\nunsigned char TX_ADDRESS[TX_ADR_WIDTH]  = \n{\n  0x34,0x43,0x10,0x10,0x01\n}; // Define a static TX address\n\nunsigned char rx_buf[TX_PLOAD_WIDTH] = {0}; // initialize value\nunsigned char tx_buf[TX_PLOAD_WIDTH] = {0};\n//***************************************************\nvoid setup() \n{\n  Serial.begin(9600);\n  pinMode(CE,  OUTPUT);\n  pinMode(CSN, OUTPUT);\n  pinMode(IRQ, INPUT);\n  SPI.begin();\n  delay(50);\n  init_io();                        // Initialize IO port\n  unsigned char sstatus=SPI_Read(STATUS);\n  Serial.println(\"*******************TX_Mode Start****************************\");\n  Serial.print(\"status = \");    \n  Serial.println(sstatus,HEX);     // There is read the mode\u2019s status register, the default value should be \u2018E\u2019\n  TX_Mode();                       // set TX mode\n}\n\nvoid loop() \n{\n  int k = 0;\n  for(;;)\n  {\n    for(int i=0; i&lt;32; i++)\n        tx_buf[i] = k++;        \n    unsigned char sstatus = SPI_Read(STATUS);                   // read register STATUS's value\n    if(sstatus&amp;TX_DS)                                           // if receive data ready (TX_DS) interrupt\n    {\n      SPI_RW_Reg(FLUSH_TX,0);                                  \n      SPI_Write_Buf(WR_TX_PLOAD,tx_buf,TX_PLOAD_WIDTH);       // write playload to TX_FIFO\n    }\n    if(sstatus&amp;MAX_RT)                                         // if receive data ready (MAX_RT) interrupt, this is retransmit than  SETUP_RETR                          \n    {\n      SPI_RW_Reg(FLUSH_TX,0);\n      SPI_Write_Buf(WR_TX_PLOAD,tx_buf,TX_PLOAD_WIDTH);      // disable standy-mode\n    }\n    SPI_RW_Reg(WRITE_REG+STATUS,sstatus);                     // clear RX_DR or TX_DS or MAX_RT interrupt flag\n    delay(1000);\n  }\n}\n\n//**************************************************\n// Function: init_io();\n// Description:\n// flash led one time,chip enable(ready to TX or RX Mode),\n// Spi disable,Spi clock line init high\n//**************************************************\nvoid init_io(void)\n{\n  digitalWrite(IRQ, 0);\n  digitalWrite(CE, 0);          // chip enable\n  digitalWrite(CSN, 1);                 // Spi disable  \n}\n\n/************************************************************************\n**   * Function: SPI_RW();\n * \n * Description:\n * Writes one unsigned char to nRF24L01, and return the unsigned char read\n * from nRF24L01 during write, according to SPI protocol\n************************************************************************/\nunsigned char SPI_RW(unsigned char Byte)\n{\n  return SPI.transfer(Byte);\n}\n\n/**************************************************/\n\n/**************************************************\n * Function: SPI_RW_Reg();\n * \n * Description:\n * Writes value 'value' to register 'reg'\n/**************************************************/\nunsigned char SPI_RW_Reg(unsigned char reg, unsigned char value)\n{\n  unsigned char status;\n\n  digitalWrite(CSN, 0);                   // CSN low, init SPI transaction\n  SPI_RW(reg);                            // select register\n  SPI_RW(value);                          // ..and write value to it..\n  digitalWrite(CSN, 1);                   // CSN high again\n\n  return(status);                   // return nRF24L01 status unsigned char\n}\n/**************************************************/\n\n/**************************************************\n * Function: SPI_Read();\n * \n * Description:\n * Read one unsigned char from nRF24L01 register, 'reg'\n/**************************************************/\nunsigned char SPI_Read(unsigned char reg)\n{\n  unsigned char reg_val;\n\n  digitalWrite(CSN, 0);                // CSN low, initialize SPI communication...\n  SPI_RW(reg);                         // Select register to read from..\n  reg_val = SPI_RW(0);                 // ..then read register value\n  digitalWrite(CSN, 1);                // CSN high, terminate SPI communication\n\n  return(reg_val);                     // return register value\n}\n/**************************************************/\n\n/**************************************************\n * Function: SPI_Read_Buf();\n * \n * Description:\n * Reads 'unsigned chars' #of unsigned chars from register 'reg'\n * Typically used to read RX payload, Rx/Tx address\n/**************************************************/\nunsigned char SPI_Read_Buf(unsigned char reg, unsigned char *pBuf, unsigned char bytes)\n{\n  unsigned char sstatus,i;\n\n  digitalWrite(CSN, 0);                   // Set CSN low, init SPI tranaction\n  sstatus = SPI_RW(reg);            // Select register to write to and read status unsigned char\n\n  for(i=0;i&lt;bytes;i++)\n  {\n    pBuf[i] = SPI_RW(0);    // Perform SPI_RW to read unsigned char from nRF24L01\n  }\n\n  digitalWrite(CSN, 1);                   // Set CSN high again\n\n  return(sstatus);                  // return nRF24L01 status unsigned char\n}\n/**************************************************/\n\n/**************************************************\n * Function: SPI_Write_Buf();\n * \n * Description:\n * Writes contents of buffer '*pBuf' to nRF24L01\n * Typically used to write TX payload, Rx/Tx address\n/**************************************************/\nunsigned char SPI_Write_Buf(unsigned char reg, unsigned char *pBuf, unsigned char bytes)\n{\n  unsigned char sstatus,i;\n\n  digitalWrite(CSN, 0);                   // Set CSN low, init SPI tranaction\n  sstatus = SPI_RW(reg);             // Select register to write to and read status unsigned char\n  for(i=0;i&lt;bytes; i++)             // then write all unsigned char in buffer(*pBuf)\n  {\n    SPI_RW(*pBuf++);\n  }\n  digitalWrite(CSN, 1);                   // Set CSN high again\n  return(sstatus);                  // return nRF24L01 status unsigned char\n}\n/**************************************************/\n\n/**************************************************\n * Function: TX_Mode();\n * \n * Description:\n * This function initializes one nRF24L01 device to\n * TX mode, set TX address, set RX address for auto.ack,\n * fill TX payload, select RF channel, datarate &amp; TX pwr.\n * PWR_UP is set, CRC(2 unsigned chars) is enabled, &amp; PRIM:TX.\n * \n * ToDo: One high pulse(&gt;10us) on CE will now send this\n * packet and expext an acknowledgment from the RX device.\n **************************************************/\nvoid TX_Mode(void)\n{\n  digitalWrite(CE, 0);\n\n  SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // Writes TX_Address to nRF24L01\n  SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // RX_Addr0 same as TX_Adr for Auto.Ack\n\n  SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0\n  SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0\n  SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...\n  SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40\n  SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR\n  SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);     // Set PWR_UP bit, enable CRC(2 unsigned chars) &amp; Prim:TX. MAX_RT &amp; TX_DS enabled..\n  SPI_Write_Buf(WR_TX_PLOAD,tx_buf,TX_PLOAD_WIDTH);\n\n  digitalWrite(CE, 1);\n} \n</code></pre> <p>3.Download the code below into the RX Arduino (receive) \u2013 This code will drive the nFR24L01 module to receive the data that transmit form the TX module and print it to serial port.</p> <pre><code>/** ******************************************************************\n**   SPI-compatible                                                 **\n**   CS -  to digital pin 8                                         **\n**   CSN - to digital pin 9   (SS pin)                              **\n**   IRQ - to digital pin 10  (IRQ pin)                             **\n**   MOSI - to digital pin 11 (MOSI pin)                            **\n**   MISO - to digital pin 12 (MISO pin)                            **\n**   CLK - to digital pin 13  (SCK pin)                             **\n*********************************************************************/\n\n#include &lt;SPI.h&gt;\n#include \"API.h\"\n#include \"nRF24L01.h\"\n\n//***************************************************\n#define TX_ADR_WIDTH    5   // 5 unsigned chars TX(RX) address width\n#define TX_PLOAD_WIDTH  32  // 32 unsigned chars TX payload\n\nunsigned char TX_ADDRESS[TX_ADR_WIDTH]  = \n{\n  0x34,0x43,0x10,0x10,0x01\n}; // Define a static TX address\n\nunsigned char rx_buf[TX_PLOAD_WIDTH] = {0}; // initialize value\nunsigned char tx_buf[TX_PLOAD_WIDTH] = {0};\n//***************************************************\nvoid setup() \n{\n  Serial.begin(9600);\n  pinMode(CE,  OUTPUT);\n  pinMode(CSN, OUTPUT);\n  pinMode(IRQ, INPUT);\n  SPI.begin();\n  delay(50);\n  init_io();                        // Initialize IO port\n  unsigned char sstatus=SPI_Read(STATUS);\n  Serial.println(\"*******************RX_Mode Start****************************\");\n  Serial.print(\"status = \");    \n  Serial.println(sstatus,HEX);     // There is read the mode\u2019s status register, the default value should be \u2018E\u2019\n  RX_Mode();                        // set RX mode\n}\n\nvoid loop() \n{\n  for(;;)\n  {\n    unsigned char status = SPI_Read(STATUS);                         // read register STATUS's value\n    if(status&amp;RX_DR)                                                 // if receive data ready (TX_DS) interrupt\n    {\n      SPI_Read_Buf(RD_RX_PLOAD, rx_buf, TX_PLOAD_WIDTH);             // read playload to rx_buf\n      SPI_RW_Reg(FLUSH_RX,0);                                        // clear RX_FIFO\n      for(int i=0; i&lt;32; i++)\n      {\n          Serial.print(\" \");\n          Serial.print(rx_buf[i],HEX);                              // print rx_buf\n      }\n      Serial.println(\" \");\n    }\n    SPI_RW_Reg(WRITE_REG+STATUS,status);                             // clear RX_DR or TX_DS or MAX_RT interrupt flag\n    delay(1000);\n  }\n}\n\n//**************************************************\n// Function: init_io();\n// Description:\n// flash led one time,chip enable(ready to TX or RX Mode),\n// Spi disable,Spi clock line init high\n//**************************************************\nvoid init_io(void)\n{\n  digitalWrite(IRQ, 0);\n  digitalWrite(CE, 0);          // chip enable\n  digitalWrite(CSN, 1);                 // Spi disable  \n}\n\n/************************************************************************\n**   * Function: SPI_RW();\n * \n * Description:\n * Writes one unsigned char to nRF24L01, and return the unsigned char read\n * from nRF24L01 during write, according to SPI protocol\n************************************************************************/\nunsigned char SPI_RW(unsigned char Byte)\n{\n  return SPI.transfer(Byte);\n}\n\n/**************************************************/\n\n/**************************************************\n * Function: SPI_RW_Reg();\n * \n * Description:\n * Writes value 'value' to register 'reg'\n/**************************************************/\nunsigned char SPI_RW_Reg(unsigned char reg, unsigned char value)\n{\n  unsigned char status;\n\n  digitalWrite(CSN, 0);                   // CSN low, init SPI transaction\n  SPI_RW(reg);                            // select register\n  SPI_RW(value);                          // ..and write value to it..\n  digitalWrite(CSN, 1);                   // CSN high again\n\n  return(status);                   // return nRF24L01 status unsigned char\n}\n/**************************************************/\n\n/**************************************************\n * Function: SPI_Read();\n * \n * Description:\n * Read one unsigned char from nRF24L01 register, 'reg'\n/**************************************************/\nunsigned char SPI_Read(unsigned char reg)\n{\n  unsigned char reg_val;\n\n  digitalWrite(CSN, 0);                // CSN low, initialize SPI communication...\n  SPI_RW(reg);                         // Select register to read from..\n  reg_val = SPI_RW(0);                 // ..then read register value\n  digitalWrite(CSN, 1);                // CSN high, terminate SPI communication\n\n  return(reg_val);                     // return register value\n}\n/**************************************************/\n\n/**************************************************\n * Function: SPI_Read_Buf();\n * \n * Description:\n * Reads 'unsigned chars' #of unsigned chars from register 'reg'\n * Typically used to read RX payload, Rx/Tx address\n/**************************************************/\nunsigned char SPI_Read_Buf(unsigned char reg, unsigned char *pBuf, unsigned char bytes)\n{\n  unsigned char sstatus,i;\n\n  digitalWrite(CSN, 0);                   // Set CSN low, init SPI tranaction\n  sstatus = SPI_RW(reg);            // Select register to write to and read status unsigned char\n\n  for(i=0;i&lt;bytes;i++)\n  {\n    pBuf[i] = SPI_RW(0);    // Perform SPI_RW to read unsigned char from nRF24L01\n  }\n\n  digitalWrite(CSN, 1);                   // Set CSN high again\n\n  return(sstatus);                  // return nRF24L01 status unsigned char\n}\n/**************************************************/\n\n/**************************************************\n * Function: SPI_Write_Buf();\n * \n * Description:\n * Writes contents of buffer '*pBuf' to nRF24L01\n * Typically used to write TX payload, Rx/Tx address\n/**************************************************/\nunsigned char SPI_Write_Buf(unsigned char reg, unsigned char *pBuf, unsigned char bytes)\n{\n  unsigned char sstatus,i;\n\n  digitalWrite(CSN, 0);                   // Set CSN low, init SPI tranaction\n  sstatus = SPI_RW(reg);             // Select register to write to and read status unsigned char\n  for(i=0;i&lt;bytes; i++)             // then write all unsigned char in buffer(*pBuf)\n  {\n    SPI_RW(*pBuf++);\n  }\n  digitalWrite(CSN, 1);                   // Set CSN high again\n  return(sstatus);                  // return nRF24L01 status unsigned char\n}\n/**************************************************/\n\nvoid RX_Mode(void)\n{\n  digitalWrite(CE, 0);\n\n  SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // Use the same address on the RX device as the TX device\n  SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0\n  SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0\n  SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40\n  SPI_RW_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH); // Select same RX payload width as TX Payload width\n  SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR\n  SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);     // Set PWR_UP bit, enable CRC(2 unsigned chars) &amp; Prim:RX. RX_DR enabled..\n  digitalWrite(CE, 1);                             // Set CE pin high to enable RX device\n  //  This device is now ready to receive one packet of 16 unsigned chars payload from a TX device sending to address\n  //  '3443101001', with auto acknowledgment, retransmit count of 10, RF channel 40 and datarate = 2Mbps.\n} \n</code></pre> <p>4.Now power on both Arduino , and connect the RX one to PC via USB. Open the IDE serial port monitor , change the baud rate to 9600 bps , and you can see the data that received. </p>"},{"location":"Products/Wireless/315433mhz-rf-link-kit.html","title":"315/433Mhz RF Link Kit","text":""},{"location":"Products/Wireless/315433mhz-rf-link-kit.html#introduction","title":"Introduction","text":"<p>The 315/433MHz RF link kit is consisted of transmitter and receiver, popular used for remote control. It will be easy to use this kit to transmit data via RF With the suggestArduino VirtualWire library. Model: WRF43301R WRF31501R </p> <p></p>"},{"location":"Products/Wireless/315433mhz-rf-link-kit.html#specification","title":"Specification","text":"<ul> <li>Frequency: 315/433Mhz</li> <li>Modulation: ASK</li> <li>Receiver Data Output: High - \u00bd Vcc, Low - 0.7v</li> <li>Transmitor Input Voltage: 3-12V (high voltage = more transmitting power)</li> </ul>"},{"location":"Products/Wireless/315433mhz-rf-link-kit.html#usage","title":"Usage","text":""},{"location":"Products/Wireless/315433mhz-rf-link-kit.html#hardware","title":"Hardware","text":"<p>There are one transmitter and one receiver in this kit, you will needs 2 arduino main board in your application. one for coding and senting the message, with the RF transmitter, the other one for receiving message and decoding. the whole system working as belows:  </p>"},{"location":"Products/Wireless/315433mhz-rf-link-kit.html#programming","title":"Programming","text":"<p>with the virtualwire arduino library,please refer to how to install library and upload program, it would be easy to transmit data or message from the transmitter to receiver. on the transmitter, After connecting the transmitter data pin to arduino D2 and installing the virtualwire library, program the arduino as below:</p> <pre><code>#include &lt;VirtualWire.h&gt;\nint RF_TX_PIN = 2;\nvoid setup()\n{\n  vw_set_tx_pin(RF_TX_PIN); // Setup transmit pin\n  vw_setup(2000); // Transmission speed in bits per second.\n}\n\nvoid loop()\n{\n  const char *msg = \"hi,RFlink\";\n  vw_send((uint8_t *)msg, strlen(msg));  // Send 'hello' every 400ms.\n  delay(400);\n}\n</code></pre> <p>on the receiver, After connecting the receiver data pin to arduino D2 and installing the virtualwire library, program the arduino as below:</p> <pre><code>#include &lt;VirtualWire.h&gt; \nint RF_RX_PIN = 2;\nvoid setup()\n{\n  Serial.begin(9600);//init the UART between arduino and PC\n  Serial.println(\"setup\");\n  vw_set_rx_pin(RF_RX_PIN); \n  vw_setup(2000); // Transmission speed in bits per second.\n  vw_rx_start(); // Start the PLL receiver.\n}\n\nvoid loop()\n{\n  uint8_t buf[VW_MAX_MESSAGE_LEN];\n  uint8_t buflen = VW_MAX_MESSAGE_LEN;\n  if(vw_get_message(buf, &amp;buflen)) // non-blocking I/O\n  {\n    int i;\n    // Message with a good checksum received, dump HEX\n    Serial.print(\"Got: \");\n    for(i = 0; i &lt; buflen; ++i)\n    {\n    // Serial.write(buf[i]);//print the received message to the serial\n    }\n    Serial.println(\"\");\n  }\n}\n</code></pre>"},{"location":"Products/Wireless/315433mhz-rf-link-kit.html#resource","title":"Resource","text":"<p>File:Virtualwire.zip Virtualwire Introduction</p>"},{"location":"Products/Wireless/433mhz-rf-transceiver-cc1101-module.html","title":"433MHz RF Transceiver CC1101 Module","text":""},{"location":"Products/Wireless/433mhz-rf-transceiver-cc1101-module.html#introduction","title":"Introduction","text":"<p>The CC1101 is a low-cost sub- 1 GHz transceiver designed for very low-power wireless applications. The circuit is mainly intended for the ISM (Industrial, Scientific and Medical) and SRD (Short Range Device) frequency bands at 315, 433, 868, and 915 MHz, but can easily be programmed for operation at otherfrequencies in the 300-348 MHz, 387-464 MHz and 779-928 MHz bands.</p> <p>Model: WRF11010R </p> <p></p>"},{"location":"Products/Wireless/433mhz-rf-transceiver-cc1101-module.html#features","title":"Features:","text":"<ul> <li>Input voltage :3.3V</li> <li>Maximum operating speed: 500kbps, support 2-FSK, GFSK and MSK modulation</li> <li>Can be modify the baud rate, power, frequency and other related parameters by software</li> <li>High sensitivity (&lt;1.2kbps -110dDm, 0.1% packet error rate)</li> <li>CRC error detection and built-in hardware address multipoint communication control</li> <li>Lower current consumption (RX, 15.6mA; 2.4kbps, 433MHz)</li> <li>Programmable control of output power, maximum output power of +10dBm</li> <li>Standard 2.0mm DIP pitch interfaces for embedded applications</li> <li>Separate 64-byte RX and TX data FIFO</li> <li>Transmission distance: 300 - 500 meters (Depending on the specific situation of the environment and communication baud rate, etc.)</li> </ul>"},{"location":"Products/Wireless/433mhz-rf-transceiver-cc1101-module.html#usage","title":"Usage","text":"<p>1.Hardware connection  2.Download the code below into the TX Arduino (transmit) \u2014 This code will drive the 433MHz RF Transceiver CC1101 module to send out data form 0 to 10.</p> <pre><code>#include &lt;ELECHOUSE_CC1101.h&gt;\n\n#define size 11\n\nbyte TX_buffer[size]={0};\nbyte i;\n\nvoid setup()\n{\n  Serial.begin(9600);\n  ELECHOUSE_cc1101.Init();\n  for(i=0;i&lt;size;i++)\n  {\n     TX_buffer[i]=i;\n  }\n}\n\nvoid loop()\n{\n  ELECHOUSE_cc1101.SendData(TX_buffer,size);\n  delay(1);\n}\n</code></pre> <p>3.Download the code below into the RX Arduino (receive) \u2013 This code will drive the 433MHz RF Transceiver CC1101 module to receive the data that transmit form the TX module and print it to serial port.</p> <pre><code> #include &lt;ELECHOUSE_CC1101.h&gt;\n\n void setup()\n{\n  Serial.begin(9600);\n  ELECHOUSE_cc1101.Init();\n  ELECHOUSE_cc1101.SetReceive();\n}\n\nbyte RX_buffer[11]={0};\nbyte size,i,flag;\n\nvoid loop()\n{\n  if(ELECHOUSE_cc1101.CheckReceiveFlag())\n  {\n    size=ELECHOUSE_cc1101.ReceiveData(RX_buffer);\n    for(i=0;i&lt;size;i++)\n    {\n      Serial.print(RX_buffer[i],DEC);\n      Serial.print(\"  \");\n    }\n    Serial.println(\"\");\n    ELECHOUSE_cc1101.SetReceive();\n  }\n}\n</code></pre> <p>4.Now power on both Arduino , and connect the RX one to PC via USB. Open the IDE serial port monitor , change the baud rate to 9600 bps , and you can see the data that received. </p>"},{"location":"Products/Wireless/433mhz-rf-transceiver-cc1101-module.html#resource","title":"Resource","text":"<ul> <li>CC101 module demo code for Arduino</li> <li>CC101 module demo code for Arduino of panstamp</li> </ul>"},{"location":"Products/Wireless/433mhz-rf-transceiver-cc1101-module.html#related-links","title":"Related links","text":"<p>Click here to buy 433MHz RF Transceiver CC1101 Module</p>"},{"location":"Products/Wireless/crowbot-bolt-programmable-smart-robot-car-steam-robot-kit.html","title":"CrowBot-BOLT Programmable Smart Robot Car STEAM Robot Kit","text":""},{"location":"Products/Wireless/crowbot-bolt-programmable-smart-robot-car-steam-robot-kit.html#description","title":"Description","text":"<p>CrowBot BOLT is a programmable educational car that can be easily used. It is small and beautiful in shape and easy to install. It uses ESP32-WROVER-B as the MCU, with Bluetooth and WiFi functions. It has a wealth of sensors(such as photodiode, ultrasonic sensor, line Tracking Sensor), can quickly realize functions such as light chasing, line tracking, obstacle avoidance, remote control, and light show.  As an entry-level ESP32 programmed educational robot, the cool and cute Bolt makes robot programming learning, and teaching easy and fun. It comes with 16 lessons in three languages (Letscode, Ardunio, MicroPython), provides rich programming, and allows programming beginner to learn to program in the fun of creativity. It has reserved 2 expansion interfaces, which can be expanded and used with 150+ kinds of Crowtail modules. Unlimited creativity, waiting for you to discover!</p> <p>Model: CRB00157C </p> <p> </p>"},{"location":"Products/Wireless/crowbot-bolt-programmable-smart-robot-car-steam-robot-kit.html#features","title":"Features","text":"<ul> <li>Support for Letscode, Arduino and Python</li> <li>Can be controlled by IR remote control, Bluetooth/WiFi control</li> <li>The car is equipped with ultrasonic, infrared tracking, photodiode and other sensors</li> <li>With 16 courses, it is the best choice for the entry of ESP32</li> <li>Equipped with on board indicator LED , through which you can intuitively understand the working condition of the car</li> <li>4Pin I2C and A/D ports are reserved to connect Crowtail sensors, creating more possibilities</li> <li>Compatible with CrowBot Joystick, provides various methods to play</li> </ul>"},{"location":"Products/Wireless/crowbot-bolt-programmable-smart-robot-car-steam-robot-kit.html#specifications","title":"Specifications","text":"Item Description MCU ESP32-WROVER-B\uff088MB\uff09 Programmatically Letscode\uff0cArdunio\uff0cMicropython Control method Bluetooth Remote Control/Infrared Remote Control Input Button, Photodiode, Infrared Receiving Module, Ultrasonic Sensor, Line Tracking Sensor Output Buzzer, Programmable RGB_LED, Motor Wifi&amp;Bluetooth Supported Photodiode Can realize the function of chasing light or avoiding light Ultrasonic Sensor(with RGB; 4Pin interface) When an obstacle is detected, the driving route of the car can be corrected to avoid the obstacle RPR220 Line Tracking Sensor Can make the car move along the dark/black lines, intelligently judge and correct the driving path Buzzer Can make the car sing, bringing a more direct sensory experience Programmable RGB_LED Through programming, it can show colorful lights in different scenes Infrared receiver(3Pin interface) Receive infrared remote control signals to realize remote control Interface Type c x1\uff0cI2C port x1\uff0cA/D port x1 Motor type N20 Gear Motor(drive: L9110S) Operating Voltage 3.3V~5V(AAA battery x4) Work Temperature -10\u2103~+55\u2103 Dimension 128*92*64mm Weight 200g"},{"location":"Products/Wireless/crowbot-bolt-programmable-smart-robot-car-steam-robot-kit.html#io-port-diagram","title":"IO Port Diagram","text":""},{"location":"Products/Wireless/crowbot-bolt-programmable-smart-robot-car-steam-robot-kit.html#top-overview","title":"Top Overview","text":""},{"location":"Products/Wireless/crowbot-bolt-programmable-smart-robot-car-steam-robot-kit.html#bottom-overview","title":"Bottom Overview","text":""},{"location":"Products/Wireless/crowbot-bolt-programmable-smart-robot-car-steam-robot-kit.html#usage","title":"Usage","text":""},{"location":"Products/Wireless/crowbot-bolt-programmable-smart-robot-car-steam-robot-kit.html#crowbot-bolt-assambly-instrustion","title":"CrowBot-BOLT Assambly Instrustion","text":"<p>STEP 1: Preparation STEP 2: Install battery holder Install 4 AAA batteries into the battery holder, and plug the cable of the battery holder into the 2pin battery(BAT) interface on the chassis.  STEP 3: Install acrylic plates STEP 4: Mounting wheels STEP 5: Connect ultrasonic sensor Insert the 4pin ultrasonic sensor into ultrasonic module interface on the chassis.  </p> <p>STEP 6: Finish! </p>"},{"location":"Products/Wireless/crowbot-bolt-programmable-smart-robot-car-steam-robot-kit.html#factory-procedures","title":"Factory Procedures","text":"<p>The factory default program has been loaded and you can play with CrowBot out of the box. But if you need to re-flash the program, please download Factory_source_code.zip to re-upload the factory default program. The folder contains a tutorial on how to set the Arduino for ESP32. </p>"},{"location":"Products/Wireless/crowbot-bolt-programmable-smart-robot-car-steam-robot-kit.html#programming","title":"Programming","text":"<p>Play with Python</p> <p> Please download Python_Lessons_Code.zip. The folder contains 16 Python Lessons code, firmware and tutorial. Play with Arduino</p> <p> Please download Arduino_Lessons_Code.zip. The folder contains 16 Arduino Lessons code, library needed and tutorial. Play with Letscode</p> <p> Please download Letscode_Lessons_Code.zip.  </p>"},{"location":"Products/Wireless/crowbot-bolt-programmable-smart-robot-car-steam-robot-kit.html#faqs","title":"FAQS","text":"<p>Q1: How to connect CrowBot with Joystick via Bluetooth? A1: Turn on the Bluetooth switch on CrowBot board.</p> <p> Q2: How to re-upload the factory default code to CrowBot and joystick? A2: 1. The factory default program files are ino files. Please download Factory_source_code.zip to re-upload the factory default program. The folder contains a tutorial on how to set the Arduino for ESP32.</p> <p>Q3: Is there any WiFi connection tutorial or code? A3: We didn't write the code to realize WiFi control function, you can DIY a project to make it come true.</p> <p>You can post your questions on our forum or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Wireless/crowbot-bolt-programmable-smart-robot-car-steam-robot-kit.html#resources","title":"Resources","text":"<p>Crowbot_BOLT_Beginner's_Guide.pdf Python_Lessons_Code.zip Arduino_Lessons_Code.zip Letscode_Lessons_Code.zip Factory_Source_Code.zip CrowBot-BOLT_Schematic.pdf CrowBot-BOLT_Eagle file_SCH&amp;PCB Joystick_for_Crowbot_Eagle file_SCH&amp;PCB CrowBot-BOLT_Structural_3D_Model_stp.zip </p>"},{"location":"Products/Wireless/esp32s-wifi-ble-board.html","title":"ESP32S WIFI BLE Board","text":""},{"location":"Products/Wireless/esp32s-wifi-ble-board.html#description","title":"Description","text":"<p>ESP-WROOM-32 is a powerful, generic Wi-Fi+BT+BLE MCU module that targets a wide variety of applications, ranging from low-power sensor networks to the most demanding tasks, such as voice encoding, music streaming and MP3 decoding. The development board breaks out all the module\u2019s pins to 0.1\u2033 headers and provides a CP2102 USB-TTL serial adapter, programming and reset buttons, and a power regulator to supply the ESP32 with a stable 3.3 V. Espressif doubled-down on the CPU resources for the ESP32 with a dual core, running at 160MHz and tons more pins and peripherals. The integration of Bluetooth, Bluetooth LE and Wi-Fi ensures that a wide range of applications can be targeted, and that the module is future proof: using Wi-Fi allows a large physical range and direct connection to the internet through a Wi-Fi router, while using Bluetooth allows the user to conveniently connect to the phone or broadcast low energy beacons for its detection. The sleep current of the ESP32 chip is less than 5 \u00b5A, making it suitable for battery powered and wearable electronics applications. ESP-WROOM-32 supports data rates of up to 150 Mbps, and 22 dBm output power at the PA to ensure the widest physical range. As such the chip does offer industry-leading specifications and the best performance for electronic integration, range, power consumption, and connectivity.</p> <p>Model: ARS01119B</p> <p></p> <p></p>"},{"location":"Products/Wireless/esp32s-wifi-ble-board.html#features","title":"Features","text":"<ul> <li>Support SD card, UART, SPI, SDIO, I2C, LED PWM, Motor PWM,I2S, I2C, IRUSB-UART</li> <li>Integrated 802.11 BGN WiFi transceiver and dual-mode Bluetooth (classic and BLE)</li> <li>Hardware accelerated encryption (AES, SHA2, ECC, RSA-4096)</li> <li>Integrated LiPo Battery Charger.</li> <li>10-electrode capacitive touch support</li> <li>Up to 240MHz clock frequency and 520kB internal SRAM</li> <li>Support Station/SoftAP/SoftAP+Station/P2P</li> <li>Support WPA/WPA2/WPA2-Enterprise/WPS</li> <li>include bridge, reset- and boot-mode buttons, LDO regulator and a micro-USB connector.</li> <li>Support AES/RSA/ECC/SHA</li> </ul>"},{"location":"Products/Wireless/esp32s-wifi-ble-board.html#specifications","title":"Specifications","text":"Item Value FCC/CE/IC/TELEC/KCC/SRRC/NCC Wi-Fi 802.11 b/g/n/e/i (802.11n up to 150 Mbps) A- MPDU and A-MSDU aggregation and 0.4 _s guard interval support Frequency range 2.4 ~ 2.5 GHz Bluetooth v4.2 BR/EDR and BLE specification Radio NZIF receiver with -98 dBm sensitivity, Class-1, class-2 and class-3 transmitter Audio CVSD and SBC On-board clock 40 MHz crystal Operating voltage 2.2 ~ 3.6V Operating current Average: 80 mA Operating temperature range -40\u00b0C ~ 85\u00b0C"},{"location":"Products/Wireless/esp32s-wifi-ble-board.html#interface","title":"Interface","text":""},{"location":"Products/Wireless/esp32s-wifi-ble-board.html#platforms-supported","title":"Platforms Supported","text":"Arduino"},{"location":"Products/Wireless/esp32s-wifi-ble-board.html#usage","title":"Usage","text":""},{"location":"Products/Wireless/esp32s-wifi-ble-board.html#hardware","title":"Hardware","text":"<p>STEP1 Prepare the below stuffs:  </p> ESP32 WIFI BLE Board Get one now <p>STEP2 Connect WIFI BLE Board to PC via a Mini USB cable.</p>"},{"location":"Products/Wireless/esp32s-wifi-ble-board.html#software","title":"Software","text":"<ul> <li>1.Build arduino Programming Environment (Windows)</li> </ul> <p>STEP1 Put the espressif folder in the C:/Program Files (x86)/Arduino/ Hardware path (depending on which disk your Arduino is installed on, Arduino is installed on disk D as shown below)  STEP2 Double click open the get.exe(arduino-1.6.5\\hardware\\espressif\\esp32\\tools)  Loading board data, wait a moment. Automatically closes after downloading  STEP3 After downloading, you can see that there are two additional folders \"dist\" and \"Xtensa-esp32-elf\" in the folder. The programming environment has been built. </p> <ul> <li>2.Wifi test</li> </ul> <p>STEP1 Open the Arduino IDE, click \"Tools\", select the board type \"ESP32 Dev Module\", set baud rate 115200, and select the correct port.  STEP2 Load the code \"wifitest. Ino\". Modify according to your own Settings  </p> <pre><code>// Copyright 2015-2016 Espressif Systems (Shanghai) PTE LTD\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Sketch shows how to switch between WiFi and BlueTooth or use both\n// Button is attached between GPIO 0 and GND and modes are switched with each press\n\n#include \"WiFi.h\"\n#define STA_SSID \"Elecrow\"\n#define STA_PASS \"elecrow2014\"\n#define AP_SSID  \"esp32\"\n\nenum { STEP_STA, STEP_AP,  STEP_END };\n\nvoid onButton(){\n  static uint32_t step = STEP_STA;\n  switch(step){\n  /*  case STEP_BTON://BT Only\n      Serial.println(\"** Starting BT\");\n      btStart();\n    break;\n    case STEP_BTOFF://All Off\n      Serial.println(\"** Stopping BT\");\n      btStop();\n    break;*/\n    case STEP_STA://STA Only\n      Serial.println(\"** Starting STA\");\n      WiFi.begin(STA_SSID, STA_PASS);\n    break;\n    case STEP_AP://AP Only\n      Serial.println(\"** Stopping STA\");\n      WiFi.mode(WIFI_AP);\n      Serial.println(\"** Starting AP\");\n      WiFi.softAP(AP_SSID);\n    break;\n  /* case STEP_AP_STA://AP+STA\n      Serial.println(\"** Starting STA\");\n      WiFi.begin(STA_SSID, STA_PASS);\n    break;\n    case STEP_OFF://All Off\n      Serial.println(\"** Stopping WiFi\");\n      WiFi.mode(WIFI_OFF);\n    break;\n    case STEP_BT_STA://BT+STA\n      Serial.println(\"** Starting STA+BT\");\n      WiFi.begin(STA_SSID, STA_PASS);\n      btStart();\n    break;\n    case STEP_END://All Off\n      Serial.println(\"** Stopping WiFi+BT\");\n      WiFi.mode(WIFI_OFF);\n      btStop();\n    break;*/\n    default:\n    break;\n  }\n  if(step == STEP_END){\n    step = STEP_STA;\n  } else {\n    step++;\n  }\n  //little debounce\n  delay(100);\n}\n\nvoid WiFiEvent(WiFiEvent_t event){\n    switch(event) {\n        case SYSTEM_EVENT_AP_START:\n            Serial.println(\"AP Started\");\n            WiFi.softAPsetHostname(AP_SSID);\n            break;\n        case SYSTEM_EVENT_AP_STOP:\n            Serial.println(\"AP Stopped\");\n            break;\n        case SYSTEM_EVENT_STA_START:\n            Serial.println(\"STA Started\");\n            WiFi.setHostname(AP_SSID);\n            break;\n        case SYSTEM_EVENT_STA_CONNECTED:\n            Serial.println(\"STA Connected\");\n            WiFi.enableIpV6();\n            break;\n        case SYSTEM_EVENT_AP_STA_GOT_IP6:\n            Serial.print(\"STA IPv6: \");\n            Serial.println(WiFi.localIPv6());\n            break;\n        case SYSTEM_EVENT_STA_GOT_IP:\n            Serial.print(\"STA IPv4: \");\n            Serial.println(WiFi.localIP());\n            break;\n        case SYSTEM_EVENT_STA_DISCONNECTED:\n            Serial.println(\"STA Disconnected\");\n            break;\n        case SYSTEM_EVENT_STA_STOP:\n            Serial.println(\"STA Stopped\");\n            break;\n        default:\n            break;\n    }\n}\n\nvoid setup() {\n    Serial.begin(115200);\n    pinMode(0, INPUT_PULLUP);\n    WiFi.onEvent(WiFiEvent);\n    Serial.print(\"ESP32 SDK: \");\n    Serial.println(ESP.getSdkVersion());\n    Serial.println(\"Press the button to select the next mode\");\n}\n\nvoid loop() {\n    static uint8_t lastPinState = 1;\n    uint8_t pinState = digitalRead(0);\n    if(!pinState &amp;&amp; lastPinState){\n        onButton();\n    }\n    lastPinState = pinState;\n}\n</code></pre> <p>STEP3 Start the Serial Monitor(If printing error, press reset button \"EN\" several more times to refresh or re-upload code connection. )  STEP4 Press the BOOT key to set the mode to STASTION. The serial port print is as follows  If the information in the red box is displayed, the connection is successful. STEP5 Press the BOOT key again to set the module to AP mode. The serial port print is as follows:  The AP mode is set successfully. Open the WiFi function of the mobile phone, find the account named \"ESP32\" to connect. (Press EN to reset several times or power on again if printing error occurs.)</p>"},{"location":"Products/Wireless/esp32s-wifi-ble-board.html#faq","title":"FAQ","text":"<p>You can list you question here or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Wireless/esp32s-wifi-ble-board.html#resources","title":"Resources","text":"<p>ESP32S_WIFI_BLE_Board-V1.0-Eagle.zip Wifitest.zip SoftwareFiles.zip</p>"},{"location":"Products/Wireless/nrf24l012bpa2blna-wireless-module.html","title":"NRF24L01+PA+LNA Wireless Module","text":""},{"location":"Products/Wireless/nrf24l012bpa2blna-wireless-module.html#description","title":"Description","text":"<p>NRF24L01P + PA + LNA wireless module operates in Free license 2.4G ISM band, you can do point to point application and can also be composed of star network. The Data transmission chip NRF24L01+, and match with the department's professional design, Add the the chip of power PA and LNA, RF switch, band pass filter composed of a professional full two-way RF power amplifier, making the effective communication distance has been greatly expanded. Small size: 45.54mm x 16.46mm, easy to embed in any space-constrained products, customers can use the SPI port of Arduino or any other MCU to control NRF24L01P + PA + LNA, Wireless module to complete long distance wireless data transmission system desige. Model:WRW24015R</p> <p></p>"},{"location":"Products/Wireless/nrf24l012bpa2blna-wireless-module.html#features","title":"Features","text":"<ul> <li>It uses 2.4G global open ISM band, with license free.</li> <li>Transmit power is greater than +20 dbm.Support six-channel data reception. 2Mbit/s speed makes high-quality VoIP possible Low</li> <li>operating voltage: 2.7 to 3.6V</li> <li>Multi-frequency points: 125 frequency points meet the needs of multi-point communications and frequency hopping.</li> <li>Low cost: integrated with high-speed signal processing parts associated with RF protocol, such as: automatically re-send lost packets and generate acknowledge signal; SPI interface facilitates the communication with MCU I/O port.</li> <li>Facilitate the development for customers, without development RF part.</li> <li>Software programming is fully compatible with NRF24L01 modules.Size: 37.4mm * 16.6mm</li> <li>Applications: remote control, telemetry, wireless meter reading, access control systems, residential paging, industrial data acquisition systems, wireless tags, identification, contactless RF smart card, small wireless data terminal, fire</li> <li>safety systems, wireless remote control systems, bio-signal acquisition, wireless 232, wireless 422/485 data communications.</li> </ul>"},{"location":"Products/Wireless/nrf24l012bpa2blna-wireless-module.html#specification","title":"Specification","text":"<ul> <li>Operating Frequency: 2400MHz ~ 2524MHz</li> <li>Modulation: GMSK</li> <li>Transmit power: more than +20 dbm, 50\u03a9</li> <li>Receiver sensitivity:-95dbm</li> <li>Operating voltage: 2.7V ~ 3.6V</li> <li>Max Emission current: 115mA</li> <li>Max Receive current: 45mA</li> <li>Operating temperature: -45 degrees to +85 degrees</li> <li>Storage temperature: -45 degrees to +125 degrees</li> <li>Gain Of PA: 20 dB</li> <li>Gain Of LNA: 10 dB</li> </ul>"},{"location":"Products/Wireless/nrf24l012bpa2blna-wireless-module.html#interface-function","title":"Interface Function","text":"PIN Function Direction Pin1 GND Ground Pin2 VCC VCC, 1.9~3.6V Pin3 CE Operating Mode,RX/TX In Pin4 CSN SPI chip select In Pin5 SCK SPI clock In Pin6 MOSI SPI Input In Pin7 MISO SPI Output Out Pin8 IRQ Interrupt Output Out"},{"location":"Products/Wireless/nrf24l012bpa2blna-wireless-module.html#usage","title":"Usage","text":""},{"location":"Products/Wireless/nrf24l012bpa2blna-wireless-module.html#with-arduino","title":"With Arduino","text":"<p>The nRF24L01 module can be controlled in many ways, one of which is Arduino or Crowduino. We tried and tested it, then made a demo. Let\u2019s see how it works with Arduino. 1.Hardware Connection. First of all, of course, you need two Arduino boards and at least two RF modules, one to transmit and the other to receive.</p> <p> </p> <p>2.Download the code below into the TX Arduino (transmit) \u2014 This code will drive the nRF24L01 module to send out data form 0\u00d700 to 0xFF .</p> <pre><code>/** ******************************************************************\n**   SPI-compatible                                                 **\n**   CS -  to digital pin 8                                         **\n**   CSN - to digital pin 9   (SS pin)                              **\n**   IRQ - to digital pin 10  (IRQ pin)                             **\n**   MOSI - to digital pin 11 (MOSI pin)                            **\n**   MISO - to digital pin 12 (MISO pin)                            **\n**   CLK - to digital pin 13  (SCK pin)                             **\n*********************************************************************/\n\n#include &lt;SPI.h&gt;\n#include \"API.h\"\n#include \"nRF24L01.h\"\n\n//***************************************************\n#define TX_ADR_WIDTH    5   // 5 unsigned chars TX(RX) address width\n#define TX_PLOAD_WIDTH  32  // 32 unsigned chars TX payload\n\nunsigned char TX_ADDRESS[TX_ADR_WIDTH]  = \n{\n  0x34,0x43,0x10,0x10,0x01\n}; // Define a static TX address\n\nunsigned char rx_buf[TX_PLOAD_WIDTH] = {0}; // initialize value\nunsigned char tx_buf[TX_PLOAD_WIDTH] = {0};\n//***************************************************\nvoid setup() \n{\n  Serial.begin(9600);\n  pinMode(CE,  OUTPUT);\n  pinMode(CSN, OUTPUT);\n  pinMode(IRQ, INPUT);\n  SPI.begin();\n  delay(50);\n  init_io();                        // Initialize IO port\n  unsigned char sstatus=SPI_Read(STATUS);\n  Serial.println(\"*******************TX_Mode Start****************************\");\n  Serial.print(\"status = \");    \n  Serial.println(sstatus,HEX);     // There is read the mode\u2019s status register, the default value should be \u2018E\u2019\n  TX_Mode();                       // set TX mode\n}\n\nvoid loop() \n{\n  int k = 0;\n  for(;;)\n  {\n    for(int i=0; i&lt;32; i++)\n        tx_buf[i] = k++;        \n    unsigned char sstatus = SPI_Read(STATUS);                   // read register STATUS's value\n    if(sstatus&amp;TX_DS)                                           // if receive data ready (TX_DS) interrupt\n    {\n      SPI_RW_Reg(FLUSH_TX,0);                                  \n      SPI_Write_Buf(WR_TX_PLOAD,tx_buf,TX_PLOAD_WIDTH);       // write playload to TX_FIFO\n    }\n    if(sstatus&amp;MAX_RT)                                         // if receive data ready (MAX_RT) interrupt, this is retransmit than  SETUP_RETR                          \n    {\n      SPI_RW_Reg(FLUSH_TX,0);\n      SPI_Write_Buf(WR_TX_PLOAD,tx_buf,TX_PLOAD_WIDTH);      // disable standy-mode\n    }\n    SPI_RW_Reg(WRITE_REG+STATUS,sstatus);                     // clear RX_DR or TX_DS or MAX_RT interrupt flag\n    delay(1000);\n  }\n}\n\n//**************************************************\n// Function: init_io();\n// Description:\n// flash led one time,chip enable(ready to TX or RX Mode),\n// Spi disable,Spi clock line init high\n//**************************************************\nvoid init_io(void)\n{\n  digitalWrite(IRQ, 0);\n  digitalWrite(CE, 0);          // chip enable\n  digitalWrite(CSN, 1);                 // Spi disable  \n}\n\n/************************************************************************\n**   * Function: SPI_RW();\n * \n * Description:\n * Writes one unsigned char to nRF24L01, and return the unsigned char read\n * from nRF24L01 during write, according to SPI protocol\n************************************************************************/\nunsigned char SPI_RW(unsigned char Byte)\n{\n  return SPI.transfer(Byte);\n}\n\n/**************************************************/\n\n/**************************************************\n * Function: SPI_RW_Reg();\n * \n * Description:\n * Writes value 'value' to register 'reg'\n/**************************************************/\nunsigned char SPI_RW_Reg(unsigned char reg, unsigned char value)\n{\n  unsigned char status;\n\n  digitalWrite(CSN, 0);                   // CSN low, init SPI transaction\n  SPI_RW(reg);                            // select register\n  SPI_RW(value);                          // ..and write value to it..\n  digitalWrite(CSN, 1);                   // CSN high again\n\n  return(status);                   // return nRF24L01 status unsigned char\n}\n/**************************************************/\n\n/**************************************************\n * Function: SPI_Read();\n * \n * Description:\n * Read one unsigned char from nRF24L01 register, 'reg'\n/**************************************************/\nunsigned char SPI_Read(unsigned char reg)\n{\n  unsigned char reg_val;\n\n  digitalWrite(CSN, 0);                // CSN low, initialize SPI communication...\n  SPI_RW(reg);                         // Select register to read from..\n  reg_val = SPI_RW(0);                 // ..then read register value\n  digitalWrite(CSN, 1);                // CSN high, terminate SPI communication\n\n  return(reg_val);                     // return register value\n}\n/**************************************************/\n\n/**************************************************\n * Function: SPI_Read_Buf();\n * \n * Description:\n * Reads 'unsigned chars' #of unsigned chars from register 'reg'\n * Typically used to read RX payload, Rx/Tx address\n/**************************************************/\nunsigned char SPI_Read_Buf(unsigned char reg, unsigned char *pBuf, unsigned char bytes)\n{\n  unsigned char sstatus,i;\n\n  digitalWrite(CSN, 0);                   // Set CSN low, init SPI tranaction\n  sstatus = SPI_RW(reg);            // Select register to write to and read status unsigned char\n\n  for(i=0;i&lt;bytes;i++)\n  {\n    pBuf[i] = SPI_RW(0);    // Perform SPI_RW to read unsigned char from nRF24L01\n  }\n\n  digitalWrite(CSN, 1);                   // Set CSN high again\n\n  return(sstatus);                  // return nRF24L01 status unsigned char\n}\n/**************************************************/\n\n/**************************************************\n * Function: SPI_Write_Buf();\n * \n * Description:\n * Writes contents of buffer '*pBuf' to nRF24L01\n * Typically used to write TX payload, Rx/Tx address\n/**************************************************/\nunsigned char SPI_Write_Buf(unsigned char reg, unsigned char *pBuf, unsigned char bytes)\n{\n  unsigned char sstatus,i;\n\n  digitalWrite(CSN, 0);                   // Set CSN low, init SPI tranaction\n  sstatus = SPI_RW(reg);             // Select register to write to and read status unsigned char\n  for(i=0;i&lt;bytes; i++)             // then write all unsigned char in buffer(*pBuf)\n  {\n    SPI_RW(*pBuf++);\n  }\n  digitalWrite(CSN, 1);                   // Set CSN high again\n  return(sstatus);                  // return nRF24L01 status unsigned char\n}\n/**************************************************/\n\n/**************************************************\n * Function: TX_Mode();\n * \n * Description:\n * This function initializes one nRF24L01 device to\n * TX mode, set TX address, set RX address for auto.ack,\n * fill TX payload, select RF channel, datarate &amp; TX pwr.\n * PWR_UP is set, CRC(2 unsigned chars) is enabled, &amp; PRIM:TX.\n * \n * ToDo: One high pulse(&gt;10us) on CE will now send this\n * packet and expext an acknowledgment from the RX device.\n **************************************************/\nvoid TX_Mode(void)\n{\n  digitalWrite(CE, 0);\n\n  SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // Writes TX_Address to nRF24L01\n  SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // RX_Addr0 same as TX_Adr for Auto.Ack\n\n  SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0\n  SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0\n  SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...\n  SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40\n  SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR\n  SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);     // Set PWR_UP bit, enable CRC(2 unsigned chars) &amp; Prim:TX. MAX_RT &amp; TX_DS enabled..\n  SPI_Write_Buf(WR_TX_PLOAD,tx_buf,TX_PLOAD_WIDTH);\n\n  digitalWrite(CE, 1);\n} \n</code></pre> <p>3.Download the code below into the RX Arduino (receive) \u2013 This code will drive the nFR24L01 module to receive the data that transmit form the TX module and print it to serial port.</p> <pre><code>/** ******************************************************************\n**   SPI-compatible                                                 **\n**   CS -  to digital pin 8                                         **\n**   CSN - to digital pin 9   (SS pin)                              **\n**   IRQ - to digital pin 10  (IRQ pin)                             **\n**   MOSI - to digital pin 11 (MOSI pin)                            **\n**   MISO - to digital pin 12 (MISO pin)                            **\n**   CLK - to digital pin 13  (SCK pin)                             **\n*********************************************************************/\n\n#include &lt;SPI.h&gt;\n#include \"API.h\"\n#include \"nRF24L01.h\"\n\n//***************************************************\n#define TX_ADR_WIDTH    5   // 5 unsigned chars TX(RX) address width\n#define TX_PLOAD_WIDTH  32  // 32 unsigned chars TX payload\n\nunsigned char TX_ADDRESS[TX_ADR_WIDTH]  = \n{\n  0x34,0x43,0x10,0x10,0x01\n}; // Define a static TX address\n\nunsigned char rx_buf[TX_PLOAD_WIDTH] = {0}; // initialize value\nunsigned char tx_buf[TX_PLOAD_WIDTH] = {0};\n//***************************************************\nvoid setup() \n{\n  Serial.begin(9600);\n  pinMode(CE,  OUTPUT);\n  pinMode(CSN, OUTPUT);\n  pinMode(IRQ, INPUT);\n  SPI.begin();\n  delay(50);\n  init_io();                        // Initialize IO port\n  unsigned char sstatus=SPI_Read(STATUS);\n  Serial.println(\"*******************RX_Mode Start****************************\");\n  Serial.print(\"status = \");    \n  Serial.println(sstatus,HEX);     // There is read the mode\u2019s status register, the default value should be \u2018E\u2019\n  RX_Mode();                        // set RX mode\n}\n\nvoid loop() \n{\n  for(;;)\n  {\n    unsigned char status = SPI_Read(STATUS);                         // read register STATUS's value\n    if(status&amp;RX_DR)                                                 // if receive data ready (TX_DS) interrupt\n    {\n      SPI_Read_Buf(RD_RX_PLOAD, rx_buf, TX_PLOAD_WIDTH);             // read playload to rx_buf\n      SPI_RW_Reg(FLUSH_RX,0);                                        // clear RX_FIFO\n      for(int i=0; i&lt;32; i++)\n      {\n          Serial.print(\" \");\n          Serial.print(rx_buf[i],HEX);                              // print rx_buf\n      }\n      Serial.println(\" \");\n    }\n    SPI_RW_Reg(WRITE_REG+STATUS,status);                             // clear RX_DR or TX_DS or MAX_RT interrupt flag\n    delay(1000);\n  }\n}\n\n//**************************************************\n// Function: init_io();\n// Description:\n// flash led one time,chip enable(ready to TX or RX Mode),\n// Spi disable,Spi clock line init high\n//**************************************************\nvoid init_io(void)\n{\n  digitalWrite(IRQ, 0);\n  digitalWrite(CE, 0);          // chip enable\n  digitalWrite(CSN, 1);                 // Spi disable  \n}\n\n/************************************************************************\n**   * Function: SPI_RW();\n * \n * Description:\n * Writes one unsigned char to nRF24L01, and return the unsigned char read\n * from nRF24L01 during write, according to SPI protocol\n************************************************************************/\nunsigned char SPI_RW(unsigned char Byte)\n{\n  return SPI.transfer(Byte);\n}\n\n/**************************************************/\n\n/**************************************************\n * Function: SPI_RW_Reg();\n * \n * Description:\n * Writes value 'value' to register 'reg'\n/**************************************************/\nunsigned char SPI_RW_Reg(unsigned char reg, unsigned char value)\n{\n  unsigned char status;\n\n  digitalWrite(CSN, 0);                   // CSN low, init SPI transaction\n  SPI_RW(reg);                            // select register\n  SPI_RW(value);                          // ..and write value to it..\n  digitalWrite(CSN, 1);                   // CSN high again\n\n  return(status);                   // return nRF24L01 status unsigned char\n}\n/**************************************************/\n\n/**************************************************\n * Function: SPI_Read();\n * \n * Description:\n * Read one unsigned char from nRF24L01 register, 'reg'\n/**************************************************/\nunsigned char SPI_Read(unsigned char reg)\n{\n  unsigned char reg_val;\n\n  digitalWrite(CSN, 0);                // CSN low, initialize SPI communication...\n  SPI_RW(reg);                         // Select register to read from..\n  reg_val = SPI_RW(0);                 // ..then read register value\n  digitalWrite(CSN, 1);                // CSN high, terminate SPI communication\n\n  return(reg_val);                     // return register value\n}\n/**************************************************/\n\n/**************************************************\n * Function: SPI_Read_Buf();\n * \n * Description:\n * Reads 'unsigned chars' #of unsigned chars from register 'reg'\n * Typically used to read RX payload, Rx/Tx address\n/**************************************************/\nunsigned char SPI_Read_Buf(unsigned char reg, unsigned char *pBuf, unsigned char bytes)\n{\n  unsigned char sstatus,i;\n\n  digitalWrite(CSN, 0);                   // Set CSN low, init SPI tranaction\n  sstatus = SPI_RW(reg);            // Select register to write to and read status unsigned char\n\n  for(i=0;i&lt;bytes;i++)\n  {\n    pBuf[i] = SPI_RW(0);    // Perform SPI_RW to read unsigned char from nRF24L01\n  }\n\n  digitalWrite(CSN, 1);                   // Set CSN high again\n\n  return(sstatus);                  // return nRF24L01 status unsigned char\n}\n/**************************************************/\n\n/**************************************************\n * Function: SPI_Write_Buf();\n * \n * Description:\n * Writes contents of buffer '*pBuf' to nRF24L01\n * Typically used to write TX payload, Rx/Tx address\n/**************************************************/\nunsigned char SPI_Write_Buf(unsigned char reg, unsigned char *pBuf, unsigned char bytes)\n{\n  unsigned char sstatus,i;\n\n  digitalWrite(CSN, 0);                   // Set CSN low, init SPI tranaction\n  sstatus = SPI_RW(reg);             // Select register to write to and read status unsigned char\n  for(i=0;i&lt;bytes; i++)             // then write all unsigned char in buffer(*pBuf)\n  {\n    SPI_RW(*pBuf++);\n  }\n  digitalWrite(CSN, 1);                   // Set CSN high again\n  return(sstatus);                  // return nRF24L01 status unsigned char\n}\n/**************************************************/\n\nvoid RX_Mode(void)\n{\n  digitalWrite(CE, 0);\n\n  SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // Use the same address on the RX device as the TX device\n  SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0\n  SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0\n  SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40\n  SPI_RW_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH); // Select same RX payload width as TX Payload width\n  SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR\n  SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);     // Set PWR_UP bit, enable CRC(2 unsigned chars) &amp; Prim:RX. RX_DR enabled..\n  digitalWrite(CE, 1);                             // Set CE pin high to enable RX device\n  //  This device is now ready to receive one packet of 16 unsigned chars payload from a TX device sending to address\n  //  '3443101001', with auto acknowledgment, retransmit count of 10, RF channel 40 and datarate = 2Mbps.\n} \n</code></pre> <p>4.Now power on both Arduino , and connect the RX one to PC via USB. Open the IDE serial port monitor , change the baud rate to 9600 bps , and you can see the data that received.  [ </p>"},{"location":"Products/Wireless/nrf24l012bpa2blna-wireless-module.html#resource","title":"Resource","text":"<ul> <li>NRF24L01+PA+LNA Wireless Module demo code</li> </ul>"},{"location":"Products/Wireless/serial-port-bluetooth-module.html","title":"Serial Port Bluetooth Module","text":""},{"location":"Products/Wireless/serial-port-bluetooth-module.html#introduction","title":"Introduction","text":"<p>This module is an easy to use Bluetooth SPP (Serial Port Protocol) module, designed for transparent wireless serial connections.</p> <p>The Serial port Bluetooth module is fully qualified Bluetooth V2.0+EDR (Enhanced Data Rate) 3Mbps Modulation with complete 2.4GHz radio transceiver and baseband. It uses CSR Bluecore 04-External single chip Bluetooth system with CMOS technology and with AFH(Adaptive Frequency Hopping Feature). It has a footprint as small as 12.7mmx27mm. Hopefully it will simplify your overall design/development cycle.</p> <p>Model: WBT20101B </p>"},{"location":"Products/Wireless/serial-port-bluetooth-module.html#features","title":"Features","text":""},{"location":"Products/Wireless/serial-port-bluetooth-module.html#hardware-features","title":"Hardware features","text":"<ul> <li>Typical -80dBm sensitivity</li> <li>Up to +4dBm RF transmit power</li> <li>Low Power 1.8V Operation ,1.8 to 3.6V I/O</li> <li>PIO control</li> <li>UART interface with programmable baud rate</li> <li>Integrated antenna</li> <li>Edge connector</li> </ul>"},{"location":"Products/Wireless/serial-port-bluetooth-module.html#software-features","title":"Software features","text":"<ul> <li>Default Baud rate: 38400, Data bits:8, Stop bit:1,Parity:No parity, Data control: yes. Supported baud rate:</li> </ul> <p>9600,19200,38400,57600,115200,230400,460800.</p> <ul> <li>Use CTS and RTS to control data stream.</li> <li>Given a rising pulse in PIO0, device will be disconnected.</li> <li>Status instruction port PIO1: low-disconnected, high-connected;</li> <li>PIO10 and PIO11 can be connected to red and blue LED separately. When master and slave are paired, red</li> </ul> <p>and blue led blinks 1time/2s in interval. While disconnected only blue led blinks 2times/s.</p> <ul> <li>Auto-connects to the last device on power as default.</li> <li>Permits pairing device to connect as default.</li> <li>Auto-pairing PINCODE:\u201d0000\u201d as default</li> <li>Auto-reconnect in 30 min when disconnected as a result of beyond the range of connection.</li> </ul>"},{"location":"Products/Wireless/serial-port-bluetooth-module.html#application-ideas","title":"Application Ideas","text":"<ul> <li>Remote controller</li> <li>Wireless communication</li> </ul>"},{"location":"Products/Wireless/serial-port-bluetooth-module.html#cautions","title":"Cautions","text":"<ul> <li>While using with Crowduino/ Arduino, set the operation voltage to 5V. Else use a proper logic level converter.</li> <li>While using with USBSerial Adapter, set the operation voltage to 5V</li> <li>Command to change baud rate is persistent even after reset. Hence remember the baud rate for next use.</li> </ul>"},{"location":"Products/Wireless/serial-port-bluetooth-module.html#specification","title":"Specification","text":"Pin # Pad Type Description PIO11 34 Bi-Direction Programmable input/output line PIO10 33 Bi-Direction Programmable input/output line PIO9 32 Bi-Direction Programmable input/output line PIO8 31 Bi-Direction Programmable input/output line PIO7 30 Bi-Direction Programmable input/output line PIO6 29 Bi-Direction Programmable input/output line PIO5 28 Bi-Direction Programmable input/output line PIO4 27 Bi-Direction Programmable input/output line PIO3 26 Bi-Direction Programmable input/output line PIO32 25 Bi-Direction Programmable input/output line PIO1 24 Bi-Direction TX EN Programmable input/output line, control output for PA(if fitted) PIO0 23 Bi-Direction RX EN Programmable input/output line, control output for LNA(if fitted) GND 13,21,22 VSS Ground pot USB\u00b1 15,20 Bi-Directional SPI_CLK 19 CMOS input with weak internal pull-down Serial peripheral interface clock SPI_MISO 18 CMOS input with weak internal pull-down Serial peripheral interface data Output SPI_MOSI 17 CMOS input with weak internal pull-down Serial peripheral interface data input SPI_CSB 16 CMOS input with weak internal pull-up Chip select for serial peripheral interface,active low NC 14 3.3VCC 12 3.3V Integrated 3.3V(+)supply with on-chip linear regulator output within 3.15-3.3V RESETB 11 CMOS input with weak internal pull-up Reset if low. input debouncde so must be low for&gt;5MS to cause a reset AIO1 10 Bi-Direction Programmable input/output line AIO0 9 Bi-Direction Programmable input/output line PCM_SYNC 8 Bi-Direction Synchronous PCM data strobe PCM_IN 7 CMOS Input Synchronous PCM data input PCM_OUT 6 CMOS output Synchronous PCM data output PCM_CLK 5 Bi-Direction Synchronous PCM data clock UART_RTS 4 CMOS output tri-stable with weak internal pull-up UART request to send, active low UART_CTS 3 CMOS input with weak internal pull-down UART Data input UART_RX 2 CMOS output,tri-stable with weak internal pull-down UART Data input UART_TX 1 CMOS output,tri-stable with weak internal pull-up UART Data output"},{"location":"Products/Wireless/serial-port-bluetooth-module.html#software-instruction","title":"Software Instruction","text":""},{"location":"Products/Wireless/serial-port-bluetooth-module.html#working-sketch-map","title":"Working Sketch Map","text":""},{"location":"Products/Wireless/serial-port-bluetooth-module.html#flowchat","title":"Flowchat","text":""},{"location":"Products/Wireless/serial-port-bluetooth-module.html#commands-to-change-default-configuration","title":"Commands to change default configuration","text":"<p>1. Set working MODE</p> \\r\\n+STWMOD=0\\r\\n Set device working mode as client (slave). Save and Rest. \\r\\n+STWMOD=1\\r\\n Set device working mode as server (master). Save and Rest. <p>Note: \\r\\n is necessary for operation and the value of are 0x0D 0x0A in Hex. \\r and \\n represent carriage-return and line-feed(or next line),</p> <p>2.Set BAUDRATE</p> \\r\\n+STBD=115200\\r\\n Set baudrate 115200. Save and Rest. Supported baudrate: 9600, 19200,38400,57600,115200,230400,460800. <p>3. Set Device NAME</p> \\r\\n+STNA=abcdefg Set device name as \u201cabcdefg\u201d. Save and Rest. <p>4. Auto-connect the last paired device on power</p> \\r\\n+STAUTO=0\\r\\n Auto-connect forbidden. Save and Rest. \\r\\n+STAUTO=1\\r\\n Permit Auto-connect. Save and Rest. <p>5. Permit Paired device to connect me</p> \\r\\n+STOAUT=0\\r\\n Forbidden. Save and Rest. \\r\\n+STOAUT=1\\r\\n Permit. Save and Rest. <p>6. Set PINCODE</p> \\r\\n +STPIN=2222\\r\\n Set pincode \u201c2222\u201d, Save and Rest. <p>7. Delete PINCODE(input PINCODE by MCU)</p> \\r\\n+DLPIN\\r\\n Delete pincode. Save and Rest. <p>8. Read local ADDRESS CODE</p> \\r\\n+RTADDR\\r\\n Return address of the device. <p>9. Auto-reconnecting when master device is beyond the valid range (slave device will auto-reconnect in 30 min when it is beyond the valid range)</p> \\r\\n+LOSSRECONN=0\\r\\n Forbid auto-reconnecting. \\r\\n+LOSSRECONN=1\\r\\n Permit auto-reconnecting."},{"location":"Products/Wireless/serial-port-bluetooth-module.html#commands-for-normal-operation","title":"Commands for Normal Operation:","text":"<p>1. Inquire</p> a) Master \\r\\n+INQ=0\\r\\n \\r\\n+INQ=1\\r\\n b) Slave \\r\\n+INQ=0\\r\\n \\r\\n+INQ=1\\r\\n <p>When +INQ=1 command is successful, the red  and green LEDS blink alternatively.</p> <p>2. Bluetooth module returns inquiring result</p> \\r\\n+RTINQ=aa,bb,cc,dd,ee,ff;name\\r\\n Serial Bluetooth device with the address \u201caa,bb,cc,dd,ee,ff\u201d and the name \u201cname\u201d is inquired <p>3. Connect device</p> \\r\\n+CONN=aa,bb,cc,dd,ee,ff\\r\\n Connect to a device with address of \"aa,bb,cc,dd,ee,ff\u201d <p>4. Bluetooth module requests inputting PINCODE</p> <p>\\r\\n+INPIN\\r\\n</p> <p>5. Input PINCODE</p> \\r\\n+RTPIN=code\\r\\n Example: RTPIN=0000 <p>6. Disconnect device Pulling PIO0 high will disconnect current working Bluetooth device.</p> <p>7. Return status \\r\\n+BTSTA:xx\\r\\n   xx status:</p> <ul> <li>0 - Initializing</li> <li>1 - Ready</li> <li>2 - Inquiring</li> <li>3 - Connecting</li> <li>4 - Connected</li> </ul> <p>(Note: This is not a command, but the information returned from the module after every command)</p>"},{"location":"Products/Wireless/serial-port-bluetooth-module.html#reference","title":"Reference","text":"<p>How to Connect to Mac Laptop File:User Guide step by step.pdf File:Demo Code for Master&amp;Slave.zip</p>"},{"location":"Products/Wireless/serial-wifi-transceiver-module-esp8266.html","title":"Serial WIFI Transceiver Module ESP8266","text":""},{"location":"Products/Wireless/serial-wifi-transceiver-module-esp8266.html#description","title":"Description","text":"<p>This serial WiFi transceiver module is based on ESP8266 SoC.. ESP8266 is a highly integrated chip that has Integrated TCP/IP protocol stack. It offers a complete and self-contained Wi-Fi networking solution, allowing it to either host the application or to offload all Wi-Fi networking functions from another application processor. Besides, ESP8266 has powerful on-board processing and storage capabilities that allow it to be integrated with the sensors and other application specific devices through its GPIOs with minimal development up-front and minimal loading during runtime. Its high degree of on-chip integration allows for minimal external circuitry, and the entire solution, including front-end module, is designed to occupy minimal PCB area. Model:WWI8266ESP</p> <p></p>"},{"location":"Products/Wireless/serial-wifi-transceiver-module-esp8266.html#feature","title":"Feature","text":"<ul> <li>3SDIO 2.0, SPI, UART</li> <li>32-pin QFN package</li> <li>Integrated RF switch, balun, 24dBm PA, DCXO, and PMU</li> <li>Integrated RISC processor, on-chip memory and external memory interfaces</li> <li>Integrated MAC/baseband processors</li> <li>Quality of Service management</li> <li>I2S interface for high fidelity audio applications</li> <li>On-chip low-dropout linear regulators for all internal supplies</li> <li>Proprietary spurious-free clock generation architecture</li> <li>Integrated WEP, TKIP, AES, and WAPI engines</li> </ul>"},{"location":"Products/Wireless/serial-wifi-transceiver-module-esp8266.html#specification","title":"Specification","text":"<ul> <li>802.11 b/g/n</li> <li>Wi-Fi Direct (P2P), soft-AP</li> <li>Integrated TCP/IP protocol stack</li> <li>Integrated TR switch, balun, LNA, power amplifier and matching network</li> <li>Integrated PLLs, regulators, DCXO and power management units</li> <li>+19.5dBm output power in 802.11b mode</li> <li>Power down leakage current of &lt;10uA</li> <li>Integrated low power 32-bit CPU could be used as application processor</li> <li>SDIO 1.\u00bd.0, SPI, UART</li> <li>STBC, 1\u00d71 MIMO, 2\u00d71 MIMO</li> <li>A-MPDU &amp; A-MSDU aggregation &amp; 0.4ms guard interval</li> <li>Wake up and transmit packets in &lt; 2ms</li> <li>Standby power consumption of &lt; 1.0mW (DTIM3)</li> </ul>"},{"location":"Products/Wireless/serial-wifi-transceiver-module-esp8266.html#interface-function","title":"Interface Function","text":""},{"location":"Products/Wireless/serial-wifi-transceiver-module-esp8266.html#at-commands","title":"AT Commands","text":"<p>Format</p> <ul> <li>Baud rate at 115200</li> <li>x is the commands</li> </ul> <p></p> <p>(Click the picture to zoom in)</p> Set Inquiry Test Execute AT+&lt;x&gt;=&lt;\u2026&gt; AT+&lt;x&gt;? AT+&lt;x&gt;=? AT+&lt;x&gt; AT+CWMODE=&lt;mode&gt; AT+CWMODE? AT+CWMODE=? - Set the network mode Check current mode Return which modes supported - <p>Commands</p> <ul> <li>carefully there are must be no any spaces between the \" and IP address or port</li> </ul> Commands Description Type Set/Execute Inquiry test Parameters and Examples AT general test basic - - - - AT+RST restart the module basic - - - - AT+GMR check firmware version basic - - - - AT+CWMODE wifi mode wifi AT+CWMODE=&lt;mode&gt; AT+CWMODE? AT+CWMODE=? 1= Sta, 2= AP, 3=both, Sta is the default mode of router, AP is a normal mode for devices AT+CWJAP join the AP wifi AT+ CWJAP =&lt;ssid&gt;,&lt; pwd &gt; AT+ CWJAP? - ssid = ssid, pwd = wifi password AT+CWLAP list the AP wifi AT+CWLAP AT+CWQAP quit the AP wifi AT+CWQAP - AT+CWQAP=? AT+ CWSAP set the parameters of AP wifi AT+ CWSAP= &lt;ssid&gt;,&lt;pwd&gt;,&lt;chl&gt;, &lt;ecn&gt; AT+ CWSAP? ssid, pwd, chl = channel, ecn = encryption; eg. Connect to your router: AT+CWJAP=\"www.electrodragon.com\",\"helloworld\"; and check if connected: AT+CWJAP? AT+CWLIF check join devices' IP wifi AT+CWLIF - - AT+ CIPSTATUS get the connection status TCP/IP AT+ CIPSTATUS &lt;id&gt;,&lt;type&gt;,&lt;addr&gt;,&lt;port&gt;,&lt;tetype&gt;= client or server mode AT+CIPSTART set up TCP or UDP connection TCP/IP 1)single connection (+CIPMUX=0) AT+CIPSTART= &lt;type&gt;,&lt;addr&gt;,&lt;port&gt;; 2) multiple connection (+CIPMUX=1) AT+CIPSTART= &lt;id&gt;&lt;type&gt;,&lt;addr&gt;, &lt;port&gt; - AT+CIPSTART=? id = 0-4, type = TCP/UDP, addr = IP address, port= port; eg. Connect to another TCP server, set multiple connection first: AT+CIPMUX=1; connect: AT+CIPSTART=4,\"TCP\",\"X1.X2.X3.X4\",9999 AT+CIPMODE set data transmission mode TCP/IP AT+CIPMODE=&lt;mode&gt; AT+CIPSEND? 0 not data mode, 1 data mode; return \"Link is builded\" AT+CIPSEND send data TCP/IP 1)single connection(+CIPMUX=0) AT+CIPSEND=&lt;length&gt;; 2) multiple connection (+CIPMUX=1) AT+CIPSEND= &lt;id&gt;,&lt;length&gt; AT+CIPSEND=? eg. send data: AT+CIPSEND=4,15 and then enter the data. AT+CIPCLOSE close TCP or UDP connection TCP/IP AT+CIPCLOSE=&lt;id&gt; or AT+CIPCLOSE AT+CIPCLOSE=? AT+CIFSR Get IP address TCP/IP AT+CIFSR AT+ CIFSR=? AT+ CIPMUX set mutiple connection TCP/IP AT+ CIPMUX=&lt;mode&gt; AT+ CIPMUX? 0 for single connection 1 for multiple connection AT+ CIPSERVER set as server TCP/IP AT+ CIPSERVER= &lt;mode&gt;[,&lt;port&gt; ] mode 0 to close server mode, mode 1 to open; port = port; eg. turn on as a TCP server: AT+CIPSERVER=1,8888, check the self server IP address: AT+CIFSR=? AT+ CIPSTO Set the server timeout AT+CIPSTO=&lt;time&gt; AT+CIPSTO? &lt;time&gt;0~28800 in second +IPD received data For Single Connection mode(CIPMUX=0): + IPD, &lt;len&gt;: For Multi Connection mode(CIPMUX=1): + IPD, &lt;id&gt;, &lt;len&gt;: &lt;data&gt;"},{"location":"Products/Wireless/serial-wifi-transceiver-module-esp8266.html#usage","title":"Usage","text":""},{"location":"Products/Wireless/serial-wifi-transceiver-module-esp8266.html#use-the-esp8266-01-and-arduino-as-a-webserver","title":"Use the ESP8266-01 and Arduino as a Webserver","text":"<p>1.Hardware Connection. Connected the Serial Wifi to U2 of the Crowtail- base shiled( D2 and D3) are used as software UART. Baud Rate:9600.  2.Connect the board to PC using USB cable.</p> <p>3:Download the code: Webserver_for_ESP8266-01 or copy it to you new skecth.</p> <pre><code>#include &lt;SoftwareSerial.h&gt;\n\n#define DEBUG true\n\nSoftwareSerial esp8266(2,3); // make RX Arduino line is pin 2, make TX Arduino line is pin 3.\n                             // This means that you need to connect the TX line from the esp to the Arduino's pin 2\n                             // and the RX line from the esp to the Arduino's pin 3\nvoid setup()\n{\n  Serial.begin(9600);\n  esp8266.begin(9600); // your esp's baud rate might be different\n  sendData(\"AT+RST\\r\\n\",2000,DEBUG); // reset module\n  sendData(\"AT+CWMODE=2\\r\\n\",1000,DEBUG); // configure as access point\n  sendData(\"AT+CIFSR\\r\\n\",1000,DEBUG); // get ip address\n  sendData(\"AT+CIPMUX=1\\r\\n\",1000,DEBUG); // configure for multiple connections\n  sendData(\"AT+CIPSERVER=1,80\\r\\n\",1000,DEBUG); // turn on server on port 80\n}\n\nvoid loop()\n{\n  if(esp8266.available()) // check if the esp is sending a message \n  {\n    /*\n    while(esp8266.available())\n    {\n      // The esp has data so display its output to the serial window \n      char c = esp8266.read(); // read the next character.\n      Serial.write(c);\n    } */\n\n    if(esp8266.find(\"+IPD,\"))\n    {\n     delay(1000);\n\n     int connectionId = esp8266.read()-48; // subtract 48 because the read() function returns \n                                           // the ASCII decimal value and 0 (the first decimal number) starts at 48\n\n     String webpage = \"&lt;h1&gt;Hello World!&lt;/h1&gt;\";\n     String cipSend = \"AT+CIPSEND=\";\n     cipSend += connectionId;\n     cipSend += \",\";\n     cipSend +=webpage.length();\n     cipSend +=\"\\r\\n\";\n\n     sendData(cipSend,1000,DEBUG);\n     sendData(webpage,1000,DEBUG);\n\n     String closeCommand = \"AT+CIPCLOSE=\"; \n     closeCommand+=connectionId; // append connection id\n     closeCommand+=\"\\r\\n\";    \n     sendData(closeCommand,3000,DEBUG);\n    }\n  }\n}\n\n\nString sendData(String command, const int timeout, boolean debug)\n{\n    String response = \"\";\n\n    esp8266.print(command); // send the read character to the esp8266\n\n    long int time = millis();\n\n    while( (time+timeout) &gt; millis())\n    {\n      while(esp8266.available())\n      {      \n        // The esp has data so display its output to the serial window \n        char c = esp8266.read(); // read the next character.\n        response+=c;\n      }  \n    }\n\n    if(debug)\n    {\n      Serial.print(response);\n    }    \n    return response;\n}\n</code></pre> <p>4.Upload the code and Open the serial monitor.You can see some configuration information.</p> <p></p> <p>5.PC connect to the wifi of ESP8266.</p> <p></p> <p>6.Then you can visit the Webserver of the ESP8266.</p> <p></p>"},{"location":"Products/Wireless/serial-wifi-transceiver-module-esp8266.html#resource","title":"Resource","text":"<ul> <li>ESP8266-01 Demo code</li> </ul>"},{"location":"Products/Wireless/smart-car-with-esp32-cam-board.html","title":"Smart car with ESP32-CAM Board","text":""},{"location":"Products/Wireless/smart-car-with-esp32-cam-board.html#description","title":"Description","text":"<p>This video tank robot vehicle uses ESP32 as the main board, with OV2640 camera, and can control the movement via WiFi. It has a digital microphone interface, which can adjust the volume. The APP can control the shooting, and transmit video recordings to the APP in real-time. It has two lights at the same time, and the dark environment can be unobstructed. Support secondary development, app running environment supports Android 5.0 or above, but does not support IOS system.</p> <p>Model: ACC35076R </p> <p></p>"},{"location":"Products/Wireless/smart-car-with-esp32-cam-board.html#feature","title":"Feature","text":"<ul> <li>Simple connection, say goodbye to complicated cable connection</li> <li>Control the smart car via WiFi</li> <li>Real-time transmission of photos and videos</li> </ul>"},{"location":"Products/Wireless/smart-car-with-esp32-cam-board.html#specification","title":"Specification","text":""},{"location":"Products/Wireless/smart-car-with-esp32-cam-board.html#interface","title":"Interface","text":""},{"location":"Products/Wireless/smart-car-with-esp32-cam-board.html#usage","title":"Usage","text":""},{"location":"Products/Wireless/smart-car-with-esp32-cam-board.html#bluethooth-mode","title":"Bluethooth Mode","text":"<p>To modify the WiFi, robot name, password of the robot connection, you need to set it through Bluetooth.  When the robot can not be found in WiFi mode, the robot IP can be obtained through Bluetooth mode.</p> <p>Step 1: Turn on the smart car, click the BOOT button when the lights on. If the lights keep on(not of or flash), that means the car has entered BT mode. Step 2: Turn on the Bluetooth on your phone. Open the ReconnaissanceRobot APP, click Set Up Robot,  Step 3: Find \"esp32-robot\" device and click it to enter settings page. Enter your home/office WiFi name and password, set the name and WiFi for your robot car. Then click Send to robot to send these data to smart car. The smart car will connect to your WLAN. Note: The paired car will appear at the bottom of the \"Used\" window (if it has entered the Bluetooth mode) The unpaired car will appear in the \"New\" window. </p>"},{"location":"Products/Wireless/smart-car-with-esp32-cam-board.html#wifi-mode","title":"WiFi Mode","text":"<p>Step 1: Return to home page of APP, click Scan to find your smart car and select it. Here my car's name is esp32-robot.  Step 2: Enter the robot access password(the one you set at BT mode). I use the default password \"1234\". Then click Start to connect. Wait for a second... If there's no respond, please try to click the Start button again. Step 3: Then you will successfully go into operating interface! </p>"},{"location":"Products/Wireless/smart-car-with-esp32-cam-board.html#faqs","title":"FAQS","text":"<p>You can post your questions on our forum or contact with techsupport@elecrow.com for technology support.</p>"},{"location":"Products/Wireless/smart-car-with-esp32-cam-board.html#resourse","title":"Resourse","text":"<p>ReconnaissanceRobot APP</p>"},{"location":"Products/Wireless/wireless-charger26-receiver.html","title":"Wireless Charger& Receiver","text":""},{"location":"Products/Wireless/wireless-charger26-receiver.html#description","title":"Description","text":"<p>The Wireless Charger&amp; Receiver adopts two copper wire coil superposition to active the wireless charging, it can be used in electronic equipments in common use for close wireless charging or power supply. This product consisted of a transmitter and receiver, could serve as a replacement for the Wireless Power Supply with stable 5V output voltage and maximum 600mA output current. Its small size and insulation coil is more suitable for using in wireless project. Model:PCW2138WC</p> <p></p>"},{"location":"Products/Wireless/wireless-charger26-receiver.html#specification","title":"Specification","text":"<ul> <li>Input Voltage: 5~12Vdc</li> <li>Output Voltage: 5Vdc</li> <li>Output Current(maximum): 600mA</li> <li>Transmitter Coil Inductance: 30uH</li> <li>Transmit-receive distance: 1-20mm</li> <li>Transmitter : 12*7*1mm</li> <li>Receiver: 15*10*1mm</li> <li>Coil Diameter: 38mm</li> <li>Coil Height: 2mm</li> </ul>"},{"location":"Products/Wireless/wireless-charger26-receiver.html#usage","title":"Usage","text":""},{"location":"Products/Wireless/wireless-charger26-receiver.html#light-up-the-led","title":"Light up the LED","text":"<p>1.Hardware Connection.</p> <p></p> <p>2.Light up the LED </p>"},{"location":"Products/Wireless/wireless-charger26-receiver.html#resource","title":"Resource","text":"<ul> <li>Wireless charge Manual</li> </ul>"},{"location":"Products/other/common-pcb-design-problem-for-pcb-fabrication.html","title":"Common PCB design problem for PCB fabrication","text":""},{"location":"Products/other/common-pcb-design-problem-for-pcb-fabrication.html#common-pcb-design-problem-for-pcb-fabrication","title":"Common PCB design problem for PCB fabrication","text":"<p>There are some frequent PCB Gerber files problems before PCB production, the most common problems are listed below. You can check gerber file online. There is a lot of online gerber viewer. This gerber viewer is good. http://www.gerber-viewer.com/ If there\u2019s any question about PCB design or fabrication, please feel free to contact PCB@elecrow.com</p>"},{"location":"Products/other/common-pcb-design-problem-for-pcb-fabrication.html#part-a-excalation","title":"Part A: Excalation","text":"<p>A list of necessary files for a 2 sided PCB:</p> <p>image1:</p> <p> a.No Drill file</p> <p>We need NC data in format excellon.txt, it is necessary normally. Shown as \u201csample.TXT\u201d in image 1.</p> <p>b.No Copper layer</p> <p>In format \u201cRS-274-X\u201d, named as \u201cGTL\u201d&amp;\u201dGBL\u201d in a general way. One of them when 1 sided PCB, or you could put no copper layers in your gerber unless you do not need any circuit.</p> <p>c.No Solder Mask layer</p> <p>Color-coded resist for protecting the copper, named as \u201cGTS\u201d and \u201cGBS\u201d. The solid parts in these layers mean opening of pads (exposed). Please fill all the area of solder mask layer when you want bare copper.</p> <p>d.No Mechanical layer (Outline)</p> <p>Outline is necessary for fabrication through fair and foul, named as \u201cGML\u201d or \u201cGKO\u201d. Certainly you can add outline to any other layer (except drill file), then no need for a separate mechanical layer.</p>"},{"location":"Products/other/common-pcb-design-problem-for-pcb-fabrication.html#part-b-forgot-to-upload-the-gerber-file","title":"Part B: Forgot to upload the gerber file","text":"<p>If you find that you forgot to upload the gerber file when place the order, you can send the update gerber file to PCB@elecrow.com with Elecrow order number.</p> <p>To avoid possible delay, when you place the order, please pay attention to the following notes: * 1)Lack of the gerber files problems. * 2)1-layer PCB solder mask mis-understanding problem. * 3)Forget to upload the gerber file. </p>"},{"location":"Products/other/common-pcb-design-problem-for-pcb-fabrication.html#part-c-stack-up-of-4-sided-pcb","title":"Part C: Stack-up of 4 sided PCB","text":"<p>Copper layers of a 4 sided PCB should be named as \u201cGTL\u201d, \u201cG1\u201d, \u201cG2\u201d and \u201cGBL\u201d, then we know the stack-up from top to bottom is \u201cGTL-G1-G2-GBL\u201d. Please indicate the correct sequence in the comment if other naming.</p>"},{"location":"Products/other/common-pcb-design-problem-for-pcb-fabrication.html#part-d-panelization","title":"Part D: Panelization","text":"<p>\u201cx-y copies\u201d means a scope of the number of boards in one panel, it depends on the actual dimension of your PCB and the max size you choose. \u201cx different sub-pcbs\u201d means the number of different designs in your gerber.</p>"},{"location":"Products/other/common-pcb-design-problem-for-pcb-fabrication.html#part-e-acceptable-format","title":"Part E: Acceptable format","text":"<p>Gerber \u201cRS-274-X\u201d is the sole format for fabrication, but we can help you to output gerber from other formats, they are \u201cBRD\u201d, \u201cPCBdoc\u201d, \u201cLAY6\u201d.</p> <p>If there\u2019s any question, please feel free to contact PCB@elecrow.com</p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html","title":"LVGL ESP32 Display Tutorial-A Step-by-Step Guide to LVGL GUI Development","text":"<p>LVGL, or Light and Versatile Graphics Library, is a powerful open-source graphics library that can be used to develop advanced graphical user interfaces (GUIs) for a wide range of embedded systems. ESP32 is a powerful microcontroller widely used in IoT and embedded systems projects. By combining LVGL with ESP32, you can develop sophisticated and responsive GUI designs that enhance the user experience and add value to your projects, such as support for animation, themes, fonts, and touch input.   In this 16-lesson, step-by-step tutorial, we will guide you through the process of setting up LVGL on your ESP32 development board, creating a basic GUI application, and adding advanced features such as animation, themes, and touch input. We will also cover best practices for optimizing your LVGL GUIs for performance and memory usage.   Whether you are an experienced embedded systems developer or just getting started with LVGL and ESP32, this tutorial will give you the knowledge and skills you need to create stunning GUI features for your ESP32 projects. So let's get started!</p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson01-introducing-the-esp32-display-series-and-environment-configuration","title":"Lesson01 Introducing the ESP32 Display series and environment configuration","text":"<p>In the first lesson of this LVGL ESP32 tutorial, we explored the basic concepts and applications of Human Machine Interface (HMI) and introduced the related ESP32 display family. We also can learn how to configure the Arduino environment, a crucial step in developing electronics projects. With these displays and related software environments, we can easily develop various graphical and user interfaces for ESP32 display projects.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson02-start-the-esp32-display-gui-drawing-via-lovyangfx-graphics-library","title":"Lesson02 Start the ESP32 DISPLAY GUI drawing via LovyanGFX Graphics Library","text":"<p>Starting to draw your first user interface on an ESP32 display is a big step in GUI design. In lesson 2 of this ESP32 GUI tutorial, we'll cover how to use the LovyanGFX library and related functions to draw graphics on a screen, including creating sprites, drawing rectangles, lines, circles, and text, and drawing the sprite to the screen. This lesson also includes sample programs that demonstrate these functions, and you will learn how to extend these functions to draw more complex graphics, such as a small house.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson03-how-to-display-pictures-on-esp32-boards","title":"Lesson03 How to Display Pictures on ESP32 Boards","text":"<p>Lesson 3 of the LVGL Tutorial for ESP32 Boards shows how to display images on an RGB screen using an ESP32 development board and an SD card. The key function for displaying bitmap images is the print_img() function. The program initializes the SPI bus, the LCD display, and the SD card, and then loads and displays images from the SD card. The program can be extended to switch between multiple images.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson04-lvgl-basics-how-to-install-lvgl-for-esp32-displays","title":"Lesson04 LVGL Basics: How to install LVGL for ESP32 Displays","text":"<p>Lesson 4 of the LVGL ESP32 Tutorial introduces all the basics for beginners to know about LVGL, it provides step-by-step instructions on how to download, install and use SquareLine Studio to create a new project, design the user interface, run and test the application, edit the code and generate code. The LVGL graphics library supports various types of input devices and provides a set of GUI components and graphical effects, and has the advantages of a small memory footprint, easy portability, rich functionality, and a visual GUI design tool that allows rapid creation and design of user interfaces. Primarily used for GUI development in embedded systems, the LVGL graphics library can be used for smart home control panels, IoT device control interfaces, vending machines, electronic scales, and other embedded devices. SquareLine Studio, an IDE based on the LVGL framework, provides a drag-and-drop interface for GUI design and development.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson05-introduction-to-the-5-categories-of-lvgl-gui-library-widgets","title":"Lesson05 Introduction to the 5 categories of LVGL GUI library Widgets","text":"<p>Lesson 5 discusses the cross-platform GUI library LVGL can support multiple operating systems and platforms, including embedded systems (such as Arduino and Raspberry Pi) and desktop systems (such as Windows and Linux). LVGL's API is simple and easy to use, providing many customizable widgets and features to quickly create beautiful and responsive user interfaces. The graphics library offers advanced features such as animation, easing, gradient, and graphic drawing. In this lesson, we will list five categories of widgets you can use on the open source graphics library LVGL: screen widgets, basic widgets, controller widgets, visualizer widgets, and styles, and provides a detailed introduction to each widget. Developers can refer to this information to configure the widgets when using LVGL.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson06-use-squareline-studio-to-start-your-1st-human-machine-interface-project","title":"Lesson06 Use Squareline Studio to start your 1<sup>st</sup> human machine interface project","text":"<p>To know how to adequately master LVGL GUI design, the first step is to know how to use Squareline Studio. In Lesson 6, we'll discuss a project using Squareline Studio software to create a simple human-machine interface by simply dragging and setting properties in the Squareline Studio platform such as buttons, labels, and panels to teach the beginner the basic use of these widgets. Lesson 6 provides a step-by-step guide to creating the human machine interface and running it on an Arduino. In practice, this LVGL Arduino Human Machine Interface project can be modified and extended as needed, for example by adding background or wallpaper functions.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson07-how-to-implement-text-information-input-with-squareline-studio","title":"Lesson07 How to implement text information input with Squareline Studio","text":"<p>Lesson 7 presents a project that illustrates the importance of implementing textual information input in GUI design. The project demonstrates how to use a keyboard widget to allow users to enter text and see the entered content in a text information widget. In addition, the project introduces the image widget of the open source graphics library LVGL. The main goal of this project is to provide a basic understanding of the keyboard, text information, and image widgets in Squareline Studio. Although the project is simple, it can be helpful for beginners to gain practical experience with these widgets, which can be modified and extended as needed, for example by adding a clear button or formatted text functionality.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson08-how-to-make-the-menu-and-a-progress-bar-with-squareline-studio","title":"Lesson08 How to make the menu and a progress bar with Squareline Studio","text":"<p>Lesson 08 presents a project that demonstrates how to create a drop-down menu and a progress bar using Squareline Studio software. The drop-down menu widget allows users to select appropriate options to determine the content, while the slider widget can display appropriate progress. This lesson aims to provide step-by-step instructions on the basic use of these widgets and how they can be modified and extended as needed for LVGL Arduino GUI design.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson09-how-to-make-an-analysis-report-on-esp32-display","title":"Lesson09 How to make an analysis report on ESP32 Display","text":"<p>The Rotation Analysis Report project uses Squareline Studio software to create a simple analysis report that uses charts to display different types of data. In addition, this type of project can be further developed to demonstrate data analysis, reports, and trends, providing valuable data support for decision-makers. The Open Source Graphics Library project demonstrates the basic use of chart widgets and how they can be customized for different applications. Lesson 9 provides detailed LVGL GUI design instructions for creating and implementing page jumping functionality for viewing multiple charts.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson10-create-a-3d-printer-ui-project-on-esp32-display","title":"Lesson10 Create a 3D Printer UI Project on ESP32 Display","text":"<p>The 3D Printer Interface project uses Squareline Studio software to create a user interface that allows users to easily set printer parameters using components such as rollers, switches, text boxes, and buttons. The project demonstrates the basic use of roller and switch components and how they can be customized for different applications. Lesson 10 provides a detailed guide to creating the interface, adding buttons, sliders, and panels, and implementing page jump to move between different screens on the ESP32 display. The project also includes adding temperature and material selection interfaces and a fan switch. Of course, this LVGL ESP32 project can be modified and extended for other purposes.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson11-how-to-make-a-mixer-interface-on-esp32-display","title":"Lesson11 How to Make a Mixer Interface on ESP32 Display","text":"<p>This lesson shows how to create a mixer interface using Squareline Studio's layout tool and Spinner widgets. It introduces the ARC widget and animation as ways to create dynamic elements and increase visual appeal. The steps shown in the simple project taught in this lesson include adding components, adjusting positions, setting attributes, and adding event settings to achieve the desired effect. Learning this part of the graphics library and practicing it on the ESP32 display helps beginners understand the basic use of the ARC component and animation, and provides a practical application for modifying and extending the Mixer interface.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson12-make-your-esp32-display-the-lantern-control-terminal","title":"Lesson12 Make Your ESP32 Display the Lantern Control terminal","text":"<p>Lesson 12 teaches beginners how to use Squareline Studio to create an RGB light control terminal based on an ESP32 display. The project introduces the image widget and its various uses, such as displaying images, and icons, and visualizing data. As the simple project in the lesson suggests, these steps include adding a panel, labels, and image widgets, setting their positions, adding event functions, and controlling the light through the main program. Learning this lesson will help beginners understand the combination of a GUI interface and external sensors, and how to modify generated functions to achieve sensor control through the interface to further utilize the many features of the LVGL open source graphics library.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson13-diy-electronic-control-terminal-on-esp32-display-with-squareline-studio","title":"Lesson13 DIY Electronic Control Terminal on ESP32 Display with Squareline Studio","text":"<p>It's important to build an electronic control panel to measure and monitor the parameters of a whole electronic project, Lesson 13 teaches beginners to resort to Squareline Studio to DIY an ESP32-based electrical control cabinet terminal. The user can control an LED light on/off by clicking the switch button on the ESP32 display project, which uses various functions from the LVGL open source graphics library such as lv_slider_set_value() and lv_img_set_src() and requires a linear potentiometer and a collision switch. The project shown in this lesson includes steps for creating panels, labels, sliders, and image components, adding event functions, and controlling the program from the main program. In addition, the project can be modified and extended to suit individual needs. Overall, this project is useful for beginners to understand the GUI design of external sensor control.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson14-create-car-control-screen-on-esp32-display-a-step-by-step-guide","title":"Lesson14 Create Car Control Screen on ESP32 Display: A Step-by-Step Guide","text":"<p>Lesson 14 provides a detailed beginner's guide to designing and implementing a user interface (UI) for the central control screen of a car to display speed, RPM, and other information using a counting sensor and various hardware modules such as buttons and servo modules. The GUI design must take into account user usability and readability. By using the Squareline Studio, the project steps include adding and arranging panels, labels, sliders, and image components, setting their positions, adding event functions, and controlling the car's functions from the main program. The project can be modified and extended according to individual needs.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson15-smart-agriculture-monitoring-iot-based-real-time-esp32-display-project","title":"Lesson15 Smart Agriculture Monitoring: IoT-Based Real-Time ESP32 Display Project","text":"<p>The Smart Agriculture Monitoring Station is an IoT-based agricultural monitoring system that combines the functions of the ESP32 display and the open source LVGL graphics library to monitor and record real-time environmental information such as temperature, humidity, and light intensity of crops. The user interface developed by Squareline Studio can visually display this information in the form of charts and can set value ranges to trigger an alarm when exceeded. The GUI design you can create in this lesson is simple, elegant, and easy to use, and the hardware modules used in the project include digital light sensors, soil moisture sensors, and DHT11 temperature sensors. The Smart Agriculture Monitoring Station project includes steps such as creating panels and labels and adding event functions to control the monitoring program that can help agricultural producers improve productivity and quality.  </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#lesson16-esp32-display-for-smart-home-central-control-a-home-automation-solution","title":"Lesson16 ESP32 Display for Smart Home Central Control: A Home Automation Solution","text":"<p>The LVGL Smart Home GUI design developed by Squareline Studio in Lesson 16 is a smart home control panel based on a 3.5\" SPI ESP32 display. The panel integrates flame sensors, air quality sensors, temperature and humidity sensors, UV sensors, gesture sensors, and WiFi modules to monitor and control smart home devices. The ESP32 display project is connected to the Internet via WiFi, and users can control smart home devices and view indoor environmental data and device status using smartphones or tablets. Lesson 16 provides a step-by-step guide for beginners to use the open source graphics library LVGL to create panels and labels and add event capabilities to control the monitoring program, which can improve users' quality of life by providing real-time monitoring and control of smart home devices. </p>"},{"location":"Tutorials/lvgl-esp32-display-tutorial-a-step-by-step-guide-to-lvgl-gui-development.html#resources","title":"Resources","text":"<p>Lesson_code.zip</p>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"files/2.0inch-SPI-Arduino-Demo-zip.html","title":"File:2.0inch SPI Arduino Demo.zip","text":""},{"location":"files/2.0inch-SPI-Arduino-Demo-zip.html#file","title":"File","text":"<p>2.0inch SPI Arduino Demo.zip (file size: 4.14 MB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/2.0inch-SPI-Arduino-Demo-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:37, 22 June 2022 (4.14 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/2.0inch-SPI-Arduino-Demo-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/2.8%27TFT-Program-Files-zip.html","title":"File:2.8'TFT Program Files.zip","text":""},{"location":"files/2.8%27TFT-Program-Files-zip.html#file","title":"File","text":"<p>2.8'TFT_Program_Files.zip (file size: 604 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/2.8%27TFT-Program-Files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:16, 6 June 2022 (604 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/2.8%27TFT-Program-Files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/24unosch-pdf.html","title":"File:2.4unosch.pdf","text":""},{"location":"files/24unosch-pdf.html#file","title":"File","text":"<p>2.4unosch.pdf (file size: 11 KB, MIME type: application/pdf)</p>"},{"location":"files/24unosch-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:14, 6 June 2022 (11 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/24unosch-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/32U4-with-A7-test-zip.html","title":"File:32U4 with A7 test.zip","text":""},{"location":"files/32U4-with-A7-test-zip.html#file","title":"File","text":"<p>32U4_with_A7_test.zip (file size: 1 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/32U4-with-A7-test-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 06:49, 23 August 2019 (87 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/32U4-with-A7-test-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/32U4-with-A9-eagle-files-zip.html","title":"File:32U4 with A9 eagle files.zip","text":""},{"location":"files/32U4-with-A9-eagle-files-zip.html#file","title":"File","text":"<p>32U4_with_A9_eagle_files.zip (file size: 73 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/32U4-with-A9-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:19, 24 August 2019 (73 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/32U4-with-A9-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/32U4-with-A9-test-zip.html","title":"File:32U4 with A9 test.zip","text":""},{"location":"files/32U4-with-A9-test-zip.html#file","title":"File","text":"<p>32U4_with_A9_test.zip (file size: 387 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/32U4-with-A9-test-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:59, 23 August 2019 (387 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/32U4-with-A9-test-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/32u4-with-A6-GPRSGSM-zip.html","title":"File:32u4 with A6 GPRSGSM.zip","text":""},{"location":"files/32u4-with-A6-GPRSGSM-zip.html#file","title":"File","text":"<p>32u4_with_A6_GPRSGSM.zip (file size: 87 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/32u4-with-A6-GPRSGSM-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 11:02, 22 August 2019 (87 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/32u4-with-A6-GPRSGSM-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/32u4-with-A7-GPRS-GSM-GPS-eagle-file-zip.html","title":"File:32u4 with A7 GPRS GSM GPS eagle file.zip","text":""},{"location":"files/32u4-with-A7-GPRS-GSM-GPS-eagle-file-zip.html#file","title":"File","text":"<p>32u4_with_A7_GPRS_GSM_GPS_eagle_file.zip (file size: 83 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/32u4-with-A7-GPRS-GSM-GPS-eagle-file-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:12, 23 August 2019 (83 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/32u4-with-A7-GPRS-GSM-GPS-eagle-file-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/32u4-with-A9G-GPS-test-step-pdf.html","title":"File:32u4 with A9G GPS test step.pdf","text":""},{"location":"files/32u4-with-A9G-GPS-test-step-pdf.html#file","title":"File","text":"<p>32u4_with_A9G_GPS_test_step.pdf (file size: 3.68 MB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/32u4-with-A9G-GPS-test-step-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 06:20, 14 January 2020 (3.68 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/32u4-with-A9G-GPS-test-step-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/4-Channel-I2C-Motor-Shield-V1.1-Example-zip.html","title":"File:4 Channel I2C Motor Shield-V1.1-Example.zip","text":""},{"location":"files/4-Channel-I2C-Motor-Shield-V1.1-Example-zip.html#file","title":"File","text":"<p>4 Channel I2C Motor Shield-V1.1-Example.zip (file size: 25 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/4-Channel-I2C-Motor-Shield-V1.1-Example-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:36, 26 October 2021 (25 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/4-Channel-I2C-Motor-Shield-V1.1-Example-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/4-Channel-I2C-Motor-Shield-V1.1-SCH.html","title":"File:4 Channel I2C Motor Shield-V1.1-SCH","text":""},{"location":"files/4-Channel-I2C-Motor-Shield-V1.1-SCH.html#file","title":"File","text":"<p>No file by this name exists.</p>"},{"location":"files/4-Channel-I2C-Motor-Shield-V1.1-SCH.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/5inch-HDMI-Display-User-Manual-pdf.html","title":"File:5inch HDMI Display User Manual.pdf","text":""},{"location":"files/5inch-HDMI-Display-User-Manual-pdf.html#file","title":"File","text":"<p>No file by this name exists.</p>"},{"location":"files/5inch-HDMI-Display-User-Manual-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/80-Infrare-Datasheet-pdf.html","title":"File:80 Infrared Datasheet.pdf","text":""},{"location":"files/80-Infrare-Datasheet-pdf.html#file","title":"File","text":"<p>80_Infrared_Datasheet.pdf  (file size: 365 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/80-Infrare-Datasheet-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:52, 23 August 2019 (365 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/80-Infrare-Datasheet-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/80-Infrared-Arduino-Demo-zip.html","title":"File:80 Infrared Arduino Demo.zip","text":""},{"location":"files/80-Infrared-Arduino-Demo-zip.html#file","title":"File","text":"<p>80_Infrared_Arduino_Demo.zip  (file size: 710 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/80-Infrared-Arduino-Demo-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:26, 26 August 2019 (710 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/80-Infrared-Arduino-Demo-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/A7-%28GSM%2BGPS%2BGPRS%2BGPRS%29-module-Hardware-introduction-pdf.html","title":"File:A7 (GSM+GPS+GPRS+GPRS) module Hardware introduction .pdf","text":""},{"location":"files/A7-%28GSM%2BGPS%2BGPRS%2BGPRS%29-module-Hardware-introduction-pdf.html#file","title":"File","text":"<p>A7_(GSM+GPS+GPRS+GPRS)module_Hardware_introduction.pdf (file size: 256 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/A7-%28GSM%2BGPS%2BGPRS%2BGPRS%29-module-Hardware-introduction-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 07:08, 23 August 2019 (256 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/A7-%28GSM%2BGPS%2BGPRS%2BGPRS%29-module-Hardware-introduction-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/ACS712-pdf.html","title":"File:ACS712.pdf","text":""},{"location":"files/ACS712-pdf.html#file","title":"File","text":"<p>No file by this name exists.</p>"},{"location":"files/ACS712-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/ACS712-zip.html","title":"File:ACS712.zip","text":""},{"location":"files/ACS712-zip.html#file","title":"File","text":"<p>ACS712.zip (file size: 520 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/ACS712-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:47, 23 August 2019 (520 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/ACS712-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/ADMP401-pdf.html","title":"File:ADMP401.pdf","text":""},{"location":"files/ADMP401-pdf.html#file","title":"File","text":"<p>ADMP401.pdf (file size: 641 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/ADMP401-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:38, 23 August 2019 (641 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/ADMP401-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/APDS-9008-020-Avago-pdf.html","title":"File:APDS-9008-020-Avago.pdf","text":""},{"location":"files/APDS-9008-020-Avago-pdf.html#file","title":"File","text":"<p>APDS-9008-020-Avago.pdf (file size: 876  KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/APDS-9008-020-Avago-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:32, 26 August 2019 (876 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/APDS-9008-020-Avago-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/AcceleroMMA7361-v0.8b-zip.html","title":"File:AcceleroMMA7361 v0.8b.zip","text":""},{"location":"files/AcceleroMMA7361-v0.8b-zip.html#file","title":"File","text":"<p>AcceleroMMA7361_v0.8b.zip (file size: 92 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/AcceleroMMA7361-v0.8b-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:27, 26 August 2019 (92 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/AcceleroMMA7361-v0.8b-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Adafruit-Fingerprint-zip.html","title":"File:Adafruit Fingerprint.zip","text":""},{"location":"files/Adafruit-Fingerprint-zip.html#file","title":"File","text":"<p>Adafruit_Fingerprint.zip (file size: 2.28 MB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Adafruit-Fingerprint-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 01:14, 24 August 2019 (2.28 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Adafruit-Fingerprint-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/AirQuality-zip.html","title":"File:AirQuality.zip","text":""},{"location":"files/AirQuality-zip.html#file","title":"File","text":"<p>AirQuality.zip (file size: 6 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/AirQuality-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:53, 24 August 2019 (6 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/AirQuality-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Analog-Gyro-3-Axis-zip.html","title":"File:Analog Gyro 3 Axis.zip","text":""},{"location":"files/Analog-Gyro-3-Axis-zip.html#file","title":"File","text":"<p>Analog Gyro 3 Axis.zip (file size: 948 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Analog-Gyro-3-Axis-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:21, 24 August 2019 (948 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Analog-Gyro-3-Axis-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Analog-Gyro-Axis-zip.html","title":"File:Analog Gyro 2 Axis.zip","text":""},{"location":"files/Analog-Gyro-Axis-zip.html#file","title":"File","text":"<p>Analog_Gyro_2_Axis.zip (file size: 901 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Analog-Gyro-Axis-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:57, 23 August 2019 (901 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Analog-Gyro-Axis-zip.html#file-usage","title":"File usage","text":"<p>The following file is a duplicate of this file (more details):</p> <ul> <li>File:Serial Camera software.zip</li> </ul> <p>There are no pages that use this file.</p>"},{"location":"files/Analog-Gyro-zip.html","title":"File:Analog Gyro.zip","text":""},{"location":"files/Analog-Gyro-zip.html#file","title":"File","text":"<p>Analog_Gyro.zip (file size: 754 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Analog-Gyro-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:52, 23 August 2019 (754 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Analog-Gyro-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Arduino-Demo-code-ArduinoUNO%26Mega2560-zip.html","title":"File:Arduino Demo code ArduinoUNO&Mega2560.zip","text":""},{"location":"files/Arduino-Demo-code-ArduinoUNO%26Mega2560-zip.html#file","title":"File","text":"<p>Arduino_Demo_code_ArduinoUNO&amp;Mega2560.zip (file size: 2.47 MB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Arduino-Demo-code-ArduinoUNO%26Mega2560-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:03, 6 June 2022 (2.47 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Arduino-Demo-code-ArduinoUNO%26Mega2560-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Arduino-Demo-for-16x16-LED-zip.html","title":"File:Arduino Demo for 16x 16 LED.zip","text":""},{"location":"files/Arduino-Demo-for-16x16-LED-zip.html#file","title":"File","text":"<p>Arduino_Demo_for_16x_16_LED.zip (file size: 45 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Arduino-Demo-for-16x16-LED-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 11:14, 22 August 2019 (45 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Arduino-Demo-for-16x16-LED-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Arduino-code-zip.html","title":"File:Arduino code.zip","text":""},{"location":"files/Arduino-code-zip.html#file","title":"File","text":"<p>Arduino_code.zip (file size: 1.7 MB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Arduino-code-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:42, 1 November 2022 (1.7 MB) Admin (talk | contribs) 07:53, 26 October 2022 (1.61 MB) Admin (talk | contribs) 07:53, 26 October 2022 (1.61 MB) Admin (talk | contribs) 07:13, 19 October 2022 (1.61 MB) Admin (talk | contribs) 07:13, 19 October 2022 (1.61 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Arduino-code-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/BMP280-zip.html","title":"File:BMP280.zip","text":""},{"location":"files/BMP280-zip.html#file","title":"File","text":"<p>BMP280.zip (file size: 4 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/BMP280-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:35, 24 August 2019 (4 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/BMP280-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Barometer-zip.html","title":"File:Barometer.zip","text":""},{"location":"files/Barometer-zip.html#file","title":"File","text":"<p>Barometer.zip (file size: 4 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Barometer-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:13, 23 August 2019 (4 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Barometer-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Button-zip.html","title":"File:Button.zip","text":""},{"location":"files/Button-zip.html#file","title":"File","text":"<p>Button.zip (file size: 454 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Button-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:54, 7 December 2022 (454 bytes) Admin (talk | contribs) 01:51, 8 June 2021 (2 KB) Admin (talk | contribs) 01:51, 8 June 2021 (2 KB) Admin (talk | contribs) 10:15, 23 August 2019 (454 bytes) Admin (talk | contribs) 10:15, 23 August 2019 (454 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Button-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Buzzer-zip.html","title":"File:Buzzer.zip","text":""},{"location":"files/Buzzer-zip.html#file","title":"File","text":"<p>Buzzer.zip (file size: 389 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Buzzer-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:53, 24 August 2019 (389 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Buzzer-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/CAN-BUS-Shield-master-zip.html","title":"File:CAN BUS Shield master.zip","text":""},{"location":"files/CAN-BUS-Shield-master-zip.html#file","title":"File","text":"<p>CAN_BUS_Shield_master.zip (file size: 25 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/CAN-BUS-Shield-master-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:22, 23 August 2019 (25 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/CAN-BUS-Shield-master-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/CC1101-zip.html","title":"File:CC1101.zip","text":""},{"location":"files/CC1101-zip.html#file","title":"File","text":"<p>CC1101.zip (file size: 7 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/CC1101-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 07:00, 24 August 2019 (7 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/CC1101-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/CC3000-Library-zip.html","title":"File:CC3000 Library.zip","text":""},{"location":"files/CC3000-Library-zip.html#file","title":"File","text":"<p>CC3000_Library.zip (file size: 237 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/CC3000-Library-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:51, 24 August 2019 (237 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/CC3000-Library-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/CC3000-Module-pdf.html","title":"File:CC3000 Module.pdf","text":""},{"location":"files/CC3000-Module-pdf.html#file","title":"File","text":"<p>CC3000_Module.pdf (file size: 615 KB, MIME type: application/pdf)</p>"},{"location":"files/CC3000-Module-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:33, 5 August 2021 (615 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/CC3000-Module-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Coding-System-of-Strain-Gauges-AGS-TECH-Version-pdf.html","title":"File:Coding System of Strain Gauges-AGS-TECH Version.pdf","text":""},{"location":"files/Coding-System-of-Strain-Gauges-AGS-TECH-Version-pdf.html#file","title":"File","text":"<p>Coding_System_of_Strain_Gauges-AGS-TECH_Version.pdf (file size: 494 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Coding-System-of-Strain-Gauges-AGS-TECH-Version-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:05, 23 August 2019 (494 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Coding-System-of-Strain-Gauges-AGS-TECH-Version-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Config-zip.html","title":"File:Config.zip","text":""},{"location":"files/Config-zip.html#file","title":"File","text":"<p>Config.zip (file size: 1,023 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Config-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:56, 23 August 2019 (1,023 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Config-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crazepony-5.2-ble-fc-0929-6f07e60-hex-zip.html","title":"File:Crazepony-5.2-ble-fc-0929-6f07e60-hex.zip","text":""},{"location":"files/Crazepony-5.2-ble-fc-0929-6f07e60-hex-zip.html#file","title":"File","text":"<p>Crazepony-5.2-ble-fc-0929-6f07e60-hex.zip (file size: 61 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crazepony-5.2-ble-fc-0929-6f07e60-hex-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:13, 23 August 2019 (61 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crazepony-5.2-ble-fc-0929-6f07e60-hex-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crazepony-5.2-ble-zip.html","title":"File:Crazepony 5.2 ble.zip","text":""},{"location":"files/Crazepony-5.2-ble-zip.html#file","title":"File","text":"<p>Crazepony_5.2_ble.zip (file size: 44 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crazepony-5.2-ble-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:36, 24 August 2019 (44 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crazepony-5.2-ble-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crazepony-Datasheet-zip.html","title":"File:Crazepony Datasheet.zip","text":""},{"location":"files/Crazepony-Datasheet-zip.html#file","title":"File","text":"<p>Crazepony_Datasheet.zip (file size: 5.88 MB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crazepony-Datasheet-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:12, 26 August 2019 (5.88 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crazepony-Datasheet-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crazepony-Schematic-zip.html","title":"File:Crazepony Schematic.zip","text":""},{"location":"files/Crazepony-Schematic-zip.html#file","title":"File","text":"<p>Crazepony_Schematic.zip (file size: 69 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crazepony-Schematic-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:22, 23 August 2019 (69 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crazepony-Schematic-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crazepony-firmware-none-5.2-ble-zip.html","title":"File:Crazepony-firmware-none-5.2-ble.zip","text":""},{"location":"files/Crazepony-firmware-none-5.2-ble-zip.html#file","title":"File","text":"<p>Crazepony-firmware-none-5.2-ble.zip (file size: 424 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crazepony-firmware-none-5.2-ble-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:35, 23 August 2019 (424 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crazepony-firmware-none-5.2-ble-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/CrazeponyV5.1-GUI-zip.html","title":"File:CrazeponyV5.1 GUI.zip","text":""},{"location":"files/CrazeponyV5.1-GUI-zip.html#file","title":"File","text":"<p>CrazeponyV5.1_GUI.zip (file size: 267 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/CrazeponyV5.1-GUI-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:25, 26 August 2019 (267 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/CrazeponyV5.1-GUI-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crotail-Microwave-sensor-zip.html","title":"File:Crotail- Microwave sensor.zip","text":""},{"location":"files/Crotail-Microwave-sensor-zip.html#file","title":"File","text":"<p>Crotail-_Microwave_sensor.zip (file size: 51 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crotail-Microwave-sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:11, 24 August 2019 (51 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crotail-Microwave-sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/CrowBot-BOLT-Schematic-pdf-pdf.html","title":"File:CrowBot-BOLT Schematic.pdf.pdf","text":""},{"location":"files/CrowBot-BOLT-Schematic-pdf-pdf.html#file","title":"File","text":"<p>CrowBot-BOLT_Schematic.pdf.pdf (file size: 90 KB, MIME type: application/pdf)</p>"},{"location":"files/CrowBot-BOLT-Schematic-pdf-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 06:17, 14 October 2022 (90 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/CrowBot-BOLT-Schematic-pdf-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/CrowBot-BOLT-Structural-3D-Model-STPfile-zip.html","title":"File:CrowBot-BOLT Structural 3D Model STPfile.zip","text":""},{"location":"files/CrowBot-BOLT-Structural-3D-Model-STPfile-zip.html#file","title":"File","text":"<p>CrowBot-BOLT_Structural_3D_Model_STPfile.zip (file size: 7.67 MB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/CrowBot-BOLT-Structural-3D-Model-STPfile-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 07:26, 19 October 2022 (7.67 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/CrowBot-BOLT-Structural-3D-Model-STPfile-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/CrowBot-V1.4-20220909-zip.html","title":"File:CrowBot -V1.4-20220909.zip","text":""},{"location":"files/CrowBot-V1.4-20220909-zip.html#file","title":"File","text":"<p>CrowBot_-V1.4-20220909.zip (file size: 295 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/CrowBot-V1.4-20220909-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:41, 17 October 2022 (295 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/CrowBot-V1.4-20220909-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-3-Axis-Digital-Compass-eagle-files-zip.html","title":"File:Crowtail- 3-Axis Digital Compass eagle files.zip","text":"<p>No file by this name exists.</p>"},{"location":"files/Crowtail-3-Axis-Digital-Compass-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-3-Axis-Digital-Compass-zip.html","title":"File:Crowtail- 3-Axis Digital Compass.zip","text":""},{"location":"files/Crowtail-3-Axis-Digital-Compass-zip.html#file","title":"File","text":"<p>Crowtail-_3-Axis_Digital_Compass.zip (file size: 7 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-3-Axis-Digital-Compass-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 01:25, 24 August 2019 (7 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-3-Axis-Digital-Compass-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-3-Axis-Digital-Gyro-eagle-files-zip.html","title":"File:Crowtail- 3-Axis Digital Gyro eagle files.zip","text":""},{"location":"files/Crowtail-3-Axis-Digital-Gyro-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-_3-Axis_Digital_Gyro_eagle_files.zip (file size: 21 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-3-Axis-Digital-Gyro-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:24, 26 August 2019 (21 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-3-Axis-Digital-Gyro-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-3-Axis-Digital-Gyro-zip.html","title":"File:Crowtail- 3-Axis Digital Gyro.zip","text":""},{"location":"files/Crowtail-3-Axis-Digital-Gyro-zip.html#file","title":"File","text":"<p>Crowtail-_3-Axis_Digital_Gyro.zip (file size: 6 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-3-Axis-Digital-Gyro-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:00, 23 August 2019 (6 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-3-Axis-Digital-Gyro-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-9G-Servo-zip.html","title":"File:Crowtail- 9G Servo.zip","text":""},{"location":"files/Crowtail-9G-Servo-zip.html#file","title":"File","text":"<p>Crowtail-_9G_Servo.zip (file size: 12 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-9G-Servo-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:38, 24 August 2019 (12 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-9G-Servo-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-AM2302-Humidity%26Temperature-Sensor-V2.0-zip.html","title":"File:Crowtail-AM2302 Humidity&Temperature Sensor-V2.0.zip","text":""},{"location":"files/Crowtail-AM2302-Humidity%26Temperature-Sensor-V2.0-zip.html#file","title":"File","text":"<p>Crowtail-AM2302_Humidity&amp;Temperature_Sensor-V2.0.zip (file size: 11 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-AM2302-Humidity%26Temperature-Sensor-V2.0-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 04:34, 18 December 2020 (11 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-AM2302-Humidity%26Temperature-Sensor-V2.0-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Air-Quality-Sensor-eagle-files-zip.html","title":"File:Crowtail- Air Quality Sensor eagle files.zip","text":""},{"location":"files/Crowtail-Air-Quality-Sensor-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-_Air_Quality_Sensor_eagle_files.zip (file size: 26 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Air-Quality-Sensor-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:51, 26 August 2019 (26 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Air-Quality-Sensor-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Analog-Grayscale-Sensor-eagle-files-zip.html","title":"File:Crowtail-Analog Grayscale Sensor eagle files.zip","text":""},{"location":"files/Crowtail-Analog-Grayscale-Sensor-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-Analog_Grayscale_Sensor_eagle_files.zip (file size: 16 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Analog-Grayscale-Sensor-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:16, 24 August 2019 (16 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Analog-Grayscale-Sensor-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Analog-Gyro-zip.html","title":"File:Crowtail-Analog Gyro.zip","text":""},{"location":"files/Crowtail-Analog-Gyro-zip.html#file","title":"File","text":"<p>Crowtail-Analog_Gyro.zip (file size: 16 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Analog-Gyro-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:48, 23 August 2019 (16 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Analog-Gyro-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Base-Shield-Eagle-files-zip.html","title":"File:Crowtail-Base Shield Eagle files.zip","text":""},{"location":"files/Crowtail-Base-Shield-Eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-Base_Shield_Eagle_files.zip (file size: 3 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Base-Shield-Eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 11:06, 19 May 2023 (3 KB) Admin (talk | contribs) 02:51, 26 August 2019 (113 KB) Admin (talk | contribs) 02:51, 26 August 2019 (113 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Base-Shield-Eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Button-files-zip.html","title":"File:Crowtail Button files.zip","text":""},{"location":"files/Crowtail-Button-files-zip.html#file","title":"File","text":"<p>Crowtail_Button_files.zip (file size: 12 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Button-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 04:18, 23 August 2019 (12 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Button-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Buzzer-files-zip.html","title":"File:Crowtail Buzzer files.zip","text":""},{"location":"files/Crowtail-Buzzer-files-zip.html#file","title":"File","text":"<p>Crowtail_Buzzer_files.zip (file size: 11 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Buzzer-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:19, 26 August 2019 (11 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Buzzer-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Collision-Sensor-eagle-files-zip.html","title":"File:Crowtail- Collision Sensor eagle files.zip","text":""},{"location":"files/Crowtail-Collision-Sensor-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-_Collision_Sensor_eagle_files.zip (file size: 14 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Collision-Sensor-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:50, 23 August 2019 (14 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Collision-Sensor-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Collision-Sensor-zip.html","title":"File:Crowtail- Collision Sensor.zip","text":""},{"location":"files/Crowtail-Collision-Sensor-zip.html#file","title":"File","text":"<p>Crowtail-_Collision_Sensor.zip (file size: 688 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Collision-Sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:38, 24 August 2019 (688 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Collision-Sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-DHT20-zip.html","title":"File:Crowtail-DHT20.zip","text":""},{"location":"files/Crowtail-DHT20-zip.html#file","title":"File","text":"<p>Crowtail-DHT20.zip (file size: 8 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-DHT20-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:34, 25 October 2021 (8 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-DHT20-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Digital-Light-Sensor-v1.0-zip.html","title":"File:Crowtail- Digital Light Sensor v1.0.zip","text":""},{"location":"files/Crowtail-Digital-Light-Sensor-v1.0-zip.html#file","title":"File","text":"<p>Crowtail-_Digital_Light_Sensor_v1.0.zip (file size: 18 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Digital-Light-Sensor-v1.0-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:26, 24 August 2019 (18 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Digital-Light-Sensor-v1.0-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Digital-Programmable-Potentiometer-V2.0-Eagle-zip.html","title":"File:Crowtail-Digital Programmable Potentiometer-V2.0-Eagle.zip","text":""},{"location":"files/Crowtail-Digital-Programmable-Potentiometer-V2.0-Eagle-zip.html#file","title":"File","text":"<p>Crowtail-Digital_Programmable_Potentiometer-V2.0-Eagle.zip (file size: 16 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Digital-Programmable-Potentiometer-V2.0-Eagle-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:25, 2 June 2022 (16 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Digital-Programmable-Potentiometer-V2.0-Eagle-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Dry-Reed-Relay-zip.html","title":"File:Crowtail- Dry-Reed Relay.zip","text":""},{"location":"files/Crowtail-Dry-Reed-Relay-zip.html#file","title":"File","text":"<p>Crowtail-_Dry-Reed_Relay.zip (file size: 21 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Dry-Reed-Relay-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:25, 26 August 2019 (21 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Dry-Reed-Relay-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-ES08A-MiniServo-zip.html","title":"File:Crowtail- ES08A Mini Servo.zip","text":""},{"location":"files/Crowtail-ES08A-MiniServo-zip.html#file","title":"File","text":"<p>Crowtail-_ES08A_Mini_Servo.zip (file size: 12 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-ES08A-MiniServo-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:25, 26 August 2019 (12 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-ES08A-MiniServo-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Electromagnet-eagle-file-zip.html","title":"File:Crowtail- Electromagnet eagle file.zip","text":""},{"location":"files/Crowtail-Electromagnet-eagle-file-zip.html#file","title":"File","text":"<p>Crowtail-_Electromagnet_eagle_file.zip (file size: 18 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Electromagnet-eagle-file-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:35, 24 August 2019 (18 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Electromagnet-eagle-file-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Encoder-zip.html","title":"File:Crowtail-Encoder.zip","text":""},{"location":"files/Crowtail-Encoder-zip.html#file","title":"File","text":"<p>Crowtail-Encoder.zip (file size: 15 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Encoder-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:33, 24 August 2019 (15 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Encoder-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Flame-Sensor-zip.html","title":"File:Crowtail-Flame Sensor.zip","text":""},{"location":"files/Crowtail-Flame-Sensor-zip.html#file","title":"File","text":"<p>Crowtail-Flame_Sensor.zip (file size: 20 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Flame-Sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:19, 24 August 2019 (20 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Flame-Sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-GPS-v1.0-zip.html","title":"File:Crowtail- GPS v1.0.zip","text":""},{"location":"files/Crowtail-GPS-v1.0-zip.html#file","title":"File","text":"<p>Crowtail-_GPS_v1.0.zip (file size: 25 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-GPS-v1.0-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:21, 26 August 2019 (25 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-GPS-v1.0-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-GPS.zip.html","title":"File:Crowtail GPS.zip","text":""},{"location":"files/Crowtail-GPS.zip.html#file","title":"File","text":"<p>Crowtail_GPS.zip (file size: 965 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-GPS.zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:29, 23 August 2019 (965 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-GPS.zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-HTU21D-Humidity%26Temperature-Sensor-eagle-file-zip.html","title":"File:Crowtail- HTU21D Humidity&Temperature Sensor eagle file.zip","text":""},{"location":"files/Crowtail-HTU21D-Humidity%26Temperature-Sensor-eagle-file-zip.html#file","title":"File","text":"<p>Crowtail-_HTU21D_Humidity&amp;Temperature_Sensor_eagle_file.zip (file size: 19 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-HTU21D-Humidity%26Temperature-Sensor-eagle-file-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 07:21, 2 June 2022 (19 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-HTU21D-Humidity%26Temperature-Sensor-eagle-file-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Hall-Sensor-eagle-files-zip.html","title":"File:Crowtail-Hall Sensor eagle files.zip","text":""},{"location":"files/Crowtail-Hall-Sensor-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-Hall_Sensor_eagle_files.zip (file size: 15 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Hall-Sensor-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 04:02, 24 August 2019   (15 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Hall-Sensor-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-I2C-1602LCD-zip.html","title":"File:Crowtail I2C 1602LCD.zip","text":""},{"location":"files/Crowtail-I2C-1602LCD-zip.html#file","title":"File","text":"<p>Crowtail_I2C_1602LCD.zip (file size: 8 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-I2C-1602LCD-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:50, 23 August 2019 (8 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-I2C-1602LCD-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-I2C-Color-Sensor-eagle-files-zip.html","title":"File:Crowtail- I2C Color Sensor eagle files.zip","text":""},{"location":"files/Crowtail-I2C-Color-Sensor-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-_I2C_Color_Sensor_eagle_files.zip (file size: 23 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-I2C-Color-Sensor-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 11:06, 22 August 2019 (23 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-I2C-Color-Sensor-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-I2C-EEPROM-zip.html","title":"File:Crowtail- I2C EEPROM.zip","text":""},{"location":"files/Crowtail-I2C-EEPROM-zip.html#file","title":"File","text":"<p>Crowtail-_I2C_EEPROM.zip (file size: 13 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-I2C-EEPROM-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:01, 24 August 2019 (13 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-I2C-EEPROM-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-I2C-Hub.zip.html","title":"File:Crowtail-I2C Hub.zip","text":""},{"location":"files/Crowtail-I2C-Hub.zip.html#file","title":"File","text":"<p>Crowtail-I2C_Hub.zip (file size: 8 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-I2C-Hub.zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:01, 24 August 2019 (8 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-I2C-Hub.zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-I2C-LCD-v1.0.zip.html","title":"File:Crowtail-I2C LCD v1.0.zip","text":""},{"location":"files/Crowtail-I2C-LCD-v1.0.zip.html#file","title":"File","text":"<p>Crowtail-I2C_LCD_v1.0.zip (file size: 26 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-I2C-LCD-v1.0.zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:42, 24 August 2019 (26 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-I2C-LCD-v1.0.zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-I2C-Motor-Driver-Source-Library-zip.html","title":"File:Crowtail- I2C Motor Driver eagle file.zip","text":"<p>No file by this name exists.</p>"},{"location":"files/Crowtail-I2C-Motor-Driver-Source-Library-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-I2C-Motor-Driver-eagle-file-zip.html","title":"File:Crowtail- I2C Motor Driver eagle file.zip","text":""},{"location":"files/Crowtail-I2C-Motor-Driver-eagle-file-zip.html#file","title":"File","text":"<p>Crowtail-_I2C_Motor_Driver_eagle_file.zip (file size: 34 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-I2C-Motor-Driver-eagle-file-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:42, 24 August 2019 (34 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-I2C-Motor-Driver-eagle-file-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-IMU-10DOF-V2.0-Eagle-files-zip.html","title":"File:Crowtail- IMU 10DOF V2.0 Eagle files.zip","text":""},{"location":"files/Crowtail-IMU-10DOF-V2.0-Eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-_IMU_10DOF_V2.0_Eagle_files.zip (file size: 26 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-IMU-10DOF-V2.0-Eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 06:43, 2 June 2022 (26 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-IMU-10DOF-V2.0-Eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-IR-Reflective-Sensor-zip.html","title":"File:Crowtail-IR Reflective Sensor.zip","text":""},{"location":"files/Crowtail-IR-Reflective-Sensor-zip.html#file","title":"File","text":"<p>Crowtail-IR_Reflective_Sensor.zip (file size: 21 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-IR-Reflective-Sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 01:47, 24 August 2019 (21 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-IR-Reflective-Sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Infrared-Temperature-Sensor-zip.html","title":"File:Crowtail- Infrared Temperature Sensor.zip","text":""},{"location":"files/Crowtail-Infrared-Temperature-Sensor-zip.html#file","title":"File","text":"<p>Crowtail-_Infrared_Temperature_Sensor.zip (file size: 15 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Infrared-Temperature-Sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:24, 26 August 2019 (15 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Infrared-Temperature-Sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Infrared-Temperature-Sensorv1.0-zip.html","title":"File:Crowtail-Infrared Temperature Sensorv1.0.zip","text":""},{"location":"files/Crowtail-Infrared-Temperature-Sensorv1.0-zip.html#file","title":"File","text":"<p>Crowtail-Infrared_Temperature_Sensorv1.0.zip (file size: 15 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Infrared-Temperature-Sensorv1.0-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:36, 26 August 2019 (15 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Infrared-Temperature-Sensorv1.0-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-LED-Bar-eagle-files-zip.html","title":"File:Crowtail- LED Bar eagle files.zip","text":""},{"location":"files/Crowtail-LED-Bar-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-_LED_Bar_eagle_files.zip (file size: 19 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-LED-Bar-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:21, 23 August 2019 (19 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-LED-Bar-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-LED-v1.1-zip.html","title":"File:Crowtail-LED v1.1.zip","text":""},{"location":"files/Crowtail-LED-v1.1-zip.html#file","title":"File","text":"<p>Crowtail-LED_v1.1.zip (file size: 42 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-LED-v1.1-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 04:23, 23 August 2019 (42 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-LED-v1.1-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Light-Sensor-eagle-files-zip.html","title":"File:Crowtail Light Sensor eagle files.zip","text":""},{"location":"files/Crowtail-Light-Sensor-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail_Light_Sensor_eagle_files.zip (file size: 11 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Light-Sensor-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:46, 23 August 2019 (11 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Light-Sensor-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Linear-Potentiometer-eagle-files-zip.html","title":"File:Crowtail-Linear Potentiometer eagle files.zip","text":""},{"location":"files/Crowtail-Linear-Potentiometer-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-Linear_Potentiometer_eagle_files.zip (file size: 12 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Linear-Potentiometer-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:38, 26 August 2019 (12 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Linear-Potentiometer-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-MOSFET-eagle-files-zip.html","title":"File:Crowtail-MOSFET eagle files.zip","text":""},{"location":"files/Crowtail-MOSFET-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-MOSFET_eagle_files.zip (file size: 22 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-MOSFET-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:43, 23 August 2019 (22 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-MOSFET-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-MP3eagle-files-zip.html","title":"File:Crowtail- MP3 eagle files.zip","text":""},{"location":"files/Crowtail-MP3eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-_MP3_eagle_files.zip (file size: 25 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-MP3eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:13, 26 August 2019 (25 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-MP3eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-MPU6050-Accelerometer%26Gyro-V2.0-Eagle-zip.html","title":"File:Crowtail-MPU6050 Accelerometer&Gyro-V2.0-Eagle.zip","text":""},{"location":"files/Crowtail-MPU6050-Accelerometer%26Gyro-V2.0-Eagle-zip.html#file","title":"File","text":"<p>Crowtail-MPU6050_Accelerometer&amp;Gyro-V2.0-Eagle.zip (file size: 29 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-MPU6050-Accelerometer%26Gyro-V2.0-Eagle-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 04:14, 2 June 2022 (29 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-MPU6050-Accelerometer%26Gyro-V2.0-Eagle-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Magnetic-Switch-zip.html","title":"File:Crowtail- Magnetic Switch.zip","text":""},{"location":"files/Crowtail-Magnetic-Switch-zip.html#file","title":"File","text":"<p>Crowtail-_Magnetic_Switch.zip (file size: 8 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Magnetic-Switch-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:13, 26 August 2019 (8 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Magnetic-Switch-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Moisture-Sensor-zip.html","title":"File:Crowtail-Moisture Sensor.zip","text":""},{"location":"files/Crowtail-Moisture-Sensor-zip.html#file","title":"File","text":"<p>Crowtail-Moisture_Sensor.zip (file size: 12 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Moisture-Sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:40, 26 August 2019 (12 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Moisture-Sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Nano-Base-Board-Eagle-files-zip.html","title":"File:Crowtail-Nano Base Board Eagle files.zip","text":""},{"location":"files/Crowtail-Nano-Base-Board-Eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-Nano_Base_Board_Eagle_files.zip (file size: 15 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Nano-Base-Board-Eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:42, 23 August 2019 (15 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Nano-Base-Board-Eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-OLED-eagle-files-zip.html","title":"File:Crowtail- OLED eagle files.zip","text":""},{"location":"files/Crowtail-OLED-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-_OLED_eagle_files.zip (file size: 23 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-OLED-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:03, 23 August 2019 (23 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-OLED-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-PIR-Motion-Sensor-eagle-files-zip.html","title":"File:Crowtail- PIR Motion Sensor eagle files.zip","text":""},{"location":"files/Crowtail-PIR-Motion-Sensor-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-_PIR_Motion_Sensor_eagle_files.zip (file size: 27 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-PIR-Motion-Sensor-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:38, 24 August 2019 (27 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-PIR-Motion-Sensor-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-PIR-Motion-Sensor-zip.html","title":"File:Crowtail- PIR Motion Sensor.zip","text":"<p>No file by this name exists.</p>"},{"location":"files/Crowtail-PIR-Motion-Sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Protoboard-v1.0-eagle-file-zip.html","title":"File:Crowtail- Protoboard v1.0 eagle file.zip","text":""},{"location":"files/Crowtail-Protoboard-v1.0-eagle-file-zip.html#file","title":"File","text":"<p>Crowtail-_Protoboard_v1.0_eagle_file.zip (file size: 208 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Protoboard-v1.0-eagle-file-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:43, 23 August 2019 (208 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Protoboard-v1.0-eagle-file-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Pulse-Sensor-eagle-file-zip.html","title":"File:Crowtail- Pulse Sensor eagle file.zip","text":""},{"location":"files/Crowtail-Pulse-Sensor-eagle-file-zip.html#file","title":"File","text":"<p>Crowtail-_Pulse_Sensor_eagle_file.zip (file size: 64 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Pulse-Sensor-eagle-file-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:18, 23 August 2019 (64 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Pulse-Sensor-eagle-file-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Recorder-eagle-file-zip.html","title":"File:Crowtail- Recorder eagle file.zip","text":""},{"location":"files/Crowtail-Recorder-eagle-file-zip.html#file","title":"File","text":"<p>Crowtail-_Recorder_eagle_file.zip (file size: 27 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Recorder-eagle-file-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:11, 23 August 2019 (27 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Recorder-eagle-file-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Rotary-Angle-Sensor-zip.html","title":"File:Crowtail Rotary Angle Sensor.zip","text":""},{"location":"files/Crowtail-Rotary-Angle-Sensor-zip.html#file","title":"File","text":"<p>Crowtail_Rotary_Angle_Sensor.zip (file size: 11 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Rotary-Angle-Sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 07:57, 24 August 2019 (11 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Rotary-Angle-Sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-SIM808-v1.0-rar.html","title":"File:Crowtail- SIM808 v1.0.rar","text":"<p>No file by this name exists.</p>"},{"location":"files/Crowtail-SIM808-v1.0-rar.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Solid-State-Relay-eagle-file-zip.html","title":"File:Crowtail- Solid-State Relay eagle file.zip","text":""},{"location":"files/Crowtail-Solid-State-Relay-eagle-file-zip.html#file","title":"File","text":"<p>Crowtail-_Solid-State_Relay_eagle_file.zip (file size: 30 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Solid-State-Relay-eagle-file-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 01:51, 24 August 2019 (30 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Solid-State-Relay-eagle-file-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Sound-Sensor-v1.0-eagle-files-zip.html","title":"File:Crowtail-Sound Sensor v1.0 eagle files.zip","text":""},{"location":"files/Crowtail-Sound-Sensor-v1.0-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-Sound_Sensor_v1.0_eagle_files.zip (file size: 19 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Sound-Sensor-v1.0-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:38, 23 August 2019 (19 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Sound-Sensor-v1.0-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Sound-Sensor-v2.0-zip.html","title":"File:Crowtail- Sound Sensor v2.0.zip","text":""},{"location":"files/Crowtail-Sound-Sensor-v2.0-zip.html#file","title":"File","text":"<p>Crowtail-_Sound_Sensor_v2.0.zip (file size: 21 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Sound-Sensor-v2.0-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:20, 11 August 2022 (21 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Sound-Sensor-v2.0-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Speaker-eagle-zip.html","title":"File:Crowtail- Speaker eagle.zip","text":""},{"location":"files/Crowtail-Speaker-eagle-zip.html#file","title":"File","text":"<p>Crowtail-_Speaker_eagle.zip (file size: 22 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Speaker-eagle-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:17, 24 August 2019 (22 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Speaker-eagle-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Strain-Gauge-sensor-v2.0-Eagle-zip.html","title":"File:Crowtail- Strain Gauge sensor v2.0-Eagle.zip","text":""},{"location":"files/Crowtail-Strain-Gauge-sensor-v2.0-Eagle-zip.html#file","title":"File","text":"<p>Crowtail-_Strain_Gauge_sensor_v2.0-Eagle.zip (file size: 36 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Strain-Gauge-sensor-v2.0-Eagle-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:28, 30 May 2022 (36 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Strain-Gauge-sensor-v2.0-Eagle-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Switch-eagle-files-zip.html","title":"File:Crowtail Switch eagle files.zip","text":""},{"location":"files/Crowtail-Switch-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail_Switch_eagle_files.zip (file size: 13 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Switch-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 06:55, 23 August 2019 (13 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Switch-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Temperature.html","title":"File:Crowtail- Temperature","text":"<p>No file by this name exists.</p>"},{"location":"files/Crowtail-Temperature.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Thumb-Joystick-eagle-files-zip.html","title":"File:Crowtail-Thumb Joystick eagle files.zip","text":""},{"location":"files/Crowtail-Thumb-Joystick-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-Thumb_Joystick_eagle_files.zip (file size: 12 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Thumb-Joystick-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:10, 23 August 2019 (12 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Thumb-Joystick-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Tilt-Switch-eagle-files-zip.html","title":"File:Crowtail-Tilt Switch eagle files.zip","text":""},{"location":"files/Crowtail-Tilt-Switch-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-Tilt_Switch_eagle_files.zip (file size: 12 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Tilt-Switch-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:44, 23 August 2019 (12 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Tilt-Switch-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Touch-Sensor-zip.html","title":"File:Crowtail-Touch Sensor.zip","text":""},{"location":"files/Crowtail-Touch-Sensor-zip.html#file","title":"File","text":"<p>Crowtail-Touch_Sensor.zip (file size: 10 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Touch-Sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:27, 24 August 2019 (10 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Touch-Sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-UV-Sensor-eagle-files-zip.html","title":"File:Crowtail-UV Sensor eagle files.zip","text":""},{"location":"files/Crowtail-UV-Sensor-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-UV_Sensor_eagle_files.zip (file size: 14 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-UV-Sensor-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:10, 23 August 2019 (14 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-UV-Sensor-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-VL53L0X-Laser-Ranging-Sensor-V2.0-Eagle-zip.html","title":"File:Crowtail-VL53L0X Laser Ranging Sensor-V2.0-Eagle.zip","text":""},{"location":"files/Crowtail-VL53L0X-Laser-Ranging-Sensor-V2.0-Eagle-zip.html#file","title":"File","text":"<p>Crowtail-VL53L0X_Laser_Ranging_Sensor-V2.0-Eagle.zip (file size: 23 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-VL53L0X-Laser-Ranging-Sensor-V2.0-Eagle-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 04:27, 31 May 2022 (23 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-VL53L0X-Laser-Ranging-Sensor-V2.0-Eagle-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Vibration-Motor-eagle-files-zip.html","title":"File:Crowtail-Vibration Motor eagle files.zip","text":""},{"location":"files/Crowtail-Vibration-Motor-eagle-files-zip.html#file","title":"File","text":"<p>Crowtail-Vibration_Motor_eagle_files.zip (file size: 14 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Vibration-Motor-eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:27, 24 August 2019 (14 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Vibration-Motor-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Vibration-Sensor-eagle-files-zip.html","title":"File:Crowtail-Vibration Sensor eagle files.zip","text":"<p>No file by this name exists.</p>"},{"location":"files/Crowtail-Vibration-Sensor-eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Crowtail-Weight-Sensor-V2.0-Eagle-zip.html","title":"File:Crowtail-Weight Sensor-V2.0-Eagle.zip","text":""},{"location":"files/Crowtail-Weight-Sensor-V2.0-Eagle-zip.html#file","title":"File","text":"<p>Crowtail-Weight_Sensor-V2.0-Eagle.zip (file size: 20 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Crowtail-Weight-Sensor-V2.0-Eagle-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:34, 2 June 2022 (20 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Crowtail-Weight-Sensor-V2.0-Eagle-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/CrowtailKnock-Sensor-v2.0-Eagle-file.zip.html","title":"File:Crowtail- Knock Sensor v2.0-Eagle file.zip","text":""},{"location":"files/CrowtailKnock-Sensor-v2.0-Eagle-file.zip.html#file","title":"File","text":"<p>Crowtail-_Knock_Sensor_v2.0-Eagle_file.zip (file size:13 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/CrowtailKnock-Sensor-v2.0-Eagle-file.zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:14, 2 June 2022 (13 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/CrowtailKnock-Sensor-v2.0-Eagle-file.zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/DFRobot-ID809-master-zip.html","title":"File:DFRobot ID809-master.zip","text":""},{"location":"files/DFRobot-ID809-master-zip.html#file","title":"File","text":"<p>DFRobot_ID809-master.zip (file size: 31 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/DFRobot-ID809-master-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:20, 26 August 2022 (31 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/DFRobot-ID809-master-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/DHT-zip.html","title":"File:DHT.zip","text":""},{"location":"files/DHT-zip.html#file","title":"File","text":"<p>DHT.zip (file size: 4 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/DHT-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:24, 23 August 2019 (4 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/DHT-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/DRV2605-zip.html","title":"File:DRV2605.zip","text":""},{"location":"files/DRV2605-zip.html#file","title":"File","text":"<p>DRV2605.zip (file size: 5 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/DRV2605-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:35, 26 August 2019 (5 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/DRV2605-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/DRV8830-pdf.html","title":"File:DRV8830.pdf","text":""},{"location":"files/DRV8830-pdf.html#file","title":"File","text":"<p>DRV8830.pdf (file size: 974 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/DRV8830-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:25, 23 August 2019 (974 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/DRV8830-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/DS18B20-zip.html","title":"File:DS18B20.zip","text":""},{"location":"files/DS18B20-zip.html#file","title":"File","text":"<p>DS18B20.zip (file size: 11 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/DS18B20-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:19, 26 August 2019 (11 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/DS18B20-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/DSM501-pdf.html","title":"File:DSM501.pdf","text":""},{"location":"files/DSM501-pdf.html#file","title":"File","text":"<p>DSM501.pdf (file size: 275 KB, MIME type: application/pdf)</p>"},{"location":"files/DSM501-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:57, 23 August 2019 (275 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/DSM501-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/DSM501A-zip.html","title":"File:DSM501A.zip","text":""},{"location":"files/DSM501A-zip.html#file","title":"File","text":"<p>DSM501A.zip (file size: 722 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/DSM501A-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:42, 24 August 2019 (722 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/DSM501A-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/DY001fingerprint-pdf.html","title":"File:DY001fingerprint.pdf","text":""},{"location":"files/DY001fingerprint-pdf.html#file","title":"File","text":"<p>DY001fingerprint.pdf (file size: 797 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/DY001fingerprint-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:40, 24 August 2019 (797 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/DY001fingerprint-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Digital-Light-Sensor-zip.html","title":"File:Digital Light Sensor.zip","text":""},{"location":"files/Digital-Light-Sensor-zip.html#file","title":"File","text":"<p>Digital_Light_Sensor.zip (file size: 8 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Digital-Light-Sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:52, 24 August 2019 (8 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Digital-Light-Sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/ELE-AVR-ISP-Sheld-pdf.html","title":"File:ELE-AVR ISP-Sheld.pdf","text":""},{"location":"files/ELE-AVR-ISP-Sheld-pdf.html#file","title":"File","text":"<p>ELE-AVR_ISP-Sheld.pdf (file size: 63 KB, MIME type: application/pdf)</p>"},{"location":"files/ELE-AVR-ISP-Sheld-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:31, 24 August 2019 (63 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/ELE-AVR-ISP-Sheld-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/ENC-03-pdf.html","title":"File:ENC-03.pdf","text":"<p>No file by this name exists.</p>"},{"location":"files/ENC-03-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Eagle-files-zip.html","title":"File:Eagle files.zip","text":""},{"location":"files/Eagle-files-zip.html#file","title":"File","text":"<p>Eagle_files.zip (file size: 11 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Eagle-files-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:47, 25 October 2021 (11 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Eagle-files-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Elecrow-ESPduino-v1.0-zip.html","title":"File:Elecrow ESPduino v1.0.zip","text":"<p>No file by this name exists.</p>"},{"location":"files/Elecrow-ESPduino-v1.0-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Elecrow-partner-v12-pdf.html","title":"File:Elecrow partner v1.2.pdf","text":""},{"location":"files/Elecrow-partner-v12-pdf.html#file","title":"File","text":"<p>Elecrow_partner_v1.2.pdf (file size: 289 KB, MIME type: application/pdf)</p>"},{"location":"files/Elecrow-partner-v12-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 07:01, 5 March 2021 (289 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Elecrow-partner-v12-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Encoder-zip.html","title":"File:Encoder.zip","text":""},{"location":"files/Encoder-zip.html#file","title":"File","text":"<p>Encoder.zip (file size: 585 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Encoder-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:29, 23 August 2019 (585 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Encoder-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Factory-source-code-zip.html","title":"File:Factory source code.zip","text":""},{"location":"files/Factory-source-code-zip.html#file","title":"File","text":"<p>Factory_source_code.zip (file size: 15 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Factory-source-code-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:39, 1 November 2022 (15 KB) Admin (talk | contribs) 07:14, 19 October 2022 (15 KB) Admin (talk | contribs) 07:14, 19 October 2022 (15 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Factory-source-code-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Flame%20sensor-zip.html","title":"File:Flame sensor.zip","text":""},{"location":"files/Flame%20sensor-zip.html#file","title":"File","text":"<p>Flame_sensor.zip (file size: 480 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Flame%20sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:22, 26 August 2019 (480 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Flame%20sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Gas-Sensor-MQ2-zip.html","title":"File:Gas Sensor MQ2.zip","text":""},{"location":"files/Gas-Sensor-MQ2-zip.html#file","title":"File","text":"<p>Gas_Sensor_MQ2.zip (file size: 177 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Gas-Sensor-MQ2-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:17, 23 August 2019 (177 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Gas-Sensor-MQ2-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Gas-Sensor-MQ9-zip.html","title":"File:Gas Sensor MQ9.zip","text":""},{"location":"files/Gas-Sensor-MQ9-zip.html#file","title":"File","text":"<p>Gas_Sensor_MQ9.zip (file size: 2 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Gas-Sensor-MQ9-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:46, 24 August 2019 (2 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Gas-Sensor-MQ9-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/HTU21D-datasheet-pdf.html","title":"File:HTU21D datasheet.pdf","text":""},{"location":"files/HTU21D-datasheet-pdf.html#file","title":"File","text":"<p>HTU21D_datasheet.pdf (file size: 984 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/HTU21D-datasheet-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 07:25, 2 June 2022 (984 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/HTU21D-datasheet-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Hall-sensor-zip.html","title":"File:Hall sensor.zip","text":""},{"location":"files/Hall-sensor-zip.html#file","title":"File","text":"<p>Hall_sensor.zip (file size: 483 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Hall-sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:25, 24 August 2019 (483 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Hall-sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/How-to-calibrate-the-resistance-touch-screen-pdf.html","title":"File:How to calibrate the resistance touch screen.pdf","text":""},{"location":"files/How-to-calibrate-the-resistance-touch-screen-pdf.html#file","title":"File","text":"<p>How_to_calibrate_the_resistance_touch_screen.pdf (file size: 659 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/How-to-calibrate-the-resistance-touch-screen-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:51, 19 October 2021 (659 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/How-to-calibrate-the-resistance-touch-screen-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/I2C-Color-Sensor1-zip.html","title":"File:I2C Color Sensor1.zip","text":""},{"location":"files/I2C-Color-Sensor1-zip.html#file","title":"File","text":"<p>I2C_Color_Sensor1.zip (file size: 17 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/I2C-Color-Sensor1-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:57, 24 August 2019 (17 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/I2C-Color-Sensor1-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/ID%E4%B8%89%E8%83%BD1016C%E6%8C%87%E7%BA%B9%E6%A8%A1%E5%9D%97%E8%A7%84%E6%A0%BC%E4%B9%A6-pdf.html","title":"File:ID\u4e09\u80fd1016C\u6307\u7eb9\u6a21\u5757\u89c4\u683c\u4e66.pdf","text":""},{"location":"files/ID%E4%B8%89%E8%83%BD1016C%E6%8C%87%E7%BA%B9%E6%A8%A1%E5%9D%97%E8%A7%84%E6%A0%BC%E4%B9%A6-pdf.html#file","title":"File","text":"<p>ID\u4e09\u80fd1016C\u6307\u7eb9\u6a21\u5757\u89c4\u683c\u4e66.pdf (file size: 386 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/ID%E4%B8%89%E8%83%BD1016C%E6%8C%87%E7%BA%B9%E6%A8%A1%E5%9D%97%E8%A7%84%E6%A0%BC%E4%B9%A6-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current [10:26, 26 August 2022](ID\u4e09\u80fd1016C\u6307\u7eb9\u6a21\u5757\u89c4\u683c\u4e66.pdf (file size: 386 KB, MIME type: application/pdf) ) (386 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/ID%E4%B8%89%E8%83%BD1016C%E6%8C%87%E7%BA%B9%E6%A8%A1%E5%9D%97%E8%A7%84%E6%A0%BC%E4%B9%A6-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/ID%E4%B8%89%E8%83%BD%E6%8C%87%E7%BA%B9%E6%A8%A1%E5%9D%97%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%28%E6%8C%87%E4%BB%A4%E9%9B%86B%29-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C-V3.0%281%29-pdf.html","title":"File:ID\u4e09\u80fd\u6307\u7eb9\u6a21\u5757\u901a\u8baf\u534f\u8bae\uff08\u6307\u4ee4\u96c6B\uff09\u4f7f\u7528\u624b\u518c-V3.0 (1).pdf","text":""},{"location":"files/ID%E4%B8%89%E8%83%BD%E6%8C%87%E7%BA%B9%E6%A8%A1%E5%9D%97%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%28%E6%8C%87%E4%BB%A4%E9%9B%86B%29-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C-V3.0%281%29-pdf.html#file","title":"File","text":"<p>ID\u4e09\u80fd\u6307\u7eb9\u6a21\u5757\u901a\u8baf\u534f\u8bae\uff08\u6307\u4ee4\u96c6B\uff09\u4f7f\u7528\u624b\u518c-V3.0_(1).pdf (file size: 4.58 MB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/ID%E4%B8%89%E8%83%BD%E6%8C%87%E7%BA%B9%E6%A8%A1%E5%9D%97%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%28%E6%8C%87%E4%BB%A4%E9%9B%86B%29-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C-V3.0%281%29-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:28, 26 August 2022 (4.58 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/ID%E4%B8%89%E8%83%BD%E6%8C%87%E7%BA%B9%E6%A8%A1%E5%9D%97%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%28%E6%8C%87%E4%BB%A4%E9%9B%86B%29-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C-V3.0%281%29-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/ILI9341-Datasheet-pdf.html","title":"File:ILI9341 Datasheet.pdf","text":""},{"location":"files/ILI9341-Datasheet-pdf.html#file","title":"File","text":"<p>ILI9341_Datasheet.pdf (file size: 3.41 MB, MIME type: application/pdf)</p>"},{"location":"files/ILI9341-Datasheet-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:13, 6 June 2022 (3.41 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/ILI9341-Datasheet-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/IMU10lib-Arduino-Library-zip.html","title":"File:IMU10lib Arduino Library.zip","text":""},{"location":"files/IMU10lib-Arduino-Library-zip.html#file","title":"File","text":"<p>IMU10lib_Arduino_Library.zip (file size: 51 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/IMU10lib-Arduino-Library-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 06:08, 2 June 2022 (51 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/IMU10lib-Arduino-Library-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/INA219.zip.html","title":"File:INA219.zip","text":""},{"location":"files/INA219.zip.html#file","title":"File","text":"<p>INA219.zip (file size: 5 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/INA219.zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:37, 26 August 2019 (5 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/INA219.zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/IR-reflective-sensor-zip.html","title":"File:IR reflective sensor.zip","text":""},{"location":"files/IR-reflective-sensor-zip.html#file","title":"File","text":"<p>IR_reflective_sensor.zip (file size: 536 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/IR-reflective-sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 06:52, 23 August 2019 (536 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/IR-reflective-sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/IRF9540N-pdf.html","title":"File:IRF9540N.pdf","text":""},{"location":"files/IRF9540N-pdf.html#file","title":"File","text":"<p>IRF9540N.pdf (file size: 127 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/IRF9540N-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:42, 23 August 2019 (127 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/IRF9540N-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Joystick-for-Crowbot-V1.1-20220913-zip.html","title":"File:Joystick for Crowbot -V1.1-20220913.zip","text":""},{"location":"files/Joystick-for-Crowbot-V1.1-20220913-zip.html#file","title":"File","text":"<p>Joystick_for_Crowbot_-V1.1-20220913.zip (file size: 195 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Joystick-for-Crowbot-V1.1-20220913-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:43, 17 October 2022 (195 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Joystick-for-Crowbot-V1.1-20220913-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Joystick-zip.html","title":"File:Joystick.zip","text":""},{"location":"files/Joystick-zip.html#file","title":"File","text":"<p>Joystick.zip (file size: 521 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Joystick-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:12, 23 August 2019 (521 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Joystick-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/KT403-pdf.html","title":"File:KT403.pdf","text":""},{"location":"files/KT403-pdf.html#file","title":"File","text":"<p>KT403.pdf (file size: 793 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/KT403-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:23, 23 August 2019 (793 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/KT403-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Knock-Sensor-zip.html","title":"File:Knock Sensor.zip","text":""},{"location":"files/Knock-Sensor-zip.html#file","title":"File","text":"<p>Knock_Sensor.zip (file size:955 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Knock-Sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:11, 2 June 2022 (955 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Knock-Sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/LCD-show-zip.html","title":"File:LCD-show.zip","text":""},{"location":"files/LCD-show-zip.html#file","title":"File","text":"<p>LCD-show.zip (file size: 4.53 MB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/LCD-show-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 06:29, 5 August 2022 (4.53 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/LCD-show-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/LD-NFClib-zip.html","title":"File:LD NFClib.zip","text":""},{"location":"files/LD-NFClib-zip.html#file","title":"File","text":"<p>LD_NFClib.zip (file size: 5 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/LD-NFClib-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:31, 23 August 2019 (5 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/LD-NFClib-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/LED-Bar-zip.html","title":"File:LED Bar.zip","text":""},{"location":"files/LED-Bar-zip.html#file","title":"File","text":"<p>LED_Bar.zip (file size: 8 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/LED-Bar-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 04:21, 23 August 2019 (8 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/LED-Bar-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/LED-zip.html","title":"File:LED.zip","text":""},{"location":"files/LED-zip.html#file","title":"File","text":"<p>LED.zip (file size: 368 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/LED-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:58, 24 August 2019 (368 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/LED-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/LM386-Low-Voltage-Audio-Power-Amplifier-Datasheet-pdf.html","title":"File:LM386 Low Voltage Audio Power Amplifier Datasheet.pdf","text":"<p>No file by this name exists.</p>"},{"location":"files/LM386-Low-Voltage-Audio-Power-Amplifier-Datasheet-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Laser-ranging-sensor-pdf.html","title":"File:Laser ranging sensor.pdf","text":""},{"location":"files/Laser-ranging-sensor-pdf.html#file","title":"File","text":"<p>Laser_ranging_sensor.pdf (file size: 918 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Laser-ranging-sensor-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 01:45, 24 August 2019 (918 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Laser-ranging-sensor-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Letscode-code-zip.html","title":"File:Letscode code.zip","text":""},{"location":"files/Letscode-code-zip.html#file","title":"File","text":"<p>Letscode_code.zip (file size: 784 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Letscode-code-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 07:13, 19 October 2022 (784 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Letscode-code-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Light-sensor-zip.html","title":"File:Light sensor.zip","text":""},{"location":"files/Light-sensor-zip.html#file","title":"File","text":"<p>Light_sensor.zip (file size: 474 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Light-sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:36, 24 August 2019 (474 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Light-sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Linear-Potentiometer-zip.html","title":"File:Linear Potentiometer.zip","text":""},{"location":"files/Linear-Potentiometer-zip.html#file","title":"File","text":"<p>Linear_Potentiometer.zip (file size: 502 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Linear-Potentiometer-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 06:53, 23 August 2019 (502 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Linear-Potentiometer-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/LiquidCrystal-zip.html","title":"File:LiquidCrystal.zip","text":""},{"location":"files/LiquidCrystal-zip.html#file","title":"File","text":"<p>LiquidCrystal.zip (file size: 15 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/LiquidCrystal-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:27, 24 August 2019 (15 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/LiquidCrystal-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/MAX17043-zip.html","title":"File:MAX17043.zip","text":""},{"location":"files/MAX17043-zip.html#file","title":"File","text":"<p>MAX17043.zip (file size: 4 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/MAX17043-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:29, 26 August 2019 (4 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/MAX17043-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/MCP2515-pdf.html","title":"File:MCP2515.pdf","text":""},{"location":"files/MCP2515-pdf.html#file","title":"File","text":"<p>MCP2515.pdf (file size: 1.04 MB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/MCP2515-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:21, 24 August 2019 (1.04 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/MCP2515-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/MOSFET-zip.html","title":"File:MOSFET.zip","text":""},{"location":"files/MOSFET-zip.html#file","title":"File","text":"<p>MOSFET.zip (file size: 631 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/MOSFET-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 11:14, 22 August 2019 (631 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/MOSFET-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/MP3Player-KT403A-zip.html","title":"File:MP3Player KT403A.zip","text":""},{"location":"files/MP3Player-KT403A-zip.html#file","title":"File","text":"<p>MP3Player_KT403A.zip (file size: 9 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/MP3Player-KT403A-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 04:15, 23 August 2019 (9 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/MP3Player-KT403A-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/MP8511-Read-Example-zip.html","title":"File:MP8511 Read Example.zip","text":""},{"location":"files/MP8511-Read-Example-zip.html#file","title":"File","text":"<p>MP8511_Read_Example.zip (file size: 2 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/MP8511-Read-Example-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:25, 26 August 2019 (2 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/MP8511-Read-Example-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/MPU6050-zip.html","title":"File:MPU6050.zip","text":""},{"location":"files/MPU6050-zip.html#file","title":"File","text":"<p>MPU6050.zip (file size: 43 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/MPU6050-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:31, 23 August 2019 (43 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/MPU6050-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/MPXV7002-pdf.html","title":"File:MPXV7002.pdf","text":""},{"location":"files/MPXV7002-pdf.html#file","title":"File","text":"<p>MPXV7002.pdf (file size: 177 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/MPXV7002-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:17, 23 August 2019 (177 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/MPXV7002-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/MQ-2-pdf.html","title":"File:MQ-2.pdf","text":""},{"location":"files/MQ-2-pdf.html#file","title":"File","text":"<p>MQ-2.pdf (file size: 57 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/MQ-2-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:00, 23 August 2019 (57 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/MQ-2-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/MQ-9-pdf.html","title":"File:MQ-9.pdf","text":""},{"location":"files/MQ-9-pdf.html#file","title":"File","text":"<p>MQ-9.pdf (file size: 51 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/MQ-9-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:38, 24 August 2019 (51 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/MQ-9-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/MY9221-DS-1.0-pdf.html","title":"File:MY9221 DS 1.0.pdf","text":"<p>No file by this name exists.</p>"},{"location":"files/MY9221-DS-1.0-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Mcp2551en-pdf.html","title":"File:Mcp2551en.pdf","text":""},{"location":"files/Mcp2551en-pdf.html#file","title":"File","text":"<p>Mcp2551en.pdf (file size: 344 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Mcp2551en-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:07, 24 August 2019 (344 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Mcp2551en-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Metal-Proximity-Sensor-zip.html","title":"File:Metal Proximity Sensor.zip","text":""},{"location":"files/Metal-Proximity-Sensor-zip.html#file","title":"File","text":"<p>Metal Proximity Sensor.zip (file size: 538 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Metal-Proximity-Sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 06:46, 23 August 2019 (538 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Metal-Proximity-Sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Moisturesensor-zip.html","title":"File:Moisturesensor.zip","text":"<p>No file by this name exists.</p>"},{"location":"files/Moisturesensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/NFC-zip.html","title":"File:NFC.zip","text":""},{"location":"files/NFC-zip.html#file","title":"File","text":"<p>NFC.zip (file size: 75 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/NFC-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:18, 24 August 2019 (75 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/NFC-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/NOEM-Host-zip.html","title":"File:NOEM Host.zip","text":""},{"location":"files/NOEM-Host-zip.html#file","title":"File","text":"<p>NOEM_Host.zip (file size: 1.48 MB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/NOEM-Host-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:23, 26 August 2022   (1.48 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/NOEM-Host-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Panstamp-zip.html","title":"File:Panstamp.zip","text":""},{"location":"files/Panstamp-zip.html#file","title":"File","text":"<p>Panstamp.zip (file size: 131 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Panstamp-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:17, 26 August 2019 (131 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Panstamp-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Ph-sensor-code-zip.html","title":"File:Ph-sensor-code.zip","text":""},{"location":"files/Ph-sensor-code-zip.html#file","title":"File","text":"<p>Ph-sensor-code.zip (file size: 1,015 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Ph-sensor-code-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 01:28, 24 August 2019 (1,015 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Ph-sensor-code-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Ph-sensor-schematic-zip.html","title":"File:Ph-sensor-schematic.zip","text":""},{"location":"files/Ph-sensor-schematic-zip.html#file","title":"File","text":"<p>Ph-sensor-schematic.zip (file size: 20 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Ph-sensor-schematic-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 07:19, 23 August 2019 (20 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Ph-sensor-schematic-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Processing-code-zip.html","title":"File:Processing code.zip","text":""},{"location":"files/Processing-code-zip.html#file","title":"File","text":"<p>Processing_code.zip (file size: 19 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Processing-code-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:02, 28 July 2022 (19 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Processing-code-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/PulseSensorAmped-Arduino-1dot2-zip.html","title":"File:PulseSensorAmped Arduino 1dot2.zip","text":""},{"location":"files/PulseSensorAmped-Arduino-1dot2-zip.html#file","title":"File","text":"<p>PulseSensorAmped_Arduino_1dot2.zip (file size: 4 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/PulseSensorAmped-Arduino-1dot2-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:18, 23 August 2019 (4 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/PulseSensorAmped-Arduino-1dot2-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Python-code-zip.html","title":"File:Python code.zip","text":""},{"location":"files/Python-code-zip.html#file","title":"File","text":"<p>Python_code.zip (file size: 1.49 MB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Python-code-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 07:10, 19 October 2022 (1.49 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Python-code-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/RFM95-pdf.html","title":"File:RFM95.pdf","text":""},{"location":"files/RFM95-pdf.html#file","title":"File","text":"<p>RFM95.pdf (file size: 1.84 MB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/RFM95-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 11:08, 22 August 2019 (1.84 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/RFM95-pdf.html#file-usage","title":"File usage","text":"<p>The following file is a duplicate of this file (more details):</p> <ul> <li>File:RFM95~98 2.4G.pdf</li> </ul> <p>There are no pages that use this file.</p>"},{"location":"files/RFM95~98-2.4G-pdf.html","title":"File:RFM95~98 2.4G.pdf","text":""},{"location":"files/RFM95~98-2.4G-pdf.html#file","title":"File","text":"<p>RFM95~98_2.4G.pdf (file size: 1.84 MB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/RFM95~98-2.4G-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:37, 24 August 2019 (1.84 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/RFM95~98-2.4G-pdf.html#file-usage","title":"File usage","text":"<p>The following file is a duplicate of this file (more details):</p> <ul> <li>File:RFM95.pdf</li> </ul> <p>There are no pages that use this file.</p>"},{"location":"files/RGB-Demo-zip.html","title":"File:RGB Demo.zip","text":""},{"location":"files/RGB-Demo-zip.html#file","title":"File","text":"<p>RGB_Demo.zip (file size: 271 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/RGB-Demo-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:58, 7 December 2022 (271 KB) Admin (talk | contribs) 07:23, 5 December 2022 (298 KB) Admin (talk | contribs) 07:23, 5 December 2022 (298 KB) Admin (talk | contribs) 06:47, 13 September 2021 (271 KB) Admin (talk | contribs) 06:47, 13 September 2021 (271 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/RGB-Demo-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/RadioHead-zip.html","title":"File:RadioHead.zip","text":""},{"location":"files/RadioHead-zip.html#file","title":"File","text":"<p>RadioHead.zip (file size: 375 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/RadioHead-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:07, 24 August 2019 (375 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/RadioHead-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Relay-zip.html","title":"File:Relay.zip","text":""},{"location":"files/Relay-zip.html#file","title":"File","text":"<p>Relay.zip (file size: 393 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Relay-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:30, 24 August 2019 (393 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Relay-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Remote-Control-Source-Code-zip.html","title":"File:Remote Control Source Code.zip","text":""},{"location":"files/Remote-Control-Source-Code-zip.html#file","title":"File","text":"<p>Remote_Control_Source_Code.zip (file size: 912 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Remote-Control-Source-Code-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:30, 24 August 2019 (912 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Remote-Control-Source-Code-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Rf95-client-zip.html","title":"File:Rf95 client.zip","text":""},{"location":"files/Rf95-client-zip.html#file","title":"File","text":"<p>Rf95_client.zip (file size: 2 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Rf95-client-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 06:59, 24 August 2019 (2 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Rf95-client-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Rf95-server-zip.html","title":"File:Rf95 server.zip","text":""},{"location":"files/Rf95-server-zip.html#file","title":"File","text":"<p>Rf95_server.zip (file size: 2 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Rf95-server-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 11:22, 22 August 2019 (2 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Rf95-server-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Rotary-Angle-sensor-zip.html","title":"File:Rotary Angle sensor.zip","text":""},{"location":"files/Rotary-Angle-sensor-zip.html#file","title":"File","text":"<p>Rotary_Angle_sensor.zip (file size: 1 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Rotary-Angle-sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:34, 24 August 2019 (1 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Rotary-Angle-sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/SFGDemoV2.0-zip.html","title":"File:SFGDemoV2.0.zip","text":""},{"location":"files/SFGDemoV2.0-zip.html#file","title":"File","text":"<p>SFGDemoV2.0.zip (file size: 166 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SFGDemoV2.0-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:14, 23 August 2019 (166 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SFGDemoV2.0-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/SIM800-Series-AT-Command-Manual-V1.09-pdf.html","title":"File:SIM800 Series AT Command Manual V1.09.pdf","text":""},{"location":"files/SIM800-Series-AT-Command-Manual-V1.09-pdf.html#file","title":"File","text":"<p>SIM800_Series_AT_Command_Manual_V1.09.pdf (file size: 3.07 MB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SIM800-Series-AT-Command-Manual-V1.09-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 07:52, 23 August 2019 (3.07 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SIM800-Series-AT-Command-Manual-V1.09-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/SIM800-Series-GNSS-Application-Note-V1.00-pdf.html","title":"File:SIM800 Series GNSS Application Note V1.00.pdf","text":""},{"location":"files/SIM800-Series-GNSS-Application-Note-V1.00-pdf.html#file","title":"File","text":"<p>SIM800_Series_GNSS_Application_Note_V1.00.pdf (file size: 205 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SIM800-Series-GNSS-Application-Note-V1.00-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:34, 23 August 2019 (205 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SIM800-Series-GNSS-Application-Note-V1.00-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/SIM800-Series-GSM-Location-Application-Note-V1.01-pdf.html","title":"File:SIM800 Series GSM Location Application Note V1.01.pdf","text":""},{"location":"files/SIM800-Series-GSM-Location-Application-Note-V1.01-pdf.html#file","title":"File","text":"<p>SIM800_Series_GSM_Location_Application_Note_V1.01.pdf (file size: 452 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SIM800-Series-GSM-Location-Application-Note-V1.01-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:04, 24 August 2019 (452 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SIM800-Series-GSM-Location-Application-Note-V1.01-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/SIM808-Hardware-Design-V1.02-pdf.html","title":"File:SIM808 Hardware Design V1.02.pdf","text":""},{"location":"files/SIM808-Hardware-Design-V1.02-pdf.html#file","title":"File","text":"<p>SIM808_Hardware_Design_V1.02.pdf (file size: 3.74 MB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SIM808-Hardware-Design-V1.02-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:08, 26 August 2019 (3.74 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SIM808-Hardware-Design-V1.02-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/SIM808-SPEC-V1507-pdf.html","title":"File:SIM808 SPEC V1507.pdf","text":""},{"location":"files/SIM808-SPEC-V1507-pdf.html#file","title":"File","text":"<p>SIM808_SPEC_V1507.pdf (file size: 196 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SIM808-SPEC-V1507-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:34, 23 August 2019 (196 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SIM808-SPEC-V1507-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/SMS-control-relay-zip.html","title":"File:SMS control relay.zip","text":""},{"location":"files/SMS-control-relay-zip.html#file","title":"File","text":"<p>SMS_control_relay.zip (file size: 2 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SMS-control-relay-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:35, 27 December 2019   (2 KB) Admin (talk | contribs) 09:15, 23 August 2019 (2 KB) Admin (talk | contribs) 09:15, 23 August 2019 (2 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SMS-control-relay-zip.html#file-usage","title":"File usage","text":"<p>The following 2 pages uses this file:</p> <ul> <li>Leonardo GPRS/GSM IOT Board v1.0</li> <li>Leonardo GPRS/GSM IOT Board v1.1</li> </ul>"},{"location":"files/SPDT-code-zip.html","title":"File:SPDT code.zip","text":""},{"location":"files/SPDT-code-zip.html#file","title":"File","text":"<p>SPDT_code.zip (file size: 738 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SPDT-code-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:54, 23 August 2019 (738 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SPDT-code-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/SPDT-schematic-diagram-zip.html","title":"File:SPDT schematic diagram.zip","text":""},{"location":"files/SPDT-schematic-diagram-zip.html#file","title":"File","text":"<p>SPDT_schematic_diagram.zip (file size: 21 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SPDT-schematic-diagram-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:55, 26 August 2019 (21 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SPDT-schematic-diagram-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/SSD1306-zip-zip.html","title":"File:SSD1306.zip.zip","text":""},{"location":"files/SSD1306-zip-zip.html#file","title":"File","text":"<p>SSD1306.zip.zip (file size: 8 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SSD1306-zip-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:51, 24 August 2019 (8 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SSD1306-zip-zip.html#file-usage","title":"File usage","text":"<p>The following file is a duplicate of this file (more details):</p> <ul> <li>File:SSD1306.zip </li> </ul> <p>There are no pages that use this file.</p>"},{"location":"files/SSD1306-zip.html","title":"File:SSD1306.zip","text":""},{"location":"files/SSD1306-zip.html#file","title":"File","text":"<p>SSD1306.zip (file size: 8 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SSD1306-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 11:03, 22 August 2019 (8 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SSD1306-zip.html#file-usage","title":"File usage","text":"<p>The following file is a duplicate of this file (more details):</p> <ul> <li>File:SSD1306.zip.zip </li> </ul> <p>There are no pages that use this file.</p>"},{"location":"files/ST7789VW-datasheet-pdf.html","title":"File:ST7789VW datasheet.pdf","text":""},{"location":"files/ST7789VW-datasheet-pdf.html#file","title":"File","text":"<p>ST7789VW datasheet.pdf (file size: 2.99 MB, MIME type: application/pdf)</p>"},{"location":"files/ST7789VW-datasheet-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:52, 22 June 2022 (2.99 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/ST7789VW-datasheet-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Screw-Teiminal-schematic-zip.html","title":"File:Screw-Teiminal-schematic.zip","text":""},{"location":"files/Screw-Teiminal-schematic-zip.html#file","title":"File","text":"<p>Screw-Teiminal-schematic.zip (file size: 8 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Screw-Teiminal-schematic-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:10, 26 August 2019 (8 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Screw-Teiminal-schematic-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Screw-Terminal-3.5mm-pdf.html","title":"File:Screw-Terminal-3.5mm.pdf","text":""},{"location":"files/Screw-Terminal-3.5mm-pdf.html#file","title":"File","text":"<p>Screw-Terminal-3.5mm.pdf (file size: 81 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Screw-Terminal-3.5mm-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:58, 23 August 2019 (81 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Screw-Terminal-3.5mm-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Serial-Camera-software-zip.html","title":"File:Serial Camera software.zip","text":""},{"location":"files/Serial-Camera-software-zip.html#file","title":"File","text":"<p>Serial_Camera_software.zip (file size: 901 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Serial-Camera-software-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:58, 23 August 2019 (901 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Serial-Camera-software-zip.html#file-usage","title":"File usage","text":"<p>The following file is a duplicate of this file (more details):</p> <ul> <li>File:Analog Gyro 2 Axis.zip</li> </ul> <p>The following page uses this file:</p> <ul> <li>Serial JPG Camera</li> </ul>"},{"location":"files/SerialCameral-DemoCode-zip.html","title":"File:SerialCameral DemoCode.zip","text":""},{"location":"files/SerialCameral-DemoCode-zip.html#file","title":"File","text":"<p>SerialCameral_DemoCode.zip (file size: 2 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SerialCameral-DemoCode-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:52, 26 August 2019 (2 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SerialCameral-DemoCode-zip.html#file-usage","title":"File usage","text":"<p>The following page uses this file:</p> <ul> <li>Serial JPG Camera</li> </ul>"},{"location":"files/SoftwareSerial-zip.html","title":"File:SoftwareSerial.zip","text":""},{"location":"files/SoftwareSerial-zip.html#file","title":"File","text":"<p>SoftwareSerial.zip (file size: 8 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SoftwareSerial-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:10, 26 August 2019 (8 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SoftwareSerial-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Sound-controlled-led-zip.html","title":"File:Sound controlled led.zip","text":"<p>No file by this name exists.</p>"},{"location":"files/Sound-controlled-led-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/SparkFun-HTU21D-Breakout-Arduino-Library-master-zip.html","title":"File:SparkFun HTU21D Breakout Arduino Library-master.zip","text":""},{"location":"files/SparkFun-HTU21D-Breakout-Arduino-Library-master-zip.html#file","title":"File","text":"<p>SparkFun_HTU21D_Breakout_Arduino_Library-master.zip (file size: 11 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/SparkFun-HTU21D-Breakout-Arduino-Library-master-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 07:12, 2 June 2022 (11 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/SparkFun-HTU21D-Breakout-Arduino-Library-master-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Sscom1-zip.html","title":"File:Sscom1.zip","text":""},{"location":"files/Sscom1-zip.html#file","title":"File","text":"<p>Sscom1.zip (file size: 410 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Sscom1-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 06:04, 18 January 2023  (410 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Sscom1-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Strain-gauge-sensor-zip.html","title":"File:Strain gauge sensor.zip","text":""},{"location":"files/Strain-gauge-sensor-zip.html#file","title":"File","text":"<p>Strain_gauge_sensor.zip (file size: 513 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Strain-gauge-sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:04, 30 May 2022 (513 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Strain-gauge-sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Super-bright-code-zip.html","title":"File:Super bright code.zip","text":""},{"location":"files/Super-bright-code-zip.html#file","title":"File","text":"<p>Super_bright_code.zip (file size: 445 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Super-bright-code-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 04:21, 23 August 2019 (445 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Super-bright-code-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Super-bright-schematic-zip.html","title":"File:Super-bright-schematic.zip","text":""},{"location":"files/Super-bright-schematic-zip.html#file","title":"File","text":"<p>Super-bright-schematic.zip (file size: 14 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Super-bright-schematic-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:05, 26 August 2019 (14 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Super-bright-schematic-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/TFT-ILI9163C-library-zip.html","title":"File:TFT ILI9163C library.zip","text":""},{"location":"files/TFT-ILI9163C-library-zip.html#file","title":"File","text":"<p>TFT_ILI9163C_library.zip (file size: 329 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/TFT-ILI9163C-library-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 04:23, 23 August 2019 (329 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/TFT-ILI9163C-library-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/TPL5111-pdf.html","title":"File:TPL5111.pdf","text":""},{"location":"files/TPL5111-pdf.html#file","title":"File","text":"<p>TPL5111.pdf (file size: 1.15 MB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/TPL5111-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 11:25, 22 August 2019 (1.15 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/TPL5111-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Temperature-humidity-sensor-zip.html","title":"File:Temperature humidity sensor.zip","text":""},{"location":"files/Temperature-humidity-sensor-zip.html#file","title":"File","text":"<p>Temperature_humidity_sensor.zip (file size: 4 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Temperature-humidity-sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 10:14, 23 August 2019 (4 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Temperature-humidity-sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Temperature.html","title":"File:Temperature","text":"<p>No file by this name exists.</p>"},{"location":"files/Temperature.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Test-Demo-zip.html","title":"File:Test Demo.zip","text":""},{"location":"files/Test-Demo-zip.html#file","title":"File","text":"<p>Test_Demo.zip (file size: 597 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Test-Demo-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:20, 2 June 2022 (597 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Test-Demo-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Tilt-Switch-zip.html","title":"File:Tilt Switch.zip","text":""},{"location":"files/Tilt-Switch-zip.html#file","title":"File","text":"<p>Tilt_Switch.zip (file size: 660 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Tilt-Switch-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 01:30, 24 August 2019 (660 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Tilt-Switch-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Tone-pdf.html","title":"File:Tone.pdf","text":""},{"location":"files/Tone-pdf.html#file","title":"File","text":"<p>Tone.pdf (file size: 12 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Tone-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 07:02, 23 August 2019 (12 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Tone-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Touch-Shield-Example-zip.html","title":"File:Touch Shield Example.zip","text":""},{"location":"files/Touch-Shield-Example-zip.html#file","title":"File","text":"<p>Touch_Shield_Example.zip (file size: 7 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Touch-Shield-Example-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:37, 24 August 2019 (7 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Touch-Shield-Example-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Touch-sersor-zip.html","title":"File:Touch sersor.zip","text":""},{"location":"files/Touch-sersor-zip.html#file","title":"File","text":"<p>Touch_sersor.zip (file size: 474 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Touch-sersor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 11:11, 22 August 2019 (474 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Touch-sersor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/U-center-UserGuide%28UBX-13005250%29pdf.html","title":"File::U-center UserGuide (UBX-13005250).pdf","text":"<p>No file by this name exists.</p>"},{"location":"files/U-center-UserGuide%28UBX-13005250%29pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/U-centersetup-v8.18.zip.html","title":"File:U-centersetup v8.18.zip","text":"<p>No file by this name exists.</p>"},{"location":"files/U-centersetup-v8.18.zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/U8glib-zip.html","title":"File:U8glib.zip","text":""},{"location":"files/U8glib-zip.html#file","title":"File","text":"<p>U8glib.zip (file size: 1,015 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/U8glib-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 11:17, 22 August 2019 (1,015 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/U8glib-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/UART-GPS-NEO-6M-zip.html","title":"File:UART-GPS-NEO-6M.zip","text":""},{"location":"files/UART-GPS-NEO-6M-zip.html#file","title":"File","text":"<p>UART-GPS-NEO-6M.zip (file size: 18.16 MB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/UART-GPS-NEO-6M-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:15, 26 August 2019 (18.16 MB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/UART-GPS-NEO-6M-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Ultrosonic-ranger-module-Library-and-demo-code-for-arduino-10-zip.html","title":"File:Ultrosonic ranger module Library and demo code for arduino 10.zip","text":""},{"location":"files/Ultrosonic-ranger-module-Library-and-demo-code-for-arduino-10-zip.html#file","title":"File","text":"<p>Ultrosonic_ranger_module_Library_and_demo_code_for_arduino_10.zip (file size: 2 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Ultrosonic-ranger-module-Library-and-demo-code-for-arduino-10-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 11:03, 22 August 2019 (2 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Ultrosonic-ranger-module-Library-and-demo-code-for-arduino-10-zip.html#file-usage","title":"File usage","text":"<p>The following 2 pages uses this file:</p> <ul> <li>Crowtail- Ultrasonic Ranging Sensor</li> <li>Ultrasonic Ranging Sensor Module</li> </ul>"},{"location":"files/Uv-sensor-code-zip.html","title":"File:Uv-sensor-code.zip","text":""},{"location":"files/Uv-sensor-code-zip.html#file","title":"File","text":"<p>Uv-sensor-code.zip (file size: 685 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Uv-sensor-code-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:26, 23 August 2019 (685 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Uv-sensor-code-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Uv-sensor-schematic-zip.html","title":"File:Uv-sensor-schematic.zip","text":""},{"location":"files/Uv-sensor-schematic-zip.html#file","title":"File","text":"<p>Uv-sensor-schematic.zip (file size: 14 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Uv-sensor-schematic-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:47, 24 August 2019 (14 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Uv-sensor-schematic-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/VL53L0X-zip.html","title":"File:VL53L0X.zip","text":""},{"location":"files/VL53L0X-zip.html#file","title":"File","text":"<p>VL53L0X.zip (file size: 2 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/VL53L0X-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:35, 23 August 2019 (2 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/VL53L0X-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Vibration-sensor-zip.html","title":"File:Vibration sensor.zip","text":""},{"location":"files/Vibration-sensor-zip.html#file","title":"File","text":"<p>Vibration_sensor.zip (file size: 575 bytes, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Vibration-sensor-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 08:27, 23 August 2019 (575 bytes) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Vibration-sensor-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/Virtualwire-zip.html","title":"File:Virtualwire.zip","text":""},{"location":"files/Virtualwire-zip.html#file","title":"File","text":"<p>Virtualwire.zip (file size: 248 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/Virtualwire-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:43, 24 August 2019 (248 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/Virtualwire-zip.html#file-usage","title":"File usage","text":"<p>The following page uses this file:</p> <ul> <li>315/433Mhz RF Link Kit</li> </ul>"},{"location":"files/WeightSensorProgramFiles-zip.html","title":"File:WeightSensorProgramFiles.zip","text":""},{"location":"files/WeightSensorProgramFiles-zip.html#file","title":"File","text":"<p>WeightSensorProgramFiles.zip (file size: 2 KB, MIME type: application/zip)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/WeightSensorProgramFiles-zip.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 03:10, 2 June 2022 (2 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/WeightSensorProgramFiles-zip.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/X9C103S-Datasheet-pdf.html","title":"File:X9C103S Datasheet.pdf","text":""},{"location":"files/X9C103S-Datasheet-pdf.html#file","title":"File","text":"<p>X9C103S_Datasheet.pdf (file size: 86 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/X9C103S-Datasheet-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 02:27, 2 June 2022 (86 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/X9C103S-Datasheet-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"files/ZYE1-P20-15-pdf.html","title":"File:ZYE1-P20-15.pdf","text":""},{"location":"files/ZYE1-P20-15-pdf.html#file","title":"File","text":"<p>ZYE1-P20-15.pdf (file size: 372 KB, MIME type: application/pdf)</p> <p>Warning: This file type may contain malicious code. By executing it, your system may be compromised.</p>"},{"location":"files/ZYE1-P20-15-pdf.html#file-history","title":"File history","text":"<p>Click on a date/time to view the file as it appeared at that time.</p> Date/Time Dimensions User Comment current 09:56, 23 August 2019 (372 KB) Admin (talk | contribs) <ul> <li>You cannot overwrite this file.</li> </ul>"},{"location":"files/ZYE1-P20-15-pdf.html#file-usage","title":"File usage","text":"<p>There are no pages that use this file.</p>"},{"location":"getStarted/step1-download-arduino-ide-and-install-arduino-driver.html","title":"Step1:Download Arduino IDE and install Arduino driver","text":""},{"location":"getStarted/step1-download-arduino-ide-and-install-arduino-driver.html#download-the-arduino-ide","title":"Download the Arduino IDE","text":"<p>\"Arduino\"\" is not only the name of the microcontroller board, but also the name of a programming IDE based on C/C++. After you getting your Arduino board or compatible board such as Crowduino, you should install the IDE. Depending on OS version, the specific installation varies. Thankfully Arduino team provides us a detailed installation guide for most OS systems.</p> <p>Please download the latest version of Arduino IDE at: http://arduino.cc/en/Main/Software </p>"},{"location":"getStarted/step1-download-arduino-ide-and-install-arduino-driver.html#connect-crowduino-to-pc","title":"Connect Crowduino to PC","text":"<p>Connect the Crowduino board to your computer using the USB cable.</p>"},{"location":"getStarted/step1-download-arduino-ide-and-install-arduino-driver.html#install-driver","title":"Install Driver","text":""},{"location":"getStarted/step1-download-arduino-ide-and-install-arduino-driver.html#installing-drivers-for-the-crowduino-in-windows","title":"Installing drivers for the Crowduino In Windows","text":"<ul> <li>Plug in your Crowduino, Windows will try to install the driver automatically. If you are lucy enougth, the installation will be Done automatically in about 1 minute. If not, follow the next steps.</li> <li>Open the Device Manager by right clicking \u201cMy computer\u201d and selecting control panel.</li> <li>Look under Ports (COM &amp; LPT). You should see an open port named \"USB Serial Port\" Right click on the \"USB Serial Port\" and choose the \"Update Driver Software\" option.</li> </ul> <ul> <li>Choose the \"Browse my computer for Driver software\" option.</li> </ul> <ul> <li>Select the driver file named FTDI USB Drivers, located in the \"Drivers\" folder in the Arduino IDE</li> </ul> <ul> <li>If you installed driver successfully:</li> </ul> <ul> <li>Check with serial port the Crowduino is using by opening the Windows Device Manager:</li> </ul>"},{"location":"getStarted/step1-download-arduino-ide-and-install-arduino-driver.html#installing-drivers-for-the-crowduino-with-mac-os","title":"Installing drivers for the Crowduino with Mac OS","text":"<ul> <li>Enter page: http://www.ftdichip.com/Drivers/VCP.htm.</li> <li>Download Driver for the Mac OS X version, and the right version for your own computer</li> </ul> <ul> <li>Open the driver file which you just download, and double click FTDIUSBSerialDriver_10_4_10_5_10_6_10_7.mpkg and continue</li> </ul> <ul> <li>You can see the below dialog boxes if you have installed driver successfully.</li> </ul>"},{"location":"getStarted/step2-the-very-basic-experiments-with-crowduino.html","title":"Step2:The very basic experiments with Crowduino","text":""},{"location":"getStarted/step2-the-very-basic-experiments-with-crowduino.html#task-for-this-step","title":"Task for this Step","text":"<p>Light up and control the LED which is controlled by Digital 13!</p>"},{"location":"getStarted/step2-the-very-basic-experiments-with-crowduino.html#step1-connect-crowduino-to-pc","title":"step1: Connect Crowduino to PC","text":"<p>As you read this section, I beleve you have connected your Croduino to PC and installed the Driver as the Step1.</p>"},{"location":"getStarted/step2-the-very-basic-experiments-with-crowduino.html#step2-open-the-blink-example","title":"step2: Open the Blink example","text":"<p>Open the LED blink example sketch: File-&gt;Examples-&gt;01.Basics-&gt;Blink.  </p>"},{"location":"getStarted/step2-the-very-basic-experiments-with-crowduino.html#step3-select-your-board","title":"step3: Select your board","text":"<p>You'll need to select the entry in the Tools &gt; Board menu that corresponds to your Arduino. \u5728Here we need to select ATmega328.  </p>"},{"location":"getStarted/step2-the-very-basic-experiments-with-crowduino.html#step4-select-your-serial-port","title":"step4: Select your Serial Port","text":"<p>Select the serial device of the Arduino board from the Tools | Serial Port menu.  </p>"},{"location":"getStarted/step2-the-very-basic-experiments-with-crowduino.html#step5-upload-the-program","title":"step5: Upload the program","text":"<p>Now, simply click the \"Upload\" button in the environment. Wait a few seconds - you should see the RX and TX leds on the board flashing. If the upload is successful, the message \"Done uploading.\" will appear in the status bar.  </p>"},{"location":"getStarted/step2-the-very-basic-experiments-with-crowduino.html#step6-modify-the-code-as-you-like","title":"step6: Modify the code as you like","text":"<p>As you see the \"Uploading Done\", it means that the program has been download to your Crowduino. You should see the pin 13 (L) LED on the board start to blink with a interval of 1s. Try to modify the val of delay() , you will see the blink interval changing.  </p>"},{"location":"getStarted/step4-error-debugging.html","title":"Step4:Error Debugging","text":"<ul> <li>\"xxx is not declared in this scope \"</li> </ul> <p> Something is not declard, Maybe you do not put the libraris the right location:...\\arduino\\libraries, If you can sure that you have put library in the right locacation, please try to close Arduino IDE and reopen.</p> <ul> <li>\"COM error\"</li> </ul> <p> Try re-plugging the Crowduino from computer, and select the right COM port</p> <ul> <li>\"Donwload error \"</li> </ul> <p> Try to re-select the Arduino board, for Crowduino328, please selec the Arduino Duemilanonve w/Atmega328.</p>"},{"location":"how/how-to-export-gerber-files-from-altium-designer.html","title":"How to export gerber files from Altium designer","text":""},{"location":"how/how-to-export-gerber-files-from-altium-designer.html#how-to-convent-the-pcb-altium-designer-files-into-gerber-file","title":"How to convent the .PCB Altium designer files into gerber file.","text":""},{"location":"how/how-to-export-gerber-files-from-altium-designer.html#operation-steps","title":"Operation steps","text":"<p>1.Open your .PCB design files on Altium designer software, check the integrity of the files. Here used an example .PcbDoc file as an example.</p> <p></p> <p>2.Find the menu \u201cFile\u201d, select to Fabrication Outputs option. Then left-click the Gerber Files.</p> <p></p> <p>3.The \u201cGerber Setup\u201d page will be occur. In \u201cGerber Setup\u201d page we suggest to select following option. We used red arrows to marked it.</p> <p></p> <p></p> <p>In Drill Drawing page, just as the default suggestion is OK.</p> <p></p> <p>Selecting RS-274X option, it\u2019s very improtance.</p> <p></p> <p>Left-click the \u201cok\u201d, then most of the gerber file are generated in your design file folder.</p> <p>4.Don\u2019t forget to export the drill file. The steps are similar to the above. This steps can be ignore if there is no drill holes in your design.</p> <p></p> <p></p> <p>We suggest to select Inches and leading zeros, this way will increase the accuracy. Left-click the \u201cok\u201d then a complete gerber file was finished.</p> <p>Please leave a comment on your order to reminding us if you have any special requirement in your PCB order.</p>"},{"location":"how/how-to-export-gerber-files-from-altium-designer.html#relate-links","title":"Relate Links","text":"<p>Order PCB Service Elecrow online</p>"},{"location":"how/how-to-export-gerber-files-from-protel.html","title":"How to export gerber files from Protel","text":""},{"location":"how/how-to-export-gerber-files-from-protel.html#how-to-convent-the-pcb-protel-designer-files-into-gerber-file","title":"How to convent the .PCB Protel designer files into gerber file.","text":""},{"location":"how/how-to-export-gerber-files-from-protel.html#operation-steps","title":"Operation steps","text":"<p>1.Open your .PCB design files on Protel software, check the integrity of the files. Here used an example .PCB file as an example.</p> <p></p> <p>2.Find the menu \u201cFile\u201d, select to \"New\" option. Then left-click it.</p> <p></p> <p>3.The \u201cNew Document\u201d page will be occur. In \u201cNew Document\u201d page we suggest to select following option. We used purple arrows to marked it.</p> <p></p> <p>Selecting the default options.</p> <p></p> <p>In Output Wizard page, choose the Generates Gerber files option then left click next option.</p> <p>Now, you can named your file name.</p> <p></p> <p>Just select default options for the following 2 pages are ok.</p> <p></p> <p></p> <p>In the Menu of Plot layers, choose \"used on\" option and needn't choose any option for Mirror layers.</p> <p></p> <p>The following three pages are also can select default options.</p> <p></p> <p></p> <p></p> <p>You can select machanical 1, 13 or 15 if there are some contents in your machanical layer.</p> <p></p> <p>Then the final page will appear, left click the \"Finish\" option.</p> <p>Except of drill file, all the gerber files are finished.</p> <p>4.Right click the cam page blank area then left click Insert NC Drill.</p> <p>The NC Drill setup page will appear, we suggest to choose Supress leading zero option.</p> <p></p> <p>Pressing F9, all the cam files are export.</p> <p> </p> <p>Finally, you need to export the gerber files to your specified folder.Left click the \"CAM for PCB\" then right click it.</p> <p>You can find the export option, left click it then move the files to your specified folder.</p> <p>You can checking these files on online gerber viewer website.</p> <p>Please leave a comment on your order to reminding us if you have any special requirement in your PCB order.</p>"},{"location":"how/how-to-export-gerber-files-from-protel.html#relate-links","title":"Relate Links","text":"<p>Order PCB Service Elecrow online</p>"},{"location":"how/how-to-install-the-librarys-and-upload-programs-to-arduino.html","title":"How to install the librarys and upload programs to Arduino","text":""},{"location":"how/how-to-install-the-librarys-and-upload-programs-to-arduino.html#how-to-install-elecrow-library-to-your-computer","title":"How to install elecrow library to your computer","text":"<p>Download the libraries and unzip them , intall library in your computer: On your Mac: In (home directory)/Documents/Arduino/libraries On your PC: ...\\arduino\\libraries On your Linux box: (home directory)/sketchbook/libraries  </p>"},{"location":"how/how-to-install-the-librarys-and-upload-programs-to-arduino.html#the-specific-steps-for-uploading-the-code","title":"The specific steps for uploading the code","text":"<p>1. Open the demo code in library by path: Files-&gt;Examples:  2. Selet the right Arduino board you are using and the Serial Port the board using by the path: Tools -- Board-- you can also get the Serial port using in the computer hardware management.  3. Select the correct serial port you are using by the path: Tools -&gt; Serial Port  4. Upload the demo code as below show: </p> <p>When there appears \"Done uploading\", congratulate you upload successfully.</p>"}]}